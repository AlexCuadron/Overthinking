diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1999f1dae..1aac753b9 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -1968,7 +1968,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
                 raise ValueError("l1_ratios must be a list of numbers between "
                                  "0 and 1; got (l1_ratios=%r)" %
                                  self.l1_ratios)
-            l1_ratios_ = self.l1_ratios
+            l1_ratios_ = np.asarray(self.l1_ratios)
         else:
             if self.l1_ratios is not None:
                 warnings.warn("l1_ratios parameter is only used when penalty "
@@ -2174,14 +2174,17 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
                     w = np.mean([coefs_paths[i, best_indices[i], :]
                                  for i in range(len(folds))], axis=0)
                 else:
-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]
-                                 for i in range(len(folds))], axis=0)
+                    if coefs_paths.ndim == 4:
+                        w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)
+                    else:
+                        w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)

                 best_indices_C = best_indices % len(self.Cs_)
                 self.C_.append(np.mean(self.Cs_[best_indices_C]))

-                best_indices_l1 = best_indices // len(self.Cs_)
-                self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))
+                if self.penalty == 'elasticnet':
+                    best_indices_l1 = best_indices // len(self.Cs_)
+                    self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1.ravel()]))

             if multi_class == 'multinomial':
                 self.C_ = np.tile(self.C_, n_classes)
