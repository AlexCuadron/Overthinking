diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..190fa95db2 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -332,8 +332,77 @@ def tensor_product_simp_Mul(e):
                         'TensorProducts of different lengths: %r and %r' %
                         (current, next)
                     )
+                # Multiply with next tensor product components first
+                # Group consecutive identical components first
+                from sympy.core.operations import AssocOp
+                j = 0
+                while j < len(new_args):
+                    current_arg = new_args[j]
+                    count = 1
+                    while (j + count < len(new_args) and
+                           new_args[j + count] == current_arg and
+                           isinstance(new_args[j + count], type(current_arg))):
+                        count += 1
+                    if count > 1:
+                        new_args[j] = current_arg**count
+                        del new_args[j+1:j+count]
+                        j += 1
+                    else:
+                        j += 1
+                # Multiply with next tensor product components
+                # Group identical components first
+                j = 0
+                while j < len(new_args):
+                    current_arg = new_args[j]
+                    count = 1
+                    while (j + count < len(new_args)
+                           and new_args[j + count] == current_arg
+                           and isinstance(new_args[j + count], type(current_arg))):
+                        count += 1
+                    if count > 1:
+                        new_args[j] = current_arg**count
+                        del new_args[j+1:j+count]
+                        j += 1
+                    else:
+                        j += 1
+                # Now multiply with next tensor product
+                from sympy.core.mul import Mul
+                from sympy.core.power import Pow
                 for i in range(len(new_args)):
-                    new_args[i] = new_args[i] * next.args[i]
+                    existing = new_args[i]
+                    new_factor = next.args[i]
+                    if existing == new_factor and existing.is_commutative:
+                        if isinstance(existing, Pow):
+                            base = existing.base
+                            exp = existing.exp + 1
+                        else:
+                            base = existing
+                            exp = 2
+                        simplified = base**exp
+                        if simplified.is_commutative:
+                            simplified = simplified.simplify()
+                        new_args[i] = simplified
+                    else:
+                        new_args[i] = Mul(existing, new_factor)
+
+                # Then simplify powers of identical components
+                from sympy.core.mul import Mul
+                for i in range(len(new_args)):
+                    if isinstance(new_args[i], Mul):
+                        bases = {}
+                        for factor in new_args[i].args:
+                            if isinstance(factor, Pow):
+                                bases.setdefault(factor.base, []).append(factor.exp)
+                            else:
+                                bases.setdefault(factor, []).append(1)
+                        new_factors = []
+                        for base, exps in bases.items():
+                            total_exp = sum(exps)
+                            if total_exp == 1:
+                                new_factors.append(base)
+                            else:
+                                new_factors.append(base**total_exp)
+                        new_args[i] = Mul(*new_factors)
             else:
                 # this won't quite work as we don't want next in the
                 # TensorProduct
