diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..7ac8b82819 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ class DecimalField(Field):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (TypeError, ValueError, decimal.InvalidOperation):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/repro_test.py b/repro_test.py
new file mode 100644
index 0000000000..67eb4c4e66
--- /dev/null
+++ b/repro_test.py
@@ -0,0 +1,24 @@
+import decimal
+from django.db.models import DecimalField
+from django.core.exceptions import ValidationError
+
+field = DecimalField()
+
+# Test 1: Valid decimal string
+assert field.to_python("3.14") == decimal.Decimal("3.14")
+
+# Test 2: Dictionary value (should raise ValidationError)
+try:
+    field.to_python({"a": 1})
+    assert False, "Did not raise ValidationError for dict input"
+except ValidationError:
+    pass
+
+# Test 3: Invalid string
+try:
+    field.to_python("not_a_number")
+    assert False, "Did not raise ValidationError for invalid string"
+except ValidationError:
+    pass
+
+print("All tests passed!")
