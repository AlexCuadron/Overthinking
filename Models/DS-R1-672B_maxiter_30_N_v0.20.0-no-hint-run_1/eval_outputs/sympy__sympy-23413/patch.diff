diff --git a/sympy/matrices/normalforms.py b/sympy/matrices/normalforms.py
index 7bce95d230..7200ce4df7 100644
--- a/sympy/matrices/normalforms.py
+++ b/sympy/matrices/normalforms.py
@@ -67,7 +67,7 @@ def invariant_factors(m, domain=None):
     return factors


-def hermite_normal_form(A, *, D=None, check_rank=False):
+def hermite_normal_form(A, *, D=None, check_rank=True):
     r"""
     Compute the Hermite Normal Form of a Matrix *A* of integers.

diff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py
index 30f5534b08..a1f651aa4e 100644
--- a/sympy/polys/matrices/normalforms.py
+++ b/sympy/polys/matrices/normalforms.py
@@ -243,9 +243,8 @@ def _hermite_normal_form(A):
             for j in range(k + 1, n):
                 q = A[i][j] // b
                 add_columns(A, j, k, 1, -q, 0, 1)
-    # Finally, the HNF consists of those columns of A in which we succeeded in making
-    # a nonzero pivot.
-    return DomainMatrix.from_rep(A)[:, k:]
+    # Return the entire matrix without column truncation
+    return DomainMatrix.from_rep(A)  # Return full matrix without column truncation


 def _hermite_normal_form_modulo_D(A, D):
