diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..4b58351bed 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,16 +227,24 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs

-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
-            if not isinstance(self.storage, Storage):
-                raise TypeError(
-                    "%s.storage must be a subclass/instance of %s.%s"
-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
-                )
+        self.storage_arg = storage or default_storage
+        self._storage = None
         self.upload_to = upload_to

+    @property
+    def storage(self):
+        if self._storage is None:
+            storage = self.storage_arg
+            if callable(storage):
+                storage = storage()
+                if not isinstance(storage, Storage):
+                    raise TypeError(
+                        "%s.storage must be a subclass/instance of %s.%s"
+                        % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
+                    )
+            self._storage = storage
+        return self._storage
+
         kwargs.setdefault('max_length', 100)
         super().__init__(verbose_name, name, **kwargs)

@@ -278,8 +286,8 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+        if self.storage_arg is not default_storage:
+            kwargs['storage'] = self.storage_arg
         return name, path, args, kwargs

     def get_internal_type(self):
