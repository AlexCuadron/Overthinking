diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..3e20ac8cfb 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -2,6 +2,7 @@

 from sympy import ask, Q
 from sympy.core import Basic, Add
+from sympy.core.numbers import Zero
 from sympy.core.compatibility import range
 from sympy.strategies import typed, exhaust, condition, do_one, unpack
 from sympy.strategies.traverse import bottom_up
@@ -164,8 +165,27 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
-
+            A = self.blocks
+            B = other.blocks
+            m = A.rows
+            n = B.cols
+            result_blocks = []
+            for i in range(m):
+                row = []
+                for j in range(n):
+                    total = ZeroMatrix(A[i,0].rows, B[0,j].cols)
+                    for k in range(A.cols):
+                        a = A[i,k]
+                        b = B[k,j]
+                        product = a * b
+                        if isinstance(product, Zero):
+                            product = ZeroMatrix(a.rows, b.cols)
+                        total += product
+                    if isinstance(total, Zero):
+                        total = ZeroMatrix(A[i,0].rows, B[0,j].cols)
+                    row.append(total)
+                result_blocks.append(row)
+            return BlockMatrix(result_blocks)
         return self * other

     def _blockadd(self, other):
