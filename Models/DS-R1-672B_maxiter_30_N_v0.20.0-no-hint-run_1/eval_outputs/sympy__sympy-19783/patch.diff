diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..97fb40304d 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -46,8 +46,23 @@ class Dagger(adjoint):
         |b><a|

     Powers, sums and products::
+def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator):
+            return self
+        return super().__mul__(other)

         >>> A = Operator('A')
+def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator):
+            return self
+        return super(Dagger, self).__mul__(other)
+def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator):
+            return self
+        return super(Dagger, self).__mul__(other)
         >>> B = Operator('B')
         >>> Dagger(A*B)
         Dagger(B)*Dagger(A)
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..0ecc31b9d8 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -306,10 +306,9 @@ def _print_contents_latex(self, printer, *args):
         return r'{\mathcal{I}}'

     def __mul__(self, other):
-
-        if isinstance(other, Operator):
+        from sympy.physics.quantum.dagger import Dagger
+        if isinstance(other, Operator) or (isinstance(other, Dagger) and isinstance(other.args[0], Operator)):
             return other
-
         return Mul(self, other)

     def _represent_default_basis(self, **options):
