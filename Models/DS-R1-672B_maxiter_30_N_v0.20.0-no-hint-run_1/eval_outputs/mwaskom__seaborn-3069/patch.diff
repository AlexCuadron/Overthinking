diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..c33c3928 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -829,6 +829,25 @@ class Plot:
         # Process the variable assignments and initialize the figure
         common, layers = plotter._extract_data(self)
         plotter._setup_figure(self, common, layers)
+
+        # Apply nominal scale axis adjustments
+        for ax in plotter.axs.flat:
+            for axis in [ax.xaxis, ax.yaxis]:
+                scale = axis.get_scale()
+                if scale == 'nominal':
+                    # Set axis margins to 0.5 beyond first/last tick
+                    artist = ax.get_lines()[0] if ax.get_lines() else ax
+                    artist.sticky_edges.x[:] = []
+                    artist.sticky_edges.y[:] = []
+                    ax.margins(x=0.5 if axis is ax.xaxis else 0,
+                               y=0.5 if axis is ax.yaxis else 0)
+
+                    # Disable grid
+                    ax.grid(False)
+
+            # Invert y-axis for nominal scales
+            if ax.yaxis.get_scale() == 'nominal':
+                ax.invert_yaxis()

         # Process the scale spec for coordinate variables and transform their data
         coord_vars = [v for v in self._variables if re.match(r"^x|y", v)]
@@ -849,9 +868,77 @@ class Plot:
         for layer in layers:
             plotter._plot_layer(self, layer)

+        # Apply nominal scale axis adjustments after plotting data
+        from seaborn._core.scales import Nominal
+        for ax in plotter.axs.flat:
+            if ax is None:  # Handle empty subplots in grid
+                continue
+
+            # Adjust x-axis
+            if isinstance(plotter._get_scale(ax, 'x'), Nominal):
+                ax.margins(x=0.5)
+                ax.grid(False, axis='x')
+                # Add invisible artist with sticky edges to control limits
+                ax.plot([], [], visible=False).update(
+                    {'sticky_edges': ['x'], 'path_effects': []}
+                )
+
+            # Adjust y-axis
+            if isinstance(plotter._get_scale(ax, 'y'), Nominal):
+                ax.margins(y=0.5)
+                ax.grid(False, axis='y')
+                ax.invert_yaxis()
+                # Add invisible artist with sticky edges
+                ax.plot([], [], visible=False).update(
+                    {'sticky_edges': ['y'], 'path_effects': []}
+                )
+
+        # Apply nominal scale axis adjustments
+        from seaborn._core.scales import Nominal
+        for ax in plotter.axs.flat:
+            if ax is None:
+                continue
+
+            # Handle x-axis nominal scale properties
+            if isinstance(plotter.scales.get('x'), Nominal):
+                ax.margins(x=0.5)
+                ax.grid(False, axis='x')
+                # Reset sticky edges using dummy artist
+                ax.plot([], [], visible=False).update({'sticky_edges': ['x']})
+
+            # Handle y-axis nominal scale properties
+            if isinstance(plotter.scales.get('y'), Nominal):
+                ax.margins(y=0.5)
+                ax.grid(False, axis='y')
+                ax.invert_yaxis()
+                ax.plot([], [], visible=False).update({'sticky_edges': ['y']})
+
         # Add various figure decorations
         plotter._make_legend(self)
         plotter._finalize_figure(self)
+        plotter._adjust_nominal_axes()
+
+    def _adjust_nominal_axes(self):
+        """Apply nominal scale axis adjustments including margins, grid, and inversion."""
+        from seaborn._core.scales import Nominal
+
+        for ax in self.axs.flat:
+            if ax is None:
+                continue
+
+            # X-axis adjustments
+            if isinstance(self._get_scale(ax, 'x'), Nominal):
+                ax.margins(x=0.5)
+                ax.grid(False, axis='x')
+                # Add invisible artist to control axis limits
+                ax.plot([], [], visible=False).update({'sticky_edges': ['x']})
+
+            # Y-axis adjustments
+            if isinstance(self._get_scale(ax, 'y'), Nominal):
+                ax.margins(y=0.5)
+                ax.grid(False, axis='y')
+                ax.invert_yaxis()
+                ax.plot([], [], visible=False).update({'sticky_edges': ['y']})

         return plotter
