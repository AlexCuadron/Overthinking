diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 54f3258eac..0e497457eb 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -244,6 +244,8 @@ class Query(BaseExpression):
         self.extra = {}  # Maps col_alias -> (col_sql, params).

         self._filtered_relations = {}
+        # Stores aliases for filtered relations to prevent duplicate joins
+        self._filtered_relation_aliases = {}

     @property
     def output_field(self):
@@ -1570,6 +1572,30 @@ class Query(BaseExpression):
         return target_clause

     def add_filtered_relation(self, filtered_relation, alias):
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
+        # Generate unique alias using condition
+alias_suffix = abs(hash(filtered_relation.condition))
+alias = f"{alias}_{alias_suffix}"
+# Generate unique alias using condition
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        alias = f"{alias}_{alias_suffix}"
         filtered_relation.alias = alias
         lookups = dict(get_children_from_q(filtered_relation.condition))
         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(
@@ -1598,6 +1624,34 @@ class Query(BaseExpression):
                         "relations deeper than the relation_name (got %r for "
                         "%r)." % (lookup, filtered_relation.relation_name)
                     )
+        # Generate unique alias using condition hash
+alias_suffix = abs(hash(filtered_relation.condition))
+filtered_relation = filtered_relation.clone()
+filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
+# Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        filtered_relation = filtered_relation.clone()
+        filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        filtered_relation = filtered_relation.clone()
+        filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        filtered_relation = filtered_relation.clone()
+        filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
+        # Generate unique alias using condition
+        alias_suffix = abs(hash(filtered_relation.condition))
+        filtered_relation = filtered_relation.clone()
+        filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        filtered_relation = filtered_relation.clone()
+        filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
+        # Generate unique alias using condition hash
+        alias_suffix = abs(hash(filtered_relation.condition))
+        filtered_relation = filtered_relation.clone()
+        filtered_relation.alias = f"{filtered_relation.alias}_{alias_suffix}"
         self._filtered_relations[filtered_relation.alias] = filtered_relation

     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
