diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 5203e3232c..ae60c5ff74 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -2839,6 +2839,9 @@ class _AxesBase(martist.Artist):
         if tight is not None:
             self._tight = bool(tight)

+        # Preserve original data limits before scaling
+        orig_data_lim = self.dataLim.frozen()
+
         x_stickies = y_stickies = np.array([])
         if self.use_sticky_edges:
             if self._xmargin and scalex and self.get_autoscalex_on():
@@ -2846,11 +2849,22 @@ class _AxesBase(martist.Artist):
                     artist.sticky_edges.x
                     for ax in self._shared_axes["x"].get_siblings(self)
                     for artist in ax.get_children()]))
+            else:
+                self.dataLim.intervalx = orig_data_lim.intervalx  # Restore x
+
             if self._ymargin and scaley and self.get_autoscaley_on():
                 y_stickies = np.sort(np.concatenate([
                     artist.sticky_edges.y
                     for ax in self._shared_axes["y"].get_siblings(self)
                     for artist in ax.get_children()]))
+            else:
+                self.dataLim.intervaly = orig_data_lim.intervaly  # Restore y
+        # Restore original limits for non-scaled axes
+        if not scalex:
+            self.dataLim.intervalx = orig_data_lim.intervalx
+        if not scaley:
+            self.dataLim.intervaly = orig_data_lim.intervaly
+
         if self.get_xscale() == 'log':
             x_stickies = x_stickies[x_stickies > 0]
         if self.get_yscale() == 'log':
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..8210ea5ec9
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,20 @@
+import matplotlib.pyplot as plt
+
+def print_datalim(*ax):
+    for ax_ in ax:
+        print(ax_.dataLim.intervaly, end=' / ')
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+ax1.stackplot(df1_index, df1_values)
+print_datalim(ax1)
+
+ax2 = ax1.twinx()
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print_datalim(ax1, ax2)
\ No newline at end of file
