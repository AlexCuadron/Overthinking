diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index b562f47fd..0e6b629e6 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -22,13 +22,18 @@ from sphinx.util.inspect import safe_getattr
 logger = logging.getLogger(__name__)


-class _MockObject:
+class _MockObject(metaclass=type):
     """Used by autodoc_mock_imports."""

     __display_name__ = '_MockObject'
     __sphinx_mock__ = True
     __sphinx_decorator_args__: Tuple[Any, ...] = ()

+    def __mro_entries__(self, bases: Tuple) -> Tuple:
+        """Preserve original base classes while maintaining mock compatibility"""
+        # Combine original bases with mock class for proper inheritance
+        return bases + (self.__class__,)
+
     def __new__(cls, *args: Any, **kwargs: Any) -> Any:
         if len(args) == 3 and isinstance(args[1], tuple):
             superclass = args[1][-1].__class__
@@ -40,7 +45,7 @@ class _MockObject:
         return super().__new__(cls)

     def __init__(self, *args: Any, **kwargs: Any) -> None:
-        self.__qualname__ = ''
+        pass  # __qualname__ is set in subclass creation

     def __len__(self) -> int:
         return 0
@@ -52,13 +57,15 @@ class _MockObject:
         return iter([])

     def __mro_entries__(self, bases: Tuple) -> Tuple:
-        return (self.__class__,)
+        """Preserve original base classes while maintaining mock compatibility."""
+        # Return empty tuple to prevent mock from appearing in MRO
+        return ()

     def __getitem__(self, key: Any) -> "_MockObject":
-        return _make_subclass(str(key), self.__display_name__, self.__class__)()
+        return _make_subclass(str(key), self.__display_name__, self.__class__)

     def __getattr__(self, key: str) -> "_MockObject":
-        return _make_subclass(key, self.__display_name__, self.__class__)()
+        return _make_subclass(key, self.__display_name__, self.__class__)

     def __call__(self, *args: Any, **kwargs: Any) -> Any:
         call = self.__class__()
