diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..066cdeaf3 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.

@@ -36,6 +37,10 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.

+    dtypes : dtype or dict of dtype, default=None
+        Dtypes to apply to the resulting DataFrame. If provided,
+        the DataFrame will be cast to these dtypes.
+
     Returns
     -------
     dataframe : DataFrame
@@ -57,9 +62,24 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            if isinstance(dtypes, (pd.Series, dict)):
+                valid_cols = data_to_wrap.columns.intersection(dtypes.keys())
+                filtered_dtypes = {col: dtypes[col] for col in valid_cols}
+                data_to_wrap = data_to_wrap.astype(filtered_dtypes)
+            else:
+                data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap

-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        if isinstance(dtypes, (pd.Series, dict)):
+            valid_cols = df.columns.intersection(dtypes.keys())
+            filtered_dtypes = {col: dtypes[col] for col in valid_cols}
+            df = df.astype(filtered_dtypes)
+        else:
+            df = df.astype(dtypes)
+    return df


 def _get_output_config(method, estimator=None):
@@ -131,6 +151,7 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=getattr(original_input, "dtypes", None),
     )
