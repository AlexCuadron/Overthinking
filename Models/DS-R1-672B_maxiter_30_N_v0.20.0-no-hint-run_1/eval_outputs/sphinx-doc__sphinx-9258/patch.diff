diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index af4b47bb0..db3c4685e 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -30,7 +30,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    type_hint = typing.stringify(param.annotation)
+                    if '|' in type_hint:
+                        type_hint = type_hint.replace('|', '\\|')  # proper reST escaping
+                    annotation[param.name] = type_hint
             if sig.return_annotation is not sig.empty:
                 annotation['return'] = typing.stringify(sig.return_annotation)
     except (TypeError, ValueError):
diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index af6edcae0..3bd91fe14 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -114,11 +114,19 @@ def restify(cls: Optional[Type]) -> str:
     elif inspect.isNewType(cls):
         return ':class:`%s`' % cls.__name__
     elif types_Union and isinstance(cls, types_Union):
-        if len(cls.__args__) > 1 and None in cls.__args__:
-            args = ' | '.join(restify(a) for a in cls.__args__ if a)
-            return 'Optional[%s]' % args
+        args = []
+        for a in cls.__args__:
+            # If argument is already a pipe-separated string from stringify()
+            if isinstance(a, str) and '|' in a:
+                args.extend(t.strip() for t in a.split('|'))
+            else:
+                args.append(restify(a))
+
+        if None in cls.__args__:
+            valid_args = [a for a in args if a != 'None']
+            return 'Optional[%s]' % ' | '.join(valid_args)
         else:
-            return ' | '.join(restify(a) for a in cls.__args__)
+            return ' | '.join(args)
     elif cls.__module__ in ('__builtin__', 'builtins'):
         return ':class:`%s`' % cls.__name__
     else:
@@ -286,9 +294,12 @@ def stringify(annotation: Any) -> str:
     from sphinx.util import inspect  # lazy loading

     if isinstance(annotation, str):
+        annotation = annotation.strip()
         if annotation.startswith("'") and annotation.endswith("'"):
-            # might be a double Forward-ref'ed type.  Go unquoting.
-            return annotation[1:-1]
+            annotation = annotation[1:-1]
+        if '|' in annotation:
+            types = [t.strip() for t in annotation.split('|')]
+            return ' | '.join(types)
         else:
             return annotation
     elif isinstance(annotation, TypeVar):
