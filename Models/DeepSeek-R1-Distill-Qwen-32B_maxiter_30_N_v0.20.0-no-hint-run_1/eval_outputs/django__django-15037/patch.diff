diff --git a/django/db/backends/base/inspect.py b/django/db/backends/base/inspect.py
new file mode 100644
index 0000000000..7f43adb9b4
--- /dev/null
+++ b/django/db/backends/base/inspect.py
@@ -0,0 +1,38 @@
+def get_relations(cursor, table_name):
+    """
+    Get a list of (field_name, related_table, related_field) representing all
+    relationships on the given table name.
+    """
+    # This is a generic implementation that can be overridden by database backends.
+    # It uses the information schema to find foreign key relationships.
+    print(f"Inspecting table: {table_name}")
+    cursor.execute("""
+        SELECT
+            c.constraint_name,
+            ccu.column_name,
+            ccu.referenced_table_name,
+            ccu.referenced_column_name
+        FROM
+            information_schema.table_constraints c
+        JOIN
+            information_schema.constraint_column_usage ccu
+            ON c.constraint_name = ccu.constraint_name
+        WHERE
+            c.table_name = %s
+            AND c.constraint_type = 'FOREIGN KEY'
+    """, [table_name])
+    relations = []
+    for (
+        constraint_name,
+        column_name,
+        referenced_table_name,
+        referenced_column_name,
+    ) in cursor.fetchall():
+        print(f"Found relation: {column_name} -> {referenced_table_name}.{referenced_column_name}")
+        # Ensure that the referenced column is not None
+        if referenced_column_name:
+            relations.append(
+                (column_name, referenced_table_name, referenced_column_name)
+            )
+    print(f"Returning relations: {relations}")
+    return relations
\ No newline at end of file
diff --git a/test_script.py b/test_script.py
new file mode 100644
index 0000000000..8826c41896
--- /dev/null
+++ b/test_script.py
@@ -0,0 +1,31 @@
+import os
+import sys
+from django.conf import settings
+from django.db import connection
+from django.core.management import call_command
+
+# Configure Django settings
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+from django.apps import apps
+apps.populate(settings.INSTALLED_APPS)
+
+def main():
+    # Create test database
+    cursor = connection.cursor()
+    cursor.execute("CREATE TABLE foo (id SERIAL PRIMARY KEY, other_id INT UNIQUE);")
+    cursor.execute("CREATE TABLE bar (id SERIAL PRIMARY KEY, other_id INT, FOREIGN KEY (other_id) REFERENCES foo (other_id));")
+
+    # Run inspectdb
+    call_command('inspectdb', stdout=sys.stdout)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
