diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..3c234d8241 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,7 +670,7 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not isinstance(attr, (Expression, F)):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
diff --git a/tests/reproduce_bulk_update_F_issue.py b/tests/reproduce_bulk_update_F_issue.py
new file mode 100644
index 0000000000..46c4dd54c9
--- /dev/null
+++ b/tests/reproduce_bulk_update_F_issue.py
@@ -0,0 +1,29 @@
+from django.db import models
+from django.db.models import F
+
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100)
+    c8 = models.CharField(max_length=100)
+
+    def __str__(self):
+        return f"SelfRef(id={self.id}, name={self.name}, c8={self.c8})"
+
+def reproduce_issue():
+    # Create a test instance
+    obj = SelfRef.objects.create(name="test_name", c8="initial_value")
+
+    # Assign F('name') to c8
+    obj.c8 = F('name')
+
+    # Perform bulk_update
+    SelfRef.objects.bulk_update([obj], ['c8'])
+
+    # Refresh from DB
+    obj.refresh_from_db()
+
+    # Verify the result
+    print(f"After bulk_update, c8 = {obj.c8}")
+    assert obj.c8 != "F(name)", "bulk_update did not handle F() expression correctly"
+
+if __name__ == "__main__":
+    reproduce_issue()
\ No newline at end of file
