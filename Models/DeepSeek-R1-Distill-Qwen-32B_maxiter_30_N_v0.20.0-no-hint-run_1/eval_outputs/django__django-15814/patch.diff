diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2cc4a23052
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,51 @@
+import os
+import django
+from django.db import models
+from django.apps import apps, AppConfig
+from django.core.management.base import BaseCommand
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Create a test application configuration
+class TestAppConfig(AppConfig):
+    name = 'testapp'
+    verbose_name = "Test App"
+    path = os.path.dirname(os.path.abspath(__file__))
+
+    def ready(self):
+        pass
+
+# Register the models with the application
+app_config = TestAppConfig('testapp', None)
+app_config.models_module = __name__
+models.signals.post_migrate.connect(app_config.ready, weak=False)
+
+# Explicitly register the models
+apps.apps.register(app_config)
+
+class CustomModel(models.Model):
+    name = models.CharField(max_length=16)
+
+class ProxyCustomModel(CustomModel):
+    class Meta:
+        proxy = True
+
+class AnotherModel(models.Model):
+    custom = models.ForeignKey(
+        ProxyCustomModel,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+    )
+
+class Command(BaseCommand):
+    def handle(self, *args, **options):
+        # Create test data
+        custom = ProxyCustomModel.objects.create(name='test')
+        AnotherModel.objects.create(custom=custom)
+
+        # Execute problematic query
+        objs = list(AnotherModel.objects.select_related("custom").only("custom__name").all())
+        print("Query executed successfully!")
\ No newline at end of file
