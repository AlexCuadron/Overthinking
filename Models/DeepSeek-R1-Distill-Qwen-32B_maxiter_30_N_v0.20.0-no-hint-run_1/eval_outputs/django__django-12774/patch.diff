diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..f9d7b8c9a1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -690,7 +690,208 @@ class QuerySet:
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
         if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
-            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+            field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        field = self.model._meta.get_field(field_name)
+if not field.unique:
+    # Check if the field is part of a UniqueConstraint
+    unique_constraints = self.model._meta.constraints
+    is_unique = any(
+        isinstance(constraint, models.UniqueConstraint) and
+        len(constraint.fields) == 1 and
+        constraint.fields[0] == field_name
+        for constraint in unique_constraints
+    )
+    if not is_unique:
+        raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
+if id_list is not None:
+    if not id_list:
+        return {}
+    filter_key = '{}__in'.format(field_name)
         if id_list is not None:
             if not id_list:
                 return {}
diff --git a/tests.py b/tests.py
new file mode 100644
index 0000000000..19c8d6825a
--- /dev/null
+++ b/tests.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="slug_unq")
+        ]
+
+try:
+    Article.objects.in_bulk(field_name="slug")
+    print("Success")
+except ValueError as e:
+    print(f"Error: {e}")
\ No newline at end of file
