diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index ddfd2b365..86a3b9c1f 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -298,6 +298,382 @@ class Documenter:
     *directivetype*.

     A Documenter has an *option_spec* that works like a docutils directive's;
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Traverse base classes to find the attribute
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+
+        return None
+    """
+
+    def _get_inherited_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Retrieve the docstring for *attrname* from base classes of *obj*.
+        """
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+        return None
+
+    def get_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Return the docstring for *attrname* of *obj*.
+        """
+        # Check current namespace
+        key = (self.namespace, attrname)
+        if key in self.doc_cache:
+            return self.doc_cache[key]
+
+        # Check base classes
+        return self._get_inherited_doc(obj, attrname)
+    """
+
+    def _get_inherited_doc(self, obj: Any, attrname: str) -> Optional[str]:
+        """
+        Retrieve the docstring for *attrname* from base classes of *obj*.
+        """
+        for base in inspect.getmro(obj.__class__):
+            if base is obj.__class__:
+                continue  # Skip the current class
+            base_namespace = (base.__module__, base.__name__)
+            base_key = (base_namespace, attrname)
+            if base_key in self.doc_cache:
+                return self.doc_cache[base_key]
+        return None
     in fact, it will be used to parse an auto directive's options that matches
     the documenter.
     """
