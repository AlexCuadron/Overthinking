diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..69de276d23 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -143,6 +143,7 @@ class UserCreationForm(forms.ModelForm):
             user.save()
         return user

+self.save_m2m()

 class UserChangeForm(forms.ModelForm):
     password = ReadOnlyPasswordHashField(
diff --git a/tests.py b/tests.py
new file mode 100644
index 0000000000..23e9bdc00e
--- /dev/null
+++ b/tests.py
@@ -0,0 +1,40 @@
+from django.contrib.auth.forms import UserCreationForm
+from django.contrib.auth.models import User
+from django.db import models
+
+# Create a test model with M2M field
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    users = models.ManyToManyField(User)
+
+# Create a form with M2M field
+class TestUserForm(UserCreationForm):
+    class Meta:
+        model = User
+        fields = ['username', 'password1', 'password2']
+
+# Test case
+def test_m2m_save():
+    test_model = TestModel.objects.create(name="Test")
+    test_model.users.through.objects.all().delete()
+
+    form = TestUserForm(data={
+        'username': 'testuser',
+        'password1': 'testpass123',
+        'password2': 'testpass123',
+    })
+    assert form.is_valid(), "Form should be valid"
+
+    user = form.save()
+    assert user is not None, "User should be created"
+
+    # Check if M2M relation is saved
+    assert test_model.users.count() == 0, "M2M data should not be saved without explicit addition"
+
+    # Add user to M2M and check
+    test_model.users.add(user)
+    assert test_model.users.count() == 1, "M2M data should be saved after addition"
+
+if __name__ == '__main__':
+    test_m2m_save()
+    print("Test completed successfully")
\ No newline at end of file
