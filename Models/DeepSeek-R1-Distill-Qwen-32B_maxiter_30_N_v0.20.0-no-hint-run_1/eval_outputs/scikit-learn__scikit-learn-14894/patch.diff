diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py
index 64cebe837..3abf1fcdc 100644
--- a/sklearn/svm/base.py
+++ b/sklearn/svm/base.py
@@ -101,6 +101,94 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):
     @property
     def _pairwise(self):
         # Used by cross_val_score.
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
+# Handle case where there are no support vectors
+            if dual_coef_indices.size == 0:
+                self.dual_coef_ = sp.csr_matrix(())
+                return
         return self.kernel == "precomputed"

     def fit(self, X, y, sample_weight=None):
