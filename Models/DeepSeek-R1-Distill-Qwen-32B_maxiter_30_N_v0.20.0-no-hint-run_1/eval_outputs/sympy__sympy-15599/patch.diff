diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index eae25630cc..b1ff86743b 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -123,9 +123,11 @@ def doit(p, q):
             for arg in p.args:
                 both_l[isinstance(arg, cls)].append(arg)

-            if mod_l and all(inner.args[1] == q for inner in mod_l):
+            was = non_mod_l[:]
+            non_mod_l = [cls(x, q) for x in non_mod_l]
+            changed = was != non_mod_l
+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):
                 # finding distributive term
-                non_mod_l = [cls(x, q) for x in non_mod_l]
                 mod = []
                 non_mod = []
                 for j in non_mod_l:
diff --git a/test_mod.py b/test_mod.py
new file mode 100644
index 0000000000..f20c9b81ad
--- /dev/null
+++ b/test_mod.py
@@ -0,0 +1,6 @@
+from sympy import Mod, Symbol
+
+i = Symbol('i', integer=True)
+result = Mod(3*i, 2)
+print("Before fix:")
+print(result)
\ No newline at end of file
diff --git a/test_mod_edge.py b/test_mod_edge.py
new file mode 100644
index 0000000000..3ddae9cde0
--- /dev/null
+++ b/test_mod_edge.py
@@ -0,0 +1,6 @@
+from sympy import Mod, Symbol
+
+i = Symbol('i', integer=True)
+print("Testing edge cases:")
+print("Mod(4*i, 2) =", Mod(4*i, 2))
+print("Mod(5*i, 3) =", Mod(5*i, 3))
\ No newline at end of file
