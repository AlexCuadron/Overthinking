2025-02-10 03:11:47,629 - INFO - Environment image sweb.env.x86_64.c6d251a05e0af7688b64fd:latest found for sphinx-doc__sphinx-8551
Building instance image sweb.eval.x86_64.sphinx-doc__sphinx-8551:latest for sphinx-doc__sphinx-8551
2025-02-10 03:12:05,731 - INFO - Creating container for sphinx-doc__sphinx-8551...
2025-02-10 03:12:05,754 - INFO - Container for sphinx-doc__sphinx-8551 created: d92cf8bd2ba390d61ae2e05e21fed37c479a9a6fefa647da1759adfc275f6379
2025-02-10 03:12:05,966 - INFO - Container for sphinx-doc__sphinx-8551 started: d92cf8bd2ba390d61ae2e05e21fed37c479a9a6fefa647da1759adfc275f6379
2025-02-10 03:12:05,967 - INFO - Intermediate patch for sphinx-doc__sphinx-8551 written to logs/run_evaluation/20250210_023758/DeepSeek-R1-Distill-Qwen-32B_maxiter_30_N_v0.23.0-no-hint-run_1/sphinx-doc__sphinx-8551/patch.diff, now applying to container...
2025-02-10 03:12:06,209 - INFO - Failed to apply patch to container, trying again...
2025-02-10 03:12:06,262 - INFO - >>>>> Applied Patch:
patching file sphinx/domains/python.py

2025-02-10 03:12:06,545 - INFO - Git diff before:
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..fdd0ed8ae 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -80,6 +80,272 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),
 
 def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:
     """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    """Convert a type string to a cross reference node."""
     if text == 'None':
         reftype = 'obj'
     else:
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
2025-02-10 03:12:06,545 - INFO - Eval script for sphinx-doc__sphinx-8551 written to logs/run_evaluation/20250210_023758/DeepSeek-R1-Distill-Qwen-32B_maxiter_30_N_v0.23.0-no-hint-run_1/sphinx-doc__sphinx-8551/eval.sh; copying to container...
2025-02-10 03:12:12,244 - INFO - Test runtime: 5.53 seconds
2025-02-10 03:12:12,245 - INFO - Test output for sphinx-doc__sphinx-8551 written to logs/run_evaluation/20250210_023758/DeepSeek-R1-Distill-Qwen-32B_maxiter_30_N_v0.23.0-no-hint-run_1/sphinx-doc__sphinx-8551/test_output.txt
2025-02-10 03:12:12,306 - INFO - Git diff after:
diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..fdd0ed8ae 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -80,6 +80,272 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),
 
 def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:
     """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    """Convert a type string to a cross reference node."""
     if text == 'None':
         reftype = 'obj'
     else:
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
2025-02-10 03:12:12,306 - INFO - Grading answer for sphinx-doc__sphinx-8551...
2025-02-10 03:12:12,321 - INFO - report: {'sphinx-doc__sphinx-8551': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['tests/test_domain_py.py::test_info_field_list']}, 'PASS_TO_PASS': {'success': ['tests/test_domain_py.py::test_function_signatures', 'tests/test_domain_py.py::test_domain_py_xrefs', 'tests/test_domain_py.py::test_domain_py_objects', 'tests/test_domain_py.py::test_resolve_xref_for_properties', 'tests/test_domain_py.py::test_domain_py_find_obj', 'tests/test_domain_py.py::test_get_full_qualified_name', 'tests/test_domain_py.py::test_parse_annotation', 'tests/test_domain_py.py::test_pyfunction_signature', 'tests/test_domain_py.py::test_pyfunction_signature_full', 'tests/test_domain_py.py::test_pyfunction_signature_full_py38', 'tests/test_domain_py.py::test_pyfunction_with_number_literals', 'tests/test_domain_py.py::test_optional_pyfunction_signature', 'tests/test_domain_py.py::test_pyexception_signature', 'tests/test_domain_py.py::test_exceptions_module_is_ignored', 'tests/test_domain_py.py::test_pydata_signature', 'tests/test_domain_py.py::test_pydata_signature_old', 'tests/test_domain_py.py::test_pyobject_prefix', 'tests/test_domain_py.py::test_pyfunction', 'tests/test_domain_py.py::test_pyclass_options', 'tests/test_domain_py.py::test_pymethod_options', 'tests/test_domain_py.py::test_pyclassmethod', 'tests/test_domain_py.py::test_pystaticmethod', 'tests/test_domain_py.py::test_pyattribute', 'tests/test_domain_py.py::test_pydecorator_signature', 'tests/test_domain_py.py::test_pydecoratormethod_signature', 'tests/test_domain_py.py::test_module_index', 'tests/test_domain_py.py::test_module_index_submodule', 'tests/test_domain_py.py::test_module_index_not_collapsed', 'tests/test_domain_py.py::test_modindex_common_prefix', 'tests/test_domain_py.py::test_noindexentry', 'tests/test_domain_py.py::test_warn_missing_reference'], 'failure': ['tests/test_domain_py.py::test_pydata']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sphinx-doc__sphinx-8551: resolved: False
2025-02-10 03:12:12,321 - INFO - Attempting to stop container sweb.eval.sphinx-doc__sphinx-8551.20250210_023758...
2025-02-10 03:12:27,659 - INFO - Attempting to remove container sweb.eval.sphinx-doc__sphinx-8551.20250210_023758...
2025-02-10 03:12:27,702 - INFO - Container sweb.eval.sphinx-doc__sphinx-8551.20250210_023758 removed.
