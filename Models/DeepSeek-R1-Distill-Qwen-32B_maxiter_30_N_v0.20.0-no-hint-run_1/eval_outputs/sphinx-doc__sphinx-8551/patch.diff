diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..fdd0ed8ae 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -80,6 +80,272 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),

 def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:
     """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    if text == 'None':
+        reftype = 'obj'
+    else:
+        reftype = 'class'
+    """Convert a type string to a cross reference node."""
+    # Prepend current module to unqualified type names
+    if '.' not in text:
+        module = env.ref_context.get('py:module') if env else None
+        if module:
+            text = f"{module}.{text}"
+    """Convert a type string to a cross reference node."""
     if text == 'None':
         reftype = 'obj'
     else:
