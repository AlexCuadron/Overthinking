2025-01-15 16:36:46,674 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9sdp2cczeia0cqdt_qroup3d3os79ipoo
2025-01-15 16:40:30,170 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9sdp2cczeia0cqdt_qroup3d3os79ipoo] build finished.
2025-01-15 16:40:30,229 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9sdp2cczeia0cqdt_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_9sdp2cczeia0cqdt]
2025-01-15 16:40:30,232 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_9sdp2cczeia0cqdt_qroup3d3os79ipoo, oh_v0.20.0_9sdp2cczeia0cqdt] built successfully
2025-01-15 16:40:30,240 - INFO - [runtime 3300384d-27ea-4e56-98af-2d7a98a3312c-21d543e84670a5fa] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9sdp2cczeia0cqdt_qroup3d3os79ipoo
2025-01-15 16:40:32,690 - INFO - [runtime 3300384d-27ea-4e56-98af-2d7a98a3312c-21d543e84670a5fa] Container started: openhands-runtime-3300384d-27ea-4e56-98af-2d7a98a3312c-21d543e84670a5fa. VSCode URL: None
2025-01-15 16:40:32,690 - INFO - [runtime 3300384d-27ea-4e56-98af-2d7a98a3312c-21d543e84670a5fa] Waiting for client to become ready at http://localhost:32984...
2025-01-15 16:41:00,778 - INFO - [runtime 3300384d-27ea-4e56-98af-2d7a98a3312c-21d543e84670a5fa] Runtime is ready.
2025-01-15 16:41:00,938 - INFO - ------------------------------
2025-01-15 16:41:00,939 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 16:41:00,939 - INFO - ------------------------------
2025-01-15 16:41:00,939 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=psf__requests-6028' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 16:41:01,589 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:01,590 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 16:41:02,225 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:02,225 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 16:41:02,855 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:02,881 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 16:41:03,522 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=psf__requests-6028
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:03,523 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 16:41:04,146 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:04,147 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 16:41:04,147 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 16:41:04,777 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: psf__requests__2.27
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:04,779 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/psf__requests__2.27
2025-01-15 16:41:05,405 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:05,405 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 16:41:06,174 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 0192aac2 v2.27.0
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:06,174 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 16:41:06,334 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:06,339 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 16:41:07,019 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:41:07,031 - INFO - ------------------------------
2025-01-15 16:41:07,031 - INFO - END Runtime Initialization Fn
2025-01-15 16:41:07,031 - INFO - ------------------------------
2025-01-15 16:41:07,033 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-15 16:41:07,066 - INFO - [runtime 3300384d-27ea-4e56-98af-2d7a98a3312c-21d543e84670a5fa] Found 0 local microagents.
2025-01-15 16:41:07,081 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 16:41:07,082 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 16:41:10,834 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 16:41:14,614 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 16:41:22,474 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 16:41:27,015 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 16:41:37,488 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 16:41:41,241 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 16:41:46,668 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 16:41:50,108 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 16:42:01,136 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 16:42:04,557 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 16:42:15,328 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 16:42:20,433 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 16:42:24,934 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 16:42:28,663 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 16:42:34,757 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 16:42:43,553 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 16:42:47,313 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 16:42:54,233 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 16:42:59,071 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 16:43:06,985 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 16:43:14,616 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 16:43:32,282 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 16:43:38,136 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 16:43:44,096 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 16:43:51,219 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 16:43:55,308 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 16:44:00,833 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 16:44:15,393 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 16:44:19,940 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 16:44:40,829 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 16:44:40,829 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 16:44:40,831 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 16:44:40,831 - WARNING - Stopping agent due to traffic control
2025-01-15 16:44:40,831 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 16:44:41,300 - INFO - ------------------------------
2025-01-15 16:44:41,300 - INFO - BEGIN Runtime Completion Fn
2025-01-15 16:44:41,300 - INFO - ------------------------------
2025-01-15 16:44:41,300 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/psf__requests__2.27
2025-01-15 16:44:41,936 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": 682,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:44:41,938 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 16:44:42,582 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": 682,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:44:42,582 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 16:44:43,233 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": 682,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:44:43,233 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 0192aac24123735b3eaf9b08df46429bb770c283
2025-01-15 16:44:43,867 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": 682,
  "username": "root",
  "hostname": "99736cf5cddd",
  "working_dir": "/workspace/psf__requests__2.27",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/local_proxy.py b/local_proxy.py
new file mode 100644
index 00000000..fc1a2bc0
--- /dev/null
+++ b/local_proxy.py
@@ -0,0 +1,34 @@
+from http.server import BaseHTTPRequestHandler, HTTPServer
+import base64
+
+class ProxyHTTPRequestHandler(BaseHTTPRequestHandler):
+    def do_CONNECT(self):
+        auth = self.headers.get('Proxy-Authorization')
+        if not auth or not auth.startswith('Basic '):
+            self.send_response(407)
+            self.send_header('Proxy-Authenticate', 'Basic realm="Proxy"')
+            self.end_headers()
+            return
+
+        credentials = base64.b64decode(auth[6:]).decode('utf-8')
+        if credentials != 'user:pass':
+            self.send_response(407)
+            self.send_header('Proxy-Authenticate', 'Basic realm="Proxy"')
+            self.end_headers()
+            return
+
+        self.send_response(200)
+        self.end_headers()
+        self.connection.sendall(b'HTTP/1.1 200 Connection established\r\n\r\n')
+
+    def do_GET(self):
+        self.do_CONNECT()
+
+def run(server_class=HTTPServer, handler_class=ProxyHTTPRequestHandler, port=3128):
+    server_address = ('', port)
+    httpd = server_class(server_address, handler_class)
+    print(f'Starting proxy server on port {port}...')
+    httpd.serve_forever()
+
+if __name__ == '__main__':
+    run()
\ No newline at end of file
diff --git a/proxy.log b/proxy.log
new file mode 100644
index 00000000..584ecf51
--- /dev/null
+++ b/proxy.log
@@ -0,0 +1,6 @@
+Starting proxy server on port 3128...
+127.0.0.1 - - [15/Jan/2025 16:42:28] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:42:58] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:14] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:37] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:54] "CONNECT example.org:443 HTTP/1.0" 407 -
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..cb3df2ce 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -302,6 +302,14 @@ class HTTPAdapter(BaseAdapter):
         proxy = select_proxy(url, proxies)

         if proxy:
+            # Get proxy authentication from proxies dict if available
+            if isinstance(proxies, dict) and 'http' in proxies:
+                proxy_url = proxies['http']
+                if '@' in proxy_url:
+                    # Extract credentials from proxy URL
+                    auth_part = proxy_url.split('@')[0].split('://')[1]
+                    proxy = proxy.replace('://', f'://{auth_part}@')
+
             proxy = prepend_scheme_if_needed(proxy, 'http')
             proxy_url = parse_url(proxy)
             if not proxy_url.host:
@@ -408,8 +416,19 @@ class HTTPAdapter(BaseAdapter):
         :param proxies: (optional) The proxies dictionary to apply to the request.
         :rtype: requests.Response
         """
+        # Add proxy authentication if available
+        if hasattr(request, 'proxy_auth') and request.proxy_auth:
+            from requests.auth import HTTPProxyAuth
+            auth = HTTPProxyAuth(*request.proxy_auth)
+            request.headers['Proxy-Authorization'] = auth(request)

         try:
+            # Add proxy authentication to headers before getting connection
+            if hasattr(request, 'proxy_auth') and request.proxy_auth:
+                from requests.auth import HTTPProxyAuth
+                auth = HTTPProxyAuth(*request.proxy_auth)
+                request.headers['Proxy-Authorization'] = auth(request)
+
             conn = self.get_connection(request.url, proxies)
         except LocationValueError as e:
             raise InvalidURL(e, request=request)
@@ -510,6 +529,17 @@ class HTTPAdapter(BaseAdapter):
                 raise RetryError(e, request=request)

             if isinstance(e.reason, _ProxyError):
+                if hasattr(e.reason, 'response') and e.reason.response.status == 407:
+                    # Handle proxy authentication
+                    proxy_auth = request.headers.get('Proxy-Authorization')
+                    if not proxy_auth:
+                        # Add proxy authentication header
+                        from requests.auth import HTTPProxyAuth
+                        if request.proxy_auth:
+                            auth = HTTPProxyAuth(*request.proxy_auth)
+                            request.headers['Proxy-Authorization'] = auth(request)
+                            # Retry the request with authentication
+                            return self.send(request, **kwargs)
                 raise ProxyError(e, request=request)

             if isinstance(e.reason, _SSLError):
diff --git a/test_proxy_auth.py b/test_proxy_auth.py
new file mode 100644
index 00000000..f32efa94
--- /dev/null
+++ b/test_proxy_auth.py
@@ -0,0 +1,12 @@
+import requests
+from requests.auth import HTTPProxyAuth
+
+proxies = {
+    'http': 'http://localhost:3128',
+    'https': 'http://localhost:3128'
+}
+
+auth = HTTPProxyAuth('user', 'pass')
+
+r = requests.get('https://example.org/', proxies=proxies, auth=auth)
+print(r.status_code)
\ No newline at end of file
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.27]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:44:43,868 - INFO - ------------------------------
2025-01-15 16:44:43,868 - INFO - END Runtime Completion Fn
2025-01-15 16:44:43,868 - INFO - ------------------------------
2025-01-15 16:44:43,868 - INFO - Got git diff for instance psf__requests-6028:
--------
diff --git a/local_proxy.py b/local_proxy.py
new file mode 100644
index 00000000..fc1a2bc0
--- /dev/null
+++ b/local_proxy.py
@@ -0,0 +1,34 @@
+from http.server import BaseHTTPRequestHandler, HTTPServer
+import base64
+
+class ProxyHTTPRequestHandler(BaseHTTPRequestHandler):
+    def do_CONNECT(self):
+        auth = self.headers.get('Proxy-Authorization')
+        if not auth or not auth.startswith('Basic '):
+            self.send_response(407)
+            self.send_header('Proxy-Authenticate', 'Basic realm="Proxy"')
+            self.end_headers()
+            return
+
+        credentials = base64.b64decode(auth[6:]).decode('utf-8')
+        if credentials != 'user:pass':
+            self.send_response(407)
+            self.send_header('Proxy-Authenticate', 'Basic realm="Proxy"')
+            self.end_headers()
+            return
+
+        self.send_response(200)
+        self.end_headers()
+        self.connection.sendall(b'HTTP/1.1 200 Connection established\r\n\r\n')
+
+    def do_GET(self):
+        self.do_CONNECT()
+
+def run(server_class=HTTPServer, handler_class=ProxyHTTPRequestHandler, port=3128):
+    server_address = ('', port)
+    httpd = server_class(server_address, handler_class)
+    print(f'Starting proxy server on port {port}...')
+    httpd.serve_forever()
+
+if __name__ == '__main__':
+    run()
\ No newline at end of file
diff --git a/proxy.log b/proxy.log
new file mode 100644
index 00000000..584ecf51
--- /dev/null
+++ b/proxy.log
@@ -0,0 +1,6 @@
+Starting proxy server on port 3128...
+127.0.0.1 - - [15/Jan/2025 16:42:28] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:42:58] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:14] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:37] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:54] "CONNECT example.org:443 HTTP/1.0" 407 -
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..cb3df2ce 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -302,6 +302,14 @@ class HTTPAdapter(BaseAdapter):
         proxy = select_proxy(url, proxies)

         if proxy:
+            # Get proxy authentication from proxies dict if available
+            if isinstance(proxies, dict) and 'http' in proxies:
+                proxy_url = proxies['http']
+                if '@' in proxy_url:
+                    # Extract credentials from proxy URL
+                    auth_part = proxy_url.split('@')[0].split('://')[1]
+                    proxy = proxy.replace('://', f'://{auth_part}@')
+
             proxy = prepend_scheme_if_needed(proxy, 'http')
             proxy_url = parse_url(proxy)
             if not proxy_url.host:
@@ -408,8 +416,19 @@ class HTTPAdapter(BaseAdapter):
         :param proxies: (optional) The proxies dictionary to apply to the request.
         :rtype: requests.Response
         """
+        # Add proxy authentication if available
+        if hasattr(request, 'proxy_auth') and request.proxy_auth:
+            from requests.auth import HTTPProxyAuth
+            auth = HTTPProxyAuth(*request.proxy_auth)
+            request.headers['Proxy-Authorization'] = auth(request)

         try:
+            # Add proxy authentication to headers before getting connection
+            if hasattr(request, 'proxy_auth') and request.proxy_auth:
+                from requests.auth import HTTPProxyAuth
+                auth = HTTPProxyAuth(*request.proxy_auth)
+                request.headers['Proxy-Authorization'] = auth(request)
+
             conn = self.get_connection(request.url, proxies)
         except LocationValueError as e:
             raise InvalidURL(e, request=request)
@@ -510,6 +529,17 @@ class HTTPAdapter(BaseAdapter):
                 raise RetryError(e, request=request)

             if isinstance(e.reason, _ProxyError):
+                if hasattr(e.reason, 'response') and e.reason.response.status == 407:
+                    # Handle proxy authentication
+                    proxy_auth = request.headers.get('Proxy-Authorization')
+                    if not proxy_auth:
+                        # Add proxy authentication header
+                        from requests.auth import HTTPProxyAuth
+                        if request.proxy_auth:
+                            auth = HTTPProxyAuth(*request.proxy_auth)
+                            request.headers['Proxy-Authorization'] = auth(request)
+                            # Retry the request with authentication
+                            return self.send(request, **kwargs)
                 raise ProxyError(e, request=request)

             if isinstance(e.reason, _SSLError):
diff --git a/test_proxy_auth.py b/test_proxy_auth.py
new file mode 100644
index 00000000..f32efa94
--- /dev/null
+++ b/test_proxy_auth.py
@@ -0,0 +1,12 @@
+import requests
+from requests.auth import HTTPProxyAuth
+
+proxies = {
+    'http': 'http://localhost:3128',
+    'https': 'http://localhost:3128'
+}
+
+auth = HTTPProxyAuth('user', 'pass')
+
+r = requests.get('https://example.org/', proxies=proxies, auth=auth)
+print(r.status_code)
\ No newline at end of file
--------
2025-01-15 16:44:46,578 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.pytest-dev_s_pytest-7571. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 16:44:46,578 - INFO - Logging LLM completions for instance pytest-dev__pytest-7571 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/pytest-dev__pytest-7571
