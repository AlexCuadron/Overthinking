2025-01-15 17:08:02,229 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_qrt5bwp4f5wnb0eb_ddt2mlbw5vupuuj5
2025-01-15 17:10:43,576 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_qrt5bwp4f5wnb0eb_ddt2mlbw5vupuuj5] build finished.
2025-01-15 17:10:43,590 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_qrt5bwp4f5wnb0eb_ddt2mlbw5vupuuj5] with more generic tag [oh_v0.20.0_qrt5bwp4f5wnb0eb]
2025-01-15 17:10:43,592 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_qrt5bwp4f5wnb0eb_ddt2mlbw5vupuuj5, oh_v0.20.0_qrt5bwp4f5wnb0eb] built successfully
2025-01-15 17:10:43,598 - INFO - [runtime cf66d96a-9cc3-44fd-bba7-8112e39fefac-a5e937cd168e14c9] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_qrt5bwp4f5wnb0eb_ddt2mlbw5vupuuj5
2025-01-15 17:10:44,285 - INFO - [runtime cf66d96a-9cc3-44fd-bba7-8112e39fefac-a5e937cd168e14c9] Container started: openhands-runtime-cf66d96a-9cc3-44fd-bba7-8112e39fefac-a5e937cd168e14c9. VSCode URL: None
2025-01-15 17:10:44,285 - INFO - [runtime cf66d96a-9cc3-44fd-bba7-8112e39fefac-a5e937cd168e14c9] Waiting for client to become ready at http://localhost:39790...
2025-01-15 17:11:06,345 - INFO - [runtime cf66d96a-9cc3-44fd-bba7-8112e39fefac-a5e937cd168e14c9] Runtime is ready.
2025-01-15 17:11:06,979 - INFO - ------------------------------
2025-01-15 17:11:06,979 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 17:11:06,979 - INFO - ------------------------------
2025-01-15 17:11:06,979 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-24443' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 17:11:07,604 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:07,604 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 17:11:08,228 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:08,229 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 17:11:08,855 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:08,862 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 17:11:09,484 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-24443
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:09,484 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 17:11:10,107 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:10,108 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 17:11:10,108 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 17:11:10,731 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:10,731 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2025-01-15 17:11:11,355 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:11,355 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 17:11:11,978 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 809c53c077 Merge pull request #24392 from evbernardes/quaternion_norm
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:11,978 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 17:11:12,603 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:12,603 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 17:11:13,229 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:11:13,229 - INFO - ------------------------------
2025-01-15 17:11:13,229 - INFO - END Runtime Initialization Fn
2025-01-15 17:11:13,229 - INFO - ------------------------------
2025-01-15 17:11:13,231 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-15 17:11:13,242 - INFO - [runtime cf66d96a-9cc3-44fd-bba7-8112e39fefac-a5e937cd168e14c9] Found 0 local microagents.
2025-01-15 17:11:13,243 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 17:11:13,244 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 17:11:16,753 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 17:11:20,621 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 17:11:25,463 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 17:11:29,817 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 17:11:37,538 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 17:11:40,728 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 17:11:45,049 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 17:11:50,144 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 17:11:53,813 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 17:11:57,555 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 17:12:01,903 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 17:12:05,570 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 17:12:13,433 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 17:12:16,639 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 17:12:26,184 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 17:12:37,181 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 17:12:47,239 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 17:12:51,136 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 17:12:54,897 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 17:13:13,958 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 17:13:19,244 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 17:13:34,171 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 17:13:38,929 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 17:14:05,794 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 17:14:10,543 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 17:14:37,058 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 17:14:41,891 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 17:15:10,440 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 17:15:15,184 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 17:15:43,182 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 17:15:43,182 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 17:15:43,183 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 17:15:43,183 - WARNING - Stopping agent due to traffic control
2025-01-15 17:15:43,183 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 17:15:43,501 - INFO - ------------------------------
2025-01-15 17:15:43,501 - INFO - BEGIN Runtime Completion Fn
2025-01-15 17:15:43,501 - INFO - ------------------------------
2025-01-15 17:15:43,501 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2025-01-15 17:15:44,123 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:15:44,123 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 17:15:44,747 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:15:44,747 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 17:15:45,369 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:15:45,370 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 809c53c077485ca48a206cee78340389cb83b7f1
2025-01-15 17:15:45,993 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "90373f341c9c",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..77d88b2546 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -287,7 +287,88 @@ def homomorphism(domain, codomain, gens, images=(), check=True):
     if not isinstance(codomain, (PermutationGroup, FpGroup, FreeGroup)):
         raise TypeError("The codomain must be a group")

+    # Create a complete mapping including inverses
+    images_dict = {}
+    for gen, img in zip(gens, images):
+        images_dict[gen] = img
+        images_dict[gen**-1] = img**-1
+
+    # Add identity mapping for unspecified generators
     generators = domain.generators
+    for gen in generators:
+        if gen not in images_dict and gen**-1 not in images_dict:
+            images_dict[gen] = codomain.identity
+            images_dict[gen**-1] = codomain.identity
+
+    # Verify that the images preserve the group relations
+    if check:
+        rels = domain.presentation().relators if hasattr(domain, 'presentation') else domain.relators
+        for rel in rels:
+            img_rel = _image(rel, images_dict)
+            if img_rel != codomain.identity:
+                raise ValueError(f"The given images do not define a homomorphism. Relation {rel} maps to {img_rel} instead of identity")
+
+    return GroupHomomorphism(domain, codomain, images_dict)
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
     if not all(g in generators for g in gens):
         raise ValueError("The supplied generators must be a subset of the domain's generators")
     if not all(g in codomain for g in images):
@@ -314,6 +395,29 @@ def _check_homomorphism(domain, codomain, images):
         gens = domain.presentation().generators
         rels = domain.presentation().relators
     identity = codomain.identity
+
+    # Verify that all generators and their inverses are properly mapped
+    for g in gens:
+        if g not in images and g**-1 not in images:
+            return False
+        if g in images:
+            if g**-1 in images:
+                if images[g]**-1 != images[g**-1]:
+                    return False
+            else:
+                # If inverse not explicitly mapped, verify it matches the inverse of the image
+                if images[g]**-1 not in images.values():
+                    return False
+        elif g**-1 in images:
+            # If only inverse is mapped, verify it matches the inverse of some image
+            if images[g**-1]**-1 not in images.values():
+                return False
+
+    # Verify that the images preserve the group relations
+    for rel in rels:
+        if _image(rel) != identity:
+            return False
+    return True

     def _image(r):
         if r.is_identity:
@@ -333,8 +437,17 @@ def _image(r):
             # both indices
             while i < len(r):
                 power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup):
+                    # Handle both regular and inverted generators
+                    gen = r[i]
+                    if gen in gens:
+                        s = domain.generators[gens.index(gen)]
+                    elif gen**-1 in gens:
+                        s = domain.generators[gens.index(gen**-1)]**-1
+                    else:
+                        # Handle case where generator is not directly in gens
+                        # but can be expressed through group operations
+                        s = gen
                 else:
                     s = r[i]
                 if s in images:
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:15:45,994 - INFO - ------------------------------
2025-01-15 17:15:45,994 - INFO - END Runtime Completion Fn
2025-01-15 17:15:45,994 - INFO - ------------------------------
2025-01-15 17:15:45,994 - INFO - Got git diff for instance sympy__sympy-24443:
--------
diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..77d88b2546 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -287,7 +287,88 @@ def homomorphism(domain, codomain, gens, images=(), check=True):
     if not isinstance(codomain, (PermutationGroup, FpGroup, FreeGroup)):
         raise TypeError("The codomain must be a group")

+    # Create a complete mapping including inverses
+    images_dict = {}
+    for gen, img in zip(gens, images):
+        images_dict[gen] = img
+        images_dict[gen**-1] = img**-1
+
+    # Add identity mapping for unspecified generators
     generators = domain.generators
+    for gen in generators:
+        if gen not in images_dict and gen**-1 not in images_dict:
+            images_dict[gen] = codomain.identity
+            images_dict[gen**-1] = codomain.identity
+
+    # Verify that the images preserve the group relations
+    if check:
+        rels = domain.presentation().relators if hasattr(domain, 'presentation') else domain.relators
+        for rel in rels:
+            img_rel = _image(rel, images_dict)
+            if img_rel != codomain.identity:
+                raise ValueError(f"The given images do not define a homomorphism. Relation {rel} maps to {img_rel} instead of identity")
+
+    return GroupHomomorphism(domain, codomain, images_dict)
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
     if not all(g in generators for g in gens):
         raise ValueError("The supplied generators must be a subset of the domain's generators")
     if not all(g in codomain for g in images):
@@ -314,6 +395,29 @@ def _check_homomorphism(domain, codomain, images):
         gens = domain.presentation().generators
         rels = domain.presentation().relators
     identity = codomain.identity
+
+    # Verify that all generators and their inverses are properly mapped
+    for g in gens:
+        if g not in images and g**-1 not in images:
+            return False
+        if g in images:
+            if g**-1 in images:
+                if images[g]**-1 != images[g**-1]:
+                    return False
+            else:
+                # If inverse not explicitly mapped, verify it matches the inverse of the image
+                if images[g]**-1 not in images.values():
+                    return False
+        elif g**-1 in images:
+            # If only inverse is mapped, verify it matches the inverse of some image
+            if images[g**-1]**-1 not in images.values():
+                return False
+
+    # Verify that the images preserve the group relations
+    for rel in rels:
+        if _image(rel) != identity:
+            return False
+    return True

     def _image(r):
         if r.is_identity:
@@ -333,8 +437,17 @@ def _image(r):
             # both indices
             while i < len(r):
                 power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup):
+                    # Handle both regular and inverted generators
+                    gen = r[i]
+                    if gen in gens:
+                        s = domain.generators[gens.index(gen)]
+                    elif gen**-1 in gens:
+                        s = domain.generators[gens.index(gen**-1)]**-1
+                    else:
+                        # Handle case where generator is not directly in gens
+                        # but can be expressed through group operations
+                        s = gen
                 else:
                     s = r[i]
                 if s in images:
--------
