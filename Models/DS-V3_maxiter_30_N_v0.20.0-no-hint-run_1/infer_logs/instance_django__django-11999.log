2025-01-14 15:33:19,757 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_x6mnsb0crikrm8uy_qroup3d3os79ipoo
2025-01-14 15:33:19,760 - INFO - [runtime b015436b-9db2-47d9-b642-39c80aa61e42-7c029276b4d0eab9] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_x6mnsb0crikrm8uy_qroup3d3os79ipoo
2025-01-14 15:33:20,262 - INFO - [runtime b015436b-9db2-47d9-b642-39c80aa61e42-7c029276b4d0eab9] Container started: openhands-runtime-b015436b-9db2-47d9-b642-39c80aa61e42-7c029276b4d0eab9. VSCode URL: None
2025-01-14 15:33:20,262 - INFO - [runtime b015436b-9db2-47d9-b642-39c80aa61e42-7c029276b4d0eab9] Waiting for client to become ready at http://localhost:31766...
2025-01-14 15:34:40,662 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_x6mnsb0crikrm8uy_qroup3d3os79ipoo
2025-01-14 15:34:40,665 - INFO - [runtime 27ad5133-463b-4eea-a36b-7a4e548068db-0fe573acad3a51b8] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_x6mnsb0crikrm8uy_qroup3d3os79ipoo
2025-01-14 15:34:41,640 - INFO - [runtime 27ad5133-463b-4eea-a36b-7a4e548068db-0fe573acad3a51b8] Container started: openhands-runtime-27ad5133-463b-4eea-a36b-7a4e548068db-0fe573acad3a51b8. VSCode URL: None
2025-01-14 15:34:41,640 - INFO - [runtime 27ad5133-463b-4eea-a36b-7a4e548068db-0fe573acad3a51b8] Waiting for client to become ready at http://localhost:31249...
2025-01-14 15:35:09,755 - INFO - [runtime 27ad5133-463b-4eea-a36b-7a4e548068db-0fe573acad3a51b8] Runtime is ready.
2025-01-14 15:35:10,423 - INFO - ------------------------------
2025-01-14 15:35:10,424 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 15:35:10,424 - INFO - ------------------------------
2025-01-14 15:35:10,424 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-11999' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 15:35:11,050 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:11,050 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 15:35:11,676 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:11,676 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 15:35:12,302 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:12,310 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 15:35:12,934 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-11999
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:12,934 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 15:35:13,557 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:13,557 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 15:35:13,557 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 15:35:18,235 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:18,235 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.1
2025-01-14 15:35:18,881 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:18,882 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 15:35:20,015 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 8463390527 Refs #27808 -- Added test for saving nested ArrayField with nullable base field.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:20,016 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 15:35:20,644 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:20,644 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 15:35:21,297 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:35:21,297 - INFO - ------------------------------
2025-01-14 15:35:21,297 - INFO - END Runtime Initialization Fn
2025-01-14 15:35:21,297 - INFO - ------------------------------
2025-01-14 15:35:21,299 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-14 15:35:21,321 - INFO - [runtime 27ad5133-463b-4eea-a36b-7a4e548068db-0fe573acad3a51b8] Found 0 local microagents.
2025-01-14 15:35:21,324 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 15:35:21,326 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 15:35:24,915 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 15:35:33,996 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 15:35:39,559 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 15:35:44,883 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 15:35:48,985 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 15:35:58,405 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 15:36:03,557 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 15:36:09,385 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 15:36:13,941 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 15:36:20,739 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 15:36:25,415 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 15:36:30,949 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 15:36:36,952 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 15:36:42,684 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 15:36:48,070 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 15:36:56,365 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 15:37:01,041 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 15:37:10,195 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 15:37:14,834 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 15:37:23,941 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 15:37:28,724 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 15:37:34,047 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 15:37:38,029 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 15:37:51,474 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 15:37:56,471 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 15:38:08,054 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 15:38:14,331 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 15:38:24,875 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 15:38:30,174 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 15:38:36,002 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 15:38:36,003 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 15:38:36,004 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 15:38:36,004 - WARNING - Stopping agent due to traffic control
2025-01-14 15:38:36,004 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 15:38:36,519 - INFO - ------------------------------
2025-01-14 15:38:36,519 - INFO - BEGIN Runtime Completion Fn
2025-01-14 15:38:36,519 - INFO - ------------------------------
2025-01-14 15:38:36,519 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.1
2025-01-14 15:38:37,146 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:38:37,146 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 15:38:37,772 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:38:37,772 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 15:38:38,399 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:38:38,399 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 84633905273fc916e3d17883810d9969c03f73c2
2025-01-14 15:38:39,034 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "06681d10fa14",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..36fdbba7bb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -79,6 +79,23 @@ class ModelBase(type):
         if not parents:
             return super_new(cls, name, bases, attrs)

+        # Create the new class
+        new_class = super_new(cls, name, bases, attrs, **kwargs)
+
+        # Check for display methods before adding them
+        for field in new_class._meta.get_fields():
+            if hasattr(field, 'choices') and field.choices:
+                method_name = 'get_%s_display' % field.name
+                if not hasattr(new_class, method_name):
+                    def get_display(self, field=field):
+                        if hasattr(self.__class__, method_name) and \
+                           not isinstance(getattr(self.__class__, method_name), partialmethod):
+                            return getattr(self, method_name)()
+                        return self._get_FIELD_display(field=field)
+                    setattr(new_class, method_name, get_display)
+
+        return new_class
+
         # Create the class.
         module = attrs.pop('__module__')
         new_attrs = {'__module__': module}
@@ -939,6 +956,11 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True

     def _get_FIELD_display(self, field):
+        # Check for custom implementation first
+        method_name = 'get_%s_display' % field.name
+        if hasattr(self.__class__, method_name) and \
+           not isinstance(getattr(self.__class__, method_name), partialmethod):
+            return getattr(self, method_name)()
         value = getattr(self, field.attname)
         # force_str() to coerce lazy strings.
         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..4b85ba1921 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,21 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            method_name = 'get_%s_display' % self.name
+            # Check if the method exists and isn't the default one
+            existing_method = getattr(cls, method_name, None)
+            if existing_method is None or \
+               (hasattr(existing_method, '__func__') and
+                existing_method.__func__.__name__ == '_get_FIELD_display'):
+                def get_display(self):
+                    # Check for custom implementation in the class hierarchy
+                    for base in cls.__mro__:
+                        if method_name in base.__dict__:
+                            method = base.__dict__[method_name]
+                            if not isinstance(method, partialmethod):
+                                return method(self)
+                    return self._get_FIELD_display(field=self)
+                setattr(cls, method_name, get_display)

     def get_filter_kwargs_for_object(self, obj):
         """
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:38:39,034 - INFO - ------------------------------
2025-01-14 15:38:39,035 - INFO - END Runtime Completion Fn
2025-01-14 15:38:39,035 - INFO - ------------------------------
2025-01-14 15:38:39,035 - INFO - Got git diff for instance django__django-11999:
--------
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..36fdbba7bb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -79,6 +79,23 @@ class ModelBase(type):
         if not parents:
             return super_new(cls, name, bases, attrs)

+        # Create the new class
+        new_class = super_new(cls, name, bases, attrs, **kwargs)
+
+        # Check for display methods before adding them
+        for field in new_class._meta.get_fields():
+            if hasattr(field, 'choices') and field.choices:
+                method_name = 'get_%s_display' % field.name
+                if not hasattr(new_class, method_name):
+                    def get_display(self, field=field):
+                        if hasattr(self.__class__, method_name) and \
+                           not isinstance(getattr(self.__class__, method_name), partialmethod):
+                            return getattr(self, method_name)()
+                        return self._get_FIELD_display(field=field)
+                    setattr(new_class, method_name, get_display)
+
+        return new_class
+
         # Create the class.
         module = attrs.pop('__module__')
         new_attrs = {'__module__': module}
@@ -939,6 +956,11 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True

     def _get_FIELD_display(self, field):
+        # Check for custom implementation first
+        method_name = 'get_%s_display' % field.name
+        if hasattr(self.__class__, method_name) and \
+           not isinstance(getattr(self.__class__, method_name), partialmethod):
+            return getattr(self, method_name)()
         value = getattr(self, field.attname)
         # force_str() to coerce lazy strings.
         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..4b85ba1921 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,21 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            method_name = 'get_%s_display' % self.name
+            # Check if the method exists and isn't the default one
+            existing_method = getattr(cls, method_name, None)
+            if existing_method is None or \
+               (hasattr(existing_method, '__func__') and
+                existing_method.__func__.__name__ == '_get_FIELD_display'):
+                def get_display(self):
+                    # Check for custom implementation in the class hierarchy
+                    for base in cls.__mro__:
+                        if method_name in base.__dict__:
+                            method = base.__dict__[method_name]
+                            if not isinstance(method, partialmethod):
+                                return method(self)
+                    return self._get_FIELD_display(field=self)
+                setattr(cls, method_name, get_display)

     def get_filter_kwargs_for_object(self, obj):
         """
--------
2025-01-14 15:38:40,044 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-14672. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 15:38:40,057 - INFO - Logging LLM completions for instance django__django-14672 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-14672
