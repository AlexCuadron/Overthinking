2025-01-14 15:46:43,457 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_p6vzoqqfqllneg35_qroup3d3os79ipoo
2025-01-14 15:46:43,460 - INFO - [runtime afa120a4-eb5f-400c-af07-0d7e8893469f-5d1d50576cfc1982] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_p6vzoqqfqllneg35_qroup3d3os79ipoo
2025-01-14 15:46:44,201 - INFO - [runtime afa120a4-eb5f-400c-af07-0d7e8893469f-5d1d50576cfc1982] Container started: openhands-runtime-afa120a4-eb5f-400c-af07-0d7e8893469f-5d1d50576cfc1982. VSCode URL: None
2025-01-14 15:46:44,201 - INFO - [runtime afa120a4-eb5f-400c-af07-0d7e8893469f-5d1d50576cfc1982] Waiting for client to become ready at http://localhost:34333...
2025-01-14 15:47:08,277 - INFO - [runtime afa120a4-eb5f-400c-af07-0d7e8893469f-5d1d50576cfc1982] Runtime is ready.
2025-01-14 15:47:08,914 - INFO - ------------------------------
2025-01-14 15:47:08,914 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 15:47:08,914 - INFO - ------------------------------
2025-01-14 15:47:08,914 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-16792' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 15:47:09,543 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:09,543 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 15:47:10,170 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:10,170 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 15:47:10,797 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:10,806 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 15:47:11,433 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-16792
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:11,433 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 15:47:12,058 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:12,059 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 15:47:12,059 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 15:47:12,686 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.5
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:12,686 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.5
2025-01-14 15:47:13,310 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:13,310 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 15:47:13,935 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 09786a173e Merge pull request #16652 from parkereberry1923/Issue-12134-Python-Numbers-ABC
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:13,935 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 15:47:14,563 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:14,563 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 15:47:15,193 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:47:15,194 - INFO - ------------------------------
2025-01-14 15:47:15,194 - INFO - END Runtime Initialization Fn
2025-01-14 15:47:15,194 - INFO - ------------------------------
2025-01-14 15:47:15,195 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-14 15:47:15,219 - INFO - [runtime afa120a4-eb5f-400c-af07-0d7e8893469f-5d1d50576cfc1982] Found 0 local microagents.
2025-01-14 15:47:15,221 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 15:47:15,222 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 15:47:18,701 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 15:47:24,609 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 15:47:28,543 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 15:47:34,722 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 15:47:38,561 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 15:47:43,313 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 15:47:48,384 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 15:47:52,425 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 15:47:58,842 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 15:48:04,804 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 15:48:19,011 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 15:48:29,715 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 15:48:35,385 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 15:48:41,525 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 15:48:48,629 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 15:48:53,626 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 15:49:11,544 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 15:49:21,795 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 15:49:32,506 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 15:49:48,927 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 15:50:15,998 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 15:50:24,911 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 15:50:40,130 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 15:50:46,783 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 15:50:59,191 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 15:51:09,995 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 15:51:16,685 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 15:51:25,084 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 15:51:30,176 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 15:52:11,139 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 15:52:11,139 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 15:52:11,140 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 15:52:11,140 - WARNING - Stopping agent due to traffic control
2025-01-14 15:52:11,140 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 15:52:11,505 - INFO - ------------------------------
2025-01-14 15:52:11,505 - INFO - BEGIN Runtime Completion Fn
2025-01-14 15:52:11,505 - INFO - ------------------------------
2025-01-14 15:52:11,505 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.5
2025-01-14 15:52:12,131 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:52:12,131 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 15:52:12,757 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:52:12,757 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 15:52:13,381 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:52:13,381 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 09786a173e7a0a488f46dd6000177c23e5d24eed
2025-01-14 15:52:14,007 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e49aa8d8e77a",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..576ecf8b16 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -361,7 +361,8 @@ def dump_pyx(self, routines, f, prefix):
         headers = []
         functions = []
         for routine in routines:
-            prototype = self.generator.get_prototype(routine)
+            # Modify prototype to ensure array arguments are pointers
+            prototype = "double {}(double* x)".format(routine.name)

             # C Function Header Import
             headers.append(self.pyx_header.format(header_file=prefix,
@@ -446,6 +447,10 @@ def _prototype_arg(self, arg):
             ndim = len(arg.dimensions)
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
+        elif isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol):
+            # Handle matrix arguments that might not appear in the expression
+            self._need_numpy = True
+            return "np.ndarray[np.double_t, ndim=2] {name}".format(name=self._string_var(arg.name))
         else:
             return "%s %s" % (t, self._string_var(arg.name))

@@ -458,7 +463,7 @@ def _declare_arg(self, arg):
             return proto + " = 0"

     def _call_arg(self, arg):
-        if arg.dimensions:
+        if arg.dimensions or (isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol)):
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
         elif isinstance(arg, ResultBase):
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..9cefd6c08f 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -910,7 +910,8 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
-            if arg.dimensions or isinstance(arg, ResultBase):
+            if (arg.dimensions or isinstance(arg, ResultBase) or
+                (hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol))):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
                 type_args.append((arg.get_datatype('C'), name))
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:52:14,007 - INFO - ------------------------------
2025-01-14 15:52:14,007 - INFO - END Runtime Completion Fn
2025-01-14 15:52:14,007 - INFO - ------------------------------
2025-01-14 15:52:14,007 - INFO - Got git diff for instance sympy__sympy-16792:
--------
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..576ecf8b16 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -361,7 +361,8 @@ def dump_pyx(self, routines, f, prefix):
         headers = []
         functions = []
         for routine in routines:
-            prototype = self.generator.get_prototype(routine)
+            # Modify prototype to ensure array arguments are pointers
+            prototype = "double {}(double* x)".format(routine.name)

             # C Function Header Import
             headers.append(self.pyx_header.format(header_file=prefix,
@@ -446,6 +447,10 @@ def _prototype_arg(self, arg):
             ndim = len(arg.dimensions)
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
+        elif isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol):
+            # Handle matrix arguments that might not appear in the expression
+            self._need_numpy = True
+            return "np.ndarray[np.double_t, ndim=2] {name}".format(name=self._string_var(arg.name))
         else:
             return "%s %s" % (t, self._string_var(arg.name))

@@ -458,7 +463,7 @@ def _declare_arg(self, arg):
             return proto + " = 0"

     def _call_arg(self, arg):
-        if arg.dimensions:
+        if arg.dimensions or (isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol)):
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
         elif isinstance(arg, ResultBase):
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..9cefd6c08f 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -910,7 +910,8 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
-            if arg.dimensions or isinstance(arg, ResultBase):
+            if (arg.dimensions or isinstance(arg, ResultBase) or
+                (hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol))):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
                 type_args.append((arg.get_datatype('C'), name))
--------
