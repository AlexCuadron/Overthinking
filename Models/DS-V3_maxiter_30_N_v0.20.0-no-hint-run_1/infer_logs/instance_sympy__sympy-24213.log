2025-01-14 15:49:53,484 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_h32ts9f40qfd3kp5_qroup3d3os79ipoo
2025-01-14 15:49:53,487 - INFO - [runtime dbe4025f-78b4-4953-ae55-43814e61314e-c1b26c3ee7f0f27e] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_h32ts9f40qfd3kp5_qroup3d3os79ipoo
2025-01-14 15:49:54,191 - INFO - [runtime dbe4025f-78b4-4953-ae55-43814e61314e-c1b26c3ee7f0f27e] Container started: openhands-runtime-dbe4025f-78b4-4953-ae55-43814e61314e-c1b26c3ee7f0f27e. VSCode URL: None
2025-01-14 15:49:54,191 - INFO - [runtime dbe4025f-78b4-4953-ae55-43814e61314e-c1b26c3ee7f0f27e] Waiting for client to become ready at http://localhost:38658...
2025-01-14 15:50:18,260 - INFO - [runtime dbe4025f-78b4-4953-ae55-43814e61314e-c1b26c3ee7f0f27e] Runtime is ready.
2025-01-14 15:50:18,899 - INFO - ------------------------------
2025-01-14 15:50:18,899 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 15:50:18,900 - INFO - ------------------------------
2025-01-14 15:50:18,900 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-24213' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 15:50:19,527 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:19,527 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 15:50:20,154 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:20,155 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 15:50:20,782 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:20,791 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 15:50:21,417 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-24213
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:21,417 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 15:50:22,042 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:22,043 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 15:50:22,043 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 15:50:22,669 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:22,669 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2025-01-14 15:50:23,296 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:23,296 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 15:50:23,921 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at e8c22f6eac Merge pull request #24214 from TJStienstra/FixMailmap
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:23,921 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 15:50:24,545 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:24,546 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 15:50:25,170 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:25,170 - INFO - ------------------------------
2025-01-14 15:50:25,170 - INFO - END Runtime Initialization Fn
2025-01-14 15:50:25,170 - INFO - ------------------------------
2025-01-14 15:50:25,171 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-14 15:50:25,184 - INFO - [runtime dbe4025f-78b4-4953-ae55-43814e61314e-c1b26c3ee7f0f27e] Found 0 local microagents.
2025-01-14 15:50:25,186 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 15:50:25,187 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 15:50:28,798 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 15:50:37,157 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 15:50:42,823 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 15:50:47,880 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 15:50:54,743 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 15:50:58,292 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 15:51:02,408 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 15:51:07,256 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 15:51:12,453 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 15:51:21,597 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 15:51:25,483 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 15:51:32,509 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 15:51:44,360 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 15:51:49,813 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 15:51:53,986 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 15:52:05,791 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 15:52:15,672 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 15:52:28,494 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 15:52:32,040 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 15:52:37,430 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 15:52:41,046 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 15:52:50,560 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 15:52:54,966 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 15:53:01,212 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 15:53:05,517 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 15:53:14,347 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 15:53:19,181 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 15:53:25,911 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 15:53:30,397 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 15:53:37,914 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 15:53:37,914 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 15:53:37,915 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 15:53:37,915 - WARNING - Stopping agent due to traffic control
2025-01-14 15:53:37,915 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 15:53:38,379 - INFO - ------------------------------
2025-01-14 15:53:38,379 - INFO - BEGIN Runtime Completion Fn
2025-01-14 15:53:38,379 - INFO - ------------------------------
2025-01-14 15:53:38,379 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2025-01-14 15:53:39,004 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:53:39,004 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 15:53:39,628 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:53:39,629 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 15:53:40,254 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:53:40,254 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached e8c22f6eac7314be8d92590bfff92ced79ee03e2
2025-01-14 15:53:40,880 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "578000ce0aaa",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py
index 0ff7e4fd0a..0dbac744e5 100644
--- a/sympy/physics/units/dimensions.py
+++ b/sympy/physics/units/dimensions.py
@@ -428,6 +428,12 @@ def get_dimensional_dependencies(self, name, mark_dimensionless=False):
     def equivalent_dims(self, dim1, dim2):
         deps1 = self.get_dimensional_dependencies(dim1)
         deps2 = self.get_dimensional_dependencies(dim2)
+
+        # Simplify both dependency sets by removing dimensions with zero exponent
+        deps1 = {k: v for k, v in deps1.items() if v != 0}
+        deps2 = {k: v for k, v in deps2.items() if v != 0}
+
+        # Check if simplified dependencies match
         return deps1 == deps2

     def extend(self, new_base_dims, new_derived_dims=(), new_dim_deps=None):
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5a499237fa 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -130,7 +130,14 @@ def derived_units(self) -> tDict[Dimension, Quantity]:
     def get_dimensional_expr(self, expr):
         from sympy.physics.units import Quantity
         if isinstance(expr, Mul):
-            return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
+            result = S.One
+            for term in expr.args:
+                term_dim = self.get_dimensional_expr(term)
+                if isinstance(term_dim, Dimension):
+                    result = result * term_dim
+                else:
+                    result = result * term_dim
+            return result
         elif isinstance(expr, Pow):
             return self.get_dimensional_expr(expr.base) ** expr.exp
         elif isinstance(expr, Add):
@@ -150,6 +157,8 @@ def get_dimensional_expr(self, expr):
         return S.One

     def _collect_factor_and_dimension(self, expr):
+        print("\nStarting _collect_factor_and_dimension with expr:", expr)
+        print("Type of expr:", type(expr))
         """
         Return tuple with scale factor expression and dimension expression.
         """
@@ -172,14 +181,22 @@ def _collect_factor_and_dimension(self, expr):
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
         elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
-                    raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
+print("Initial dimension:", dim)
+print("Initial dimension dependencies:", self.get_dimension_system().get_dimensional_dependencies(dim))
+for addend in expr.args[1:]:
+    addend_factor, addend_dim = self._collect_factor_and_dimension(addend)
+    print("Addend dimension:", addend_dim)
+    print("Addend dimension dependencies:", self.get_dimension_system().get_dimensional_dependencies(addend_dim))
+                print(f"Comparing dimensions: {dim} vs {addend_dim}")
+print(f"Dependencies of {dim}:", self.get_dimension_system().get_dimensional_dependencies(dim))
+print(f"Dependencies of {addend_dim}:", self.get_dimension_system().get_dimensional_dependencies(addend_dim))
+dim_deps = self.get_dimension_system().get_dimensional_dependencies(dim)
+addend_deps = self.get_dimension_system().get_dimensional_dependencies(addend_dim)
+if dim_deps != addend_deps:
+    raise ValueError(
+        'Dimension of "{}" is {}, '
+        'but it should be equivalent to {}'.format(
+            addend, addend_dim, dim))
                 factor += addend_factor
             return factor, dim
         elif isinstance(expr, Derivative):
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:53:40,881 - INFO - ------------------------------
2025-01-14 15:53:40,881 - INFO - END Runtime Completion Fn
2025-01-14 15:53:40,881 - INFO - ------------------------------
2025-01-14 15:53:40,881 - INFO - Got git diff for instance sympy__sympy-24213:
--------
diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py
index 0ff7e4fd0a..0dbac744e5 100644
--- a/sympy/physics/units/dimensions.py
+++ b/sympy/physics/units/dimensions.py
@@ -428,6 +428,12 @@ def get_dimensional_dependencies(self, name, mark_dimensionless=False):
     def equivalent_dims(self, dim1, dim2):
         deps1 = self.get_dimensional_dependencies(dim1)
         deps2 = self.get_dimensional_dependencies(dim2)
+
+        # Simplify both dependency sets by removing dimensions with zero exponent
+        deps1 = {k: v for k, v in deps1.items() if v != 0}
+        deps2 = {k: v for k, v in deps2.items() if v != 0}
+
+        # Check if simplified dependencies match
         return deps1 == deps2

     def extend(self, new_base_dims, new_derived_dims=(), new_dim_deps=None):
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5a499237fa 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -130,7 +130,14 @@ def derived_units(self) -> tDict[Dimension, Quantity]:
     def get_dimensional_expr(self, expr):
         from sympy.physics.units import Quantity
         if isinstance(expr, Mul):
-            return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
+            result = S.One
+            for term in expr.args:
+                term_dim = self.get_dimensional_expr(term)
+                if isinstance(term_dim, Dimension):
+                    result = result * term_dim
+                else:
+                    result = result * term_dim
+            return result
         elif isinstance(expr, Pow):
             return self.get_dimensional_expr(expr.base) ** expr.exp
         elif isinstance(expr, Add):
@@ -150,6 +157,8 @@ def get_dimensional_expr(self, expr):
         return S.One

     def _collect_factor_and_dimension(self, expr):
+        print("\nStarting _collect_factor_and_dimension with expr:", expr)
+        print("Type of expr:", type(expr))
         """
         Return tuple with scale factor expression and dimension expression.
         """
@@ -172,14 +181,22 @@ def _collect_factor_and_dimension(self, expr):
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
         elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
-                    raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
+print("Initial dimension:", dim)
+print("Initial dimension dependencies:", self.get_dimension_system().get_dimensional_dependencies(dim))
+for addend in expr.args[1:]:
+    addend_factor, addend_dim = self._collect_factor_and_dimension(addend)
+    print("Addend dimension:", addend_dim)
+    print("Addend dimension dependencies:", self.get_dimension_system().get_dimensional_dependencies(addend_dim))
+                print(f"Comparing dimensions: {dim} vs {addend_dim}")
+print(f"Dependencies of {dim}:", self.get_dimension_system().get_dimensional_dependencies(dim))
+print(f"Dependencies of {addend_dim}:", self.get_dimension_system().get_dimensional_dependencies(addend_dim))
+dim_deps = self.get_dimension_system().get_dimensional_dependencies(dim)
+addend_deps = self.get_dimension_system().get_dimensional_dependencies(addend_dim)
+if dim_deps != addend_deps:
+    raise ValueError(
+        'Dimension of "{}" is {}, '
+        'but it should be equivalent to {}'.format(
+            addend, addend_dim, dim))
                 factor += addend_factor
             return factor, dim
         elif isinstance(expr, Derivative):
--------
