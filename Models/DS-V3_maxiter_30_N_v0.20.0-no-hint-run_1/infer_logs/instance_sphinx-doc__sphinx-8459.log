2025-01-15 16:52:48,210 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vksfolyqibpsmnas_qroup3d3os79ipoo
2025-01-15 16:56:23,486 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vksfolyqibpsmnas_qroup3d3os79ipoo] build finished.
2025-01-15 16:56:23,500 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vksfolyqibpsmnas_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_vksfolyqibpsmnas]
2025-01-15 16:56:23,501 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_vksfolyqibpsmnas_qroup3d3os79ipoo, oh_v0.20.0_vksfolyqibpsmnas] built successfully
2025-01-15 16:56:23,508 - INFO - [runtime 91f1098a-c70b-40f5-86e3-9a2d9376e0b5-828dfd3f9e2f3ef4] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vksfolyqibpsmnas_qroup3d3os79ipoo
2025-01-15 16:56:24,452 - INFO - [runtime 91f1098a-c70b-40f5-86e3-9a2d9376e0b5-828dfd3f9e2f3ef4] Container started: openhands-runtime-91f1098a-c70b-40f5-86e3-9a2d9376e0b5-828dfd3f9e2f3ef4. VSCode URL: None
2025-01-15 16:56:24,452 - INFO - [runtime 91f1098a-c70b-40f5-86e3-9a2d9376e0b5-828dfd3f9e2f3ef4] Waiting for client to become ready at http://localhost:32253...
2025-01-15 16:56:48,524 - INFO - [runtime 91f1098a-c70b-40f5-86e3-9a2d9376e0b5-828dfd3f9e2f3ef4] Runtime is ready.
2025-01-15 16:56:49,159 - INFO - ------------------------------
2025-01-15 16:56:49,159 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 16:56:49,160 - INFO - ------------------------------
2025-01-15 16:56:49,160 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sphinx-doc__sphinx-8459' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 16:56:49,787 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:49,787 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 16:56:50,412 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:50,412 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 16:56:51,048 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:51,056 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 16:56:51,680 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sphinx-doc__sphinx-8459
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:51,680 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 16:56:52,305 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:52,307 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 16:56:52,308 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 16:56:53,450 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sphinx-doc__sphinx__3.4
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:53,451 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__3.4
2025-01-15 16:56:53,589 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:53,589 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 16:56:54,215 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 68aa4fb29 Merge pull request #8466 from tk0miya/refactor_autodoc
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:54,216 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 16:56:54,842 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:54,842 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 16:56:55,466 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 16:56:55,466 - INFO - ------------------------------
2025-01-15 16:56:55,467 - INFO - END Runtime Initialization Fn
2025-01-15 16:56:55,467 - INFO - ------------------------------
2025-01-15 16:56:55,468 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-15 16:56:55,481 - INFO - [runtime 91f1098a-c70b-40f5-86e3-9a2d9376e0b5-828dfd3f9e2f3ef4] Found 0 local microagents.
2025-01-15 16:56:55,485 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 16:56:55,487 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 16:57:00,936 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 16:57:07,198 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 16:57:13,092 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 16:57:21,053 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 16:57:47,725 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 16:57:53,533 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-01-15 16:57:53,535 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-01-15 16:57:53,536 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 16:58:01,250 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 16:58:06,680 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 16:58:11,057 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 16:58:23,528 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 16:58:28,805 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 16:58:35,585 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 16:58:39,390 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 16:58:44,641 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 16:58:48,884 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 16:58:54,045 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 16:59:04,206 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 16:59:13,565 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 16:59:17,922 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 16:59:24,123 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 16:59:41,762 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 16:59:46,818 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 16:59:51,243 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 16:59:55,882 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 17:00:12,244 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 17:00:24,181 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 17:00:29,697 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 17:00:51,213 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 17:00:58,241 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 17:01:02,713 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 17:01:02,714 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 17:01:02,714 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 17:01:02,715 - WARNING - Stopping agent due to traffic control
2025-01-15 17:01:02,715 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 17:01:02,737 - INFO - ------------------------------
2025-01-15 17:01:02,737 - INFO - BEGIN Runtime Completion Fn
2025-01-15 17:01:02,737 - INFO - ------------------------------
2025-01-15 17:01:02,738 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__3.4
2025-01-15 17:01:02,864 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:01:02,864 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 17:01:03,492 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:01:03,493 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 17:01:04,121 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:01:04,121 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 68aa4fb29e7dfe521749e1e14f750d7afabb3481
2025-01-15 17:01:04,751 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "4e22eaf2807c",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 70cbc3ba1..3277bda82 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -28,11 +28,44 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
             sig = inspect.signature(obj)
+            type_aliases = getattr(app.config, 'autodoc_type_aliases', {})
+
+            # Get the module name for proper type alias resolution
+            module_name = obj.__module__
+
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    ann = typing.stringify(param.annotation)
+                    # Apply type aliases with module context
+                    for alias, replacement in type_aliases.items():
+                        # Handle both direct matches and fully qualified names
+                        if ann == alias or ann == f"{module_name}.{alias}":
+                            ann = replacement
+                            break
+                        # Handle typing module aliases
+                        if ann == f"typing.{alias}":
+                            ann = replacement
+                            break
+                        # Handle cases where the annotation is the full path
+                        if '.' in replacement and ann.endswith(replacement.split('.')[-1]):
+                            ann = replacement
+                            break
+                    annotation[param.name] = ann
+
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                ann = typing.stringify(sig.return_annotation)
+                # Apply type aliases to return annotation with module context
+                for alias, replacement in type_aliases.items():
+                    if ann == alias or ann == f"{module_name}.{alias}":
+                        ann = replacement
+                        break
+                    if ann == f"typing.{alias}":
+                        ann = replacement
+                        break
+                    if '.' in replacement and ann.endswith(replacement.split('.')[-1]):
+                        ann = replacement
+                        break
+                annotation['return'] = ann
     except (TypeError, ValueError):
         pass

@@ -103,7 +136,21 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
         elif parts[0] == 'rtype':
             arguments['return'] = {'type': True}

+    # Get type aliases from app config
+    type_aliases = getattr(node.document.settings.env.app.config, 'autodoc_type_aliases', {})
+
     for name, annotation in annotations.items():
+        # Apply type aliases if they exist
+        for alias, replacement in type_aliases.items():
+            # Handle both direct matches and stringified type annotations
+            if annotation == alias or annotation == f"typing.{alias}":
+                annotation = replacement
+                break
+            # Handle cases where the annotation is the full path
+            if '.' in replacement and annotation.endswith(replacement.split('.')[-1]):
+                annotation = replacement
+                break
+
         if name == 'return':
             continue

@@ -120,9 +167,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             node += field

     if 'return' in annotations and 'return' not in arguments:
+        # Apply type aliases to return annotation
+        return_annotation = annotations['return']
+        for alias, replacement in type_aliases.items():
+            if return_annotation == alias:
+                return_annotation = replacement
+                break
+
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
+        field += nodes.field_body('', nodes.paragraph('', return_annotation))
         node += field


diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 18649433b..a55c347e9 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -277,12 +277,25 @@ def _restify_py36(cls: Optional["Type"]) -> str:

 def stringify(annotation: Any) -> str:
     """Stringify type annotation object."""
+    # Get type aliases from app config if available
+    try:
+        type_aliases = getattr(annotation, '_app', {}).config.autodoc_type_aliases
+    except AttributeError:
+        type_aliases = {}
+
     if isinstance(annotation, str):
         if annotation.startswith("'") and annotation.endswith("'"):
             # might be a double Forward-ref'ed type.  Go unquoting.
-            return annotation[1:-1]
-        else:
-            return annotation
+            annotation = annotation[1:-1]
+
+        # Check if this string matches a type alias
+        for alias, replacement in type_aliases.items():
+            if annotation == alias or annotation == f"typing.{alias}":
+                return replacement
+            if '.' in replacement and annotation.endswith(replacement.split('.')[-1]):
+                return replacement
+        return annotation
+
     elif isinstance(annotation, TypeVar):
         return annotation.__name__
     elif not annotation:
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:01:04,751 - INFO - ------------------------------
2025-01-15 17:01:04,751 - INFO - END Runtime Completion Fn
2025-01-15 17:01:04,751 - INFO - ------------------------------
2025-01-15 17:01:04,751 - INFO - Got git diff for instance sphinx-doc__sphinx-8459:
--------
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 70cbc3ba1..3277bda82 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -28,11 +28,44 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
             sig = inspect.signature(obj)
+            type_aliases = getattr(app.config, 'autodoc_type_aliases', {})
+
+            # Get the module name for proper type alias resolution
+            module_name = obj.__module__
+
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    ann = typing.stringify(param.annotation)
+                    # Apply type aliases with module context
+                    for alias, replacement in type_aliases.items():
+                        # Handle both direct matches and fully qualified names
+                        if ann == alias or ann == f"{module_name}.{alias}":
+                            ann = replacement
+                            break
+                        # Handle typing module aliases
+                        if ann == f"typing.{alias}":
+                            ann = replacement
+                            break
+                        # Handle cases where the annotation is the full path
+                        if '.' in replacement and ann.endswith(replacement.split('.')[-1]):
+                            ann = replacement
+                            break
+                    annotation[param.name] = ann
+
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                ann = typing.stringify(sig.return_annotation)
+                # Apply type aliases to return annotation with module context
+                for alias, replacement in type_aliases.items():
+                    if ann == alias or ann == f"{module_name}.{alias}":
+                        ann = replacement
+                        break
+                    if ann == f"typing.{alias}":
+                        ann = replacement
+                        break
+                    if '.' in replacement and ann.endswith(replacement.split('.')[-1]):
+                        ann = replacement
+                        break
+                annotation['return'] = ann
     except (TypeError, ValueError):
         pass

@@ -103,7 +136,21 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
         elif parts[0] == 'rtype':
             arguments['return'] = {'type': True}

+    # Get type aliases from app config
+    type_aliases = getattr(node.document.settings.env.app.config, 'autodoc_type_aliases', {})
+
     for name, annotation in annotations.items():
+        # Apply type aliases if they exist
+        for alias, replacement in type_aliases.items():
+            # Handle both direct matches and stringified type annotations
+            if annotation == alias or annotation == f"typing.{alias}":
+                annotation = replacement
+                break
+            # Handle cases where the annotation is the full path
+            if '.' in replacement and annotation.endswith(replacement.split('.')[-1]):
+                annotation = replacement
+                break
+
         if name == 'return':
             continue

@@ -120,9 +167,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             node += field

     if 'return' in annotations and 'return' not in arguments:
+        # Apply type aliases to return annotation
+        return_annotation = annotations['return']
+        for alias, replacement in type_aliases.items():
+            if return_annotation == alias:
+                return_annotation = replacement
+                break
+
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
+        field += nodes.field_body('', nodes.paragraph('', return_annotation))
         node += field


diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 18649433b..a55c347e9 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -277,12 +277,25 @@ def _restify_py36(cls: Optional["Type"]) -> str:

 def stringify(annotation: Any) -> str:
     """Stringify type annotation object."""
+    # Get type aliases from app config if available
+    try:
+        type_aliases = getattr(annotation, '_app', {}).config.autodoc_type_aliases
+    except AttributeError:
+        type_aliases = {}
+
     if isinstance(annotation, str):
         if annotation.startswith("'") and annotation.endswith("'"):
             # might be a double Forward-ref'ed type.  Go unquoting.
-            return annotation[1:-1]
-        else:
-            return annotation
+            annotation = annotation[1:-1]
+
+        # Check if this string matches a type alias
+        for alias, replacement in type_aliases.items():
+            if annotation == alias or annotation == f"typing.{alias}":
+                return replacement
+            if '.' in replacement and annotation.endswith(replacement.split('.')[-1]):
+                return replacement
+        return annotation
+
     elif isinstance(annotation, TypeVar):
         return annotation.__name__
     elif not annotation:
--------
2025-01-15 17:01:10,377 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sympy_s_sympy-14531. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 17:01:10,377 - INFO - Logging LLM completions for instance sympy__sympy-14531 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sympy__sympy-14531
