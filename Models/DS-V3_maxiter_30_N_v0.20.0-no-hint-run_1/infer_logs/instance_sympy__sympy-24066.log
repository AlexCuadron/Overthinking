2025-01-14 15:49:52,885 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ww98r9350ujwwmvf_qroup3d3os79ipoo
2025-01-14 15:49:52,888 - INFO - [runtime f9a0be9c-1fa8-4ea2-a704-2a9a7457f110-04e2014db3579aae] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ww98r9350ujwwmvf_qroup3d3os79ipoo
2025-01-14 15:49:53,823 - INFO - [runtime f9a0be9c-1fa8-4ea2-a704-2a9a7457f110-04e2014db3579aae] Container started: openhands-runtime-f9a0be9c-1fa8-4ea2-a704-2a9a7457f110-04e2014db3579aae. VSCode URL: None
2025-01-14 15:49:53,824 - INFO - [runtime f9a0be9c-1fa8-4ea2-a704-2a9a7457f110-04e2014db3579aae] Waiting for client to become ready at http://localhost:38469...
2025-01-14 15:50:17,892 - INFO - [runtime f9a0be9c-1fa8-4ea2-a704-2a9a7457f110-04e2014db3579aae] Runtime is ready.
2025-01-14 15:50:18,028 - INFO - ------------------------------
2025-01-14 15:50:18,028 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 15:50:18,028 - INFO - ------------------------------
2025-01-14 15:50:18,028 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-24066' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 15:50:18,656 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:18,656 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 15:50:19,285 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:19,285 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 15:50:19,911 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:19,919 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 15:50:20,545 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-24066
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:20,548 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 15:50:21,174 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:21,174 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 15:50:21,174 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 15:50:21,800 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:21,800 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2025-01-14 15:50:22,424 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:22,424 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 15:50:23,050 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 514579c655 Merge pull request #24076 from smichr/pwe
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:23,051 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 15:50:23,677 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:23,678 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 15:50:24,308 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:24,308 - INFO - ------------------------------
2025-01-14 15:50:24,308 - INFO - END Runtime Initialization Fn
2025-01-14 15:50:24,308 - INFO - ------------------------------
2025-01-14 15:50:24,310 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-14 15:50:24,327 - INFO - [runtime f9a0be9c-1fa8-4ea2-a704-2a9a7457f110-04e2014db3579aae] Found 0 local microagents.
2025-01-14 15:50:24,329 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 15:50:24,330 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 15:50:28,522 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 15:50:36,222 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 15:50:41,001 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 15:50:45,586 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 15:50:56,124 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 15:50:59,905 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 15:51:12,368 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 15:51:17,190 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 15:51:28,489 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 15:51:44,971 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 15:51:57,917 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 15:52:02,715 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 15:52:15,211 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 15:52:24,909 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 15:52:41,083 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 15:52:56,131 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 15:53:01,596 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 15:53:14,984 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 15:53:30,113 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 15:53:39,412 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 15:53:43,709 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 15:53:56,577 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 15:54:12,893 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 15:54:22,461 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 15:54:48,116 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 15:54:57,369 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 15:55:06,281 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 15:55:06,281 - WARNING - Action, Observation loop detected
2025-01-14 15:55:06,281 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 15:55:06,281 - ERROR - AgentStuckInLoopError: Agent got stuck in a loop
2025-01-14 15:55:06,282 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 15:55:06,600 - INFO - ------------------------------
2025-01-14 15:55:06,600 - INFO - BEGIN Runtime Completion Fn
2025-01-14 15:55:06,600 - INFO - ------------------------------
2025-01-14 15:55:06,600 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2025-01-14 15:55:07,228 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:55:07,228 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 15:55:07,854 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:55:07,854 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 15:55:08,481 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:55:08,482 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 514579c655bf22e2af14f0743376ae1d7befe345
2025-01-14 15:55:09,107 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "04c22bdcaa84",
  "working_dir": "/workspace/sympy__sympy__1.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..6d96c959f5 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -171,17 +171,31 @@ def _collect_factor_and_dimension(self, expr):
                 exp_dim = 1
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
         elif isinstance(expr, Add):
-            factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+            # Handle addition with special case for dimensionless terms
+            factors = []
+            dims = []
+            for term in expr.args:
+                factor, dim = self._collect_factor_and_dimension(term)
+                factors.append(factor)
+                dims.append(dim)
+
+            # If any term is dimensionless, result is dimensionless
+            if any(self.get_dimension_system().is_dimensionless(d) for d in dims):
+                # Convert all terms to dimensionless if necessary
+                for i in range(len(factors)):
+                    if not self.get_dimension_system().is_dimensionless(dims[i]):
+                        factors[i] = factors[i] / dims[i].scale_factor
+                        dims[i] = Dimension(1)
+                return sum(factors), Dimension(1)
+
+            # Otherwise, check that all dimensions are equal
+            first_dim = dims[0]
+            for dim in dims[1:]:
+                if dim != first_dim:
                     raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
-                factor += addend_factor
-            return factor, dim
+                        'Dimension mismatch in addition: "{}" has dimension {}, '
+                        'but expected {}'.format(expr, dim, first_dim))
+            return sum(factors), first_dim
         elif isinstance(expr, Derivative):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for independent, count in expr.variable_count:
@@ -190,10 +204,19 @@ def _collect_factor_and_dimension(self, expr):
                 dim /= idim**count
             return factor, dim
         elif isinstance(expr, Function):
-            fds = [self._collect_factor_and_dimension(
-                arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            if isinstance(expr, exp):
+                # Exponential functions are always dimensionless
+                arg_factor, arg_dim = self._collect_factor_and_dimension(expr.args[0])
+                if not self.get_dimension_system().is_dimensionless(arg_dim):
+                    # Convert argument to dimensionless by dividing by its own dimension
+                    arg_factor = arg_factor / arg_dim.scale_factor
+                    arg_dim = Dimension(1)
+                return expr.func(arg_factor), Dimension(1)
+            else:
+                fds = [self._collect_factor_and_dimension(
+                    arg) for arg in expr.args]
+                return (expr.func(*(f[0] for f in fds)),
+                        *(d[1] for d in fds))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:55:09,107 - INFO - ------------------------------
2025-01-14 15:55:09,107 - INFO - END Runtime Completion Fn
2025-01-14 15:55:09,107 - INFO - ------------------------------
2025-01-14 15:55:09,107 - INFO - Got git diff for instance sympy__sympy-24066:
--------
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..6d96c959f5 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -171,17 +171,31 @@ def _collect_factor_and_dimension(self, expr):
                 exp_dim = 1
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
         elif isinstance(expr, Add):
-            factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
+            # Handle addition with special case for dimensionless terms
+            factors = []
+            dims = []
+            for term in expr.args:
+                factor, dim = self._collect_factor_and_dimension(term)
+                factors.append(factor)
+                dims.append(dim)
+
+            # If any term is dimensionless, result is dimensionless
+            if any(self.get_dimension_system().is_dimensionless(d) for d in dims):
+                # Convert all terms to dimensionless if necessary
+                for i in range(len(factors)):
+                    if not self.get_dimension_system().is_dimensionless(dims[i]):
+                        factors[i] = factors[i] / dims[i].scale_factor
+                        dims[i] = Dimension(1)
+                return sum(factors), Dimension(1)
+
+            # Otherwise, check that all dimensions are equal
+            first_dim = dims[0]
+            for dim in dims[1:]:
+                if dim != first_dim:
                     raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
-                factor += addend_factor
-            return factor, dim
+                        'Dimension mismatch in addition: "{}" has dimension {}, '
+                        'but expected {}'.format(expr, dim, first_dim))
+            return sum(factors), first_dim
         elif isinstance(expr, Derivative):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for independent, count in expr.variable_count:
@@ -190,10 +204,19 @@ def _collect_factor_and_dimension(self, expr):
                 dim /= idim**count
             return factor, dim
         elif isinstance(expr, Function):
-            fds = [self._collect_factor_and_dimension(
-                arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            if isinstance(expr, exp):
+                # Exponential functions are always dimensionless
+                arg_factor, arg_dim = self._collect_factor_and_dimension(expr.args[0])
+                if not self.get_dimension_system().is_dimensionless(arg_dim):
+                    # Convert argument to dimensionless by dividing by its own dimension
+                    arg_factor = arg_factor / arg_dim.scale_factor
+                    arg_dim = Dimension(1)
+                return expr.func(arg_factor), Dimension(1)
+            else:
+                fds = [self._collect_factor_and_dimension(
+                    arg) for arg in expr.args]
+                return (expr.func(*(f[0] for f in fds)),
+                        *(d[1] for d in fds))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
--------
