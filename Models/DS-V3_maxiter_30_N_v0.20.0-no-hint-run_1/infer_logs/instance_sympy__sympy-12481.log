2025-01-14 15:45:41,028 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rp2d88zokqpe0wjw_qroup3d3os79ipoo
2025-01-14 15:45:41,032 - INFO - [runtime 6895d2e0-683d-43d3-a42f-81aebdf367ce-fa244f3bd97820c4] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rp2d88zokqpe0wjw_qroup3d3os79ipoo
2025-01-14 15:45:41,734 - INFO - [runtime 6895d2e0-683d-43d3-a42f-81aebdf367ce-fa244f3bd97820c4] Container started: openhands-runtime-6895d2e0-683d-43d3-a42f-81aebdf367ce-fa244f3bd97820c4. VSCode URL: None
2025-01-14 15:45:41,734 - INFO - [runtime 6895d2e0-683d-43d3-a42f-81aebdf367ce-fa244f3bd97820c4] Waiting for client to become ready at http://localhost:33422...
2025-01-14 15:46:05,832 - INFO - [runtime 6895d2e0-683d-43d3-a42f-81aebdf367ce-fa244f3bd97820c4] Runtime is ready.
2025-01-14 15:46:06,501 - INFO - ------------------------------
2025-01-14 15:46:06,501 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 15:46:06,501 - INFO - ------------------------------
2025-01-14 15:46:06,501 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-12481' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 15:46:06,683 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:06,684 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 15:46:07,342 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:07,342 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 15:46:07,981 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:07,993 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 15:46:08,622 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-12481
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:08,623 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 15:46:09,248 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:09,249 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 15:46:09,249 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 15:46:10,381 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:10,381 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.0
2025-01-14 15:46:11,005 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:11,006 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 15:46:11,634 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at c807dfe756 Merge pull request #12455 from valglad/pcoset_table
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:11,634 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 15:46:12,262 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:12,262 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 15:46:12,889 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:46:12,889 - INFO - ------------------------------
2025-01-14 15:46:12,889 - INFO - END Runtime Initialization Fn
2025-01-14 15:46:12,889 - INFO - ------------------------------
2025-01-14 15:46:12,890 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-14 15:46:12,904 - INFO - [runtime 6895d2e0-683d-43d3-a42f-81aebdf367ce-fa244f3bd97820c4] Found 0 local microagents.
2025-01-14 15:46:12,905 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 15:46:12,907 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 15:46:16,273 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 15:46:22,501 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 15:46:26,462 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 15:46:30,185 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 15:46:35,393 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 15:46:39,170 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 15:46:47,373 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 15:46:51,396 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 15:46:56,222 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 15:47:05,179 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 15:47:18,256 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 15:47:22,473 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 15:47:27,598 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 15:47:32,593 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 15:47:38,986 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 15:47:45,307 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 15:47:49,968 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 15:48:07,382 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 15:48:11,459 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 15:48:27,523 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 15:48:32,579 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 15:48:55,497 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 15:49:16,408 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 15:49:27,837 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 15:49:40,148 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 15:49:48,554 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 15:50:18,511 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 15:50:23,130 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 15:50:28,584 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 15:50:46,428 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 15:50:46,429 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 15:50:46,429 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 15:50:46,430 - WARNING - Stopping agent due to traffic control
2025-01-14 15:50:46,430 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 15:50:47,177 - INFO - ------------------------------
2025-01-14 15:50:47,177 - INFO - BEGIN Runtime Completion Fn
2025-01-14 15:50:47,177 - INFO - ------------------------------
2025-01-14 15:50:47,177 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.0
2025-01-14 15:50:47,812 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:47,813 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 15:50:48,468 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:48,468 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 15:50:49,115 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:49,115 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached c807dfe7569692cad24f02a08477b70c1679a4dd
2025-01-14 15:50:49,756 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ecc35efd963f",
  "working_dir": "/workspace/sympy__sympy__1.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..81324cbef5 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -337,9 +337,19 @@ def __call__(self, *other):

         """
         rv = Cycle(*other)
-        for k, v in zip(list(self.keys()), [rv[self[k]] for k in self.keys()]):
-            rv[k] = v
-        return rv
+        # Create a copy of self to avoid modifying original
+        self_copy = self.copy()
+        # Apply cycles sequentially
+        for k in self_copy:
+            if k in rv:
+                self_copy[k] = rv[self_copy[k]]
+            else:
+                self_copy[k] = rv[k] if k in rv else self_copy[k]
+        # Merge the cycles
+        for k, v in rv.items():
+            if k not in self_copy:
+                self_copy[k] = v
+        return self_copy

     def list(self, size=None):
         """Return the cycles as an explicit list starting from 0 up
@@ -447,8 +457,7 @@ def __init__(self, *args):
         args = [as_int(a) for a in args]
         if any(i < 0 for i in args):
             raise ValueError('negative integers are not allowed in a cycle.')
-        if has_dups(args):
-            raise ValueError('All elements must be unique in a cycle.')
+        # Allow duplicates and process sequentially
         for i in range(-len(args), 0):
             self[args[i]] = args[i + 1]

@@ -859,7 +868,13 @@ def __new__(cls, *args, **kwargs):
         if not args:  # a
             return _af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            # Handle non-disjoint cycles by applying them sequentially
+            cycles = [Cycle(c) for c in args]
+            result = list(range(max([c.size for c in cycles] + [size or 0])))
+            for cycle in cycles:
+                for i, val in enumerate(cycle.list()):
+                    result[i] = val
+            return _af_new(result)
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
@@ -895,13 +910,19 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.

         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
-        temp = set(temp)
+        if not is_cycle and has_dups(temp):
+            raise ValueError('there were repeated elements.')
+        # For cycle notation, process cycles sequentially
+        if is_cycle:
+            cycles = args
+            result = list(range(max([max(c) for c in cycles] + [0]) + 1))
+            for cycle in cycles:
+                for i in range(len(cycle) - 1):
+                    result[cycle[i]] = cycle[i + 1]
+                result[cycle[-1]] = cycle[0]
+            temp = result
+        else:
+            temp = set(temp)

         if not is_cycle and \
                 any(i not in temp for i in range(len(temp))):
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 15:50:49,757 - INFO - ------------------------------
2025-01-14 15:50:49,757 - INFO - END Runtime Completion Fn
2025-01-14 15:50:49,757 - INFO - ------------------------------
2025-01-14 15:50:49,757 - INFO - Got git diff for instance sympy__sympy-12481:
--------
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..81324cbef5 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -337,9 +337,19 @@ def __call__(self, *other):

         """
         rv = Cycle(*other)
-        for k, v in zip(list(self.keys()), [rv[self[k]] for k in self.keys()]):
-            rv[k] = v
-        return rv
+        # Create a copy of self to avoid modifying original
+        self_copy = self.copy()
+        # Apply cycles sequentially
+        for k in self_copy:
+            if k in rv:
+                self_copy[k] = rv[self_copy[k]]
+            else:
+                self_copy[k] = rv[k] if k in rv else self_copy[k]
+        # Merge the cycles
+        for k, v in rv.items():
+            if k not in self_copy:
+                self_copy[k] = v
+        return self_copy

     def list(self, size=None):
         """Return the cycles as an explicit list starting from 0 up
@@ -447,8 +457,7 @@ def __init__(self, *args):
         args = [as_int(a) for a in args]
         if any(i < 0 for i in args):
             raise ValueError('negative integers are not allowed in a cycle.')
-        if has_dups(args):
-            raise ValueError('All elements must be unique in a cycle.')
+        # Allow duplicates and process sequentially
         for i in range(-len(args), 0):
             self[args[i]] = args[i + 1]

@@ -859,7 +868,13 @@ def __new__(cls, *args, **kwargs):
         if not args:  # a
             return _af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            # Handle non-disjoint cycles by applying them sequentially
+            cycles = [Cycle(c) for c in args]
+            result = list(range(max([c.size for c in cycles] + [size or 0])))
+            for cycle in cycles:
+                for i, val in enumerate(cycle.list()):
+                    result[i] = val
+            return _af_new(result)
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
@@ -895,13 +910,19 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.

         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
-        temp = set(temp)
+        if not is_cycle and has_dups(temp):
+            raise ValueError('there were repeated elements.')
+        # For cycle notation, process cycles sequentially
+        if is_cycle:
+            cycles = args
+            result = list(range(max([max(c) for c in cycles] + [0]) + 1))
+            for cycle in cycles:
+                for i in range(len(cycle) - 1):
+                    result[cycle[i]] = cycle[i + 1]
+                result[cycle[-1]] = cycle[0]
+            temp = result
+        else:
+            temp = set(temp)

         if not is_cycle and \
                 any(i not in temp for i in range(len(temp))):
--------
