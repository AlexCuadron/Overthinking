2025-01-15 17:00:55,556 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_tzkmh60cpeo5453k_qroup3d3os79ipoo
2025-01-15 17:03:54,304 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_tzkmh60cpeo5453k_qroup3d3os79ipoo] build finished.
2025-01-15 17:03:54,320 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_tzkmh60cpeo5453k_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_tzkmh60cpeo5453k]
2025-01-15 17:03:54,323 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_tzkmh60cpeo5453k_qroup3d3os79ipoo, oh_v0.20.0_tzkmh60cpeo5453k] built successfully
2025-01-15 17:03:54,332 - INFO - [runtime 1197a98b-3d8a-426d-ab01-bc801c795cd3-26259c6299f7fdb4] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_tzkmh60cpeo5453k_qroup3d3os79ipoo
2025-01-15 17:03:55,093 - INFO - [runtime 1197a98b-3d8a-426d-ab01-bc801c795cd3-26259c6299f7fdb4] Container started: openhands-runtime-1197a98b-3d8a-426d-ab01-bc801c795cd3-26259c6299f7fdb4. VSCode URL: None
2025-01-15 17:03:55,093 - INFO - [runtime 1197a98b-3d8a-426d-ab01-bc801c795cd3-26259c6299f7fdb4] Waiting for client to become ready at http://localhost:30728...
2025-01-15 17:04:29,186 - INFO - [runtime 1197a98b-3d8a-426d-ab01-bc801c795cd3-26259c6299f7fdb4] Runtime is ready.
2025-01-15 17:04:29,844 - INFO - ------------------------------
2025-01-15 17:04:29,844 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 17:04:29,845 - INFO - ------------------------------
2025-01-15 17:04:29,845 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-13974' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 17:04:30,486 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:30,487 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 17:04:31,117 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:31,117 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 17:04:31,788 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:31,797 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 17:04:32,426 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-13974
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:32,426 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 17:04:33,056 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:33,056 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 17:04:33,056 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 17:04:34,190 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:34,190 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.1
2025-01-15 17:04:34,818 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:34,818 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 17:04:35,445 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 84c125972a Merge pull request #13965 from normalhuman/unpolarify_polylog
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:35,445 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 17:04:36,110 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:36,110 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 17:04:36,760 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:04:36,761 - INFO - ------------------------------
2025-01-15 17:04:36,761 - INFO - END Runtime Initialization Fn
2025-01-15 17:04:36,761 - INFO - ------------------------------
2025-01-15 17:04:36,762 - INFO - Function calling not enabled for model deepseek/deepseek-chat. Mocking function calling via prompting.
2025-01-15 17:04:36,775 - INFO - [runtime 1197a98b-3d8a-426d-ab01-bc801c795cd3-26259c6299f7fdb4] Found 0 local microagents.
2025-01-15 17:04:36,776 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 17:04:36,777 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 17:04:40,543 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 17:04:48,260 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 17:04:56,490 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 17:05:00,370 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 17:05:33,893 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 17:05:38,288 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 17:06:12,067 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 17:06:16,769 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 17:06:41,044 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 17:06:45,589 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 17:07:23,627 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 17:07:28,937 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 17:07:54,330 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 17:07:59,597 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 17:08:37,734 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 17:08:43,316 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 17:09:20,064 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 17:09:26,621 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 17:10:06,079 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 17:10:13,690 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 17:10:41,947 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 17:10:50,621 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 17:11:30,479 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 17:12:12,491 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 17:12:19,505 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 17:13:12,894 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 17:13:20,186 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 17:14:01,385 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 17:14:09,033 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 17:14:40,143 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 17:14:40,143 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 17:14:40,144 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 17:14:40,144 - WARNING - Stopping agent due to traffic control
2025-01-15 17:14:40,144 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 17:14:40,369 - INFO - ------------------------------
2025-01-15 17:14:40,369 - INFO - BEGIN Runtime Completion Fn
2025-01-15 17:14:40,369 - INFO - ------------------------------
2025-01-15 17:14:40,369 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.1
2025-01-15 17:14:40,992 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:14:40,992 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 17:14:41,615 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:14:41,615 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 17:14:42,239 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:14:42,240 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 84c125972ad535b2dfb245f8d311d347b45e5b8a
2025-01-15 17:14:42,864 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b31635d8a1dc",
  "working_dir": "/workspace/sympy__sympy__1.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..b0d3fb5342 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -129,6 +129,50 @@ def __new__(cls, *args):
             tp = Expr.__new__(cls, *new_args)
             return c_part * tp

+    def _eval_power(self, exp):
+        """Handle power expressions for TensorProduct."""
+        if exp == 1:
+            return self
+        return TensorProduct(*[arg**exp for arg in self.args])
+
+    def _eval_expand_tensorproduct(self, **hints):
+        """Distribute TensorProducts across addition."""
+        args = self.args
+        add_args = []
+        stop = False
+        for i in range(len(args)):
+            if isinstance(args[i], Add):
+                for aa in args[i].args:
+                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
+                    if isinstance(tp, TensorProduct):
+                        tp = tp._eval_expand_tensorproduct()
+                    add_args.append(tp)
+                break
+
+        if add_args:
+            return Add(*add_args)
+        else:
+            return self
+
+    def _eval_expand_tensorproduct(self, **hints):
+        """Distribute TensorProducts across addition."""
+        args = self.args
+        add_args = []
+        stop = False
+        for i in range(len(args)):
+            if isinstance(args[i], Add):
+                for aa in args[i].args:
+                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
+                    if isinstance(tp, TensorProduct):
+                        tp = tp._eval_expand_tensorproduct()
+                    add_args.append(tp)
+                break
+
+        if add_args:
+            return Add(*add_args)
+        else:
+            return self
+
     @classmethod
     def flatten(cls, args):
         # TODO: disallow nested TensorProducts.
@@ -287,7 +331,7 @@ def tensor_product_simp_Mul(e):
     =======

     e : Expr
-        A ``TensorProduct`` of ``Mul``s.
+        A ``TensorProduct`` of ``Muls``.

     Examples
     ========
@@ -309,9 +353,6 @@ def tensor_product_simp_Mul(e):
         (A*C)x(B*D)

     """
-    # TODO: This won't work with Muls that have other composites of
-    # TensorProducts, like an Add, Pow, Commutator, etc.
-    # TODO: This only works for the equivalent of single Qbit gates.
     if not isinstance(e, Mul):
         return e
     c_part, nc_part = e.args_cnc()
@@ -319,13 +360,29 @@ def tensor_product_simp_Mul(e):
     if n_nc == 0 or n_nc == 1:
         return e
     elif e.has(TensorProduct):
+        # Handle power expressions
+        if any(isinstance(arg, Pow) and isinstance(arg.base, TensorProduct) for arg in nc_part):
+            base = None
+            exponent = None
+            for arg in nc_part:
+                if isinstance(arg, Pow) and isinstance(arg.base, TensorProduct):
+                    if base is None:
+                        base = arg.base
+                        exponent = arg.exp
+                    else:
+                        if base != arg.base:
+                            return e
+                        exponent += arg.exp
+            if base is not None:
+                return Mul(*c_part) * TensorProduct(*[arg**exponent for arg in base.args])
+
+        # Handle regular tensor products
         current = nc_part[0]
         if not isinstance(current, TensorProduct):
             raise TypeError('TensorProduct expected, got: %r' % current)
         n_terms = len(current.args)
         new_args = list(current.args)
         for next in nc_part[1:]:
-            # TODO: check the hilbert spaces of next and current here.
             if isinstance(next, TensorProduct):
                 if n_terms != len(next.args):
                     raise QuantumError(
@@ -334,9 +391,18 @@ def tensor_product_simp_Mul(e):
                     )
                 for i in range(len(new_args)):
                     new_args[i] = new_args[i] * next.args[i]
+            elif isinstance(next, Pow) and isinstance(next.base, TensorProduct):
+                if n_terms != len(next.base.args):
+                    raise QuantumError(
+                        'TensorProducts of different lengths: %r and %r' %
+                        (current, next.base)
+                    )
+                for i in range(len(new_args)):
+                    new_args[i] = new_args[i] * next.base.args[i]**next.exp
+            elif isinstance(next, Pow):
+                for i in range(len(new_args)):
+                    new_args[i] = new_args[i] * next
             else:
-                # this won't quite work as we don't want next in the
-                # TensorProduct
                 for i in range(len(new_args)):
                     new_args[i] = new_args[i] * next
             current = next
@@ -382,12 +448,19 @@ def tensor_product_simp(e, **hints):
     if isinstance(e, Add):
         return Add(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, Pow):
-        return tensor_product_simp(e.base) ** e.exp
+        if isinstance(e.base, TensorProduct):
+            return TensorProduct(*[arg**e.exp for arg in e.base.args])
+        base = tensor_product_simp(e.base)
+        if isinstance(base, TensorProduct):
+            return TensorProduct(*[arg**e.exp for arg in base.args])
+        return base ** e.exp
     elif isinstance(e, Mul):
         return tensor_product_simp_Mul(e)
     elif isinstance(e, Commutator):
         return Commutator(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, AntiCommutator):
         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])
+    elif isinstance(e, TensorProduct):
+        return TensorProduct(*[tensor_product_simp(arg) for arg in e.args])
     else:
         return e
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 17:14:42,864 - INFO - ------------------------------
2025-01-15 17:14:42,864 - INFO - END Runtime Completion Fn
2025-01-15 17:14:42,864 - INFO - ------------------------------
2025-01-15 17:14:42,864 - INFO - Got git diff for instance sympy__sympy-13974:
--------
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..b0d3fb5342 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -129,6 +129,50 @@ def __new__(cls, *args):
             tp = Expr.__new__(cls, *new_args)
             return c_part * tp

+    def _eval_power(self, exp):
+        """Handle power expressions for TensorProduct."""
+        if exp == 1:
+            return self
+        return TensorProduct(*[arg**exp for arg in self.args])
+
+    def _eval_expand_tensorproduct(self, **hints):
+        """Distribute TensorProducts across addition."""
+        args = self.args
+        add_args = []
+        stop = False
+        for i in range(len(args)):
+            if isinstance(args[i], Add):
+                for aa in args[i].args:
+                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
+                    if isinstance(tp, TensorProduct):
+                        tp = tp._eval_expand_tensorproduct()
+                    add_args.append(tp)
+                break
+
+        if add_args:
+            return Add(*add_args)
+        else:
+            return self
+
+    def _eval_expand_tensorproduct(self, **hints):
+        """Distribute TensorProducts across addition."""
+        args = self.args
+        add_args = []
+        stop = False
+        for i in range(len(args)):
+            if isinstance(args[i], Add):
+                for aa in args[i].args:
+                    tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
+                    if isinstance(tp, TensorProduct):
+                        tp = tp._eval_expand_tensorproduct()
+                    add_args.append(tp)
+                break
+
+        if add_args:
+            return Add(*add_args)
+        else:
+            return self
+
     @classmethod
     def flatten(cls, args):
         # TODO: disallow nested TensorProducts.
@@ -287,7 +331,7 @@ def tensor_product_simp_Mul(e):
     =======

     e : Expr
-        A ``TensorProduct`` of ``Mul``s.
+        A ``TensorProduct`` of ``Muls``.

     Examples
     ========
@@ -309,9 +353,6 @@ def tensor_product_simp_Mul(e):
         (A*C)x(B*D)

     """
-    # TODO: This won't work with Muls that have other composites of
-    # TensorProducts, like an Add, Pow, Commutator, etc.
-    # TODO: This only works for the equivalent of single Qbit gates.
     if not isinstance(e, Mul):
         return e
     c_part, nc_part = e.args_cnc()
@@ -319,13 +360,29 @@ def tensor_product_simp_Mul(e):
     if n_nc == 0 or n_nc == 1:
         return e
     elif e.has(TensorProduct):
+        # Handle power expressions
+        if any(isinstance(arg, Pow) and isinstance(arg.base, TensorProduct) for arg in nc_part):
+            base = None
+            exponent = None
+            for arg in nc_part:
+                if isinstance(arg, Pow) and isinstance(arg.base, TensorProduct):
+                    if base is None:
+                        base = arg.base
+                        exponent = arg.exp
+                    else:
+                        if base != arg.base:
+                            return e
+                        exponent += arg.exp
+            if base is not None:
+                return Mul(*c_part) * TensorProduct(*[arg**exponent for arg in base.args])
+
+        # Handle regular tensor products
         current = nc_part[0]
         if not isinstance(current, TensorProduct):
             raise TypeError('TensorProduct expected, got: %r' % current)
         n_terms = len(current.args)
         new_args = list(current.args)
         for next in nc_part[1:]:
-            # TODO: check the hilbert spaces of next and current here.
             if isinstance(next, TensorProduct):
                 if n_terms != len(next.args):
                     raise QuantumError(
@@ -334,9 +391,18 @@ def tensor_product_simp_Mul(e):
                     )
                 for i in range(len(new_args)):
                     new_args[i] = new_args[i] * next.args[i]
+            elif isinstance(next, Pow) and isinstance(next.base, TensorProduct):
+                if n_terms != len(next.base.args):
+                    raise QuantumError(
+                        'TensorProducts of different lengths: %r and %r' %
+                        (current, next.base)
+                    )
+                for i in range(len(new_args)):
+                    new_args[i] = new_args[i] * next.base.args[i]**next.exp
+            elif isinstance(next, Pow):
+                for i in range(len(new_args)):
+                    new_args[i] = new_args[i] * next
             else:
-                # this won't quite work as we don't want next in the
-                # TensorProduct
                 for i in range(len(new_args)):
                     new_args[i] = new_args[i] * next
             current = next
@@ -382,12 +448,19 @@ def tensor_product_simp(e, **hints):
     if isinstance(e, Add):
         return Add(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, Pow):
-        return tensor_product_simp(e.base) ** e.exp
+        if isinstance(e.base, TensorProduct):
+            return TensorProduct(*[arg**e.exp for arg in e.base.args])
+        base = tensor_product_simp(e.base)
+        if isinstance(base, TensorProduct):
+            return TensorProduct(*[arg**e.exp for arg in base.args])
+        return base ** e.exp
     elif isinstance(e, Mul):
         return tensor_product_simp_Mul(e)
     elif isinstance(e, Commutator):
         return Commutator(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, AntiCommutator):
         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])
+    elif isinstance(e, TensorProduct):
+        return TensorProduct(*[tensor_product_simp(arg) for arg in e.args])
     else:
         return e
--------
