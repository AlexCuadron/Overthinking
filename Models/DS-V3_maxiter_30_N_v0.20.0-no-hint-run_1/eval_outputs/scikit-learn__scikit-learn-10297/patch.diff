diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index 911c74ae3..dcafa363f 100644
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -1247,10 +1247,147 @@ class RidgeCV(_BaseRidgeCV, RegressorMixin):
 class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
     """Ridge classifier with built-in cross-validation.

+    Parameters
+    ----------
+    alphas : numpy array of shape [n_alphas]
+        Array of alpha values to try.
+        Regularization strength; must be a positive float. Regularization
+        improves the conditioning of the problem and reduces the variance of
+        the estimates. Larger values specify stronger regularization.
+        Alpha corresponds to ``C^-1`` in other linear models such as
+        LogisticRegression or LinearSVC.
+
+    fit_intercept : boolean
+        Whether to calculate the intercept for this model. If set
+        to false, no intercept will be used in calculations
+        (e.g. data is expected to be already centered).
+
+    normalize : boolean, optional, default False
+        This parameter is ignored when ``fit_intercept`` is set to False.
+        If True, the regressors X will be normalized before regression by
+        subtracting the mean and dividing by the l2-norm.
+        If you wish to standardize, please use
+        :class:`sklearn.preprocessing.StandardScaler` before calling ``fit``
+        on an estimator with ``normalize=False``.
+
+    scoring : string, callable or None, optional, default: None
+        A string (see model evaluation documentation) or
+        a scorer callable object / function with signature
+        ``scorer(estimator, X, y)``.
+
+    cv : int, cross-validation generator or an iterable, optional
+        Determines the cross-validation splitting strategy.
+        Possible inputs for cv are:
+        - None, to use the efficient Leave-One-Out cross-validation
+        - integer, to specify the number of folds.
+        - An object to be used as a cross-validation generator.
+        - An iterable yielding train/test splits.
+
+    class_weight : dict or 'balanced', optional
+        Weights associated with classes in the form ``{class_label: weight}``.
+        If not given, all classes are supposed to have weight one.
+
+    store_cv_values : boolean, default=False
+        Flag indicating if the cross-validation values corresponding to
+        each alpha should be stored in the `cv_values_` attribute.
+        This flag is only compatible with `cv=None` (i.e. using
+        Generalized Cross-Validation).
+
+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True, normalize=False,
+                 scoring=None, cv=None, class_weight=None, store_cv_values=False):
+        super(RidgeClassifierCV, self).__init__(
+            alphas=alphas,
+            fit_intercept=fit_intercept,
+            normalize=normalize,
+            scoring=scoring,
+            cv=cv,
+            gcv_mode='auto',
+            store_cv_values=store_cv_values
+        )
+        self.class_weight = class_weight
+
+    Parameters
+    ----------
+    alphas : numpy array of shape [n_alphas]
+        Array of alpha values to try.
+        Regularization strength; must be a positive float. Regularization
+        improves the conditioning of the problem and reduces the variance of
+        the estimates. Larger values specify stronger regularization.
+        Alpha corresponds to ``C^-1`` in other linear models such as
+        LogisticRegression or LinearSVC.
+
+    fit_intercept : boolean
+        Whether to calculate the intercept for this model. If set
+        to false, no intercept will be used in calculations
+        (e.g. data is expected to be already centered).
+
+    normalize : boolean, optional, default False
+        This parameter is ignored when ``fit_intercept`` is set to False.
+        If True, the regressors X will be normalized before regression by
+        subtracting the mean and dividing by the l2-norm.
+        If you wish to standardize, please use
+        :class:`sklearn.preprocessing.StandardScaler` before calling ``fit``
+        on an estimator with ``normalize=False``.
+
+    scoring : string, callable or None, optional, default: None
+        A string (see model evaluation documentation) or
+        a scorer callable object / function with signature
+        ``scorer(estimator, X, y)``.
+
+    cv : int, cross-validation generator or an iterable, optional
+        Determines the cross-validation splitting strategy.
+        Possible inputs for cv are:
+        - None, to use the efficient Leave-One-Out cross-validation
+        - integer, to specify the number of folds.
+        - An object to be used as a cross-validation generator.
+        - An iterable yielding train/test splits.
+
+    class_weight : dict or 'balanced', optional
+        Weights associated with classes in the form ``{class_label: weight}``.
+        If not given, all classes are supposed to have weight one.
+
+    store_cv_values : boolean, default=False
+        Flag indicating if the cross-validation values corresponding to
+        each alpha should be stored in the `cv_values_` attribute.
+        This flag is only compatible with `cv=None` (i.e. using
+        Generalized Cross-Validation).
+
+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True, normalize=False,
+                 scoring=None, cv=None, class_weight=None, store_cv_values=False):
+        super(RidgeClassifierCV, self).__init__(
+            alphas=alphas,
+            fit_intercept=fit_intercept,
+            normalize=normalize,
+            scoring=scoring,
+            cv=cv,
+            gcv_mode='auto',
+            store_cv_values=store_cv_values
+        )
+        self.class_weight = class_weight
+
+    Parameters
+    ----------
+    store_cv_values : boolean, default=False
+        Flag indicating if the cross-validation values corresponding to
+        each alpha should be stored in the `cv_values_` attribute.
+        This flag is only compatible with `cv=None` (i.e. using
+        Generalized Cross-Validation).
+
     By default, it performs Generalized Cross-Validation, which is a form of
     efficient Leave-One-Out cross-validation. Currently, only the n_features >
     n_samples case is handled efficiently.

+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True, normalize=False,
+                 scoring=None, cv=None, class_weight=None, store_cv_values=False):
+        self.alphas = alphas
+        self.fit_intercept = fit_intercept
+        self.normalize = normalize
+        self.scoring = scoring
+        self.cv = cv
+        self.gcv_mode = 'auto'
+        self.store_cv_values = store_cv_values
+        self.class_weight = class_weight
+
     Read more in the :ref:`User Guide <ridge_regression>`.

     Parameters
