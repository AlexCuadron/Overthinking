diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..c111ddb903 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -166,7 +166,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     """

     from sympy.utilities.iterables import (
-        subsets, permute_signs, signed_permutations)
+        subsets, permute_signs, signed_permutations, permutations)

     if isinstance(eq, Eq):
         eq = eq.lhs - eq.rhs
@@ -342,8 +342,71 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
                 permuted_sign = set(lst)
                 final_soln.update(permuted_sign)
             elif do_permute_signs_var:
-                permuted_sign_var = set(signed_permutations(sol))
-                final_soln.update(permuted_sign_var)
+                # Generate all possible signed permutations
+                signed_perms = set(signed_permutations(sol))
+                # Generate all possible variable order permutations
+                var_perms = set(permutations(sol))
+                # Create a mapping from original variable order to new order
+                var_order = {v: i for i, v in enumerate(var)}
+                # Combine both sets while maintaining variable order
+                all_perms = set()
+                for p in var_perms:
+                    # Create a mapping from new order to original order
+                    new_order = {i: var_order[v] for i, v in enumerate(p)}
+                    # Sort the permutation according to original variable order
+                    sorted_p = tuple(p[new_order[i]] for i in range(len(p)))
+                    all_perms.update(signed_permutations(sorted_p))
+                # Add all permutations to final solution
+                final_soln.update(all_perms)
+                # Also add the original solution with its signed permutations
+                final_soln.update(signed_permutations(sol))
+                # Add all variable order permutations with their signed permutations
+                for p in var_perms:
+                    final_soln.update(signed_permutations(p))
+                # Ensure all permutations are considered regardless of symbol order
+                if len(var_t) == 2:
+                    # For two variables, create all permutations
+                    permuted = set(permutations(sol))
+                    # Add signed permutations
+                    all_perms = set()
+                    for p in permuted:
+                        all_perms.update(signed_permutations(p))
+                    # Also add the original solution with its signed permutations
+                    all_perms.update(signed_permutations(sol))
+                    final_soln.update(all_perms)
+                # Ensure all permutations are considered regardless of symbol order
+                if len(var_t) == 2:
+                    # For two variables, create all permutations
+                    permuted = set(permutations(sol))
+                    # Add signed permutations
+                    all_perms = set()
+                    for p in permuted:
+                        all_perms.update(signed_permutations(p))
+                    # Also add the original solution with its signed permutations
+                    all_perms.update(signed_permutations(sol))
+                    final_soln.update(all_perms)
+                # Ensure all permutations are considered regardless of symbol order
+                if len(var_t) == 2:
+                    # For two variables, create all permutations
+                    permuted = set(permutations(sol))
+                    # Add signed permutations
+                    all_perms = set()
+                    for p in permuted:
+                        all_perms.update(signed_permutations(p))
+                    # Also add the original solution with its signed permutations
+                    all_perms.update(signed_permutations(sol))
+                    final_soln.update(all_perms)
+                # Ensure all permutations are considered regardless of symbol order
+                if len(var_t) == 2:
+                    # For two variables, create all permutations
+                    permuted = set(permutations(sol))
+                    # Add signed permutations
+                    all_perms = set()
+                    for p in permuted:
+                        all_perms.update(signed_permutations(p))
+                    # Also add the original solution with its signed permutations
+                    all_perms.update(signed_permutations(sol))
+                    final_soln.update(all_perms)
             else:
                 final_soln.add(sol)
         else:
@@ -370,17 +433,38 @@ def merge_solution(var, var_t, solution):

     solution = iter(solution)
     params = numbered_symbols("n", integer=True, start=1)
-    for v in var:
-        if v in var_t:
-            sol.append(next(solution))
-        else:
-            sol.append(next(params))
+
+    # Create a mapping from var_t to var to maintain order
+    var_order = {v: i for i, v in enumerate(var)}
+    ordered_var_t = sorted(var_t, key=lambda x: var_order[x])
+
+    # Create a mapping from solution to var_t
+    sol_map = dict(zip(ordered_var_t, solution))
+
+    # Create a mapping from var to solution
+    var_sol_map = {v: sol_map[v] if v in var_t else next(params) for v in var}
+
+    # Build solution in the order of var
+    sol = tuple(var_sol_map[v] for v in var)
+
+    # If permute=True, we need to ensure all permutations are considered
+    # regardless of symbol order
+    if len(var_t) == 2:
+        # For two variables, create all permutations
+        permuted = set(permutations(sol))
+        # Add signed permutations
+        all_perms = set()
+        for p in permuted:
+            all_perms.update(signed_permutations(p))
+        # Also add the original solution with its signed permutations
+        all_perms.update(signed_permutations(sol))
+        return all_perms

     for val, symb in zip(sol, var):
         if check_assumptions(val, **symb.assumptions0) is False:
             return tuple()

-    return tuple(sol)
+    return sol


 def diop_solve(eq, param=symbols("t", integer=True)):
