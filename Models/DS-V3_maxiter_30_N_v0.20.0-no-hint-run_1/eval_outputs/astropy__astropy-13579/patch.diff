diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..69729cc8b6 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -251,7 +251,36 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                # For dropped dimensions, calculate the equivalent world coordinate
+                # by projecting through the full transformation matrix
+                # First get the slice positions
+                slice_positions = [0] * self._wcs.pixel_n_dim
+                for ipix in range(self._wcs.pixel_n_dim):
+                    if isinstance(self._slices_pixel[ipix], numbers.Integral):
+                        slice_positions[ipix] = self._slices_pixel[ipix]
+                    elif self._slices_pixel[ipix].start is not None:
+                        slice_positions[ipix] = self._slices_pixel[ipix].start
+
+                # Get the world coordinates at the slice position
+                world_at_slice = self._wcs.pixel_to_world_values(*slice_positions)
+
+                # For dropped dimensions, use the world coordinate value at the slice position
+                # but adjust it based on the input coordinates and the transformation matrix
+                if hasattr(self._wcs, 'wcs'):
+                    # For FITS WCS, use the PC matrix directly
+                    pc_matrix = self._wcs.wcs.pc
+                    if pc_matrix is not None:
+                        # Calculate the adjustment based on the PC matrix
+                        adjustment = 0
+                        for ipix in range(self._wcs.pixel_n_dim):
+                            if ipix in self._pixel_keep:
+                                # Use the input coordinates to adjust the world coordinate
+                                adjustment += pc_matrix[iworld, ipix] * world_arrays[iworld_curr]
+                        world_arrays_new.append(world_at_slice[iworld] + adjustment)
+                    else:
+                        world_arrays_new.append(world_at_slice[iworld])
+                else:
+                    world_arrays_new.append(world_at_slice[iworld])

         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
