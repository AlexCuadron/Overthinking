diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py
index 0ff7e4fd0a..0dbac744e5 100644
--- a/sympy/physics/units/dimensions.py
+++ b/sympy/physics/units/dimensions.py
@@ -428,6 +428,12 @@ def get_dimensional_dependencies(self, name, mark_dimensionless=False):
     def equivalent_dims(self, dim1, dim2):
         deps1 = self.get_dimensional_dependencies(dim1)
         deps2 = self.get_dimensional_dependencies(dim2)
+
+        # Simplify both dependency sets by removing dimensions with zero exponent
+        deps1 = {k: v for k, v in deps1.items() if v != 0}
+        deps2 = {k: v for k, v in deps2.items() if v != 0}
+
+        # Check if simplified dependencies match
         return deps1 == deps2

     def extend(self, new_base_dims, new_derived_dims=(), new_dim_deps=None):
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..5a499237fa 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -130,7 +130,14 @@ def derived_units(self) -> tDict[Dimension, Quantity]:
     def get_dimensional_expr(self, expr):
         from sympy.physics.units import Quantity
         if isinstance(expr, Mul):
-            return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
+            result = S.One
+            for term in expr.args:
+                term_dim = self.get_dimensional_expr(term)
+                if isinstance(term_dim, Dimension):
+                    result = result * term_dim
+                else:
+                    result = result * term_dim
+            return result
         elif isinstance(expr, Pow):
             return self.get_dimensional_expr(expr.base) ** expr.exp
         elif isinstance(expr, Add):
@@ -150,6 +157,8 @@ def get_dimensional_expr(self, expr):
         return S.One

     def _collect_factor_and_dimension(self, expr):
+        print("\nStarting _collect_factor_and_dimension with expr:", expr)
+        print("Type of expr:", type(expr))
         """
         Return tuple with scale factor expression and dimension expression.
         """
@@ -172,14 +181,22 @@ def _collect_factor_and_dimension(self, expr):
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
         elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
-                    raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
+print("Initial dimension:", dim)
+print("Initial dimension dependencies:", self.get_dimension_system().get_dimensional_dependencies(dim))
+for addend in expr.args[1:]:
+    addend_factor, addend_dim = self._collect_factor_and_dimension(addend)
+    print("Addend dimension:", addend_dim)
+    print("Addend dimension dependencies:", self.get_dimension_system().get_dimensional_dependencies(addend_dim))
+                print(f"Comparing dimensions: {dim} vs {addend_dim}")
+print(f"Dependencies of {dim}:", self.get_dimension_system().get_dimensional_dependencies(dim))
+print(f"Dependencies of {addend_dim}:", self.get_dimension_system().get_dimensional_dependencies(addend_dim))
+dim_deps = self.get_dimension_system().get_dimensional_dependencies(dim)
+addend_deps = self.get_dimension_system().get_dimensional_dependencies(addend_dim)
+if dim_deps != addend_deps:
+    raise ValueError(
+        'Dimension of "{}" is {}, '
+        'but it should be equivalent to {}'.format(
+            addend, addend_dim, dim))
                 factor += addend_factor
             return factor, dim
         elif isinstance(expr, Derivative):
