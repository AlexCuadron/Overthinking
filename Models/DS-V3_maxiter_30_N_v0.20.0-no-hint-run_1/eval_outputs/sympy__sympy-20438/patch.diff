diff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py
index fdca06025a..fea151fc0c 100644
--- a/sympy/sets/handlers/issubset.py
+++ b/sympy/sets/handlers/issubset.py
@@ -1,7 +1,7 @@
 from sympy import S, Symbol
 from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or
 from sympy.core.relational import Eq
-from sympy.sets.sets import FiniteSet, Interval, Set, Union
+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet
 from sympy.sets.fancysets import Complexes, Reals, Range, Rationals
 from sympy.multipledispatch import dispatch

@@ -12,6 +12,29 @@
 def is_subset_sets(a, b): # noqa:F811
     return None

+@dispatch(ProductSet, FiniteSet)  # type: ignore # noqa:F811
+def is_subset_sets(a, b): # noqa:F811
+    print("ProductSet-FiniteSet handler called")  # Debug print
+    # A ProductSet is a subset of a FiniteSet if:
+    # 1. The ProductSet is finite
+    # 2. All elements of the ProductSet are in the FiniteSet
+    # 3. The FiniteSet contains all combinations of elements from the base sets
+    if not a.is_finite_set:
+        print("ProductSet is not finite")  # Debug print
+        return False
+
+    # Convert ProductSet to FiniteSet of tuples
+    product_elements = set(a)
+    finite_elements = set(b)
+
+    print(f"Product elements: {product_elements}")  # Debug print
+    print(f"Finite elements: {finite_elements}")  # Debug print
+
+    # Check if all product elements are in the finite set
+    result = product_elements.issubset(finite_elements)
+    print(f"Result: {result}")  # Debug print
+    return result
+
 @dispatch(Interval, Interval)  # type: ignore # noqa:F811
 def is_subset_sets(a, b): # noqa:F811
     # This is correct but can be made more comprehensive...
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..8f28bb3674 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -384,7 +384,9 @@ def is_subset(self, other):

         # Use pairwise rules from multiple dispatch
         from sympy.sets.handlers.issubset import is_subset_sets
+        print(f"Checking is_subset between {type(self)} and {type(other)}")  # Debug print
         ret = is_subset_sets(self, other)
+        print(f"Handler returned: {ret}")  # Debug print
         if ret is not None:
             return ret
