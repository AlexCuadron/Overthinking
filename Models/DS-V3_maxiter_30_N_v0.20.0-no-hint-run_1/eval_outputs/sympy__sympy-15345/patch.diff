diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..32480b4191 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -31,6 +31,10 @@
     "asech": [(lambda x: True, "ArcSech")],
     "acsch": [(lambda x: True, "ArcCsch")],
     "conjugate": [(lambda x: True, "Conjugate")],
+    "Max": [(lambda x: True, "Max")],
+    "max": [(lambda x: True, "Max")],
+    "Max": [(lambda x: True, "Max")],
+    "max": [(lambda x: True, "Max")],

 }

@@ -99,6 +103,19 @@ def _print_Function(self, expr):
             for cond, mfunc in cond_mfunc:
                 if cond(*expr.args):
                     return "%s[%s]" % (mfunc, self.stringify(expr.args, ", "))
+        # Special handling for Max function
+        if expr.func.__name__.lower() == "max":
+            # Sort arguments to maintain consistent order
+            sorted_args = sorted(expr.args, key=str)
+            return "Max[%s]" % ", ".join(self.doprint(arg) for arg in sorted_args)
+        if expr.func.__name__ == "Max":
+            # Sort arguments to maintain consistent order
+            sorted_args = sorted(expr.args, key=str)
+            return "Max[%s]" % ", ".join(self.doprint(arg) for arg in sorted_args)
+        if expr.func.__name__ == "max":
+            # Sort arguments to maintain consistent order
+            sorted_args = sorted(expr.args, key=str)
+            return "Max[%s]" % ", ".join(self.doprint(arg) for arg in sorted_args)
         return expr.func.__name__ + "[%s]" % self.stringify(expr.args, ", ")

     def _print_Integral(self, expr):
