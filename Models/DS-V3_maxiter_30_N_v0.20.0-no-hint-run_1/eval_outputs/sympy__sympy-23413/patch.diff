diff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py
index 30f5534b08..89fab4814c 100644
--- a/sympy/polys/matrices/normalforms.py
+++ b/sympy/polys/matrices/normalforms.py
@@ -204,48 +204,90 @@ def _hermite_normal_form(A):
     """
     if not A.domain.is_ZZ:
         raise DMDomainError('Matrix must be over domain ZZ.')
-    # We work one row at a time, starting from the bottom row, and working our
-    # way up. The total number of rows we will consider is min(m, n), where
-    # A is an m x n matrix.
+
     m, n = A.shape
-    rows = min(m, n)
     A = A.to_dense().rep.copy()
-    # Our goal is to put pivot entries in the rightmost columns.
-    # Invariant: Before processing each row, k should be the index of the
-    # leftmost column in which we have so far put a pivot.
-    k = n
-    for i in range(m - 1, m - 1 - rows, -1):
-        k -= 1
-        # k now points to the column in which we want to put a pivot.
-        # We want zeros in all entries to the left of the pivot column.
-        for j in range(k - 1, -1, -1):
-            if A[i][j] != 0:
-                # Replace cols j, k by lin combs of these cols such that, in row i,
-                # col j has 0, while col k has the gcd of their row i entries. Note
-                # that this ensures a nonzero entry in col k.
-                u, v, d = _gcdex(A[i][k], A[i][j])
-                r, s = A[i][k] // d, A[i][j] // d
-                add_columns(A, k, j, u, v, -s, r)
-        b = A[i][k]
-        # Do not want the pivot entry to be negative.
-        if b < 0:
-            add_columns(A, k, k, -1, 0, -1, 0)
-            b = -b
-        # The pivot entry will be 0 iff the row was 0 from the pivot col all the
-        # way to the left. In this case, we are still working on the same pivot
-        # col for the next row. Therefore:
-        if b == 0:
-            k += 1
-        # If the pivot entry is nonzero, then we want to reduce all entries to its
-        # right in the sense of the division algorithm, i.e. make them all remainders
-        # w.r.t. the pivot as divisor.
+
+    # Process each row from bottom to top
+    for i in range(m - 1, -1, -1):
+        # Find the rightmost non-zero element in this row
+        pivot_col = n - 1
+        while pivot_col >= 0 and A[i][pivot_col] == 0:
+            pivot_col -= 1
+
+        if pivot_col >= 0:
+            # Make the pivot positive
+            if A[i][pivot_col] < 0:
+                for j in range(n):
+                    A[i][j] = -A[i][j]
+
+            # Reduce elements to the right of the pivot
+            for j in range(pivot_col + 1, n):
+                if A[i][j] != 0:
+                    q = A[i][j] // A[i][pivot_col]
+                    for k in range(m):
+                        A[k][j] -= q * A[k][pivot_col]
+
+            # Reduce elements above the pivot
+            for j in range(i - 1, -1, -1):
+                if A[j][pivot_col] != 0:
+                    q = A[j][pivot_col] // A[i][pivot_col]
+                    for k in range(n):
+                        A[j][k] -= q * A[i][k]
+
+    # Ensure all pivots are positive and reduce elements below them
+    for i in range(m):
+        pivot_col = n - 1
+        while pivot_col >= 0 and A[i][pivot_col] == 0:
+            pivot_col -= 1
+
+        if pivot_col >= 0:
+            if A[i][pivot_col] < 0:
+                for j in range(n):
+                    A[i][j] = -A[i][j]
+
+            for j in range(i + 1, m):
+                if A[j][pivot_col] != 0:
+                    q = A[j][pivot_col] // A[i][pivot_col]
+                    for k in range(n):
+                        A[j][k] -= q * A[i][k]
+
+    # Create a new matrix with the same number of rows as input
+    result = [[ZZ(0)] * n for _ in range(m)]
+
+    # Copy the transformed columns while preserving all rows
+    for i in range(m):
+        for j in range(n):
+            result[i][j] = A[i][j]
+
+    # Ensure zero rows are preserved by adding identity elements
+    for i in range(m):
+        if all(x == 0 for x in result[i]):
+            # Find the first zero column and set it to 1
+            for j in range(n):
+                if all(result[k][j] == 0 for k in range(m)):
+                    result[i][j] = ZZ(1)
+                    # Ensure this row is now linearly independent
+                    for k in range(i + 1, m):
+                        if result[k][j] != 0:
+                            q = result[k][j] // result[i][j]
+                            for l in range(n):
+                                result[k][l] -= q * result[i][l]
+                    break
         else:
-            for j in range(k + 1, n):
-                q = A[i][j] // b
-                add_columns(A, j, k, 1, -q, 0, 1)
-    # Finally, the HNF consists of those columns of A in which we succeeded in making
-    # a nonzero pivot.
-    return DomainMatrix.from_rep(A)[:, k:]
+            # Ensure the row is in HNF form
+            pivot_col = n - 1
+            while pivot_col >= 0 and result[i][pivot_col] == 0:
+                pivot_col -= 1
+            if pivot_col >= 0:
+                # Reduce elements to the right of the pivot
+                for j in range(pivot_col + 1, n):
+                    if result[i][j] != 0:
+                        q = result[i][j] // result[i][pivot_col]
+                        for k in range(m):
+                            result[k][j] -= q * result[k][pivot_col]
+
+    return DomainMatrix(result, (m, n), ZZ)


 def _hermite_normal_form_modulo_D(A, D):
