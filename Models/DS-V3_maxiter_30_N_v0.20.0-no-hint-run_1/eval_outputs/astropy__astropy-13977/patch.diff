diff --git a/astropy/units/core.py b/astropy/units/core.py
index 8c3204b8b0..20db15c6ca 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -2626,10 +2626,7 @@ def _condition_arg(value):

     avalue = np.array(value)
     if avalue.dtype.kind not in ["i", "f", "c"]:
-        raise ValueError(
-            "Value not scalar compatible or convertible to "
-            "an int, float, or complex array"
-        )
+        return NotImplemented
     return avalue


diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..196c0c8c1f 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,25 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            if converter:
+                if not isinstance(input_, (np.ndarray, float, int, complex, np.void)):
+                    if hasattr(input_, '__array_ufunc__'):
+                        return NotImplemented
+                    try:
+                        input_ = np.array(input_)
+                        if input_.dtype.kind not in ["i", "f", "c"]:
+                            if hasattr(input_, '__array_ufunc__'):
+                                return NotImplemented
+                            return NotImplemented
+                    except (ValueError, TypeError):
+                        return NotImplemented
+                try:
+                    input_ = converter(input_)
+                except (ValueError, TypeError):
+                    if hasattr(input_, '__array_ufunc__'):
+                        return NotImplemented
+                    return NotImplemented
+            arrays.append(input_)

         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
