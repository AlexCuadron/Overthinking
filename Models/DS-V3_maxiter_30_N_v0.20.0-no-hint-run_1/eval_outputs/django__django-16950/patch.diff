diff --git a/django/contrib/admin/admin.py b/django/contrib/admin/admin.py
new file mode 100644
index 0000000000..9113b40db5
--- /dev/null
+++ b/django/contrib/admin/admin.py
@@ -0,0 +1,13 @@
+from django.contrib import admin
+from django.contrib.admin.custom_inline_formset import UUIDInlineFormSet
+from .models import Thing, SubThing
+
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+    formset = UUIDInlineFormSet
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ('name',)
+    ordering = ('pkid',)
+    inlines = (SubThingInline,)
\ No newline at end of file
diff --git a/django/contrib/admin/custom_inline_formset.py b/django/contrib/admin/custom_inline_formset.py
new file mode 100644
index 0000000000..ee772a8e8e
--- /dev/null
+++ b/django/contrib/admin/custom_inline_formset.py
@@ -0,0 +1,12 @@
+from django.forms.models import BaseInlineFormSet
+
+class UUIDInlineFormSet(BaseInlineFormSet):
+    def _construct_form(self, i, **kwargs):
+        form = super()._construct_form(i, **kwargs)
+
+        # Set default values for fields with defaults
+        for field in self.model._meta.fields:
+            if field.has_default() and not hasattr(form.instance, field.attname):
+                setattr(form.instance, field.attname, field.get_default())
+
+        return form
\ No newline at end of file
diff --git a/django/contrib/admin/tests/test_uuid_inlines.py b/django/contrib/admin/tests/test_uuid_inlines.py
new file mode 100644
index 0000000000..46d9dd3f60
--- /dev/null
+++ b/django/contrib/admin/tests/test_uuid_inlines.py
@@ -0,0 +1,43 @@
+from django.test import TestCase
+from django.contrib.admin.sites import AdminSite
+from django.contrib.auth.models import User
+from ..admin import ThingAdmin
+from ..models import Thing, SubThing
+
+class ThingAdminTest(TestCase):
+    def setUp(self):
+        self.site = AdminSite()
+        self.admin = ThingAdmin(Thing, self.site)
+        self.user = User.objects.create_superuser(
+            username='admin',
+            password='password',
+            email='admin@example.com'
+        )
+
+    def test_uuid_default_in_inline(self):
+        # Create a Thing instance
+        thing = Thing.objects.create(name='Test Thing')
+
+        # Create form data for adding a SubThing inline
+        form_data = {
+            'subthings-TOTAL_FORMS': '1',
+            'subthings-INITIAL_FORMS': '0',
+            'subthings-MIN_NUM_FORMS': '0',
+            'subthings-MAX_NUM_FORMS': '1000',
+            'subthings-0-name': 'Test SubThing',
+        }
+
+        # Simulate admin form submission
+        request = self.client.request().wsgi_request
+        request.user = self.user
+        formset = self.admin.get_formsets_with_inlines(request, thing)[0][0](
+            data=form_data,
+            instance=thing,
+            prefix='subthings'
+        )
+
+        # Verify the form is valid and UUID is set
+        self.assertTrue(formset.is_valid())
+        subthing = formset.save(commit=False)[0]
+        self.assertIsNotNone(subthing.thing.id)
+        self.assertIsNotNone(subthing.thing.pkid)
\ No newline at end of file
diff --git a/testproject/bugapp/__init__.py b/testproject/bugapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/bugapp/admin.py b/testproject/bugapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/testproject/bugapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/testproject/bugapp/apps.py b/testproject/bugapp/apps.py
new file mode 100644
index 0000000000..ca5dce0f70
--- /dev/null
+++ b/testproject/bugapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class BugappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "bugapp"
diff --git a/testproject/bugapp/migrations/__init__.py b/testproject/bugapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/bugapp/models.py b/testproject/bugapp/models.py
new file mode 100644
index 0000000000..71a8362390
--- /dev/null
+++ b/testproject/bugapp/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/testproject/bugapp/tests.py b/testproject/bugapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/testproject/bugapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/testproject/bugapp/views.py b/testproject/bugapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testproject/bugapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..8bd034f0d2
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..7f8fbc1461
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..7719523b8b
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230707060601.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-+@x0&-wj*@9e0f*sh($%j(89h&$b&#da%m+z)niba3^n&f9eyx"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "testproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "testproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..0127e6d889
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for testproject project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..c24d0012dc
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+
+application = get_wsgi_application()
