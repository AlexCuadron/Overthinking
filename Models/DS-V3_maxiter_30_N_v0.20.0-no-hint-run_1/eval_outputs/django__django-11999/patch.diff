diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..36fdbba7bb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -79,6 +79,23 @@ class ModelBase(type):
         if not parents:
             return super_new(cls, name, bases, attrs)

+        # Create the new class
+        new_class = super_new(cls, name, bases, attrs, **kwargs)
+
+        # Check for display methods before adding them
+        for field in new_class._meta.get_fields():
+            if hasattr(field, 'choices') and field.choices:
+                method_name = 'get_%s_display' % field.name
+                if not hasattr(new_class, method_name):
+                    def get_display(self, field=field):
+                        if hasattr(self.__class__, method_name) and \
+                           not isinstance(getattr(self.__class__, method_name), partialmethod):
+                            return getattr(self, method_name)()
+                        return self._get_FIELD_display(field=field)
+                    setattr(new_class, method_name, get_display)
+
+        return new_class
+
         # Create the class.
         module = attrs.pop('__module__')
         new_attrs = {'__module__': module}
@@ -939,6 +956,11 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True

     def _get_FIELD_display(self, field):
+        # Check for custom implementation first
+        method_name = 'get_%s_display' % field.name
+        if hasattr(self.__class__, method_name) and \
+           not isinstance(getattr(self.__class__, method_name), partialmethod):
+            return getattr(self, method_name)()
         value = getattr(self, field.attname)
         # force_str() to coerce lazy strings.
         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..4b85ba1921 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,21 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            method_name = 'get_%s_display' % self.name
+            # Check if the method exists and isn't the default one
+            existing_method = getattr(cls, method_name, None)
+            if existing_method is None or \
+               (hasattr(existing_method, '__func__') and
+                existing_method.__func__.__name__ == '_get_FIELD_display'):
+                def get_display(self):
+                    # Check for custom implementation in the class hierarchy
+                    for base in cls.__mro__:
+                        if method_name in base.__dict__:
+                            method = base.__dict__[method_name]
+                            if not isinstance(method, partialmethod):
+                                return method(self)
+                    return self._get_FIELD_display(field=self)
+                setattr(cls, method_name, get_display)

     def get_filter_kwargs_for_object(self, obj):
         """
