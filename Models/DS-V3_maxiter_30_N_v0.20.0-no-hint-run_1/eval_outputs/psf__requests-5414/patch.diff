diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..4d8de051
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,16 @@
+import requests
+
+test_urls = [
+    "http://.example.com",
+    "http://.valid.example.com",
+    "http://example..com",
+    "http://."
+]
+
+for url in test_urls:
+    try:
+        print(f"Testing URL: {url}")
+        requests.get(url)
+    except Exception as e:
+        print(f"Caught exception: {type(e).__name__}: {e}")
+    print()
\ No newline at end of file
diff --git a/requests/models.py b/requests/models.py
index e7d292d5..24528cf5 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -368,6 +368,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
             url = url.decode('utf8')
         else:
             url = unicode(url) if is_py2 else str(url)
+
+        # Check for invalid labels in the URL
+        if '://.' in url or url.startswith('.') or '..' in url.split('://')[-1]:
+            raise InvalidURL('URL has an invalid label.')

         # Remove leading whitespaces from url
         url = url.lstrip()
@@ -398,6 +402,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         # non-ASCII characters. This allows users to automatically get the correct IDNA
         # behaviour. For strings containing only ASCII characters, we need to also verify
         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.
+        if not host or '.' not in host:
+            raise InvalidURL('URL has an invalid label.')
         if not unicode_is_ascii(host):
             try:
                 host = self._get_idna_encoded_host(host)
