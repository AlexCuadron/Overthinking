diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py
index 372487664c..3ddbb4ce68 100644
--- a/sympy/concrete/summations.py
+++ b/sympy/concrete/summations.py
@@ -175,6 +175,10 @@ def doit(self, **hints):
             f = self.function

         if self.function.is_Matrix:
+            from sympy.matrices.expressions import Identity
+            if isinstance(self.function, Identity):
+                n = self.limits[0][2] + 1  # Get the size from the upper limit
+                return n
             return self.expand().doit()

         for n, limit in enumerate(self.limits):
diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index b4d759836e..4aec8e0835 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -484,6 +484,12 @@ def _entry(self, i, j):
     def _eval_determinant(self):
         return S.One

+    def _eval_sum(self, i=None, j=None):
+        """Return the sum of all elements in the identity matrix"""
+        if i is not None and j is not None:
+            return self._entry(i, j)
+        return self.rows
+

 class ZeroMatrix(MatrixExpr):
     """The Matrix Zero 0 - additive identity
diff --git a/test_sum.py b/test_sum.py
new file mode 100644
index 0000000000..b17e785206
--- /dev/null
+++ b/test_sum.py
@@ -0,0 +1,17 @@
+from sympy import *
+from sympy import Q as Query
+
+n = Symbol('n', integer=True, positive=True)
+i, j = symbols('i j', integer=True)
+M = MatrixSymbol('M', n, n)
+
+e = None
+with assuming(Query.orthogonal(M)):
+    e = refine((M.T * M).doit())
+
+print("Matrix:", e)
+print("Elements:", e[0, 0], e[0, 1], e[1, 0], e[1, 1])
+print("Diagonal check:", ask(Query.diagonal(e)))
+print("Integer elements check:", ask(Query.integer_elements(e)))
+print("Trace:", Sum(e[i, i], (i, 0, n-1)).doit())
+print("Total sum:", Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit())
\ No newline at end of file
