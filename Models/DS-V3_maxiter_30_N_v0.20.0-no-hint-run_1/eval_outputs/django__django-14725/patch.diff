diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..4d8ffa0f6f 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -50,6 +50,10 @@ class ManagementForm(Form):
 class BaseFormSet(RenderableFormMixin):
     """
     A collection of instances of the same Form class.
+
+    Attributes:
+        can_add_new: If False, prevents adding new forms to the formset.
+                    Defaults to True. When False, only existing forms can be edited.
     """
     deletion_widget = CheckboxInput
     ordering_widget = NumberInput
@@ -66,7 +70,8 @@ class BaseFormSet(RenderableFormMixin):

     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
                  initial=None, error_class=ErrorList, form_kwargs=None,
-                 error_messages=None):
+                 error_messages=None, can_add_new=True):
+        self.can_add_new = can_add_new
         self.is_bound = data is not None or files is not None
         self.prefix = prefix or self.get_default_prefix()
         self.auto_id = auto_id
@@ -146,10 +151,16 @@ class BaseFormSet(RenderableFormMixin):
             # count in the data; this is DoS protection to prevent clients
             # from forcing the server to instantiate arbitrary numbers of
             # forms
-            return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)
+            form_count = self.management_form.cleaned_data[TOTAL_FORM_COUNT]
+            if not self.can_add_new:
+                # If can_add_new is False, only allow existing forms
+                form_count = min(form_count, self.initial_form_count())
+            return min(form_count, self.absolute_max)
         else:
             initial_forms = self.initial_form_count()
-            total_forms = max(initial_forms, self.min_num) + self.extra
+            total_forms = max(initial_forms, self.min_num)
+            if self.can_add_new:
+                total_forms += self.extra
             # Allow all existing related objects/inlines to be displayed,
             # but don't allow extra beyond max_num.
             if initial_forms > self.max_num >= 0:
