diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..c2dead0cf7 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -88,7 +88,7 @@ class URLValidator(RegexValidator):
         r'(?:[^\s:@/]+(?::[^\s:@/]*)?@)?'  # user:pass authentication
         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'
         r'(?::\d{2,5})?'  # port
-        r'(?:[/?#][^\s]*)?'  # resource path
+        r'(?:[/?#][^\x00-\x1F]*)?'  # resource path - reject control chars
         r'\Z', re.IGNORECASE)
     message = _('Enter a valid URL.')
     schemes = ['http', 'https', 'ftp', 'ftps']
@@ -101,10 +101,19 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+
+        # Validate raw input before any URL parsing
+        if any(char in value for char in '\n\r\t'):
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
             raise ValidationError(self.message, code=self.code, params={'value': value})
+
+        # Then check full URL
+        try:
+            super().__call__(value)

         # Then check full URL
         try:
