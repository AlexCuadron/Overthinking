diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py
index 996d2e4c..ea6195dc 100644
--- a/xarray/core/weighted.py
+++ b/xarray/core/weighted.py
@@ -107,7 +107,8 @@ class Weighted:
             )

         self.obj = obj
-        self.weights = weights
+        # Convert boolean weights to numeric
+self.weights = weights * 1 if weights.dtype == bool else weights

     @staticmethod
     def _reduce(
@@ -132,7 +133,17 @@ class Weighted:
         # `dot` does not broadcast arrays, so this avoids creating a large
         # DataArray (if `weights` has additional dimensions)
         # maybe add fasttrack (`(da * weights).sum(dims=dim, skipna=skipna)`)
-        return dot(da, weights, dims=dim)
+        # Convert boolean weights to numeric before dot product
+weights = weights * 1 if weights.dtype == bool else weights
+# Ensure numeric types before dot product
+weights = weights.astype(float) if weights.dtype == bool else weights
+# Ensure numeric types before dot product
+weights = weights.astype(float) if weights.dtype == bool else weights
+# Ensure numeric types before dot product
+weights = weights.astype(float) if weights.dtype == bool else weights
+# Ensure numeric types before dot product
+weights = weights.astype(float) if weights.dtype == bool else weights
+return dot(da, weights, dims=dim)

     def _sum_of_weights(
         self, da: "DataArray", dim: Optional[Union[Hashable, Iterable[Hashable]]] = None
@@ -142,7 +153,17 @@ class Weighted:
         # we need to mask data values that are nan; else the weights are wrong
         mask = da.notnull()

-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)
+        # Convert boolean weights to numeric before calculation
+        # Convert weights to float and ensure proper numeric handling
+# Convert weights to float and ensure proper numeric handling
+# Convert weights to float and ensure proper numeric handling
+# Convert weights to float and ensure proper numeric handling
+weights = self.weights.astype(float)
+sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)
+sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)
+sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)
+sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)
+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)

         # 0-weights are not valid
         valid_weights = sum_of_weights != 0.0
