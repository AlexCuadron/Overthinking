diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 5f6b429dfd..0acec9b6ca 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -37,7 +37,7 @@ class Expr(Basic, EvalfMixin):
     sympy.core.basic.Basic
     """

-    __slots__ = ()  # type: tTuple[str, ...]
+    __slots__ = ()  # Empty slots to prevent instance dictionary creation

     is_scalar = True  # self derivative is 1

diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py
index 70e6953559..26f6ebea02 100644
--- a/sympy/core/symbol.py
+++ b/sympy/core/symbol.py
@@ -179,7 +179,17 @@ def numbered_string_incr(s, start=0):
     return _symbol(x, default, **assumptions)
 _uniquely_named_symbol = uniquely_named_symbol

-class Symbol(AtomicExpr, Boolean):
+class NoDictMeta(type):
+    def __new__(cls, name, bases, dct):
+        dct['__slots__'] = ('name',)
+        return super().__new__(cls, name, bases, dct)
+
+class Symbol(AtomicExpr, Boolean, metaclass=NoDictMeta):
+    __slots__ = ('name',)
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        object.__setattr__(self, '__dict__', None)
     """
     Assumptions:
        commutative = True
@@ -200,7 +210,7 @@ class Symbol(AtomicExpr, Boolean):

     is_comparable = False

-    __slots__ = ('name',)
+    __slots__ = ('name', '__dict__')

     is_Symbol = True
     is_symbol = True
