diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27297..41ead9772a 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -199,8 +199,23 @@ def _coord_matrix(model, pos, noutp):
         else:
             mat[-model.n_outputs:, -model.n_inputs:] = m
         return mat
+
+    # Handle nested compound models
+    if isinstance(model, CompoundModel):
+        if model.op == '&':
+            left_mat = _coord_matrix(model.left, 'left', model.left.n_outputs)
+            right_mat = _coord_matrix(model.right, 'right', model.right.n_outputs)
+            result = np.block([[left_mat, np.zeros((left_mat.shape[0], right_mat.shape[1]))],
+                             [np.zeros((right_mat.shape[0], left_mat.shape[1])), right_mat]])
+
+            # Ensure proper diagonal structure for nested models
+            n_left = model.left.n_outputs
+            n_right = model.right.n_outputs
+            result[n_left:, :model.left.n_inputs] = False
+            result[:n_left, model.left.n_inputs:] = False
+            return result
+
     if not model.separable:
-        # this does not work for more than 2 coordinates
         mat = np.zeros((noutp, model.n_inputs))
         if pos == 'left':
             mat[:model.n_outputs, : model.n_inputs] = 1
@@ -208,7 +223,6 @@ def _coord_matrix(model, pos, noutp):
             mat[-model.n_outputs:, -model.n_inputs:] = 1
     else:
         mat = np.zeros((noutp, model.n_inputs))
-
         for i in range(model.n_inputs):
             mat[i, i] = 1
         if pos == 'right':
@@ -242,9 +256,19 @@ def _cstack(left, right):
         cright = _coord_matrix(right, 'right', noutp)
     else:
         cright = np.zeros((noutp, right.shape[1]))
-        cright[-right.shape[0]:, -right.shape[1]:] = 1
-
-    return np.hstack([cleft, cright])
+        cright[-right.shape[0]:, -right.shape[1]:] = right
+
+    # Create a block diagonal matrix for nested models
+    if isinstance(left, Model) and isinstance(right, Model):
+        n_left = left.n_outputs
+        n_right = right.n_outputs
+        result = np.zeros((noutp, left.shape[1] + right.shape[1]), dtype=bool)
+        result[:n_left, :left.shape[1]] = cleft[:n_left, :left.shape[1]]
+        result[n_left:, left.shape[1]:] = cright[n_left:, left.shape[1]:]
+    else:
+        result = np.hstack([cleft, cright])
+
+    return result


 def _cdot(left, right):
@@ -301,15 +325,90 @@ def _separable(transform):
         An array of shape (transform.n_outputs,) of boolean type
         Each element represents the separablity of the corresponding output.
     """
-    if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:
-        return transform_matrix
-    elif isinstance(transform, CompoundModel):
+    if isinstance(transform, CompoundModel):
+        # Handle nested compound models by recursively computing separability
         sepleft = _separable(transform.left)
         sepright = _separable(transform.right)
-        return _operators[transform.op](sepleft, sepright)
+
+        # For '&' operation, create a block diagonal matrix
+        if transform.op == '&amp;':
+            n_left = transform.left.n_outputs
+            n_right = transform.right.n_outputs
+            n_inputs_left = transform.left.n_inputs
+            n_inputs_right = transform.right.n_inputs
+
+            # Create a block diagonal matrix
+            result = np.zeros((n_left + n_right, n_inputs_left + n_inputs_right), dtype=bool)
+
+            # Handle left model
+            if isinstance(transform.left, CompoundModel):
+                result[:n_left, :n_inputs_left] = sepleft
+            else:
+                result[:n_left, :n_inputs_left] = np.eye(n_left, n_inputs_left, dtype=bool)
+
+            # Handle right model
+            if isinstance(transform.right, CompoundModel):
+                result[n_left:, n_inputs_left:] = sepright
+            else:
+                result[n_left:, n_inputs_left:] = np.eye(n_right, n_inputs_right, dtype=bool)
+
+            # Ensure proper diagonal structure for nested models
+            if isinstance(transform.left, CompoundModel) or isinstance(transform.right, CompoundModel):
+                result[n_left:, :n_inputs_left] = False
+                result[:n_left, n_inputs_left:] = False
+
+                # Handle nested compound models by ensuring proper diagonal structure
+                if isinstance(transform.left, CompoundModel):
+                    result[:n_left, :n_inputs_left] = sepleft
+                if isinstance(transform.right, CompoundModel):
+                    result[n_left:, n_inputs_left:] = sepright
+            return result
+        else:
+            return _operators[transform.op](sepleft, sepright)
     elif isinstance(transform, Model):
+        if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:
+            return transform_matrix
         return _coord_matrix(transform, 'left', transform.n_outputs)

+def _cstack(left, right):
+    """
+    Function corresponding to '&' operation.
+
+    Parameters
+    ----------
+    left, right : `astropy.modeling.Model` or ndarray
+        If input is of an array, it is the output of `coord_matrix`.
+
+    Returns
+    -------
+    result : ndarray
+        Result from this operation.
+    """
+    noutp = _compute_n_outputs(left, right)
+
+    if isinstance(left, Model):
+        cleft = _coord_matrix(left, 'left', noutp)
+    else:
+        cleft = np.zeros((noutp, left.shape[1]))
+        cleft[: left.shape[0], : left.shape[1]] = left
+    if isinstance(right, Model):
+        cright = _coord_matrix(right, 'right', noutp)
+    else:
+        cright = np.zeros((noutp, right.shape[1]))
+        cright[-right.shape[0]:, -right.shape[1]:] = right
+
+    # Create a block diagonal matrix
+    result = np.hstack([cleft, cright])
+
+    # Ensure proper diagonal structure for nested models
+    if isinstance(left, Model) and isinstance(right, Model):
+        n_left = left.n_outputs
+        n_right = right.n_outputs
+        result[n_left:, :left.n_inputs] = False
+        result[:n_left, left.n_inputs:] = False
+
+    return result
+

 # Maps modeling operators to a function computing and represents the
 # relationship of axes as an array of 0-es and 1-s
