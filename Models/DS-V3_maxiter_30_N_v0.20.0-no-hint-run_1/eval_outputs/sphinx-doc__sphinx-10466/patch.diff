diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py
index e8bc547b7..9c4de24b7 100644
--- a/sphinx/builders/gettext.py
+++ b/sphinx/builders/gettext.py
@@ -32,7 +32,16 @@ class Message:
     """An entry of translatable message."""
     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):
         self.text = text
-        self.locations = locations
+        # Convert locations to string tuples for proper deduplication
+        str_locations = [(str(path), line) for path, line in locations]
+        seen = set()
+        unique_locs = []
+        for loc in str_locations:
+            if loc not in seen:
+                seen.add(loc)
+                unique_locs.append(loc)
+        # Convert back to original format
+        self.locations = [(str(path), int(line)) for path, line in unique_locs]
         self.uuids = uuids


@@ -42,8 +51,8 @@ class Catalog:
     def __init__(self) -> None:
         self.messages: List[str] = []  # retain insertion order, a la OrderedDict

-        # msgid -> file, line, uid
-        self.metadata: Dict[str, List[Tuple[str, int, str]]] = OrderedDict()
+        # msgid -> set of (file, line, uid)
+        self.metadata: Dict[str, Set[Tuple[str, int, str]]] = OrderedDict()

     def add(self, msg: str, origin: Union[Element, "MsgOrigin"]) -> None:
         if not hasattr(origin, 'uid'):
@@ -52,13 +61,15 @@ class Catalog:
             return
         if msg not in self.metadata:  # faster lookup in hash
             self.messages.append(msg)
-            self.metadata[msg] = []
-        self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore
+            self.metadata[msg] = set()
+
+        # Add location to set (automatically handles duplicates)
+        self.metadata[msg].add((origin.source, origin.line, origin.uid))

     def __iter__(self) -> Generator[Message, None, None]:
         for message in self.messages:
-            positions = [(source, line) for source, line, uuid in self.metadata[message]]
-            uuids = [uuid for source, line, uuid in self.metadata[message]]
+            positions = list({(source, line) for source, line, _ in self.metadata[message]})
+            uuids = list({uuid for _, _, uuid in self.metadata[message]})
             yield Message(message, positions, uuids)
