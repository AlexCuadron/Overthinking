diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py
index d19ee2fc63..7742306455 100644
--- a/sympy/physics/secondquant.py
+++ b/sympy/physics/secondquant.py
@@ -478,7 +478,9 @@ def __repr__(self):
         return "CreateBoson(%s)" % self.state

     def _latex(self, printer):
-        return "b^\\dagger_{%s}" % self.state.name
+        if hasattr(self, '_exponent'):
+                return "{\\left(b^\\dagger_{%s}\\right)}^{%s}" % (self.state.name, self._exponent)
+            return "b^\\dagger_{%s}" % self.state.name

 B = AnnihilateBoson
 Bd = CreateBoson
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 64d3207d09..02fd64f703 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -638,6 +638,12 @@ def _print_Pow(self, expr):
                 base = self.parenthesize_super(base)
             if expr.base.is_Function:
                 return self._print(expr.base, exp="%s/%s" % (p, q))
+            # Handle operator powers with subscripts
+            if '_' in base:
+                return r"{\left(%s\right)}^{%s/%s}" % (base, p, q)
+            # Handle operator powers with subscripts
+            if '^' in base or '_' in base:
+                return r"{\left(%s\right)}^{%s/%s}" % (base, p, q)
             return r"%s^{%s/%s}" % (base, p, q)
         elif expr.exp.is_Rational and expr.exp.is_negative and \
                 expr.base.is_commutative:
