diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py
index 1783a7744a..ba14d79d3a 100644
--- a/sympy/polys/sqfreetools.py
+++ b/sympy/polys/sqfreetools.py
@@ -312,7 +312,9 @@ def dup_sqf_list(f, K, all=False):
     if dup_degree(f) <= 0:
         return coeff, []

-    result, i = [], 1
+    from collections import defaultdict
+    factor_dict = defaultdict(list)
+    i = 1

     h = dup_diff(f, 1, K)
     g, p, q = dup_inner_gcd(f, h, K)
@@ -327,11 +329,38 @@ def dup_sqf_list(f, K, all=False):

         g, p, q = dup_inner_gcd(p, h, K)

-        if all or dup_degree(g) > 0:
-            result.append((g, i))
+        if dup_degree(g) > 0:
+            # Check if we already have a factor with this multiplicity
+            if i in factor_dict:
+                # Multiply with existing factor
+                factor_dict[i] = dup_mul(factor_dict[i], g, K)
+            else:
+                factor_dict[i] = g
+
+            # Check if this factor is already in the result with the same multiplicity
+            found = False
+            for idx, (existing_factor, existing_multiplicity) in enumerate(result):
+                if existing_multiplicity == i:
+                    # Multiply the factors with same multiplicity
+                    result[idx] = (dup_mul(existing_factor, g, K), i)
+                    found = True
+                    break
+
+            if not found:
+                result.append((g, i))

         i += 1

+    # Convert dictionary to sorted list of (factor, multiplicity) pairs
+    result = []
+    for multiplicity, factor in factor_dict.items():
+        result.append((factor, multiplicity))
+    result.sort(key=lambda x: x[1])
+    return coeff, result
+
+    # Convert dictionary to sorted list of (factor, multiplicity) pairs
+    result = [(factor, multiplicity) for multiplicity, factor in factor_dict.items()]
+    result.sort(key=lambda x: x[1])
     return coeff, result
