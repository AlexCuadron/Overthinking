diff --git a/repro/__init__.py b/repro/__init__.py
new file mode 100644
index 000000000..2cfffa40d
--- /dev/null
+++ b/repro/__init__.py
@@ -0,0 +1 @@
+assert False
diff --git a/repro/tox.ini b/repro/tox.ini
new file mode 100644
index 000000000..d4d8c64fc
--- /dev/null
+++ b/repro/tox.ini
@@ -0,0 +1,9 @@
+[tox]
+envlist = py39-pytest{522,523}
+skipsdist = true
+
+[testenv]
+deps =
+    pytest522: pytest==5.2.2
+    pytest523: pytest==5.2.3
+commands = pytest
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 306e5f217..bb38e7811 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -178,8 +178,8 @@ def pytest_collect_file(path, parent):
     if ext == ".py":
         if not parent.session.isinitpath(path):
             if not path_matches_patterns(
-                path, parent.config.getini("python_files") + ["__init__.py"]
-            ):
+                path, parent.config.getini("python_files")
+            ) and path.basename != "__init__.py":
                 return
         ihook = parent.session.gethookproxy(path)
         return ihook.pytest_pycollect_makemodule(path=path, parent=parent)
@@ -192,7 +192,13 @@ def path_matches_patterns(path, patterns):

 def pytest_pycollect_makemodule(path, parent):
     if path.basename == "__init__.py":
-        return Package(path, parent)
+        # Only collect __init__.py if it's explicitly specified as a test file
+        # and contains test patterns or is in a test directory
+        if (path in parent.session._initialpaths or
+            path_matches_patterns(path, parent.config.getini("python_files")) or
+            any(p.fnmatch("test*") for p in path.parts())):
+            return Package(path, parent)
+        return None
     return Module(path, parent)


@@ -444,6 +450,10 @@ class Module(nodes.File, PyCollector):
         return self._importtestmodule()

     def collect(self):
+        if self.fspath.basename == "__init__.py":
+            # Skip collection if this is an __init__.py that doesn't contain tests
+            if not any(name.startswith("test_") for name in self.obj.__dict__):
+                return []
         self._inject_setup_module_fixture()
         self._inject_setup_function_fixture()
         self.session._fixturemanager.parsefactories(self)
