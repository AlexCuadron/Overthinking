diff --git a/docs/Makefile b/docs/Makefile
new file mode 100644
index 000000000..d4bb2cbb9
--- /dev/null
+++ b/docs/Makefile
@@ -0,0 +1,20 @@
+# Minimal makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line, and also
+# from the environment for the first two.
+SPHINXOPTS    ?=
+SPHINXBUILD   ?= sphinx-build
+SOURCEDIR     = .
+BUILDDIR      = _build
+
+# Put it first so that "make" without argument is like "make help".
+help:
+       @$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
+
+.PHONY: help Makefile
+
+# Catch-all target: route all unknown targets to Sphinx using the new
+# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
+%: Makefile
+       @$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
diff --git a/docs/_build/.doctrees/index.doctree b/docs/_build/.doctrees/index.doctree
new file mode 100644
index 000000000..9b4c6f719
Binary files /dev/null and b/docs/_build/.doctrees/index.doctree differ
diff --git a/docs/_build/_sources/index.rst.txt b/docs/_build/_sources/index.rst.txt
new file mode 100644
index 000000000..6ebfbafa1
--- /dev/null
+++ b/docs/_build/_sources/index.rst.txt
@@ -0,0 +1,2 @@
+.. automodule:: literal_test
+   :members:
diff --git a/docs/_build/index.html b/docs/_build/index.html
new file mode 100644
index 000000000..d4997b25d
--- /dev/null
+++ b/docs/_build/index.html
@@ -0,0 +1,98 @@
+
+<!DOCTYPE html>
+
+<html>
+  <head>
+    <meta charset="utf-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
+
+    <title>&lt;no title&gt; &#8212; test 1.0 documentation</title>
+    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
+    <link rel="stylesheet" type="text/css" href="_static/alabaster.css" />
+    <script data-url_root="./" id="documentation_options" src="_static/documentation_options.js"></script>
+    <script src="_static/jquery.js"></script>
+    <script src="_static/underscore.js"></script>
+    <script src="_static/doctools.js"></script>
+    <link rel="index" title="Index" href="genindex.html" />
+    <link rel="search" title="Search" href="search.html" />
+
+  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
+
+
+  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />
+
+  </head><body>
+
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+
+
+          <div class="body" role="main">
+
+  <span class="target" id="module-literal_test"></span><dl class="py function">
+<dt class="sig sig-object py" id="literal_test.foo">
+<span class="sig-prename descclassname"><span class="pre">literal_test.</span></span><span class="sig-name descname"><span class="pre">foo</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span><span class="p"><span class="pre">:</span></span> <span class="n"><span class="pre">Literal</span><span class="p"><span class="pre">[</span></span><span class="pre">True</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">int</span></span></span><a class="headerlink" href="#literal_test.foo" title="Permalink to this definition">Â¶</a></dt>
+<dt class="sig sig-object py">
+<span class="sig-prename descclassname"><span class="pre">literal_test.</span></span><span class="sig-name descname"><span class="pre">foo</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span><span class="p"><span class="pre">:</span></span> <span class="n"><span class="pre">Literal</span><span class="p"><span class="pre">[</span></span><span class="pre">False</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">str</span></span></span></dt>
+<dd><p>a func</p>
+</dd></dl>
+
+
+
+          </div>
+
+        </div>
+      </div>
+      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
+        <div class="sphinxsidebarwrapper">
+<h1 class="logo"><a href="#">test</a></h1>
+
+
+
+
+
+
+
+
+<h3>Navigation</h3>
+
+<div class="relations">
+<h3>Related Topics</h3>
+<ul>
+  <li><a href="#">Documentation overview</a><ul>
+  </ul></li>
+</ul>
+</div>
+<div id="searchbox" style="display: none" role="search">
+  <h3 id="searchlabel">Quick search</h3>
+    <div class="searchformwrapper">
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" aria-labelledby="searchlabel" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"/>
+      <input type="submit" value="Go" />
+    </form>
+    </div>
+</div>
+<script>$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="footer">
+      &copy;2025, test.
+
+      |
+      Powered by <a href="http://sphinx-doc.org/">Sphinx 4.2.0+/6c38f68da</a>
+      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.11</a>
+
+      |
+      <a href="_sources/index.rst.txt"
+          rel="nofollow">Page source</a>
+    </div>
+
+
+
+
+  </body>
+</html>
\ No newline at end of file
diff --git a/docs/conf.py b/docs/conf.py
new file mode 100644
index 000000000..34a6847aa
--- /dev/null
+++ b/docs/conf.py
@@ -0,0 +1,59 @@
+# Configuration file for the Sphinx documentation builder.
+#
+# This file only contains a selection of the most common options. For a full
+# list see the documentation:
+# https://www.sphinx-doc.org/en/master/usage/configuration.html
+
+# -- Path setup --------------------------------------------------------------
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+#
+import os
+import sys
+sys.path.insert(0, os.path.abspath('..'))
+
+
+# -- Project information -----------------------------------------------------
+
+project = 'test'
+copyright = '2025, test'
+author = 'test'
+
+# The short X.Y version
+version = '1.0'
+
+# The full version, including alpha/beta/rc tags
+release = '1.0'
+
+
+# -- General configuration ---------------------------------------------------
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = [
+    'sphinx.ext.autodoc',
+]
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+# This pattern also affects html_static_path and html_extra_path.
+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
+
+
+# -- Options for HTML output -------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+#
+html_theme = 'alabaster'
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
diff --git a/docs/index.rst b/docs/index.rst
new file mode 100644
index 000000000..6ebfbafa1
--- /dev/null
+++ b/docs/index.rst
@@ -0,0 +1,2 @@
+.. automodule:: literal_test
+   :members:
diff --git a/docs/make.bat b/docs/make.bat
new file mode 100644
index 000000000..2119f5109
--- /dev/null
+++ b/docs/make.bat
@@ -0,0 +1,35 @@
+@ECHO OFF
+
+pushd %~dp0
+
+REM Command file for Sphinx documentation
+
+if "%SPHINXBUILD%" == "" (
+       set SPHINXBUILD=sphinx-build
+)
+set SOURCEDIR=.
+set BUILDDIR=_build
+
+if "%1" == "" goto help
+
+%SPHINXBUILD% >NUL 2>NUL
+if errorlevel 9009 (
+       echo.
+       echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
+       echo.installed, then set the SPHINXBUILD environment variable to point
+       echo.to the full path of the 'sphinx-build' executable. Alternatively you
+       echo.may add the Sphinx directory to PATH.
+       echo.
+       echo.If you don't have Sphinx installed, grab it from
+       echo.http://sphinx-doc.org/
+       exit /b 1
+)
+
+%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
+goto end
+
+:help
+%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
+
+:end
+popd
diff --git a/literal_test.py b/literal_test.py
new file mode 100644
index 000000000..5ed9f14d1
--- /dev/null
+++ b/literal_test.py
@@ -0,0 +1,9 @@
+import typing
+
+@typing.overload
+def foo(x: "typing.Literal[True]") -> int: ...
+@typing.overload
+def foo(x: "typing.Literal[False]") -> str: ...
+def foo(x: bool):
+    """a func"""
+    return 1 if x else "foo"
\ No newline at end of file
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 9875a9f4b..d9aafe686 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -84,6 +84,8 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr
     """Convert a type string to a cross reference node."""
     if text == 'None':
         reftype = 'obj'
+    elif text.startswith('Literal['):
+        reftype = 'obj'
     else:
         reftype = 'class'

@@ -122,6 +124,8 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
         elif isinstance(node, ast.Constant):  # type: ignore
             if node.value is Ellipsis:
                 return [addnodes.desc_sig_punctuation('', "...")]
+            elif isinstance(node.value, (bool, int, float, str)):
+                return [nodes.Text(repr(node.value))]
             else:
                 return [nodes.Text(node.value)]
         elif isinstance(node, ast.Expr):
@@ -291,6 +295,10 @@ class PyXrefMixin:
                   innernode: Type[TextlikeNode] = nodes.emphasis,
                   contnode: Node = None, env: BuildEnvironment = None,
                   inliner: Inliner = None, location: Node = None) -> Node:
+        # Handle Literal types as objects instead of classes
+        if rolename == 'class' and target.startswith('Literal['):
+            rolename = 'obj'
+
         # we use inliner=None to make sure we get the old behaviour with a single
         # pending_xref node
         result = super().make_xref(rolename, domain, target,  # type: ignore
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index af4b47bb0..4ae9d2929 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -10,7 +10,7 @@

 import re
 from collections import OrderedDict
-from typing import Any, Dict, Iterable, Set, cast
+from typing import Any, Dict, Iterable, Set, cast, get_origin, get_args

 from docutils import nodes
 from docutils.nodes import Element
@@ -19,6 +19,12 @@ from sphinx import addnodes
 from sphinx.application import Sphinx
 from sphinx.util import inspect, typing

+def stringify_literal(annotation):
+    args = get_args(annotation)
+    if not args:
+        return str(annotation)
+    return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)
+

 def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
                      options: Dict, args: str, retann: str) -> None:
@@ -30,9 +36,15 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    if get_origin(param.annotation) is typing.Literal:
+                        annotation[param.name] = stringify_literal(param.annotation)
+                    else:
+                        annotation[param.name] = typing.stringify(param.annotation)
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                if get_origin(sig.return_annotation) is typing.Literal:
+                    annotation['return'] = stringify_literal(sig.return_annotation)
+                else:
+                    annotation['return'] = typing.stringify(sig.return_annotation)
     except (TypeError, ValueError):
         pass
