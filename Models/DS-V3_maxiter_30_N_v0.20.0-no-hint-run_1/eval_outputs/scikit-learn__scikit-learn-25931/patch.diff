diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py
index 4d6c1c3f0..622270dda 100644
--- a/sklearn/ensemble/_iforest.py
+++ b/sklearn/ensemble/_iforest.py
@@ -288,7 +288,10 @@ class IsolationForest(OutlierMixin, BaseBagging):
             Fitted estimator.
         """
         self._validate_params()
-        X = self._validate_data(X, accept_sparse=["csc"], dtype=tree_dtype)
+        # Validate data and store feature names
+X = self._validate_data(X, accept_sparse=["csc"], dtype=tree_dtype)
+if hasattr(X, 'columns'):
+    self.feature_names_in_ = X.columns.tolist()
         if issparse(X):
             # Pre-sort indices to avoid that each individual tree of the
             # ensemble sorts the indices.
@@ -345,7 +348,16 @@ class IsolationForest(OutlierMixin, BaseBagging):
             return self

         # else, define offset_ wrt contamination parameter
-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)
+        # Preserve feature names when calculating offset
+
+# Store feature names for validation
+if hasattr(X, 'columns'):
+    self.feature_names_in_ = X.columns.tolist()
+
+# Calculate offset using internal method to avoid feature name validation
+scores = self._compute_chunked_score_samples(X)
+self.offset_ = np.percentile(scores, 100.0 * self.contamination)
+

         return self

@@ -414,6 +426,10 @@ class IsolationForest(OutlierMixin, BaseBagging):
         The measure of normality of an observation given a tree is the depth
         of the leaf containing this observation, which is equivalent to
         the number of splittings required to isolate this point. In case of
+        """
+        check_is_fitted(self)
+        X = self._validate_data(X, accept_sparse="csr", reset=False)
+        return -self._compute_chunked_score_samples(X)
         several observations n_left in the leaf, the average path length of
         a n_left samples isolation tree is added.

@@ -555,3 +571,6 @@ def _average_path_length(n_samples_leaf):
     )

     return average_path_length.reshape(n_samples_leaf_shape)
+
+def _more_tags(self):
+    return {'allow_nan': False, 'requires_y': False, 'preserves_feature_names': True}
