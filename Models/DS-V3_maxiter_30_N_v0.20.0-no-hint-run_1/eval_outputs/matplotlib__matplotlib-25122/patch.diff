diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py
index 3552904c3d..2b65200040 100644
--- a/lib/matplotlib/mlab.py
+++ b/lib/matplotlib/mlab.py
@@ -420,14 +420,21 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
         # MATLAB divides by the sampling frequency so that density function
         # has units of dB/Hz and can be integrated by the plotted frequency
         # values. Perform the same scaling here.
-        if scale_by_freq:
-            result /= Fs
-            # Scale the spectrum by the norm of the window to compensate for
-            # windowing loss; see Bendat & Piersol Sec 11.5.2.
-            result /= (np.abs(window)**2).sum()
-        else:
-            # In this case, preserve power in the segment, not amplitude
-            result /= np.abs(window).sum()**2
+        # Scale the spectrum by the norm of the window to compensate for
+        # windowing loss; see Bendat & Piersol Sec 11.5.2.
+        print("Window correction debug:")
+print("Fs:", Fs)
+print("Window:", window)
+print("Window sum:", window.sum())
+print("Window sum squared:", (window.sum())**2)
+print("Window**2 sum:", (window**2).sum())
+if scale_by_freq:
+    print("Applying scale_by_freq correction")
+    result /= Fs * (window**2).sum()
+else:
+    print("Applying non-scale_by_freq correction")
+    result /= (window.sum())**2
+print("Result after correction:", result)

     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs
