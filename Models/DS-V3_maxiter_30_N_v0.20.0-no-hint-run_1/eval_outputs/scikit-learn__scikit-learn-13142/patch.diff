diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..5d35fcb1e 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 best_params = self._get_parameters()
                 best_n_iter = n_iter

-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -273,7 +268,9 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound

-        return log_resp.argmax(axis=1)
+        # Use the best parameters to predict instead of final E-step results
+        log_prob = self._estimate_log_prob(X)
+        return self._estimate_weighted_log_prob(log_prob).argmax(axis=1)

     def _e_step(self, X):
         """E step.
@@ -371,7 +368,8 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         """
         self._check_is_fitted()
         X = _check_X(X, None, self.means_.shape[1])
-        return self._estimate_weighted_log_prob(X).argmax(axis=1)
+        log_prob = self._estimate_log_prob(X)
+        return self._estimate_weighted_log_prob(log_prob).argmax(axis=1)

     def predict_proba(self, X):
         """Predict posterior probability of each component given the data.
diff --git a/test_gm.py b/test_gm.py
new file mode 100644
index 000000000..a65e3238f
--- /dev/null
+++ b/test_gm.py
@@ -0,0 +1,14 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy
+X = numpy.random.randn(1000,5)
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1,c2)
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1,c2)
\ No newline at end of file
