diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..6c15aa411f 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -134,7 +134,12 @@ class Field(RegisterLookupMixin):
                  serialize=True, unique_for_date=None, unique_for_month=None,
                  unique_for_year=None, choices=None, help_text='', db_column=None,
                  db_tablespace=None, auto_created=False, validators=(),
-                 error_messages=None):
+                 error_messages=None, creation_counter=None):
+        if creation_counter is None:
+            self.creation_counter = Field.creation_counter
+            Field.creation_counter += 1
+        else:
+            self.creation_counter = creation_counter
         self.name = name
         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
         self._verbose_name = verbose_name  # Store original for deconstruction
@@ -417,6 +422,17 @@ class Field(RegisterLookupMixin):
     def deconstruct(self):
         """
         Return enough information to recreate the field as a 4-tuple:
+        * The name of the field on the model, if contribute_to_class() has
+          been run.
+        * The import path of the field, including the class:e.g.
+          django.db.models.IntegerField This should be the most portable
+          version, so less specific may be better.
+        * A list of positional arguments.
+        * A dict of keyword arguments.
+        """
+        name, path, args, kwargs = super().deconstruct()
+        kwargs['creation_counter'] = self.creation_counter
+        return name, path, args, kwargs

          * The name of the field on the model, if contribute_to_class() has
            been run.
@@ -516,21 +532,28 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            return (getattr(self, 'model', None) == getattr(other, 'model', None) and
+                    self.creation_counter == other.creation_counter)
         return NotImplemented

     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
+            self_model = str(getattr(self, 'model', None))
+            other_model = str(getattr(other, 'model', None))
+            if self_model != other_model:
+                return self_model < other_model
             return self.creation_counter < other.creation_counter
         return NotImplemented

     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((self.creation_counter, getattr(self, 'model', None)))

     def __deepcopy__(self, memodict):
-        # We don't have to deepcopy very much here, since most things are not
-        # intended to be altered after initial creation.
+        obj = copy.deepcopy(self, memodict)
+        obj.creation_counter = Field.creation_counter
+        Field.creation_counter += 1
+        return obj
         obj = copy.copy(self)
         if self.remote_field:
             obj.remote_field = copy.copy(self.remote_field)
