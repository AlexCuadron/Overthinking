diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index 872a4c98dc..f29b41e913 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -74,9 +74,33 @@ from django.utils.functional import cached_property

 class ForeignKeyDeferredAttribute(DeferredAttribute):
     def __set__(self, instance, value):
-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):
-            self.field.delete_cached_value(instance)
-        instance.__dict__[self.field.attname] = value
+        # Get the current value
+        current_value = instance.__dict__.get(self.field.attname)
+
+        # If we're setting a model instance
+        if hasattr(value, 'pk'):
+            # Store the instance in cache
+            self.field.set_cached_value(instance, value)
+
+            # If the instance has a primary key, use it
+            if value.pk is not None:
+                new_value = value.pk
+            else:
+                # If no primary key yet, set a temporary value and connect to post-save signal
+                new_value = ''
+                def update_fk(sender, instance, **kwargs):
+                    if instance == value:
+                        setattr(instance._meta.parent_model, self.field.attname, instance.pk)
+                        signals.post_save.disconnect(update_fk, sender=sender)
+                signals.post_save.connect(update_fk, sender=value.__class__, weak=False)
+        else:
+            new_value = value
+
+        # Update the value if it has changed
+        if current_value != new_value:
+            if self.field.is_cached(instance):
+                self.field.delete_cached_value(instance)
+            instance.__dict__[self.field.attname] = new_value


 class ForwardManyToOneDescriptor:
