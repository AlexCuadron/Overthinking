diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py
index 381b5b13db..abcab1db7f 100644
--- a/astropy/io/ascii/core.py
+++ b/astropy/io/ascii/core.py
@@ -1712,6 +1712,35 @@ def _get_reader(Reader, Inputter=None, Outputter=None, **kwargs):
             reader.data.splitter = BaseSplitter()
         reader.header.splitter.delimiter = kwargs["delimiter"]
         reader.data.splitter.delimiter = kwargs["delimiter"]
+    # Handle header_rows parameter for RST writer
+    if "header_rows" in kwargs and Writer._format_name == "rst":
+        writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
+    # Handle writer-specific parameters
+    if Writer._format_name == "rst":
+        if "header_rows" in kwargs:
+            writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
+    # Handle writer-specific parameters
+    if Writer._format_name == "rst" and "header_rows" in kwargs:
+        writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
+    # Handle writer-specific parameters
+    if Writer._format_name == "rst" and "header_rows" in kwargs:
+        writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
+    # Handle writer-specific parameters
+    if Writer._format_name == "rst" and "header_rows" in kwargs:
+        writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
+    # Handle writer-specific parameters
+    if Writer._format_name == "rst" and "header_rows" in kwargs:
+        writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
+    # Handle writer-specific parameters
+    if Writer._format_name == "rst" and "header_rows" in kwargs:
+        writer_kwargs["header_rows"] = kwargs.pop("header_rows")
+
     if "comment" in kwargs:
         reader.header.comment = kwargs["comment"]
         reader.data.comment = kwargs["comment"]
diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..aae2ec8a0a 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -57,10 +57,30 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader

-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
-
-    def write(self, lines):
+    def __init__(self, **kwargs):
+        self.header_rows = kwargs.pop('header_rows', [])
+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)
+
+    def write(self, lines, **kwargs):
+        # Get header_rows from kwargs or instance
+        header_rows = kwargs.get('header_rows', self.header_rows)
+
+        # First generate the basic table
         lines = super().write(lines)
+
+        # If we have header rows, modify the header formatting
+        if header_rows:
+            # Split the existing header line
+            header_lines = lines[1].split('\n')
+
+            # Add additional header rows
+            for row in header_rows:
+                header_lines.insert(1, row)
+
+            # Join the header lines back together
+            lines[1] = '\n'.join(header_lines)
+
+        # Add the top and bottom borders
         lines = [lines[1]] + lines + [lines[1]]
+
         return lines
