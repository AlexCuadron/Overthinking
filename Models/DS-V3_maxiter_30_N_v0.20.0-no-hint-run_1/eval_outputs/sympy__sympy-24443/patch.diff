diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..77d88b2546 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -287,7 +287,88 @@ def homomorphism(domain, codomain, gens, images=(), check=True):
     if not isinstance(codomain, (PermutationGroup, FpGroup, FreeGroup)):
         raise TypeError("The codomain must be a group")

+    # Create a complete mapping including inverses
+    images_dict = {}
+    for gen, img in zip(gens, images):
+        images_dict[gen] = img
+        images_dict[gen**-1] = img**-1
+
+    # Add identity mapping for unspecified generators
     generators = domain.generators
+    for gen in generators:
+        if gen not in images_dict and gen**-1 not in images_dict:
+            images_dict[gen] = codomain.identity
+            images_dict[gen**-1] = codomain.identity
+
+    # Verify that the images preserve the group relations
+    if check:
+        rels = domain.presentation().relators if hasattr(domain, 'presentation') else domain.relators
+        for rel in rels:
+            img_rel = _image(rel, images_dict)
+            if img_rel != codomain.identity:
+                raise ValueError(f"The given images do not define a homomorphism. Relation {rel} maps to {img_rel} instead of identity")
+
+    return GroupHomomorphism(domain, codomain, images_dict)
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
+
+def _image(r, images):
+    identity = list(images.values())[0].parent().identity
+    if r.is_identity:
+        return identity
+    else:
+        w = identity
+        r_arr = r.array_form
+        i = 0
+        j = 0
+        while i < len(r):
+            power = r_arr[j][1]
+            s = r[i]
+            if s in images:
+                w = w*images[s]**power
+            elif s**-1 in images:
+                w = w*images[s**-1]**power
+            i += abs(power)
+            j += 1
+        return w
     if not all(g in generators for g in gens):
         raise ValueError("The supplied generators must be a subset of the domain's generators")
     if not all(g in codomain for g in images):
@@ -314,6 +395,29 @@ def _check_homomorphism(domain, codomain, images):
         gens = domain.presentation().generators
         rels = domain.presentation().relators
     identity = codomain.identity
+
+    # Verify that all generators and their inverses are properly mapped
+    for g in gens:
+        if g not in images and g**-1 not in images:
+            return False
+        if g in images:
+            if g**-1 in images:
+                if images[g]**-1 != images[g**-1]:
+                    return False
+            else:
+                # If inverse not explicitly mapped, verify it matches the inverse of the image
+                if images[g]**-1 not in images.values():
+                    return False
+        elif g**-1 in images:
+            # If only inverse is mapped, verify it matches the inverse of some image
+            if images[g**-1]**-1 not in images.values():
+                return False
+
+    # Verify that the images preserve the group relations
+    for rel in rels:
+        if _image(rel) != identity:
+            return False
+    return True

     def _image(r):
         if r.is_identity:
@@ -333,8 +437,17 @@ def _image(r):
             # both indices
             while i < len(r):
                 power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup):
+                    # Handle both regular and inverted generators
+                    gen = r[i]
+                    if gen in gens:
+                        s = domain.generators[gens.index(gen)]
+                    elif gen**-1 in gens:
+                        s = domain.generators[gens.index(gen**-1)]**-1
+                    else:
+                        # Handle case where generator is not directly in gens
+                        # but can be expressed through group operations
+                        s = gen
                 else:
                     s = r[i]
                 if s in images:
