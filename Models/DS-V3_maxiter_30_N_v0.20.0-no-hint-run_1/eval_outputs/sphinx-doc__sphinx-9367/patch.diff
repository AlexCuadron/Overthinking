diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py
index f541ec0a9..06d67f8ec 100644
--- a/sphinx/pycode/ast.py
+++ b/sphinx/pycode/ast.py
@@ -78,7 +78,11 @@ def unparse(node: Optional[ast.AST], code: str = '') -> Optional[str]:
         return None
     elif isinstance(node, str):
         return node
-    return _UnparseVisitor(code).visit(node)
+    visitor = _UnparseVisitor(code)
+    print(f"Using visitor: {visitor}")  # Debug print
+    result = visitor.visit(node)
+    print(f"Unparse result: {result}")  # Debug print
+    return result


 # a greatly cut-down version of `ast._Unparser`
@@ -86,9 +90,25 @@ class _UnparseVisitor(ast.NodeVisitor):
     def __init__(self, code: str = '') -> None:
         self.code = code

+    def visit_Tuple(self, node: ast.Tuple) -> str:
+        print(f"Processing tuple: {node.elts}")  # Debug print
+        if node.elts:
+            if len(node.elts) == 1:
+                result = "(" + self.visit(node.elts[0]) + ",)"
+                print(f"Single-element tuple result: {result}")  # Debug print
+                return result
+            else:
+                result = "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
+                print(f"Multi-element tuple result: {result}")  # Debug print
+                return result
+        else:
+            print("Empty tuple")  # Debug print
+            return "()"
+
     def _visit_op(self, node: ast.AST) -> str:
         return OPERATORS[node.__class__]
-    for _op in OPERATORS:
+    # Skip creating visit methods for tuple-related operators
+    for _op in [op for op in OPERATORS if not isinstance(op, type(ast.Tuple))]:
         locals()['visit_{}'.format(_op.__name__)] = _visit_op

     def visit_arg(self, node: ast.arg) -> str:
@@ -213,9 +233,18 @@ class _UnparseVisitor(ast.NodeVisitor):
         return "%s %s" % (self.visit(node.op), self.visit(node.operand))

     def visit_Tuple(self, node: ast.Tuple) -> str:
+        print(f"Processing tuple: {node.elts}")  # Debug print
         if node.elts:
-            return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
+            if len(node.elts) == 1:
+                result = "(" + self.visit(node.elts[0]) + ",)"
+                print(f"Single-element tuple result: {result}")  # Debug print
+                return result
+            else:
+                result = "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
+                print(f"Multi-element tuple result: {result}")  # Debug print
+                return result
         else:
+            print("Empty tuple")  # Debug print
             return "()"

     if sys.version_info < (3, 8):
