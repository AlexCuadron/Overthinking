diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 70cbc3ba1..3277bda82 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -28,11 +28,44 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
             sig = inspect.signature(obj)
+            type_aliases = getattr(app.config, 'autodoc_type_aliases', {})
+
+            # Get the module name for proper type alias resolution
+            module_name = obj.__module__
+
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    ann = typing.stringify(param.annotation)
+                    # Apply type aliases with module context
+                    for alias, replacement in type_aliases.items():
+                        # Handle both direct matches and fully qualified names
+                        if ann == alias or ann == f"{module_name}.{alias}":
+                            ann = replacement
+                            break
+                        # Handle typing module aliases
+                        if ann == f"typing.{alias}":
+                            ann = replacement
+                            break
+                        # Handle cases where the annotation is the full path
+                        if '.' in replacement and ann.endswith(replacement.split('.')[-1]):
+                            ann = replacement
+                            break
+                    annotation[param.name] = ann
+
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                ann = typing.stringify(sig.return_annotation)
+                # Apply type aliases to return annotation with module context
+                for alias, replacement in type_aliases.items():
+                    if ann == alias or ann == f"{module_name}.{alias}":
+                        ann = replacement
+                        break
+                    if ann == f"typing.{alias}":
+                        ann = replacement
+                        break
+                    if '.' in replacement and ann.endswith(replacement.split('.')[-1]):
+                        ann = replacement
+                        break
+                annotation['return'] = ann
     except (TypeError, ValueError):
         pass

@@ -103,7 +136,21 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
         elif parts[0] == 'rtype':
             arguments['return'] = {'type': True}

+    # Get type aliases from app config
+    type_aliases = getattr(node.document.settings.env.app.config, 'autodoc_type_aliases', {})
+
     for name, annotation in annotations.items():
+        # Apply type aliases if they exist
+        for alias, replacement in type_aliases.items():
+            # Handle both direct matches and stringified type annotations
+            if annotation == alias or annotation == f"typing.{alias}":
+                annotation = replacement
+                break
+            # Handle cases where the annotation is the full path
+            if '.' in replacement and annotation.endswith(replacement.split('.')[-1]):
+                annotation = replacement
+                break
+
         if name == 'return':
             continue

@@ -120,9 +167,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             node += field

     if 'return' in annotations and 'return' not in arguments:
+        # Apply type aliases to return annotation
+        return_annotation = annotations['return']
+        for alias, replacement in type_aliases.items():
+            if return_annotation == alias:
+                return_annotation = replacement
+                break
+
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
+        field += nodes.field_body('', nodes.paragraph('', return_annotation))
         node += field


diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 18649433b..a55c347e9 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -277,12 +277,25 @@ def _restify_py36(cls: Optional["Type"]) -> str:

 def stringify(annotation: Any) -> str:
     """Stringify type annotation object."""
+    # Get type aliases from app config if available
+    try:
+        type_aliases = getattr(annotation, '_app', {}).config.autodoc_type_aliases
+    except AttributeError:
+        type_aliases = {}
+
     if isinstance(annotation, str):
         if annotation.startswith("'") and annotation.endswith("'"):
             # might be a double Forward-ref'ed type.  Go unquoting.
-            return annotation[1:-1]
-        else:
-            return annotation
+            annotation = annotation[1:-1]
+
+        # Check if this string matches a type alias
+        for alias, replacement in type_aliases.items():
+            if annotation == alias or annotation == f"typing.{alias}":
+                return replacement
+            if '.' in replacement and annotation.endswith(replacement.split('.')[-1]):
+                return replacement
+        return annotation
+
     elif isinstance(annotation, TypeVar):
         return annotation.__name__
     elif not annotation:
