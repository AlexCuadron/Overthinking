diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 2fef3edb..956c02d7 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3481,17 +3481,29 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)

     def integrate(
-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
+        self, coord: Union[Hashable, Sequence[Hashable]] = None, datetime_unit: str = None, dim=None
     ) -> "DataArray":
+        # Handle backward compatibility with 'dim' parameter
+        if dim is not None:
+            import warnings
+            warnings.warn(
+                "The 'dim' parameter is deprecated and will be removed in a future version. "
+                "Use 'coord' instead.",
+                FutureWarning,
+                stacklevel=2
+            )
+            coord = dim
+        if coord is None:
+            raise ValueError("Must specify either 'coord' or 'dim' parameter")
         """ integrate the array with the trapezoidal rule.

         .. note::
-            This feature is limited to simple cartesian geometry, i.e. dim
+            This feature is limited to simple cartesian geometry, i.e. coord
             must be one dimensional.

         Parameters
         ----------
-        dim : hashable, or sequence of hashable
+        coord : hashable, or sequence of hashable
             Coordinate(s) used for the integration.
         datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
                          "ps", "fs", "as"}, optional
@@ -3528,8 +3540,10 @@ class DataArray(AbstractArray, DataWithCoords):
         array([5.4, 6.6, 7.8])
         Dimensions without coordinates: y
         """
-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)
-        return self._from_temp_dataset(ds)
+        # Handle both coord and dim parameters
+integration_dim = coord if coord is not None else dim
+ds = self._to_temp_dataset().integrate(integration_dim, datetime_unit)
+return self._from_temp_dataset(ds)

     def unify_chunks(self) -> "DataArray":
         """Unify chunk size along all chunked dimensions of this DataArray.
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index a73e299e..6a700135 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -5963,7 +5963,19 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
                 variables[k] = v
         return self._replace(variables)

-    def integrate(self, coord, datetime_unit=None):
+    def integrate(self, coord=None, datetime_unit=None, **kwargs):
+    # Handle backward compatibility
+    if 'dim' in kwargs:
+        import warnings
+        warnings.warn(
+            "The 'dim' parameter is deprecated and will be removed in a future version. "
+            "Use 'coord' instead.",
+            FutureWarning,
+            stacklevel=2
+        )
+        coord = kwargs['dim']
+    if coord is None:
+        raise ValueError("Must specify either 'coord' or 'dim' parameter")
         """ integrate the array with the trapezoidal rule.

         .. note::
