diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index fdac0f3560..a7c339843e 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -2180,6 +2180,8 @@ class Axes(_AxesBase):
             # wrap numpy arrays.
             try:
                 x0 = cbook._safe_first_finite(x0)
+                if np.isnan(x0):
+                    x0 = 0  # Default to 0 if we get NaN
             except (TypeError, IndexError, KeyError):
                 pass

@@ -2236,6 +2238,19 @@ class Axes(_AxesBase):
             - 'center': Center the base on the *x* positions.
             - 'edge': Align the left edges of the bars with the *x* positions.

+        # Handle NaN values
+        x = np.asarray(x)
+        height = np.asarray(height)
+        valid = ~np.isnan(x) & ~np.isnan(height)
+        if not np.any(valid):
+            return self.bar([0], [0], width=0, **kwargs)
+        x = x[valid]
+        height = height[valid]
+
+        # Handle NaN values in x positions
+        x = np.asarray(x)
+        x = np.where(np.isnan(x), 0, x)
+
             To align the bars on the right edge pass a negative *width* and
             ``align='edge'``.

diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..de5fe3c27e 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1709,6 +1709,7 @@ def safe_first_element(obj):
 def _safe_first_finite(obj, *, skip_nonfinite=True):
     """
     Return the first non-None (and optionally finite) element in *obj*.
+    If all elements are NaN/None, return NaN.

     This is a method for internal use.

@@ -1719,6 +1720,26 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
     def safe_isfinite(val):
         if val is None:
             return False
+        try:
+            return np.isfinite(val)
+        except (TypeError, ValueError):
+            return True
+
+    try:
+        return next(val for val in obj if safe_isfinite(val))
+    except StopIteration:
+        return np.nan
+            return False
+        try:
+            return np.isfinite(val)
+        except (TypeError, ValueError):
+            return True
+
+    try:
+        return next(val for val in obj if safe_isfinite(val))
+    except StopIteration:
+        return np.nan
+            return False
         try:
             return np.isfinite(val) if np.isscalar(val) else True
         except TypeError:
diff --git a/test_bar_nan.py b/test_bar_nan.py
new file mode 100644
index 0000000000..3a5f3b1e2b
--- /dev/null
+++ b/test_bar_nan.py
@@ -0,0 +1,6 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+f, ax = plt.subplots()
+ax.bar([np.nan], [np.nan])
+plt.show()
\ No newline at end of file
