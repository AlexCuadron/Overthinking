diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 807badde..19887ce6 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -2872,10 +2872,13 @@ class DataArray(AbstractArray, DataWithCoords):
         numpy.nanpercentile, pandas.Series.quantile, Dataset.quantile
         """

-        ds = self._to_temp_dataset().quantile(
-            q, dim=dim, keep_attrs=keep_attrs, interpolation=interpolation
+        result = self.variable.quantile(
+            q, dim=dim, interpolation=interpolation, keep_attrs=keep_attrs
         )
-        return self._from_temp_dataset(ds)
+        new_array = self._replace_maybe_drop_dims(result)
+        if keep_attrs:
+            new_array.attrs = self.attrs.copy()
+        return new_array

     def rank(
         self, dim: Hashable, pct: bool = False, keep_attrs: bool = None
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index d6f0da42..42da3b62 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -4767,9 +4767,13 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
                             # axis=(0, 1) if they will be equivalent, because
                             # the former is often more efficient
                             reduce_dims = None
-                        variables[name] = var.quantile(
-                            q, dim=reduce_dims, interpolation=interpolation
+                        quantile_var = var.quantile(
+                            q, dim=reduce_dims, interpolation=interpolation,
+                            keep_attrs=keep_attrs
                         )
+if keep_attrs:
+    quantile_var.attrs = var.attrs.copy()
+variables[name] = quantile_var

             else:
                 variables[name] = var
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 2e9906ce..004d0f9b 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1592,7 +1592,7 @@ class Variable(
         """
         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)

-    def quantile(self, q, dim=None, interpolation="linear"):
+    def quantile(self, q, dim=None, interpolation="linear", keep_attrs=None):
         """Compute the qth quantile of the data along the specified dimension.

         Returns the qth quantiles(s) of the array elements.
@@ -1957,7 +1957,13 @@ class IndexVariable(Variable):
     def _finalize_indexing_result(self, dims, data):
         if getattr(data, "ndim", 0) != 1:
             # returns Variable rather than IndexVariable if multi-dimensional
-            return Variable(dims, data, self._attrs, self._encoding)
+            if keep_attrs is None:
+            keep_attrs = _get_keep_attrs(default=False)
+        attrs = self._attrs if keep_attrs else None
+        if keep_attrs is None:
+    keep_attrs = _get_keep_attrs(default=False)
+attrs = self._attrs.copy() if keep_attrs else None
+return Variable(dims, data, attrs, self._encoding)
         else:
             return type(self)(dims, data, self._attrs, self._encoding, fastpath=True)
