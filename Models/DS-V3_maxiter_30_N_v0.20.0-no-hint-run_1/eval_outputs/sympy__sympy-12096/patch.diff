diff --git a/sympy/core/function.py b/sympy/core/function.py
index 1b8005e1d2..b3d5f4f731 100644
--- a/sympy/core/function.py
+++ b/sympy/core/function.py
@@ -507,7 +507,62 @@ def _eval_evalf(self, prec):
             func = getattr(mpmath, fname)
         except (AttributeError, KeyError):
             try:
-                return Float(self._imp_(*self.args), prec)
+                # Evaluate all arguments first
+                evaluated_args = []
+                for arg in self.args:
+                    if hasattr(arg, 'evalf'):
+                        evaluated = arg.evalf(prec)
+                        if hasattr(evaluated, '_eval_evalf'):
+                            evaluated = evaluated._eval_evalf(prec)
+                        evaluated_args.append(evaluated)
+                    else:
+                        evaluated_args.append(arg)
+
+                result = self._imp_(*evaluated_args)
+                # If result is a function, evaluate it
+                if hasattr(result, 'func') and hasattr(result, 'args'):
+                    return result.evalf(prec)
+                # If result is a number, return it as Float
+                if isinstance(result, (int, float)):
+                    return Float(result, prec)
+                # If result has _eval_evalf, use it
+                if hasattr(result, '_eval_evalf'):
+                    return result._eval_evalf(prec)
+                # If result is a SymPy expression, try to evaluate it
+                if hasattr(result, 'evalf'):
+                    return result.evalf(prec)
+                # If result is a callable, call it and evaluate the result
+                if callable(result):
+                    try:
+                        result = result(*evaluated_args)
+                        if hasattr(result, 'evalf'):
+                            return result.evalf(prec)
+                        return Float(float(result), prec)
+                    except (TypeError, ValueError):
+                        return
+                # If result is a tuple, try to evaluate each element
+                if isinstance(result, tuple):
+                    try:
+                        return tuple(Float(float(x), prec) for x in result)
+                    except (TypeError, ValueError):
+                        return
+                # If result is a list, try to evaluate each element
+                if isinstance(result, list):
+                    try:
+                        return [Float(float(x), prec) for x in result]
+                    except (TypeError, ValueError):
+                        return
+                # If result is a dict, try to evaluate each value
+                if isinstance(result, dict):
+                    try:
+                        return {k: Float(float(v), prec) for k, v in result.items()}
+                    except (TypeError, ValueError):
+                        return
+                # Otherwise, try to evaluate the result as a number
+                try:
+                    return Float(float(result), prec)
+                except (TypeError, ValueError):
+                    return
             except (AttributeError, TypeError, ValueError):
                 return
