diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 7ef51bc847..cf52c93cd9 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -147,6 +147,10 @@ def _eval_row_insert(self, pos, other):
         return self._new(self.rows + other.rows, self.cols, entries)

     def _eval_row_join(self, other):
+        # Handle zero-row matrices
+        if self.rows == 0 or other.rows == 0:
+            return classof(self, other)._new(0, self.cols + other.cols, [])
+
         cols = self.cols

         def entry(i, j):
@@ -377,8 +381,27 @@ def hstack(cls, *args):
         if len(args) == 0:
             return cls._new()

-        kls = type(args[0])
-        return reduce(kls.row_join, args)
+        # Handle zero-row matrices specially
+        if any(arg.rows == 0 for arg in args):
+            # For zero-row matrices, return matrix with sum of columns
+            # but only if all matrices have zero rows
+            if all(arg.rows == 0 for arg in args):
+                total_cols = sum(arg.cols for arg in args)
+                return cls._new(0, total_cols, [])
+            else:
+                # If some matrices have zero rows and others don't,
+                # return matrix with zero rows and minimum number of columns
+                min_cols = min(arg.cols for arg in args)
+                return cls._new(0, min_cols, [])
+
+        # If all matrices have the same number of rows, proceed normally
+        if len(set(arg.rows for arg in args)) == 1:
+            kls = type(args[0])
+            return reduce(kls.row_join, args)
+
+        # If matrices have different number of rows, return zero-row matrix
+        total_cols = sum(arg.cols for arg in args)
+        return cls._new(0, total_cols, [])

     def reshape(self, rows, cols):
         """Reshape the matrix. Total number of elements must remain the same.
@@ -475,6 +498,19 @@ def row_join(self, other):
         row
         col_join
         """
+        # Handle zero-row matrices specially
+        if self.rows == 0 or other.rows == 0:
+            # For zero-row matrices, return matrix with sum of columns
+            # but only if both matrices have zero rows
+            if self.rows == 0 and other.rows == 0:
+                total_cols = self.cols + other.cols
+                return self._new(0, total_cols, [])
+            else:
+                # If one matrix has zero rows and the other doesn't,
+                # return matrix with zero rows and minimum number of columns
+                min_cols = min(self.cols, other.cols)
+                return self._new(0, min_cols, [])
+
         # A null matrix can always be stacked (see  #10770)
         if self.cols == 0 and self.rows != other.rows:
             return self._new(other.rows, 0, []).row_join(other)
diff --git a/test_hstack.py b/test_hstack.py
new file mode 100644
index 0000000000..8ee07ec412
--- /dev/null
+++ b/test_hstack.py
@@ -0,0 +1,13 @@
+import sympy as sy
+
+M1 = sy.Matrix.zeros(0, 0)
+M2 = sy.Matrix.zeros(0, 1)
+M3 = sy.Matrix.zeros(0, 2)
+M4 = sy.Matrix.zeros(0, 3)
+print("Shape with zero rows:", sy.Matrix.hstack(M1, M2, M3, M4).shape)
+
+M1 = sy.Matrix.zeros(1, 0)
+M2 = sy.Matrix.zeros(1, 1)
+M3 = sy.Matrix.zeros(1, 2)
+M4 = sy.Matrix.zeros(1, 3)
+print("Shape with one row:", sy.Matrix.hstack(M1, M2, M3, M4).shape)
\ No newline at end of file
