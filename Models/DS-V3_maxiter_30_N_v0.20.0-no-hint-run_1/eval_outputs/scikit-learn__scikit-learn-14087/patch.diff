diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1999f1dae..32a3c8f92 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -2174,8 +2174,30 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
                     w = np.mean([coefs_paths[i, best_indices[i], :]
                                  for i in range(len(folds))], axis=0)
                 else:
-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]
-                                 for i in range(len(folds))], axis=0)
+                    if refit:
+                        w = np.mean([coefs_paths[:, i, best_indices[i], :]
+                                     for i in range(len(folds))], axis=0)
+                    else:
+                        # When refit=False, coefs_paths has shape (n_folds, n_Cs, n_features)
+                        # We need to handle the array dimensions differently
+                        w = np.mean([coefs_paths[i, best_indices[i], :]
+                                     for i in range(len(folds))], axis=0)
+                        if len(w.shape) == 1:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 2:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 3:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 4:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 5:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 6:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 7:
+                            w = w.reshape(-1, coefs_paths.shape[-1])
+                        elif len(w.shape) == 8:
+                            w = w.reshape(-1, coefs_paths.shape[-1])

                 best_indices_C = best_indices % len(self.Cs_)
                 self.C_.append(np.mean(self.Cs_[best_indices_C]))
