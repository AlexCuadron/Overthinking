diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py
index a199e45d40..28965b0933 100644
--- a/lib/matplotlib/widgets.py
+++ b/lib/matplotlib/widgets.py
@@ -2070,6 +2070,15 @@ class SpanSelector(_SelectorWidget):
                  rectprops=None, onmove_callback=None, interactive=False,
                  button=None, handle_props=None, handle_grab_distance=10,
                  drag_from_anywhere=False):
+        # Store original axes limits before initialization
+        self._original_xlim = ax.get_xlim() if direction == 'horizontal' else None
+        self._original_ylim = ax.get_ylim() if direction == 'vertical' else None
+
+        # Disable autoscaling
+        if direction == 'horizontal':
+            ax.set_autoscalex_on(False)
+        else:
+            ax.set_autoscaley_on(False)

         super().__init__(ax, onselect, useblit=useblit, button=button)

@@ -2131,6 +2140,22 @@ class SpanSelector(_SelectorWidget):
     def new_axes(self, ax):
         """Set SpanSelector to operate on a new Axes."""
         self.ax = ax
+        # Store original axes limits
+        self._original_xlim = ax.get_xlim() if self.direction == 'horizontal' else None
+        self._original_ylim = ax.get_ylim() if self.direction == 'vertical' else None
+
+        # Explicitly set the axes limits to prevent modification
+        if self.direction == 'horizontal':
+            ax.set_xlim(self._original_xlim)
+        else:
+            ax.set_ylim(self._original_ylim)
+
+        # Disable autoscaling to prevent axes limits from changing
+        if self.direction == 'horizontal':
+            ax.set_autoscalex_on(False)
+        else:
+            ax.set_autoscaley_on(False)
+
         if self.canvas is not ax.figure.canvas:
             if self.canvas is not None:
                 self.disconnect_events()
@@ -2141,13 +2166,21 @@ class SpanSelector(_SelectorWidget):
         if self.direction == 'horizontal':
             trans = ax.get_xaxis_transform()
             w, h = 0, 1
+            # Use original x limits for initial rectangle position
+            x0 = self._original_xlim[0] if self._original_xlim else 0
+            self._rect = Rectangle((x0, 0), w, h,
+                                 transform=trans,
+                                 visible=False,
+                                 **self._rectprops)
         else:
             trans = ax.get_yaxis_transform()
             w, h = 1, 0
-        self._rect = Rectangle((0, 0), w, h,
-                               transform=trans,
-                               visible=False,
-                               **self._rectprops)
+            # Use original y limits for initial rectangle position
+            y0 = self._original_ylim[0] if self._original_ylim else 0
+            self._rect = Rectangle((0, y0), w, h,
+                                 transform=trans,
+                                 visible=False,
+                                 **self._rectprops)

         self.ax.add_patch(self._rect)
         if len(self.artists) > 0:
@@ -2184,7 +2217,12 @@ class SpanSelector(_SelectorWidget):
             # visibility to False and extents to (v, v)
             # update will be called when setting the extents
             self.visible = False
-            self.extents = v, v
+            # Respect original axes limits when setting initial extents
+                if self.direction == 'horizontal' and self._original_xlim:
+                    v = max(min(v, self._original_xlim[1]), self._original_xlim[0])
+                elif self.direction == 'vertical' and self._original_ylim:
+                    v = max(min(v, self._original_ylim[1]), self._original_ylim[0])
+                self.extents = v, v
             # We need to set the visibility back, so the span selector will be
             # drawn when necessary (span width > 0)
             self.visible = True
@@ -2280,10 +2318,35 @@ class SpanSelector(_SelectorWidget):
     def _draw_shape(self, vmin, vmax):
         if vmin > vmax:
             vmin, vmax = vmax, vmin
+
+        # Clip values to original axes limits
+        if self.direction == 'horizontal' and self._original_xlim:
+            vmin = max(vmin, self._original_xlim[0])
+            vmax = min(vmax, self._original_xlim[1])
+        elif self.direction == 'vertical' and self._original_ylim:
+            vmin = max(vmin, self._original_ylim[0])
+            vmax = min(vmax, self._original_ylim[1])
+
+        if self.direction == 'horizontal':
+            self._rect.set_x(vmin)
+            self._rect.set_width(vmax - vmin)
+        else:
+            self._rect.set_y(vmin)
+            self._rect.set_height(vmax - vmin)
+        if vmin > vmax:
+            vmin, vmax = vmax, vmin
+
+        # Respect original axes limits
         if self.direction == 'horizontal':
+            if self._original_xlim:
+                vmin = max(vmin, self._original_xlim[0])
+                vmax = min(vmax, self._original_xlim[1])
             self._rect.set_x(vmin)
             self._rect.set_width(vmax - vmin)
         else:
+            if self._original_ylim:
+                vmin = max(vmin, self._original_ylim[0])
+                vmax = min(vmax, self._original_ylim[1])
             self._rect.set_y(vmin)
             self._rect.set_height(vmax - vmin)
