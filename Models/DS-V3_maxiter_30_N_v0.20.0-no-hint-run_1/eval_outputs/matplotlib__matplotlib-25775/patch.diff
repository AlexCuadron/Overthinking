diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py
index 6520b1d83e..f22abbe873 100644
--- a/lib/matplotlib/backend_bases.py
+++ b/lib/matplotlib/backend_bases.py
@@ -758,6 +758,24 @@ class RendererBase:

 class GraphicsContextBase:
     """An abstract base class that provides color, line styles, etc."""
+
+    def __init__(self):
+        self._antialiased = None
+
+    def set_antialiased(self, aa):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        aa : bool or None
+            Whether to use antialiasing. None means use rcParams setting.
+        """
+        self._antialiased = aa
+
+    def get_antialiased(self):
+        """Return whether antialiasing is enabled."""
+        return self._antialiased

     def __init__(self):
         self._alpha = 1.0
diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py
index 7d038a998f..f7b57c274b 100644
--- a/lib/matplotlib/backends/backend_agg.py
+++ b/lib/matplotlib/backends/backend_agg.py
@@ -205,8 +205,11 @@ class RendererAgg(RendererBase):
         # We pass '0' for angle here, since it will be rotated (in raster
         # space) in the following call to draw_text_image).
         font.set_text(s, 0, flags=get_hinting_flag())
+        aa = getattr(gc, '_antialiased', None)
+        if aa is None:
+            aa = mpl.rcParams['text.antialiased']
         font.draw_glyphs_to_bitmap(
-            antialiased=mpl.rcParams['text.antialiased'])
+            antialiased=aa)
         d = font.get_descent() / 64.0
         # The descent needs to be adjusted for the angle.
         xo, yo = font.get_bitmap_offset()
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..a8351330c6 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -276,6 +276,22 @@ class Text(Artist):
         std_x = x - bb.x0
         return (np.abs(size_accum - std_x)).argmin()

+    def get_antialiased(self):
+        """Return whether the text is antialiased."""
+        return getattr(self, '_antialiased', None)
+
+    def set_antialiased(self, aa):
+        """
+        Set whether to use antialiased rendering.
+
+        Parameters
+        ----------
+        aa : bool or None
+            Whether to use antialiasing. None means use rcParams setting.
+        """
+        self._antialiased = aa
+        self.stale = True
+
     def get_rotation(self):
         """Return the text angle in degrees between 0 and 360."""
         if self.get_transform_rotates_text():
