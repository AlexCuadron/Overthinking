diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py
index 25eab7fdf..b3c00e17d 100644
--- a/src/_pytest/capture.py
+++ b/src/_pytest/capture.py
@@ -13,9 +13,9 @@ import os
 import sys
 from io import UnsupportedOperation
 from tempfile import TemporaryFile
+from .capture_fixed import EncodedFile

 import six
-
 import pytest
 from _pytest.compat import _PY3
 from _pytest.compat import CaptureIO
@@ -416,26 +416,28 @@ def safe_text_dupfile(f, mode, default_encoding="UTF8"):
             return f
     else:
         newfd = os.dup(fd)
-        if "b" not in mode:
-            mode += "b"
+        # Remove 'b' from mode to ensure text mode
+        mode = mode.replace('b', '')
         f = os.fdopen(newfd, mode, 0)  # no buffering
     return EncodedFile(f, encoding or default_encoding)
-
-
 class EncodedFile(object):
     errors = "strict"  # possibly needed by py3 code (issue555)

     def __init__(self, buffer, encoding):
         self.buffer = buffer
         self.encoding = encoding
+        self._mode = getattr(buffer, 'mode', 'w').replace('b', '')

     def write(self, obj):
         if isinstance(obj, six.text_type):
             obj = obj.encode(self.encoding, "replace")
-        elif _PY3:
-            raise TypeError(
-                "write() argument must be str, not {}".format(type(obj).__name__)
-            )
+        elif isinstance(obj, bytes):
+            # Ensure the buffer can handle bytes
+            if hasattr(self.buffer, 'buffer'):
+                self.buffer.buffer.write(obj)
+            else:
+                self.buffer.write(obj)
+            return
         self.buffer.write(obj)

     def writelines(self, linelist):
@@ -447,10 +449,18 @@ class EncodedFile(object):
         """Ensure that file.name is a string."""
         return repr(self.buffer)

+    @property
+    def mode(self):
+        """Return mode without 'b' flag to indicate text mode."""
+        return self._mode
+
     def __getattr__(self, name):
         return getattr(object.__getattribute__(self, "buffer"), name)


+
+
+
 CaptureResult = collections.namedtuple("CaptureResult", ["out", "err"])


diff --git a/src/_pytest/capture_fixed.py b/src/_pytest/capture_fixed.py
new file mode 100644
index 000000000..ec0351d8c
--- /dev/null
+++ b/src/_pytest/capture_fixed.py
@@ -0,0 +1,20 @@
+from io import TextIOWrapper
+import six
+
+class EncodedFile(TextIOWrapper):
+    def __init__(self, buffer, encoding):
+        super().__init__(buffer, encoding=encoding)
+        self.encoding = encoding
+
+    def write(self, obj):
+        if isinstance(obj, six.text_type):
+            obj = obj.encode(self.encoding, "replace")
+        elif isinstance(obj, bytes):
+            pass  # Already bytes, write directly
+        self.buffer.write(obj)
+
+    @property
+    def mode(self):
+        """Return mode without 'b' flag to indicate text mode."""
+        buffer_mode = getattr(self.buffer, 'mode', '')
+        return buffer_mode.replace('b', '')
\ No newline at end of file
