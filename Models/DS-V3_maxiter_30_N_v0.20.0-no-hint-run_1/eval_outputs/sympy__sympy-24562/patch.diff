diff --git a/sympy/external/pythonmpq.py b/sympy/external/pythonmpq.py
index b8efd18a40..4c3ab26f8c 100644
--- a/sympy/external/pythonmpq.py
+++ b/sympy/external/pythonmpq.py
@@ -77,10 +77,28 @@ def __new__(cls, numerator, denominator=None):
             elif isinstance(numerator, PythonMPQ):
                 return cls._new(numerator.numerator, numerator.denominator)

-            # Let Fraction handle Decimal/float conversion and str parsing
-            if isinstance(numerator, (Decimal, float, str)):
+            # Handle string parsing
+            if isinstance(numerator, str):
+                if denominator is not None and isinstance(denominator, str):
+                    # Special case: both numerator and denominator are strings
+                    try:
+                        # Parse numerator and denominator as fractions
+                        num = Fraction(numerator)
+                        den = Fraction(denominator)
+                        # Create the rational number by dividing the two fractions
+                        result = num / den
+                        return cls._new(result.numerator, result.denominator)
+                    except ValueError:
+                        raise ValueError("Could not convert string arguments to rational number")
+                else:
+                    # Single string argument
+                    numerator = Fraction(numerator)
+                    return cls._new(numerator.numerator, numerator.denominator)
+            # Handle Decimal/float conversion
+            elif isinstance(numerator, (Decimal, float)):
                 numerator = Fraction(numerator)
-            if isinstance(numerator, Fraction):
+                return cls._new(numerator.numerator, numerator.denominator)
+            elif isinstance(numerator, Fraction):
                 return cls._new(numerator.numerator, numerator.denominator)
         #
         # Reject everything else. This is more strict than mpq which allows
