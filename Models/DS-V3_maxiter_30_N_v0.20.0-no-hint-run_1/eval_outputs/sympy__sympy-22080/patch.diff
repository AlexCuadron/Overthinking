diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index ebe7862aef..cdf26be028 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -132,37 +132,8 @@ def doit(p, q):
                 return cls(net, q)

         elif isinstance(p, Mul):
-            # separating into modulus and non modulus
-            both_l = non_mod_l, mod_l = [], []
-            for arg in p.args:
-                both_l[isinstance(arg, cls)].append(arg)
-
-            if mod_l and all(inner.args[1] == q for inner in mod_l):
-                # finding distributive term
-                non_mod_l = [cls(x, q) for x in non_mod_l]
-                mod = []
-                non_mod = []
-                for j in non_mod_l:
-                    if isinstance(j, cls):
-                        mod.append(j.args[0])
-                    else:
-                        non_mod.append(j)
-                prod_mod = Mul(*mod)
-                prod_non_mod = Mul(*non_mod)
-                prod_mod1 = Mul(*[i.args[0] for i in mod_l])
-                net = prod_mod1*prod_mod
-                return prod_non_mod*cls(net, q)
-
-            if q.is_Integer and q is not S.One:
-                _ = []
-                for i in non_mod_l:
-                    if i.is_Integer and (i % q is not S.Zero):
-                        _.append(i%q)
-                    else:
-                        _.append(i)
-                non_mod_l = _
-
-            p = Mul(*(non_mod_l + mod_l))
+            # Don't distribute multiplication into Mod
+            return cls(p, q, evaluate=False)

         # XXX other possibilities?

diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index 0ed6ce2eb1..1a5ed6911a 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -43,6 +43,10 @@
 SYMPY = SYMPY_DEFAULT.copy()
 NUMEXPR = NUMEXPR_DEFAULT.copy()

+# Add Mod function to empty modules namespace
+if modules == []:
+    namespace['Mod'] = lambda x, y: x % y
+

 # Mappings between sympy and other modules function names.
 MATH_TRANSLATIONS = {
@@ -127,6 +131,12 @@ def _import(module, reload=False):
     except KeyError:
         raise NameError(
             "'%s' module can't be used for lambdification" % module)
+
+    # Special handling for Mod function when using empty modules
+    if module == []:
+        from sympy.core.mod import Mod as sympy_Mod
+        namespace['Mod'] = sympy_Mod
+        namespace['_Mod'] = sympy_Mod

     # Clear namespace or exit
     if namespace != namespace_default:
