diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..17de154a3 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -112,10 +112,43 @@ def _regex_transformer(value: str) -> Pattern[str]:


 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
-    """Transforms a comma separated list of regular expressions."""
+    """Transforms a comma separated list of regular expressions.
+
+    If the value contains regex special characters or is quoted,
+    treat it as a single pattern. Otherwise, split on commas.
+    """
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
-        patterns.append(_regex_transformer(pattern))
+
+    # Check if the value is quoted
+    is_quoted = (value.startswith('"') and value.endswith('"')) or (
+        value.startswith("'") and value.endswith("'"))
+
+    # Strip quotes if present
+    if is_quoted:
+        value = value[1:-1]
+
+    # Check if the value contains regex special characters
+    regex_special_chars = {'(', ')', '{', '}', '[', ']', '*', '+', '?', '|', '^', '$', '.'}
+
+    # If the value contains regex special characters or is quoted, treat as single pattern
+    if any(char in value for char in regex_special_chars) or is_quoted:
+        try:
+            patterns.append(_regex_transformer(value))
+        except re.error as e:
+            # If the regex is invalid, try treating it as multiple patterns
+            if "," in value:
+                for pattern in _csv_transformer(value):
+                    try:
+                        patterns.append(_regex_transformer(pattern))
+                    except re.error:
+                        # If individual patterns are invalid, raise the original error
+                        raise e
+            else:
+                raise
+    else:
+        # Otherwise, split on commas and treat each part as a separate pattern
+        for pattern in _csv_transformer(value):
+            patterns.append(_regex_transformer(pattern))
     return patterns
