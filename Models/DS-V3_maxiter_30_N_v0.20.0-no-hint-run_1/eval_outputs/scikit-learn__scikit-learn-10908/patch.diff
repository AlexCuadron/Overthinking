diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index 9b1ebd632..8ffa3510b 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -295,13 +295,21 @@ class VectorizerMixin(object):
                 raise ValueError("empty vocabulary passed to fit")
             self.fixed_vocabulary_ = True
             self.vocabulary_ = dict(vocabulary)
+            # Ensure vocabulary_ is accessible immediately
+            if not hasattr(self, 'vocabulary_'):
+                self.vocabulary_ = dict(vocabulary)
         else:
             self.fixed_vocabulary_ = False

     def _check_vocabulary(self):
         """Check if vocabulary is empty or missing (not fit-ed)"""
-        msg = "%(name)s - Vocabulary wasn't fitted."
-        check_is_fitted(self, 'vocabulary_', msg=msg),
+        if not hasattr(self, 'vocabulary_') and hasattr(self, 'vocabulary'):
+            self._validate_vocabulary()
+            self.vocabulary_ = dict(self.vocabulary)
+
+        if not hasattr(self, 'vocabulary_'):
+            msg = "%(name)s - Vocabulary wasn't fitted."
+            raise NotFittedError(msg % {'name': type(self).__name__})

         if len(self.vocabulary_) == 0:
             raise ValueError("Vocabulary is empty")
@@ -738,6 +746,14 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):
         self.vocabulary = vocabulary
         self.binary = binary
         self.dtype = dtype
+        # Initialize vocabulary_ immediately if vocabulary is provided
+        if vocabulary is not None:
+            self._validate_vocabulary()
+            self.vocabulary_ = dict(vocabulary)
+            self.fixed_vocabulary_ = True
+            # Ensure vocabulary_ is accessible immediately
+            if not hasattr(self, 'vocabulary_'):
+                self.vocabulary_ = dict(vocabulary)

     def _sort_features(self, X, vocabulary):
         """Sort features by name
@@ -993,6 +1009,8 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):

     def get_feature_names(self):
         """Array mapping from feature integer indices to feature name"""
+        if not hasattr(self, 'vocabulary_') and hasattr(self, 'vocabulary'):
+            self._validate_vocabulary()
         self._check_vocabulary()

         return [t for t, i in sorted(six.iteritems(self.vocabulary_),
