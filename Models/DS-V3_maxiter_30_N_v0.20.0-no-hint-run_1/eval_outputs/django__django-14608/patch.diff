diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..c4c840d9ec 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -2,6 +2,21 @@ from django.core.exceptions import ValidationError
 from django.forms import Form
 from django.forms.fields import BooleanField, IntegerField
 from django.forms.utils import ErrorList
+
+class FormSetErrorList(ErrorList):
+    def __init__(self, initlist=None, error_class=None):
+        super().__init__(initlist, 'nonform')
+        self.error_class = 'nonform'
+
+    def __str__(self):
+        return self.as_ul()
+
+    def as_ul(self):
+        if not self:
+            return ''
+        return '<ul class="errorlist nonform">%s</ul>' % (
+            ''.join('<li>%s</li>' % e for e in self)
+        )
 from django.forms.widgets import HiddenInput, NumberInput
 from django.utils.functional import cached_property
 from django.utils.html import html_safe
@@ -75,7 +90,7 @@ class BaseFormSet:
         self.form_kwargs = form_kwargs or {}
         self.error_class = error_class
         self._errors = None
-        self._non_form_errors = None
+        self._non_form_errors = FormSetErrorList()

         messages = {}
         for cls in reversed(type(self).__mro__):
@@ -333,7 +348,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = FormSetErrorList()
         empty_forms_count = 0

         if not self.is_bound:  # Stop further processing.
diff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt
index 1f2c7c3fad..597d862e56 100644
--- a/docs/topics/forms/formsets.txt
+++ b/docs/topics/forms/formsets.txt
@@ -363,7 +363,9 @@ is where you define your own validation that works at the formset level::

 The formset ``clean`` method is called after all the ``Form.clean`` methods
 have been called. The errors will be found using the ``non_form_errors()``
-method on the formset.
+method on the formset. These non-form errors are rendered with a ``nonform``
+CSS class, similar to how non-field errors in forms use the ``nonfield`` class.
+This allows for consistent styling of formset-level errors.

 Validating the number of forms in a formset
 ===========================================
