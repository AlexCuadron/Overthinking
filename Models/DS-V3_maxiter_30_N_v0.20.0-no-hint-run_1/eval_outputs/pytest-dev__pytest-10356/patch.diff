diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..e7a7a31f5 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -357,10 +357,39 @@ class MarkDecorator:

 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
     """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
-    return normalize_mark_list(mark_list)
+    marks = []
+
+    # Get marks from current object
+    current_marks = getattr(obj, "pytestmark", [])
+    if not isinstance(current_marks, list):
+        current_marks = [current_marks]
+    marks.extend(current_marks)
+
+    # For classes, get marks from all classes in MRO (except object)
+    if inspect.isclass(obj):
+        for base in obj.__mro__[1:-1]:  # Skip self and object
+            # Get marks directly from the class dict to avoid recursion
+            if hasattr(base, "__dict__") and "pytestmark" in base.__dict__:
+                base_marks = base.__dict__["pytestmark"]
+                if not isinstance(base_marks, list):
+                    base_marks = [base_marks]
+                marks.extend(base_marks)
+            else:
+                # If not in dict, check for inherited marks
+                base_marks = getattr(base, "pytestmark", [])
+                if not isinstance(base_marks, list):
+                    base_marks = [base_marks]
+                marks.extend(base_marks)
+
+    # Deduplicate marks while preserving order
+    seen = set()
+    deduped_marks = []
+    for mark in marks:
+        if mark.name not in seen:
+            deduped_marks.append(mark)
+            seen.add(mark.name)
+
+    return normalize_mark_list(deduped_marks)


 def normalize_mark_list(
