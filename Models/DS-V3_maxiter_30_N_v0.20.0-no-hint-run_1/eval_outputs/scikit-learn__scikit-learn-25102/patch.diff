diff --git a/sklearn/feature_selection/_base.py b/sklearn/feature_selection/_base.py
index da2185eac..4a17b98fd 100644
--- a/sklearn/feature_selection/_base.py
+++ b/sklearn/feature_selection/_base.py
@@ -78,6 +78,9 @@ class SelectorMixin(TransformerMixin, metaclass=ABCMeta):
         X_r : array of shape [n_samples, n_selected_features]
             The input samples with only the selected features.
         """
+        # Preserve original dtypes if X is a DataFrame
+        original_dtypes = getattr(X, 'dtypes', None)
+
         # note: we use _safe_tags instead of _get_tags because this is a
         # public Mixin.
         X = self._validate_data(
@@ -87,7 +90,18 @@ class SelectorMixin(TransformerMixin, metaclass=ABCMeta):
             force_all_finite=not _safe_tags(self, key="allow_nan"),
             reset=False,
         )
-        return self._transform(X)
+
+        X_transformed = self._transform(X)
+
+        # Convert back to DataFrame with original dtypes if input was DataFrame
+        if original_dtypes is not None:
+            import pandas as pd
+            mask = self.get_support()
+            selected_dtypes = original_dtypes[mask]
+            X_transformed = pd.DataFrame(X_transformed, columns=selected_dtypes.index)
+            X_transformed = X_transformed.astype(selected_dtypes.to_dict())
+
+        return X_transformed

     def _transform(self, X):
         """Reduce X to the selected features."""
@@ -101,7 +115,16 @@ class SelectorMixin(TransformerMixin, metaclass=ABCMeta):
             return np.empty(0, dtype=X.dtype).reshape((X.shape[0], 0))
         if len(mask) != X.shape[1]:
             raise ValueError("X has a different shape than during fitting.")
-        return X[:, safe_mask(X, mask)]
+
+        # Preserve dtypes if X is a DataFrame
+        if hasattr(X, 'dtypes'):
+            import pandas as pd
+            selected_dtypes = X.dtypes[mask]
+            X_transformed = X.iloc[:, safe_mask(X, mask)]
+            return X_transformed.astype(selected_dtypes.to_dict())
+
+        # For numpy arrays, preserve the original dtype
+        return X[:, safe_mask(X, mask)].astype(X.dtype)

     def inverse_transform(self, X):
         """Reverse the transformation operation.
diff --git a/sklearn/feature_selection/_univariate_selection.py b/sklearn/feature_selection/_univariate_selection.py
index a2a53b6c1..57dc0dd04 100644
--- a/sklearn/feature_selection/_univariate_selection.py
+++ b/sklearn/feature_selection/_univariate_selection.py
@@ -212,9 +212,14 @@ def chi2(X, y):
     # numerical stability.
     # Converting X to float allows getting better performance for the
     # safe_sparse_dot call made below.
-    X = check_array(X, accept_sparse="csr", dtype=(np.float64, np.float32))
-    if np.any((X.data if issparse(X) else X) < 0):
-        raise ValueError("Input X must be non-negative.")
+    # Convert to float but preserve original dtype information
+original_dtype = getattr(X, 'dtype', None)
+X = check_array(X, accept_sparse="csr", dtype=(np.float64, np.float32))
+if hasattr(X, 'dtypes') and original_dtype is not None:
+    X.dtypes = original_dtype
+
+if np.any((X.data if issparse(X) else X) < 0):
+    raise ValueError("Input X must be non-negative.")

     # Use a sparse representation for Y by default to reduce memory usage when
     # y has many unique classes.
diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..ab28791cd 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.

@@ -36,6 +37,10 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.

+    dtypes : dict or None, default=None
+        Dictionary mapping column names to dtypes. If provided, the output
+        DataFrame will use these dtypes. If None, default dtypes will be used.
+
     Returns
     -------
     dataframe : DataFrame
@@ -57,9 +62,14 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap

-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        df = df.astype(dtypes)
+    return df


 def _get_output_config(method, estimator=None):
@@ -127,10 +137,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap

     # dense_config == "pandas"
+    dtypes = None
+    if hasattr(original_input, "dtypes"):
+        dtypes = original_input.dtypes.to_dict()
+
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
