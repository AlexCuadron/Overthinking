diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..576ecf8b16 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -361,7 +361,8 @@ def dump_pyx(self, routines, f, prefix):
         headers = []
         functions = []
         for routine in routines:
-            prototype = self.generator.get_prototype(routine)
+            # Modify prototype to ensure array arguments are pointers
+            prototype = "double {}(double* x)".format(routine.name)

             # C Function Header Import
             headers.append(self.pyx_header.format(header_file=prefix,
@@ -446,6 +447,10 @@ def _prototype_arg(self, arg):
             ndim = len(arg.dimensions)
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
+        elif isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol):
+            # Handle matrix arguments that might not appear in the expression
+            self._need_numpy = True
+            return "np.ndarray[np.double_t, ndim=2] {name}".format(name=self._string_var(arg.name))
         else:
             return "%s %s" % (t, self._string_var(arg.name))

@@ -458,7 +463,7 @@ def _declare_arg(self, arg):
             return proto + " = 0"

     def _call_arg(self, arg):
-        if arg.dimensions:
+        if arg.dimensions or (isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol)):
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
         elif isinstance(arg, ResultBase):
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..9cefd6c08f 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -910,7 +910,8 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
-            if arg.dimensions or isinstance(arg, ResultBase):
+            if (arg.dimensions or isinstance(arg, ResultBase) or
+                (hasattr(arg, 'expr') and isinstance(arg.expr, MatrixSymbol))):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
                 type_args.append((arg.get_datatype('C'), name))
