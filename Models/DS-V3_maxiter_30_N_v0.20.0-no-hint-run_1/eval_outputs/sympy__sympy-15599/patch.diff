diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index eae25630cc..e8f8c229c2 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -123,9 +123,49 @@ def doit(p, q):
             for arg in p.args:
                 both_l[isinstance(arg, cls)].append(arg)

-            if mod_l and all(inner.args[1] == q for inner in mod_l):
+            was = non_mod_l[:]
+            # Transform non_mod_l terms, reducing coefficients modulo q
+            non_mod_l = []
+            for x in was:
+                if x.is_Mul:
+                    coeff, terms = x.as_coeff_Mul()
+                    if coeff.is_integer and any(t.is_integer or (t.is_Symbol and t.is_integer) for t in terms.args):
+                        # Reduce coefficient modulo q and multiply by terms
+                        reduced_coeff = coeff % q
+                        if reduced_coeff == 0:
+                            non_mod_l.append(S.Zero)
+                        elif reduced_coeff == 1:
+                            non_mod_l.append(cls(terms, q))
+                        else:
+                            # If the coefficient is greater than q/2, use negative coefficient
+                            if reduced_coeff > q/2:
+                                non_mod_l.append(cls(-(q - reduced_coeff) * terms, q))
+                            else:
+                                non_mod_l.append(cls(reduced_coeff * terms, q))
+                    else:
+                        non_mod_l.append(cls(x, q))
+                elif x.is_Number and x.is_integer:
+                    non_mod_l.append(cls(x % q, q))
+                elif x.is_Symbol and x.is_integer:
+                    non_mod_l.append(cls(x, q))
+                elif x.is_Add:
+                    # Handle addition terms by reducing each term modulo q
+                    new_terms = []
+                    for term in x.args:
+                        if term.is_Mul:
+                            coeff, terms = term.as_coeff_Mul()
+                            if coeff.is_integer:
+                                new_terms.append(cls(coeff % q * terms, q))
+                            else:
+                                new_terms.append(cls(term, q))
+                        else:
+                            new_terms.append(cls(term % q, q) if term.is_integer or (term.is_Symbol and term.is_integer) else cls(term, q))
+                    non_mod_l.append(Add(*new_terms))
+                else:
+                    non_mod_l.append(cls(x % q, q) if x.is_integer or (x.is_Symbol and x.is_integer) else cls(x, q))
+            changed = was != non_mod_l
+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):
                 # finding distributive term
-                non_mod_l = [cls(x, q) for x in non_mod_l]
                 mod = []
                 non_mod = []
                 for j in non_mod_l:
@@ -133,11 +173,21 @@ def doit(p, q):
                         mod.append(j.args[0])
                     else:
                         non_mod.append(j)
+                from sympy.core.mul import _keep_coeff
+                # Reduce coefficients before multiplication
+                if q.is_Number:
+                    # Reduce coefficients of integer symbols modulo q
+                    mod = [x % q if x.is_integer or (x.is_Symbol and x.is_integer) else x for x in mod]
+                    non_mod = [x % q if x.is_integer or (x.is_Symbol and x.is_integer) else x for x in non_mod]
+                    mod_l = [cls(i.args[0] % q, q) if i.args[0].is_integer or (i.args[0].is_Symbol and i.args[0].is_integer) else i for i in mod_l]
+                # Combine terms and reduce final coefficient
                 prod_mod = Mul(*mod)
                 prod_non_mod = Mul(*non_mod)
                 prod_mod1 = Mul(*[i.args[0] for i in mod_l])
-                net = prod_mod1*prod_mod
-                return prod_non_mod*cls(net, q)
+                net = prod_mod1 * prod_mod
+                if q.is_Number and (net.is_integer or (net.is_Symbol and net.is_integer)):
+                    net = net % q
+                return prod_non_mod * cls(net, q)

         # XXX other possibilities?
