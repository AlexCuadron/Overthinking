diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..e9de7f06dc 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -33,14 +33,22 @@ def _multi_decorate(decorators, method):
         decorators = [decorators]

     def _wrapper(self, *args, **kwargs):
-        # bound_method has the signature that 'decorator' expects i.e. no
-        # 'self' argument, but it's a closure over self so it can call
-        # 'func'. Also, wrap method.__get__() in a function because new
-        # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
-        for dec in decorators:
-            bound_method = dec(bound_method)
-        return bound_method(*args, **kwargs)
+        # Get the bound method
+        bound_method = method.__get__(self, type(self))
+        # Create a wrapper that preserves the original function's attributes
+        @wraps(bound_method)
+        def wrapped_bound_method(*args, **kwargs):
+            # Apply decorators while preserving attributes
+            decorated_method = bound_method
+            for dec in decorators:
+                def make_decorated(dec, decorated_method):
+                    @wraps(decorated_method)
+                    def decorated(*args, **kwargs):
+                        return dec(decorated_method)(*args, **kwargs)
+                    return decorated
+                decorated_method = make_decorated(dec, decorated_method)
+            return decorated_method(*args, **kwargs)
+        return wrapped_bound_method(*args, **kwargs)

     # Copy any attributes that a decorator adds to the function it decorates.
     for dec in decorators:
