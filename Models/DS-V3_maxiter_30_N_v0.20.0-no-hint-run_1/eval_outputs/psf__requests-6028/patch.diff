diff --git a/local_proxy.py b/local_proxy.py
new file mode 100644
index 00000000..fc1a2bc0
--- /dev/null
+++ b/local_proxy.py
@@ -0,0 +1,34 @@
+from http.server import BaseHTTPRequestHandler, HTTPServer
+import base64
+
+class ProxyHTTPRequestHandler(BaseHTTPRequestHandler):
+    def do_CONNECT(self):
+        auth = self.headers.get('Proxy-Authorization')
+        if not auth or not auth.startswith('Basic '):
+            self.send_response(407)
+            self.send_header('Proxy-Authenticate', 'Basic realm="Proxy"')
+            self.end_headers()
+            return
+
+        credentials = base64.b64decode(auth[6:]).decode('utf-8')
+        if credentials != 'user:pass':
+            self.send_response(407)
+            self.send_header('Proxy-Authenticate', 'Basic realm="Proxy"')
+            self.end_headers()
+            return
+
+        self.send_response(200)
+        self.end_headers()
+        self.connection.sendall(b'HTTP/1.1 200 Connection established\r\n\r\n')
+
+    def do_GET(self):
+        self.do_CONNECT()
+
+def run(server_class=HTTPServer, handler_class=ProxyHTTPRequestHandler, port=3128):
+    server_address = ('', port)
+    httpd = server_class(server_address, handler_class)
+    print(f'Starting proxy server on port {port}...')
+    httpd.serve_forever()
+
+if __name__ == '__main__':
+    run()
\ No newline at end of file
diff --git a/proxy.log b/proxy.log
new file mode 100644
index 00000000..584ecf51
--- /dev/null
+++ b/proxy.log
@@ -0,0 +1,6 @@
+Starting proxy server on port 3128...
+127.0.0.1 - - [15/Jan/2025 16:42:28] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:42:58] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:14] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:37] "CONNECT example.org:443 HTTP/1.0" 407 -
+127.0.0.1 - - [15/Jan/2025 16:43:54] "CONNECT example.org:443 HTTP/1.0" 407 -
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..cb3df2ce 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -302,6 +302,14 @@ class HTTPAdapter(BaseAdapter):
         proxy = select_proxy(url, proxies)

         if proxy:
+            # Get proxy authentication from proxies dict if available
+            if isinstance(proxies, dict) and 'http' in proxies:
+                proxy_url = proxies['http']
+                if '@' in proxy_url:
+                    # Extract credentials from proxy URL
+                    auth_part = proxy_url.split('@')[0].split('://')[1]
+                    proxy = proxy.replace('://', f'://{auth_part}@')
+
             proxy = prepend_scheme_if_needed(proxy, 'http')
             proxy_url = parse_url(proxy)
             if not proxy_url.host:
@@ -408,8 +416,19 @@ class HTTPAdapter(BaseAdapter):
         :param proxies: (optional) The proxies dictionary to apply to the request.
         :rtype: requests.Response
         """
+        # Add proxy authentication if available
+        if hasattr(request, 'proxy_auth') and request.proxy_auth:
+            from requests.auth import HTTPProxyAuth
+            auth = HTTPProxyAuth(*request.proxy_auth)
+            request.headers['Proxy-Authorization'] = auth(request)

         try:
+            # Add proxy authentication to headers before getting connection
+            if hasattr(request, 'proxy_auth') and request.proxy_auth:
+                from requests.auth import HTTPProxyAuth
+                auth = HTTPProxyAuth(*request.proxy_auth)
+                request.headers['Proxy-Authorization'] = auth(request)
+
             conn = self.get_connection(request.url, proxies)
         except LocationValueError as e:
             raise InvalidURL(e, request=request)
@@ -510,6 +529,17 @@ class HTTPAdapter(BaseAdapter):
                 raise RetryError(e, request=request)

             if isinstance(e.reason, _ProxyError):
+                if hasattr(e.reason, 'response') and e.reason.response.status == 407:
+                    # Handle proxy authentication
+                    proxy_auth = request.headers.get('Proxy-Authorization')
+                    if not proxy_auth:
+                        # Add proxy authentication header
+                        from requests.auth import HTTPProxyAuth
+                        if request.proxy_auth:
+                            auth = HTTPProxyAuth(*request.proxy_auth)
+                            request.headers['Proxy-Authorization'] = auth(request)
+                            # Retry the request with authentication
+                            return self.send(request, **kwargs)
                 raise ProxyError(e, request=request)

             if isinstance(e.reason, _SSLError):
diff --git a/test_proxy_auth.py b/test_proxy_auth.py
new file mode 100644
index 00000000..f32efa94
--- /dev/null
+++ b/test_proxy_auth.py
@@ -0,0 +1,12 @@
+import requests
+from requests.auth import HTTPProxyAuth
+
+proxies = {
+    'http': 'http://localhost:3128',
+    'https': 'http://localhost:3128'
+}
+
+auth = HTTPProxyAuth('user', 'pass')
+
+r = requests.get('https://example.org/', proxies=proxies, auth=auth)
+print(r.status_code)
\ No newline at end of file
