diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..e49a9643e 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -129,9 +129,12 @@ class Scanner:

 def expression(s: Scanner) -> ast.Expression:
     if s.accept(TokenType.EOF):
-        ret = ast.NameConstant(False)  # type: ast.expr
+        ret = ast.Constant(False)  # type: ast.expr
     else:
         ret = expr(s)
+        # Convert boolean literals to proper AST nodes
+        if isinstance(ret, ast.Name) and ret.id in ("True", "False"):
+            ret = ast.Constant(value=eval(ret.id))
         s.accept(TokenType.EOF, reject=True)
     return ast.fix_missing_locations(ast.Expression(ret))

@@ -161,6 +164,8 @@ def not_expr(s: Scanner) -> ast.expr:
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
+        if ident.value in ("True", "False", "None"):
+            return ast.Constant(eval(ident.value))
         return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))

@@ -199,6 +204,13 @@ class Expression:
         :param input: The input expression - one line.
         """
         astexpr = expression(Scanner(input))
+        # Handle boolean literals explicitly
+        if isinstance(ast.expr, ast.Constant) and isinstance(ast.expr.value, bool):
+            return Expression(compile(
+                ast.Expression(ast.Constant(ast.expr.value)),
+                filename="<pytest match expression>",
+                mode="eval"
+            ))
         code = compile(
             astexpr, filename="<pytest match expression>", mode="eval",
         )  # type: types.CodeType
