diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 73c20334d0..ab7456bd12 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -152,7 +152,11 @@ def __new__(cls, *args, **kwargs):
                         'warn' or 'ignore'.'''))
         if any(coords[dim:]):
             raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
+        # Skip imaginary coordinate check when evaluation is disabled
+        if kwargs.get('evaluate', True):
+            if any(a.is_number and im(a) for a in coords):
+                raise ValueError('Imaginary coordinates are not permitted.')
+        elif any(im(a) != 0 for a in coords):
             raise ValueError('Imaginary coordinates are not permitted.')
         if not all(isinstance(a, Expr) for a in coords):
             raise TypeError('Coordinates must be valid SymPy expressions.')
@@ -912,6 +916,13 @@ class Point2D(Point):
     def __new__(cls, *args, _nocheck=False, **kwargs):
         if not _nocheck:
             kwargs['dim'] = 2
+            # When evaluate=False, bypass all validation and parsing
+            if not kwargs.get('evaluate', True):
+                if len(args) == 1 and isinstance(args[0], str):
+                    # Create a symbolic point without evaluation
+                    from sympy.core.symbol import Symbol
+                    return GeometryEntity.__new__(cls, Symbol('Point2D'))
+                return GeometryEntity.__new__(cls, *args)
             args = Point(*args, **kwargs)
         return GeometryEntity.__new__(cls, *args)
