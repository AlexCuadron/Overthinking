diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..f952fbbebb 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -517,14 +517,41 @@ class NDArithmeticMixin:
             self.mask is None and operand is not None and operand.mask is None
         ) or handle_mask is None:
             return None
-        elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
-            return deepcopy(operand.mask)
-        elif operand is None:
+        if handle_mask is None:
+            return None
+
+        # Handle scalar operands
+        if not hasattr(operand, 'mask'):
+            if self.mask is not None:
+                return deepcopy(self.mask)
+            return None
+
+        if self.mask is None and operand is not None:
+            if hasattr(operand, 'mask'):
+                return deepcopy(operand.mask)
+            return None
+        elif operand is None or (hasattr(operand, 'mask') and operand.mask is None):
             return deepcopy(self.mask)
+        elif self.mask is None:
+            if hasattr(operand, 'mask'):
+                return deepcopy(operand.mask)
+            return None
         else:
+            # For bitwise operations, return the existing mask if either is None
+            if handle_mask in (np.bitwise_or, np.bitwise_and, np.bitwise_xor):
+                if self.mask is None:
+                    return deepcopy(operand.mask)
+                if operand.mask is None:
+                    return deepcopy(self.mask)
             # Now lets calculate the resulting mask (operation enforces copy)
-            return handle_mask(self.mask, operand.mask, **kwds)
+            try:
+                return handle_mask(self.mask, operand.mask, **kwds)
+            except TypeError:
+                if self.mask is not None:
+                    return deepcopy(self.mask)
+                if operand.mask is not None:
+                    return deepcopy(operand.mask)
+                return None

     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
