diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..97891c36a0 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -169,6 +169,15 @@ def floatformat(text, arg=-1):
         return input_val

     if not m and p < 0:
+        if d == Decimal('0'):
+            return mark_safe(
+                formats.number_format(
+                    "0",
+                    0,
+                    use_l10n=use_l10n,
+                    force_grouping=force_grouping,
+                )
+            )
         return mark_safe(
             formats.number_format(
                 "%d" % (int(d)),
@@ -178,16 +187,29 @@ def floatformat(text, arg=-1):
             )
         )

+    if d == Decimal('0'):
+        if p == 0:
+            return mark_safe("0")
+        elif p > 0:
+            return mark_safe("0." + "0" * p)
+        else:
+            return mark_safe("0")
+
     exp = Decimal(1).scaleb(-abs(p))
-    # Set the precision high enough to avoid an exception (#15789).
+    # Set the precision high enough to avoid an exception
+    # Minimum precision of 2 to handle edge cases
     tupl = d.as_tuple()
     units = len(tupl[1])
     units += -tupl[2] if m else tupl[2]
-    prec = abs(p) + units + 1
+    prec = max(abs(p) + units + 1, 2)

-    # Avoid conversion to scientific notation by accessing `sign`, `digits`,
-    # and `exponent` from Decimal.as_tuple() directly.
-    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
+    # Create context with sufficient precision
+    ctx = Context(prec=prec)
+    try:
+        rounded_d = d.quantize(exp, ROUND_HALF_UP, ctx)
+    except InvalidOperation:
+        # If quantization fails, return the original value
+        return input_val
     sign, digits, exponent = rounded_d.as_tuple()
     digits = [str(digit) for digit in reversed(digits)]
     while len(digits) <= abs(exponent):
