diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 9b54afc7c..9671cda1a 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -63,6 +63,10 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:
     """Reads HTML data from a response object `response` searching for `anchor`.
     Returns True if anchor was found, False otherwise.
     """
+    # Check response status before attempting to parse
+    if response.status_code >= 400:
+        raise HTTPError(f"{response.status_code} {response.reason}", response=response)
+
     parser = AnchorCheckParser(anchor)
     # Read file in chunks. If we find a matching anchor, we break
     # the loop early in hopes not to have to download the whole thing.
@@ -163,13 +167,31 @@ class CheckExternalLinksBuilder(Builder):

             try:
                 if anchor and self.app.config.linkcheck_anchors:
-                    # Read the whole document and see if #anchor exists
-                    response = requests.get(req_url, stream=True, config=self.app.config,
-                                            auth=auth_info, **kwargs)
-                    found = check_anchor(response, unquote(anchor))
-
-                    if not found:
-                        raise Exception(__("Anchor '%s' not found") % anchor)
+                    # First make the request
+                    try:
+                        response = requests.get(req_url, stream=True, config=self.app.config,
+                                                auth=auth_info, **kwargs)
+                        logger.debug(f"Initial response status: {response.status_code}")
+                        logger.debug(f"Response headers: {response.headers}")
+
+                        # Handle HTTP errors
+                        if response.status_code >= 400:
+                            return 'broken', f"{response.status_code} {response.reason}", 0
+
+                        # Only check for anchor if the response is successful
+                        try:
+                            found = check_anchor(response, unquote(anchor))
+                            if not found:
+                                return 'broken', f"Anchor '{anchor}' not found", 0
+                        except Exception as e:
+                            logger.debug(f"Anchor check failed: {str(e)}")
+                            return 'broken', str(e), 0
+
+                    except HTTPError as e:
+                        return 'broken', f"{e.response.status_code} {e.response.reason}", 0
+                    except Exception as e:
+                        logger.debug(f"Request failed: {str(e)}")
+                        return 'broken', str(e), 0
                 else:
                     try:
                         # try a HEAD request first, which should be easier on
@@ -185,10 +207,8 @@ class CheckExternalLinksBuilder(Builder):
                         response.raise_for_status()
             except HTTPError as err:
                 if err.response.status_code == 401:
-                    # We'll take "Unauthorized" as working.
                     return 'working', ' - unauthorized', 0
                 elif err.response.status_code == 503:
-                    # We'll take "Service Unavailable" as ignored.
                     return 'ignored', str(err), 0
                 else:
                     return 'broken', str(err), 0
