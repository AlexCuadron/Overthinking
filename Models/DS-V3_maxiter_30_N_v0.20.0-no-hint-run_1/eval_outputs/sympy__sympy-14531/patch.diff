diff --git a/sympy/core/relational.py b/sympy/core/relational.py
index ebb0ace113..283e51a815 100644
--- a/sympy/core/relational.py
+++ b/sympy/core/relational.py
@@ -257,6 +257,16 @@ class Equality(Relational):

     As usual, the keyword argument ``evaluate=False`` can be used to
     prevent any evaluation.
+    """
+
+    def _sympystr(self, printer):
+        print("DEBUG: sympy_integers setting in Equality:", printer._settings.get('sympy_integers', False))  # Debug print
+        lhs = printer._print(self.lhs)
+        rhs = printer._print(self.rhs)
+        if hasattr(printer, '_settings') and printer._settings.get('sympy_integers', False):
+            if self.rhs.is_Rational:
+                rhs = "S(%s)" % rhs
+        return "Eq(%s, %s)" % (lhs, rhs)

     Examples
     ========
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..d6db599aa4 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -215,6 +215,8 @@ def _print_LatticeOp(self, expr):

     def _print_Limit(self, expr):
         e, z, z0, dir = expr.args
+        if self._settings.get("sympy_integers", False) and z0.is_Rational:
+            z0 = "S(%s)" % z0
         if str(dir) == "+":
             return "Limit(%s, %s, %s)" % (e, z, z0)
         else:
@@ -803,6 +805,14 @@ def _print_Tr(self, expr):
         #TODO : Handle indices
         return "%s(%s)" % ("Tr", self._print(expr.args[0]))

+    def _print_Eq(self, expr):
+        print("DEBUG: sympy_integers setting:", self._settings.get("sympy_integers", False))  # Debug print
+        lhs, rhs = expr.args
+        if self._settings.get("sympy_integers", False):
+            if rhs.is_Rational:
+                rhs = "S(%s)" % rhs
+        return "Eq(%s, %s)" % (self._print(lhs), self._print(rhs))
+

 def sstr(expr, **settings):
     """Returns the expression as a string.
