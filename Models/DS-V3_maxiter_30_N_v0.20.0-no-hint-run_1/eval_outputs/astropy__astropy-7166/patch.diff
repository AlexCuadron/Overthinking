diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..033b83d559 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,9 +528,43 @@ class InheritDocstrings(type):
                 not key.startswith('_'))

         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if is_public_member(key):
+    if inspect.isfunction(val) and val.__doc__ is None:
+        for base in cls.__mro__[1:]:
+            super_method = getattr(base, key, None)
+            if super_method is not None:
+                val.__doc__ = super_method.__doc__
+                break
+    elif isinstance(val, property):
+        if val.fget is not None:
+            if val.fget.__doc__ is None:
+                for base in cls.__mro__[1:]:
+                    super_prop = getattr(base, key, None)
+                    if super_prop is not None and hasattr(super_prop, 'fget'):
+                        if super_prop.fget.__doc__ is not None:
+                            val.fget.__doc__ = super_prop.fget.__doc__
+                            break
+        else:
+            for base in cls.__mro__[1:]:
+                super_prop = getattr(base, key, None)
+                if super_prop is not None and hasattr(super_prop, 'fget'):
+                    if super_prop.fget.__doc__ is not None:
+                        val.fget.__doc__ = super_prop.fget.__doc__
+                        break
+        if val.__doc__ is None:
+            for base in cls.__mro__[1:]:
+                super_prop = getattr(base, key, None)
+                if super_prop is not None and hasattr(super_prop, '__doc__'):
+                    if super_prop.__doc__ is not None:
+                        val.__doc__ = super_prop.__doc__
+                        break
+    elif inspect.isclass(val) and val.__doc__ is None:
+        for base in cls.__mro__[1:]:
+            super_class = getattr(base, key, None)
+            if super_class is not None and hasattr(super_class, '__doc__'):
+                if super_class.__doc__ is not None:
+                    val.__doc__ = super_class.__doc__
+                    break
                 for base in cls.__mro__[1:]:
                     super_method = getattr(base, key, None)
                     if super_method is not None:
