diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..aced88c6ee 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -403,16 +403,48 @@ class BaseDatabaseSchemaEditor:
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
-        constraint_names = self._constraint_names(
+        # Get all constraints of the requested type
+constraint_names = self._constraint_names(
+    model, columns, exclude=meta_constraint_names | meta_index_names,
+    **constraint_kwargs
+)
+
+# If we're deleting an index and found multiple constraints,
+# filter to only include index constraints
+if constraint_kwargs.get('index') and len(constraint_names) > 1:
+    index_constraints = [
+        name for name in constraint_names
+        if not self._constraint_names(
             model, columns, exclude=meta_constraint_names | meta_index_names,
-            **constraint_kwargs
+            unique=True
         )
-        if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
+    ]
+    if index_constraints:
+        constraint_names = index_constraints
+        if not constraint_names:
+            raise ValueError("No constraints found for %s(%s)" % (
                 model._meta.db_table,
                 ", ".join(columns),
             ))
+
+        # When dealing with index_together and unique_together on same fields,
+        # we need to identify which constraint is the index
+        if len(constraint_names) > 1:
+            # Look for the index constraint (ends with _idx and matches index pattern)
+            index_constraints = [
+                name for name in constraint_names
+                if name.endswith('_idx') and not name.endswith('_uniq')
+            ]
+            if not index_constraints:
+                # Fallback: look for any index constraint
+                index_constraints = [
+                    name for name in constraint_names
+                    if not name.endswith('_uniq')
+                ]
+            if index_constraints:
+                constraint_names = index_constraints
+
+        # Delete the first matching constraint
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))

     def alter_db_table(self, model, old_db_table, new_db_table):
@@ -1153,8 +1185,13 @@ class BaseDatabaseSchemaEditor:
         result = []
         for name, infodict in constraints.items():
             if column_names is None or column_names == infodict['columns']:
-                if unique is not None and infodict['unique'] != unique:
-                    continue
+                if unique is not None:
+                    # When looking for index constraints, exclude unique constraints
+                    if unique is False and infodict['unique']:
+                        continue
+                    # When looking for unique constraints, require unique=True
+                    if unique is True and not infodict['unique']:
+                        continue
                 if primary_key is not None and infodict['primary_key'] != primary_key:
                     continue
                 if index is not None and infodict['index'] != index:
