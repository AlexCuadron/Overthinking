diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..cb6792e47d 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2195,17 +2195,65 @@ def _number_blocks(blocks):
                 # respect to the already discovere ones
                 minimal = True
                 to_remove = []
+                # Create new lists for minimal blocks
+                new_blocks = []
+                new_num_blocks = []
+                new_rep_blocks = []
+                minimal = True
+
+                # Find the minimal blocks
                 for i, r in enumerate(rep_blocks):
-                    if len(r) > len(rep) and rep.issubset(r):
-                        # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
-                    elif len(r) < len(rep) and r.issubset(rep):
-                        # the system being checked is not minimal
+                    if len(r) < len(rep) and r.issubset(rep):
+                        # Current system is not minimal
                         minimal = False
                         break
-                # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                    elif not (len(r) > len(rep) and rep.issubset(r)):
+                        # Keep this block as it's minimal
+                        if i < len(blocks) and i < len(num_blocks):
+                            new_blocks.append(blocks[i])
+                            new_num_blocks.append(num_blocks[i])
+                            new_rep_blocks.append(r)
+
+                # Update the lists with the minimal blocks found
+                blocks = new_blocks
+                num_blocks = new_num_blocks
+                rep_blocks = new_rep_blocks
+
+                # Remove any potential duplicates
+                blocks = list(dict.fromkeys(blocks))
+                num_blocks = list(dict.fromkeys(num_blocks))
+                rep_blocks = list(dict.fromkeys(rep_blocks))
+
+                # Clear the original lists to prevent any reference issues
+                num_blocks.clear()
+                blocks.clear()
+                rep_blocks.clear()
+
+                # Reassign the new lists
+                blocks.extend(new_blocks)
+                num_blocks.extend(new_num_blocks)
+                rep_blocks.extend(new_rep_blocks)
+
+                # Ensure we don't have any empty lists
+                if not blocks:
+                    blocks = [block]
+                if not num_blocks:
+                    num_blocks = [num_block]
+                if not rep_blocks:
+                    rep_blocks = [rep]
+
+                # Remove any potential empty lists
+                blocks = [b for b in blocks if b]
+                num_blocks = [n for n in num_blocks if n]
+                rep_blocks = [r for r in rep_blocks if r]
+
+                # Ensure we don't have any empty lists
+                if not blocks:
+                    blocks = [block]
+                if not num_blocks:
+                    num_blocks = [num_block]
+                if not rep_blocks:
+                    rep_blocks = [rep]

                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
