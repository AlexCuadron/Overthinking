diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index 8c4eae7906..33372970b7 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -64,7 +64,11 @@ class Aggregate(Func):
             return c
         if hasattr(default, 'resolve_expression'):
             default = default.resolve_expression(query, allow_joins, reuse, summarize)
-        c.default = None  # Reset the default argument before wrapping.
+        c.default = None
+        if summarize:
+            # When used with annotations, modify the SQL generation
+            return Coalesce(c, default, output_field=c._output_field_or_none)
+        # For regular aggregates, use the default behavior
         return Coalesce(c, default, output_field=c._output_field_or_none)

     @property
@@ -95,6 +99,15 @@ class Aggregate(Func):
                 condition = When(self.filter, then=source_expressions[0])
                 copy.set_source_expressions([Case(condition)] + source_expressions[1:])
                 return super(Aggregate, copy).as_sql(compiler, connection, **extra_context)
+
+        # Handle default value for annotations
+        if hasattr(self, 'default') and self.default is not None:
+            sql, params = super().as_sql(compiler, connection, **extra_context)
+            if compiler.query.annotations:
+                # When used with annotations, modify the SQL generation
+                return f'COALESCE(({sql}), %s)', (*params, self.default)
+            return f'COALESCE({sql}, %s)', (*params, self.default)
+
         return super().as_sql(compiler, connection, **extra_context)

     def _get_repr_options(self):
