diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..81324cbef5 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -337,9 +337,19 @@ def __call__(self, *other):

         """
         rv = Cycle(*other)
-        for k, v in zip(list(self.keys()), [rv[self[k]] for k in self.keys()]):
-            rv[k] = v
-        return rv
+        # Create a copy of self to avoid modifying original
+        self_copy = self.copy()
+        # Apply cycles sequentially
+        for k in self_copy:
+            if k in rv:
+                self_copy[k] = rv[self_copy[k]]
+            else:
+                self_copy[k] = rv[k] if k in rv else self_copy[k]
+        # Merge the cycles
+        for k, v in rv.items():
+            if k not in self_copy:
+                self_copy[k] = v
+        return self_copy

     def list(self, size=None):
         """Return the cycles as an explicit list starting from 0 up
@@ -447,8 +457,7 @@ def __init__(self, *args):
         args = [as_int(a) for a in args]
         if any(i < 0 for i in args):
             raise ValueError('negative integers are not allowed in a cycle.')
-        if has_dups(args):
-            raise ValueError('All elements must be unique in a cycle.')
+        # Allow duplicates and process sequentially
         for i in range(-len(args), 0):
             self[args[i]] = args[i + 1]

@@ -859,7 +868,13 @@ def __new__(cls, *args, **kwargs):
         if not args:  # a
             return _af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            # Handle non-disjoint cycles by applying them sequentially
+            cycles = [Cycle(c) for c in args]
+            result = list(range(max([c.size for c in cycles] + [size or 0])))
+            for cycle in cycles:
+                for i, val in enumerate(cycle.list()):
+                    result[i] = val
+            return _af_new(result)
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
@@ -895,13 +910,19 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.

         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
-        temp = set(temp)
+        if not is_cycle and has_dups(temp):
+            raise ValueError('there were repeated elements.')
+        # For cycle notation, process cycles sequentially
+        if is_cycle:
+            cycles = args
+            result = list(range(max([max(c) for c in cycles] + [0]) + 1))
+            for cycle in cycles:
+                for i in range(len(cycle) - 1):
+                    result[cycle[i]] = cycle[i + 1]
+                result[cycle[-1]] = cycle[0]
+            temp = result
+        else:
+            temp = set(temp)

         if not is_cycle and \
                 any(i not in temp for i in range(len(temp))):
