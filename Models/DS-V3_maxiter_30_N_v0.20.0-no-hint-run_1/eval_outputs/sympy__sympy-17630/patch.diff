diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9b2e599e8d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,15 @@
+from sympy import *
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+# First multiplication works
+print("First multiplication:")
+print(block_collapse(b * b))
+
+# Second multiplication fails
+print("\nSecond multiplication:")
+try:
+    print(block_collapse(b * b * b))
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..c9f170393f 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,21 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            from sympy.matrices.expressions import ZeroMatrix
+            from sympy.matrices import MutableDenseMatrix
+            result = self.blocks*other.blocks
+            # Create a mutable copy of the result
+            mutable_result = MutableDenseMatrix(result)
+            # Convert any Zero results back to ZeroMatrix
+            from sympy.core.numbers import Zero
+            for i in range(mutable_result.shape[0]):
+                for j in range(mutable_result.shape[1]):
+                    if isinstance(mutable_result[i,j], Zero):
+                        # Get dimensions from the original matrices
+                        row_size = self.blocks[i,0].rows
+                        col_size = other.blocks[0,j].cols
+                        mutable_result[i,j] = ZeroMatrix(row_size, col_size)
+            return BlockMatrix(mutable_result)

         return self * other
