diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..ed6a54256b 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -60,7 +60,8 @@ class ChoicesMeta(enum.EnumMeta):

 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
-    pass
+    def __str__(self):
+        return str(self.value)


 class IntegerChoices(int, Choices):
@@ -73,3 +74,20 @@ class TextChoices(str, Choices):

     def _generate_next_value_(name, start, count, last_values):
         return name
+
+    def __str__(self):
+        return str(self.value)
+
+    def __format__(self, format_spec):
+        return format(str(self.value), format_spec)
+
+    def __eq__(self, other):
+        if isinstance(other, str):
+            return str(self.value) == other
+        return super().__eq__(other)
+
+    def __str__(self):
+        return str(self.value)
+
+    def __format__(self, format_spec):
+        return format(str(self.value), format_spec)
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..2453381880 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -972,6 +972,22 @@ class CharField(Field):
         super().__init__(*args, **kwargs)
         self.validators.append(validators.MaxLengthValidator(self.max_length))

+    def to_python(self, value):
+        value = super().to_python(value)
+        if value is None:
+            return value
+        if hasattr(value, 'value'):  # Handle enum values
+            return str(value.value)
+        return str(value)
+
+    def get_prep_value(self, value):
+        value = super().get_prep_value(value)
+        if value is None:
+            return value
+        if hasattr(value, 'value'):  # Handle enum values
+            return str(value.value)
+        return str(value)
+
     def check(self, **kwargs):
         return [
             *super().check(**kwargs),
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 189fb4fa44..e7844299d6 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -128,6 +128,11 @@ class DeferredAttribute:
             return self
         data = instance.__dict__
         field_name = self.field.attname
+        if field_name in data:
+            value = data[field_name]
+            if hasattr(value, 'value'):  # Handle enum values
+                return str(value.value)
+            return value
         if data.get(field_name, self) is self:
             # Let's see if the field is part of the parent chain. If so we
             # might be able to reuse the already loaded value. Refs #18343.
