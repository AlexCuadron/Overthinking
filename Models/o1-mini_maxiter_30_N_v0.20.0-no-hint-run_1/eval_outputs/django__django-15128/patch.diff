diff --git a/__init__.py b/__init__.py
new file mode 100644
index 0000000000..fc80254b61
--- /dev/null
+++ b/__init__.py
@@ -0,0 +1 @@
+pass
\ No newline at end of file
diff --git a/bug/__init__.py b/bug/__init__.py
new file mode 100644
index 0000000000..fc80254b61
--- /dev/null
+++ b/bug/__init__.py
@@ -0,0 +1 @@
+pass
\ No newline at end of file
diff --git a/bug/app/__init__.py b/bug/app/__init__.py
new file mode 100644
index 0000000000..fc80254b61
--- /dev/null
+++ b/bug/app/__init__.py
@@ -0,0 +1 @@
+pass
\ No newline at end of file
diff --git a/bug/app/models.py b/bug/app/models.py
new file mode 100644
index 0000000000..fe4000ca48
--- /dev/null
+++ b/bug/app/models.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+class Foo(models.Model):
+    qux = models.ForeignKey("app.Qux", on_delete=models.CASCADE, related_name="foos")
+
+class Bar(models.Model):
+    foo = models.ForeignKey("app.Foo", on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey("app.Foo", on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey("app.Baz", on_delete=models.CASCADE, related_name="bars")
+
+class Baz(models.Model):
+    pass
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField("app.Baz", related_name="quxes")
\ No newline at end of file
diff --git a/django__django__4.1/__init__.py b/django__django__4.1/__init__.py
new file mode 100644
index 0000000000..fc80254b61
--- /dev/null
+++ b/django__django__4.1/__init__.py
@@ -0,0 +1 @@
+pass
\ No newline at end of file
diff --git a/django__django__4.1/settings.py b/django__django__4.1/settings.py
new file mode 100644
index 0000000000..03087ea6a6
--- /dev/null
+++ b/django__django__4.1/settings.py
@@ -0,0 +1,31 @@
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'bug.app',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'dummy-secret-key'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'django__django__4.1.urls'
+
+USE_TZ = True
\ No newline at end of file
diff --git a/django__django__4.1/urls.py b/django__django__4.1/urls.py
new file mode 100644
index 0000000000..a848dfb64f
--- /dev/null
+++ b/django__django__4.1/urls.py
@@ -0,0 +1,3 @@
+from django.urls import path
+
+urlpatterns = []
\ No newline at end of file
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..e14c99e478
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,18 @@
+from django.db.models import Q
+import sys
+sys.path.append('/workspace/django__django__4.1')
+import os
+import django
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django__django__4.1.settings")
+django.setup()
+from bug.app.models import Foo, Qux
+
+qux = Qux.objects.create()
+qs1 = qux.foos.all()
+qs2 = Foo.objects.filter(
+    Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())
+)
+
+result = qs1 | qs2
+print(result)
\ No newline at end of file
