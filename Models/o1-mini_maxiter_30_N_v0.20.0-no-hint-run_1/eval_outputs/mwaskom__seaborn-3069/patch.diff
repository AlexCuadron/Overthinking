diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..28ae2076
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+import seaborn as sns
+import matplotlib.pyplot as plt
+
+# Load example dataset
+tips = sns.load_dataset("tips")
+
+# Create a categorical plot using a nominal scale
+sns.catplot(x="day", y="total_bill", kind="box", data=tips)
+
+# Show the plot
+plt.show()
\ No newline at end of file
diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..09d46c6b 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -25,7 +25,7 @@ from seaborn._marks.base import Mark
 from seaborn._stats.base import Stat
 from seaborn._core.data import PlotData
 from seaborn._core.moves import Move
-from seaborn._core.scales import Scale
+from seaborn._core.scales import Scale, NominalScale
 from seaborn._core.subplots import Subplots
 from seaborn._core.groupby import GroupBy
 from seaborn._core.properties import PROPERTIES, Property
@@ -626,6 +626,12 @@ class Plot:
         """
         new = self._clone()
         new._scales.update(scales)
+# Integrate NominalScale if specified
+    for key, scale in scales.items():
+        if isinstance(scale, str) and scale.lower() == "nominal":
+            new._scales[key] = NominalScale()
+
+
         return new

     def share(self, **shares: bool | str) -> Plot:
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..a065d77c 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -971,3 +971,33 @@ def _make_power_transforms(exp: float) -> TransFuncs:
         return np.sign(x) * np.power(np.abs(x), 1 / exp)

     return forward, inverse
+@dataclass
+class NominalScale(Scale):
+    """
+    A nominal scale that behaves like categorical scales:
+
+    1. The scale is drawn to +/- 0.5 from the first and last tick.
+    2. No grid is shown, even when the active style would normally display it.
+    3. If on the y-axis, the axis is inverted.
+    """
+
+    _priority: ClassVar[int] = 4
+
+    def _setup(
+        self, data: Series, prop: Property, axis: Axis | None = None,
+    ) -> Scale:
+        new_scale = super()._setup(data, prop, axis)
+
+        if axis:
+            # 1. Adjust the view interval to +/- 0.5 from the first and last tick
+            first_tick, last_tick = min(data), max(data)
+            axis.set_view_interval(first_tick - 0.5, last_tick + 0.5)
+
+            # 2. Disable grid lines
+            axis.grid(False)
+
+            # 3. Invert y-axis if necessary
+            if axis.is_y_axis:
+                axis.invert()
+
+        return new_scale
