diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py
index a65500d76a..c3ec99615a 100644
--- a/django/core/management/commands/migrate.py
+++ b/django/core/management/commands/migrate.py
@@ -276,7 +276,6 @@ class Command(BaseCommand):
                 if compute_time:
                     self.start = time.monotonic()
                 self.stdout.write("  Applying %s..." % migration, ending="")
-                self.stdout.flush()
             elif action == "apply_success":
                 elapsed = " (%.3fs)" % (time.monotonic() - self.start) if compute_time else ""
                 if fake:
@@ -287,7 +286,6 @@ class Command(BaseCommand):
                 if compute_time:
                     self.start = time.monotonic()
                 self.stdout.write("  Unapplying %s..." % migration, ending="")
-                self.stdout.flush()
             elif action == "unapply_success":
                 elapsed = " (%.3fs)" % (time.monotonic() - self.start) if compute_time else ""
                 if fake:
@@ -298,7 +296,6 @@ class Command(BaseCommand):
                 if compute_time:
                     self.start = time.monotonic()
                 self.stdout.write("  Rendering model states...", ending="")
-                self.stdout.flush()
             elif action == "render_success":
                 elapsed = " (%.3fs)" % (time.monotonic() - self.start) if compute_time else ""
                 self.stdout.write(self.style.SUCCESS(" DONE" + elapsed))
diff --git a/reproduce_flush.py b/reproduce_flush.py
new file mode 100644
index 0000000000..853a5e975c
--- /dev/null
+++ b/reproduce_flush.py
@@ -0,0 +1,17 @@
+import sys
+import time
+from django.core.management import execute_from_command_line
+
+def main():
+    print("Starting long-running migration...")
+    sys.stdout.flush()
+    # Simulate long-running process
+    for i in range(5):
+        print(f"Migration step {i+1}/5")
+        sys.stdout.flush()
+        time.sleep(2)
+    print("Migration completed successfully.")
+    sys.stdout.flush()
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
