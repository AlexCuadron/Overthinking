diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..06abcee447 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -7,6 +7,13 @@ from django.utils.functional import cached_property
 from django.utils.html import html_safe
 from django.utils.safestring import mark_safe
 from django.utils.translation import gettext_lazy as _, ngettext
+from django.utils.html import escape
+class NonFormErrorList(ErrorList):
+
+    def as_ul(self):
+        if not self:
+            return ''
+        return '<ul class="errorlist nonform">%s</ul>' % ''.join(['<li>%s</li>' % escape(e) for e in self])

 __all__ = ('BaseFormSet', 'formset_factory', 'all_valid')

@@ -333,7 +340,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = NonFormErrorList()
         empty_forms_count = 0

         if not self.is_bound:  # Stop further processing.
@@ -383,7 +390,43 @@ class BaseFormSet:
             self._non_form_errors = self.error_class(e.error_list)

     def clean(self):
+def add_error(self, field, error):
+        if field is None:
+            self._non_form_errors.append(error)
+        else:
+            for form in self.forms:
+                form.add_error(field, error)
         """
+def add_error(self, field, error):
+        if field is None:
+            self._non_form_errors.append(error)
+def add_error(self, field, error):
+        if field is None:
+            self._non_form_errors.append(error)
+        else:
+            for form in self.forms:
+                form.add_error(field, error)
+        else:
+            if hasattr(self, 'forms') and self.forms:
+                self.forms[0].add_error(field, error)
+def add_error(self, field, error):
+            if field is None:
+                self._non_form_errors.append(error)
+            else:
+def add_error(self, field, error):
+        if field is None:
+            self._non_form_errors.append(error)
+        else:
+            if hasattr(self, 'forms') and self.forms:
+                self.forms[0].add_error(field, error)
+                if hasattr(self, 'forms') and self.forms:
+def add_error(self, field, error):
+        if field is None:
+            self._non_form_errors.append(error)
+        else:
+            if hasattr(self, 'forms') and self.forms:
+                self.forms[0].add_error(field, error)
+                    self.forms[0].add_error(field, error)
         Hook for doing any extra formset-wide cleaning after Form.clean() has
         been called on every form. Any ValidationError raised by this method
         will not be associated with a particular form; it will be accessible
diff --git a/repro_script.py b/repro_script.py
new file mode 100644
index 0000000000..1986693c8a
--- /dev/null
+++ b/repro_script.py
@@ -0,0 +1,39 @@
+import django
+from django.conf import settings
+from django.forms import Form, formset_factory, ValidationError
+from django.forms.formsets import BaseFormSet
+from django.template import Context, Template
+from django import forms
+
+def setup_django():
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+class MyForm(Form):
+    name = forms.CharField()
+
+class MyBaseFormSet(BaseFormSet):
+    def clean(self):
+        super().clean()
+        if any(self.errors):
+            raise ValidationError("FormSet has errors.")
+
+def main():
+    setup_django()
+    MyFormSet = formset_factory(MyForm, formset=MyBaseFormSet)
+    formset = MyFormSet()
+
+    # Intentionally add a non-form error without 'nonform' CSS class
+    formset.add_error(None, "This is a non-form error.")
+
+    # Render non-form errors
+    print(formset.non_form_errors.as_ul())
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
