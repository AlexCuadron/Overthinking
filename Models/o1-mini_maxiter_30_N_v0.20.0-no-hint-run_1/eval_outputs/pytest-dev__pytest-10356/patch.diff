diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 000000000..6192be01f
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,17 @@
+import pytest
+import sys
+sys.path.insert(0, "/workspace/pytest-dev__pytest__7.2/src")
+
+from _pytest import Base
+class Foo(Base):
+    pytestmark = pytest.mark.foo
+
+class Bar(Base):
+    pytestmark = pytest.mark.bar
+
+class TestDings(Foo, Bar):
+    def test_dings(self):
+        pass
+
+if __name__ == "__main__":
+    pytest.main(["-v", "--collect-only"])
\ No newline at end of file
diff --git a/src/_pytest/__init__.py b/src/_pytest/__init__.py
index 8a406c5c7..4b31ba98b 100644
--- a/src/_pytest/__init__.py
+++ b/src/_pytest/__init__.py
@@ -1,4 +1,5 @@
 __all__ = ["__version__", "version_tuple"]
+from .base import Base

 try:
     from ._version import version as __version__, version_tuple
diff --git a/src/_pytest/base.py b/src/_pytest/base.py
new file mode 100644
index 000000000..f0f37f854
--- /dev/null
+++ b/src/_pytest/base.py
@@ -0,0 +1,28 @@
+import itertools
+
+import pytest
+
+class BaseMeta(type):
+    @property
+    def pytestmark(self):
+        return (
+            getattr(self, "_pytestmark", []) +
+            list(itertools.chain.from_iterable(getattr(x, "_pytestmark", []) for x in self.__mro__))
+        )
+
+    @pytestmark.setter
+    def pytestmark(self, value):
+        self._pytestmark = value
+
+class Base(object, metaclass=BaseMeta):
+    pass
+            getattr(self, "_pytestmark", []) +
+            list(itertools.chain.from_iterable(getattr(x, "_pytestmark", []) for x in self.__mro__))
+        )
+
+    @pytestmark.setter
+    def pytestmark(self, value):
+        self._pytestmark = value
+
+class Base(object, metaclass=BaseMeta):
+    pass
\ No newline at end of file
