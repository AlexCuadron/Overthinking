diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..53f269cbb4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,16 @@
+from sympy import symbols, S, Eq, Limit
+from sympy.printing.str import sstr
+
+
+x, y = symbols('x y')
+
+# Reproducing sstr issues
+print(sstr(x + S(1)/2, sympy_integers=True))  # Expected: 'x + S(1)/2'
+print(sstr(Eq(x, S(1)/2), sympy_integers=True))  # Expected: 'Eq(x, S(1)/2)'
+print(sstr(Limit(x, x, S(1)/2), sympy_integers=True))  # Expected: 'Limit(x, x, S(1)/2)'
+
+# Reproducing code generation issue
+
+# x = Symbol('x')
+# y = Symbol('y')
+# e = Eq(x, y)
\ No newline at end of file
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..4c18bec33d 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -48,10 +48,14 @@ def emptyPrinter(self, expr):

     def _print_Add(self, expr, order=None):
         if self.order == 'none':
-            terms = list(expr.args)
+        if self._settings.get('sympy_integers', False):
+            return 'S(%s)/S(%s)' % (expr.p, expr.q)
         else:
-            terms = self._as_ordered_terms(expr, order=order)
-
+            return str(expr)
+        if self._settings.get('sympy_integers', False):
+            return 'S(%s)/S(%s)' % (expr.p, expr.q)
+        else:
+            return str(expr)
         PREC = precedence(expr)
         l = []
         for term in terms:
@@ -297,6 +301,17 @@ def _print_Mul(self, expr):
         b_str = [self.parenthesize(x, prec, strict=False) for x in b]

         if len(b) == 0:
+        if self._settings.get('sympy_integers', False):
+            return 'S(%s)/S(%s)' % (expr.p, expr.q)
+        else:
+            return str(expr)
+
+
+            return str(expr)
+            if self._settings.get('sympy_integers', False):
+                return 'S(%s)/S(%s)' % (expr.p, expr.q)
+            else:
+                return str(expr)
             return sign + '*'.join(a_str)
         elif len(b) == 1:
             return sign + '*'.join(a_str) + "/" + b_str[0]
@@ -421,6 +436,7 @@ def _print_FracField(self, field):
     def _print_FreeGroupElement(self, elm):
         return elm.__str__()

+
     def _print_PolyElement(self, poly):
         return poly.str(self, PRECEDENCE, "%s**%s", "*")

@@ -568,7 +584,6 @@ def _print_int(self, expr):
     def _print_mpz(self, expr):
         return str(expr)

-    def _print_Rational(self, expr):
         if expr.q == 1:
             return str(expr.p)
         else:
