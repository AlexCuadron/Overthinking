diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..df06982d6c 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -250,6 +250,16 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         db = kwargs.get('using')

         autocomplete_fields = self.get_autocomplete_fields(request)
+if callable(kwargs.get('widget')):
+        kwargs['widget'] = kwargs['widget']()
+    if callable(kwargs.get('widget')):
+        kwargs['widget'] = kwargs['widget']()
+if callable(kwargs.get('widget')):
+        kwargs['widget'] = kwargs['widget']()
+if callable(kwargs.get('widget')):
+            kwargs['widget'] = kwargs['widget']()
+if callable(kwargs.get('widget')):
+            kwargs['widget'] = kwargs['widget']()
         if db_field.name in autocomplete_fields:
             kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
         elif db_field.name in self.raw_id_fields:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..10e4e79d06
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,46 @@
+import django
+from django.conf import settings
+from django.db import models
+from django import forms
+from django.contrib.admin import ModelAdmin, site
+
+# Minimal settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+'myapp',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+class Tag(models.Model):
+    name = models.CharField(max_length=100)
+class Meta:
+        app_label = 'myapp'
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    tags = models.ManyToManyField(Tag)
+
+class ArticleAdmin(ModelAdmin):
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        kwargs['widget'] = forms.CheckboxSelectMultiple
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+site.register(Article, ArticleAdmin)
+
+if __name__ == "__main__":
+    try:
+        form = ArticleAdmin.formfield_for_manytomany(ArticleAdmin, Article.tags, None)
+        print("Widget set successfully:", form.widget)
+    except Exception as e:
+        print("Error:", e)
\ No newline at end of file
