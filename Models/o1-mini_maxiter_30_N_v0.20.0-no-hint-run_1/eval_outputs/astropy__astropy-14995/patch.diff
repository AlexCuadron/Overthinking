diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..693e55150e 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -524,7 +524,98 @@ class NDArithmeticMixin:
             return deepcopy(self.mask)
         else:
             # Now lets calculate the resulting mask (operation enforces copy)
-            return handle_mask(self.mask, operand.mask, **kwds)
+            if self.mask is None and operand.mask is None:
+    return None
+elif self.mask is None:
+    return operand.mask
+elif operand.mask is None:
+    return self.mask
+else:
+    if self.mask is None and operand.mask is None:
+                    return None
+                elif self.mask is None:
+                    return operand.mask
+                elif operand.mask is None:
+                    return self.mask
+                else:
+                    if self.mask is None and operand.mask is None:
+    return None
+elif self.mask is None:
+    return operand.mask
+elif operand.mask is None:
+    return self.mask
+else:
+    if self.mask is None and operand.mask is None:
+        return None
+    elif self.mask is None:
+        return operand.mask
+    elif operand.mask is None:
+        return self.mask
+    else:
+        if self.mask is None and operand.mask is None:
+    return None
+elif self.mask is None:
+    return operand.mask
+elif operand.mask is None:
+    return self.mask
+else:
+    if self.mask is None and operand.mask is None:
+            return None
+        elif self.mask is None:
+            return operand.mask
+        elif operand.mask is None:
+            return self.mask
+        else:
+            if self.mask is None and operand.mask is None:
+            return None
+        elif self.mask is None:
+            return operand.mask
+        elif operand.mask is None:
+            return self.mask
+        else:
+            if self.mask is None and operand.mask is None:
+        return None
+    elif self.mask is None:
+        return operand.mask
+    elif operand.mask is None:
+        return self.mask
+    else:
+        if self.mask is None and operand.mask is None:
+            return None
+        elif self.mask is None:
+            return operand.mask
+        elif operand.mask is None:
+            return self.mask
+        else:
+            if self.mask is None and operand.mask is None:
+        return None
+    elif self.mask is None:
+        return operand.mask
+    elif operand.mask is None:
+        return self.mask
+    else:
+        if self.mask is None and operand.mask is None:
+            return None
+        elif self.mask is None:
+            return operand.mask
+        elif operand.mask is None:
+            return self.mask
+        else:
+            if self.mask is None and operand.mask is None:\n    return None\nelif self.mask is None:\n    return operand.mask\nelif operand.mask is None:\n    return self.mask\nelse:\n    if self.mask is None and operand.mask is None:
+    return None
+elif self.mask is None:
+    return operand.mask
+elif operand.mask is None:
+    return self.mask
+else:
+if self.mask is None and operand.mask is None:
+    return None
+elif self.mask is None:
+    return operand.mask
+elif operand.mask is None:
+    return self.mask
+else:
+    return handle_mask(self.mask, operand.mask, **kwds)

     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
