diff --git a/reproduce_swap_dims_error.py b/reproduce_swap_dims_error.py
new file mode 100644
index 00000000..fa740e8e
--- /dev/null
+++ b/reproduce_swap_dims_error.py
@@ -0,0 +1,27 @@
+import numpy as np
+import xarray as xr
+
+nz = 11
+ds = xr.Dataset(
+    data_vars={
+        "y": ("z", np.random.rand(nz)),
+        "lev": ("z", np.arange(nz) * 10),
+        # ^ We want this to be a dimension coordinate
+    },
+)
+print(f"ds\n{ds}")
+print(f"\nds, 'lev' -> dim coord\n{ds.swap_dims(z='lev')}")
+
+ds2 = (
+    ds.swap_dims(z="lev")
+    .rename_dims(lev="z")
+    .reset_index("lev")
+    .reset_coords()
+)
+print(f"\nds2\n{ds2}")
+# ^ This Dataset appears same as the original
+
+print(f"\nds2, 'lev' -> dim coord\n{ds2.swap_dims(z='lev')}")
+# ^ Produces a Dataset with dimension coordinate 'lev'
+print(f"\nds2 after .swap_dims() applied\n{ds2}")
+# ^ `ds2['lev']` now has dimension 'lev' although otherwise same
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index c775d05c..12f4e22a 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3749,15 +3749,7 @@ class Dataset(
         # TODO: deprecate this method in favor of a (less confusing)
         # rename_dims() method that only renames dimensions.

-        dims_dict = either_dict_or_kwargs(dims_dict, dims_kwargs, "swap_dims")
-        for k, v in dims_dict.items():
-            if k not in self.dims:
-                raise ValueError(
-                    f"cannot swap from dimension {k!r} because it is "
-                    "not an existing dimension"
-                )
-            if v in self.variables and self.variables[v].dims != (k,):
-                raise ValueError(
+ds = self.copy()
                     f"replacement dimension {v!r} is not a 1D "
                     f"variable along the old dimension {k!r}"
                 )
