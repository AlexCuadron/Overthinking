diff --git a/__init__.py b/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index c5d87f647a..6629c6534b 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -149,6 +149,17 @@ class ForwardManyToOneDescriptor:

     def get_queryset(self, **hints):
         return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()
+async def acreate(self, **kwargs):
+        return await sync_to_async(self.create)(**kwargs)
+    acreate.alters_data = True
+
+    async def aget_or_create(self, defaults=None, **kwargs):
+        return await sync_to_async(self.get_or_create)(defaults=defaults, **kwargs)
+    aget_or_create.alters_data = True
+
+    async def aupdate_or_create(self, defaults=None, **kwargs):
+        return await sync_to_async(self.update_or_create)(defaults=defaults, **kwargs)
+    aupdate_or_create.alters_data = True

     def get_prefetch_queryset(self, instances, queryset=None):
         if queryset is None:
diff --git a/scripts/__init__.py b/scripts/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..77db2bccf1
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,27 @@
+import os
+import django
+import sys
+sys.path.append('/workspace/django__django__4.2')
+import asyncio
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'scripts.settings')  # Update if necessary
+
+django.setup()
+
+from django.contrib.auth.models import User
+from django.core.management import call_command
+
+async def main():
+    # Attempt to use acreate on the User model
+await sync_to_async(call_command)('migrate')
+await sync_to_async(call_command)('migrate')
+    user = await User.objects.acreate(username='testuser')
+
+    # Attempt to use aget_or_create on a related manager (assuming User has a related Profile)
+    profile, created = await user.profile_set.aget_or_create(defaults={'bio': 'Test bio'})
+
+    # Attempt to use aupdate_or_create on a related manager
+    profile, created = await user.profile_set.aupdate_or_create(username='testuser', defaults={'bio': 'Updated bio'})
+
+if __name__ == '__main__':
+    asyncio.run(main())
\ No newline at end of file
diff --git a/scripts/settings.py b/scripts/settings.py
new file mode 100644
index 0000000000..f7f6a318bf
--- /dev/null
+++ b/scripts/settings.py
@@ -0,0 +1,13 @@
+SECRET_KEY = 'dummy-secret-key'
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
\ No newline at end of file
