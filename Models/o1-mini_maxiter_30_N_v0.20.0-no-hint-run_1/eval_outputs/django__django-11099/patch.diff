diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _

 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):

 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b6b1d259e6
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,28 @@
+from django.conf import settings
+settings.configure(USE_I18N=True)
+
+import django
+django.setup()
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_validator(validator, username):
+    try:
+        validator(username)
+        print(f"'{username}' is valid.")
+    except Exception as e:
+        print(f"Validation error for '{username}': {e}")
+
+if __name__ == "__main__":
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+
+    test_usernames = [
+        "validuser",
+        "validuser\n",
+        "anotheruser",
+        "anotheruser\n"
+    ]
+
+    for username in test_usernames:
+        test_validator(ascii_validator, username)
+        test_validator(unicode_validator, username)
\ No newline at end of file
