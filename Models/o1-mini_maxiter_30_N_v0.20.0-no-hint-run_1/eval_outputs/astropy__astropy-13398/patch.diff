diff --git a/astropy/coordinates/builtin_frames/cirs_observed_transforms.py b/astropy/coordinates/builtin_frames/cirs_observed_transforms.py
index 40e4d3ba91..94a84fa319 100644
--- a/astropy/coordinates/builtin_frames/cirs_observed_transforms.py
+++ b/astropy/coordinates/builtin_frames/cirs_observed_transforms.py
@@ -37,7 +37,9 @@ def cirs_to_observed(cirs_coo, observed_frame):
     cirs_ra = usrepr.lon.to_value(u.radian)
     cirs_dec = usrepr.lat.to_value(u.radian)
     # first set up the astrometry context for CIRS<->observed
-    astrom = erfa_astrom.get().apio(observed_frame)
+
+if observed_frame.location is None:
+        raise ValueError("Observed frame must have a valid location.")

     if isinstance(observed_frame, AltAz):
         lon, zen, _, _, _ = erfa.atioq(cirs_ra, cirs_dec, astrom)
diff --git a/astropy/coordinates/transformations.py b/astropy/coordinates/transformations.py
index b34f335328..1f80f382b7 100644
--- a/astropy/coordinates/transformations.py
+++ b/astropy/coordinates/transformations.py
@@ -1607,3 +1607,70 @@ trans_to_color[FunctionTransform] = '#783001'  # dark red-ish/brown
 trans_to_color[FunctionTransformWithFiniteDifference] = '#d95f02'  # red-ish
 trans_to_color[StaticMatrixTransform] = '#7570b3'  # blue-ish
 trans_to_color[DynamicMatrixTransform] = '#1b9e77'  # green-ish
+
+def itrs_to_observed_mat(observed_frame):
+        if observed_frame.location is None:
+            raise ValueError("Observed frame must have a valid location.")
+        lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+        elong = lon.to_value(u.radian)
+
+        if isinstance(observed_frame, AltAz):
+            # form ITRS to AltAz matrix
+            elat = lat.to_value(u.radian)
+            # AltAz frame is left handed
+            minus_x = np.eye(3)
+            minus_x[0][0] = -1.0
+            mat = (minus_x
+                   @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+                   @ rotation_matrix(elong, 'z', unit=u.radian))
+        else:
+            # form ITRS to HADec matrix
+            # HADec frame is left handed
+            minus_y = np.eye(3)
+            minus_y[1][1] = -1.0
+            mat = (minus_y
+                   @ rotation_matrix(elong, 'z', unit=u.radian))
+        return mat
+
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    # Trying to synchronize the obstimes here makes no sense. In fact,
+    # it's a real gotcha as doing an ITRS->ITRS transform references
+    # ITRS coordinates, which should be tied to the Earth, to the SSB.
+    # Instead, we treat ITRS coordinates as time invariant here.
+
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                             - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
\ No newline at end of file
diff --git a/examples/reproduce_transform_error.py b/examples/reproduce_transform_error.py
new file mode 100644
index 0000000000..3542b7236a
--- /dev/null
+++ b/examples/reproduce_transform_error.py
@@ -0,0 +1,13 @@
+import astropy.units as u
+from astropy.coordinates import ITRS, AltAz, HADec
+
+# Reproduce the transformation error
+def reproduce_error():
+    itrs = ITRS(x=1.0*u.m, y=1.0*u.m, z=1.0*u.m, obstime='J2000')
+    altaz = itrs.transform_to(AltAz(obstime='J2000'))
+    hadec = itrs.transform_to(HADec())
+    print("AltAz:", altaz)
+    print("HADec:", hadec)
+
+if __name__ == "__main__":
+    reproduce_error()
\ No newline at end of file
