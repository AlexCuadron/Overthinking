diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9924c4d914
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+from sympy import FiniteSet, ProductSet, Eq
+
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print(b.intersection(c) == c.intersection(b))
+print(b.is_subset(c))
+print(c.is_subset(b))
+
+try:
+    print(Eq(b, c).simplify())
+except AttributeError as e:
+    print("AttributeError:", e)
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..22bc43cbba 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1579,6 +1579,18 @@ def reduce(A, B):

     def _contains(self, other):
         A = self.args[0]
+def equals(self, other):
+        if not isinstance(other, Complement):
+            return False
+def equals(self, other):
+        if not isinstance(other, Complement):
+            return False
+        return self.args == other.args
+        return self.args == other.args
+def equals(self, other):
+        if not isinstance(other, Complement):
+            return False
+        return self.args == other.args
         B = self.args[1]
         return And(A.contains(other), Not(B.contains(other)))

@@ -1597,6 +1609,17 @@ def is_iterable(self):
         if self.args[0].is_iterable:
             return True

+        if not isinstance(other, Complement):
+        return self.args == other.args
+        return self.args == other.args
+            return False
+        return self.args == other.args
+        if not isinstance(other, Complement):
+            return False
+        return self.args == other.args
+    if not isinstance(other, Complement):
+        return False
+    return self.args == other.args
     @property
     def is_finite_set(self):
         A, B = self.args
