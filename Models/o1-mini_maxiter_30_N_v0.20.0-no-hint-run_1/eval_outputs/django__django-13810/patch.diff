diff --git a/asgi_djangotoolbar_bug/__init__.py b/asgi_djangotoolbar_bug/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/asgi_djangotoolbar_bug/middleware/DummyMiddleware.py b/asgi_djangotoolbar_bug/middleware/DummyMiddleware.py
new file mode 100644
index 0000000000..5bcf3f23a0
--- /dev/null
+++ b/asgi_djangotoolbar_bug/middleware/DummyMiddleware.py
@@ -0,0 +1,8 @@
+from django.core.exceptions import MiddlewareNotUsed
+
+class DummyMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    async def __call__(self, request):
+        raise MiddlewareNotUsed
\ No newline at end of file
diff --git a/asgi_djangotoolbar_bug/middleware/__init__.py b/asgi_djangotoolbar_bug/middleware/__init__.py
new file mode 100644
index 0000000000..c2bb74340c
--- /dev/null
+++ b/asgi_djangotoolbar_bug/middleware/__init__.py
@@ -0,0 +1 @@
+from .DummyMiddleware import DummyMiddleware
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..51972da19a
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,41 @@
+import os
+import sys
+sys.path.append("/workspace/django__django__3.2")
+import django
+import asyncio
+from django.conf import settings
+from django.core.asgi import get_asgi_application
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.utils.deprecation import MiddlewareMixin
+
+# Intentionally break SESSION_FILE_PATH to cause a 500 error
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dummy',
+    ROOT_URLCONF='django.urls',
+    MIDDLEWARE=[
+        'asgi_djangotoolbar_bug.middleware.DummyMiddleware',
+        'django.middleware.common.CommonMiddleware',
+    ],
+    SESSION_ENGINE='django.contrib.sessions.backends.file',
+    SESSION_FILE_PATH='/invalid/path/to/sessions',
+)
+
+class DummyMiddleware(MiddlewareMixin):
+    def process_request(self, request):
+        raise MiddlewareNotUsed
+
+async def main():
+    try:
+        application = get_asgi_application()
+        # Simulate a request to /admin
+        from django.test import AsyncClient
+        async with AsyncClient() as client:
+        response = await client.get('/admin')
+        print(response.status_code)
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == '__main__':
+    asyncio.run(main())
\ No newline at end of file
