diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..a7a7e6c7ea 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -398,12 +398,10 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
-    else:
-        return display_for_value(value, empty_value_display)
+elif isinstance(field, models.JSONField):
+        return field.prepare_value(value)


-def display_for_value(value, empty_value_display, boolean=False):
-    from django.contrib.admin.templatetags.admin_list import _boolean_icon

     if boolean:
         return _boolean_icon(value)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4920127997
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+import django
+from django.conf import settings
+from django.contrib.admin.utils import display_for_field
+from django.db import models
+from django.contrib.admin import ModelAdmin
+from django.contrib import admin
+
+# Configure minimal settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+# Define a model with JSONField
+class ExampleModel(models.Model):
+    data = models.JSONField()
+
+    class Meta:
+        app_label = 'reproduce_app'
+
+# Register the model in admin with readonly JSONField
+class ExampleModelAdmin(ModelAdmin):
+    readonly_fields = ('data',)
+
+admin.site.register(ExampleModel, ExampleModelAdmin)
+
+# Create an instance of the model
+instance = ExampleModel(data={"foo": "bar"})
+
+# Simulate displaying the field in admin
+field = ExampleModel._meta.get_field('data')
+formatted = display_for_field(instance.data, field, '-----')
+
+print("Formatted JSONField:", formatted)
\ No newline at end of file
