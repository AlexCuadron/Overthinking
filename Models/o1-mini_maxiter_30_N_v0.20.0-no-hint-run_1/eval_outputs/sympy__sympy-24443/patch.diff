diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..09e498e5a6 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -302,8 +302,13 @@ def homomorphism(domain, codomain, gens, images=(), check=True):
     images.extend([codomain.identity]*(len(generators)-len(images)))
     gens.extend([g for g in generators if g not in gens])
     images = dict(zip(gens,images))
+for g in gens:
+for g in list(gens):
+    gens.append(g.inverse())
+    images[g.inverse()] = images[g].inverse()

     if check and not _check_homomorphism(domain, codomain, images):
+
         raise ValueError("The given images do not define a homomorphism")
     return GroupHomomorphism(domain, codomain, images)

@@ -333,14 +338,14 @@ def _image(r):
             # both indices
             while i < len(r):
                 power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup) and (r[i] in gens or r[i].inverse() in gens):
+                    s = domain.generators[gens.index(r[i])] if r[i] in gens else domain.generators[gens.index(r[i].inverse())].inverse()
                 else:
                     s = r[i]
                 if s in images:
                     w = w*images[s]**power
-                elif s**-1 in images:
-                    w = w*images[s**-1]**power
+                elif s.inverse() in images:
+                    w = w*images[s.inverse()]**(-power)
                 i += abs(power)
                 j += 1
             return w
