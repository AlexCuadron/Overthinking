diff --git a/reproduce_regression.py b/reproduce_regression.py
new file mode 100644
index 00000000..f346e1a6
--- /dev/null
+++ b/reproduce_regression.py
@@ -0,0 +1,18 @@
+import xarray as xr
+
+def reproduce_regression():
+    ds = xr.Dataset(
+        coords={'x': ['foo'], 'y': ('x', ['bar'])},
+        data_vars={'z': ('x', ['baz'])}
+    )
+    print("Original Dataset:")
+    print(ds)
+    print("\nDataset copy (deep=True):")
+    ds_copy = ds.copy(deep=True)
+    print(ds_copy)
+    print("\nDataArray copy (deep=True):")
+    da_copy = ds.z.copy(deep=True)
+    print(da_copy)
+
+if __name__ == "__main__":
+    reproduce_regression()
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index b00dad96..5887d374 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -933,7 +933,34 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
         pandas.DataFrame.copy
         """  # noqa
         if data is None:
-            variables = OrderedDict((k, v.copy(deep=deep))
+        variables = OrderedDict()
+        for k, v in self._variables.items():
+            copy_v = v.copy(deep=deep)
+            if isinstance(copy_v, IndexVariable) and copy_v.dtype.kind == "U":
+                copy_v = copy_v.astype(v.dtype)
+            variables[k] = copy_v
+        variables[k] = copy_v
+            variables[k] = copy_v
+        copy_v = v.copy(deep=deep)
+        if isinstance(copy_v, IndexVariable) and copy_v.dtype.kind == "U":
+            copy_v = copy_v.astype(v.dtype)
+        variables[k] = copy_v
+        copy_v = v.copy(deep=deep)
+        if isinstance(copy_v, IndexVariable) and copy_v.dtype.kind == "U":
+            copy_v = copy_v.astype(copy_v.dtype)
+        variables[k] = copy_v
+                    if isinstance(v, IndexVariable) and v.dtype.kind == 'U':
+                        variables[k] = v.astype(v.dtype)
+                for k, v in self._variables.items():
+                    copy_v = v.copy(deep=deep)
+                    if isinstance(copy_v, IndexVariable) and copy_v.dtype.kind == "U":
+                        copy_v = copy_v.astype(v.dtype)
+                    variables[k] = copy_v
+        if isinstance(v, IndexVariable) and v.dtype.kind == 'U':
+            variables[k] = v.astype(v.dtype)
+for k, v in variables.items():
+            if isinstance(v, IndexVariable) and v.dtype.kind == 'U':
+                variables[k] = v.astype(v.dtype)
                                     for k, v in self._variables.items())
         elif not utils.is_dict_like(data):
             raise ValueError('Data must be dict-like')
