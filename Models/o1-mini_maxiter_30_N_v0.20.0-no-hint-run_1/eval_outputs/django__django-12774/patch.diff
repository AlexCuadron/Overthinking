diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..2a4fa8bac2 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -689,7 +689,7 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
+        if field_name != 'pk' and not (self.model._meta.get_field(field_name).unique or any(isinstance(constraint, models.UniqueConstraint) and field_name in constraint.fields for constraint in self.model._meta.constraints)):
             raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
diff --git a/reproduce_in_bulk_error.py b/reproduce_in_bulk_error.py
new file mode 100644
index 0000000000..03d750c2b3
--- /dev/null
+++ b/reproduce_in_bulk_error.py
@@ -0,0 +1,46 @@
+import django
+from django.conf import settings
+from django.db import models
+from django.core.management import call_command
+
+# Configure settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'test_app',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+)
+
+django.setup()
+# Define the model
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(fields=['slug'], name='unique_slug'),
+        ]
+        app_label = 'test_app'
+
+
+# Set up the app
+
+# Create the tables
+call_command('makemigrations', 'test_app', interactive=False, verbosity=0)
+call_command('migrate', interactive=False, verbosity=0)
+
+# Create some instances
+Article.objects.create(slug='test1')
+Article.objects.create(slug='test2')
+
+# Attempt to use in_bulk
+try:
+    Article.objects.in_bulk(field_name='slug')
+except ValueError as e:
+    print(e)
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..ae6f331d8b
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
\ No newline at end of file
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..765e830401
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,25 @@
+# Generated by Django 3.1 on 2025-01-15 18:33
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('slug', models.CharField(max_length=255)),
+            ],
+        ),
+        migrations.AddConstraint(
+            model_name='article',
+            constraint=models.UniqueConstraint(fields=('slug',), name='unique_slug'),
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
