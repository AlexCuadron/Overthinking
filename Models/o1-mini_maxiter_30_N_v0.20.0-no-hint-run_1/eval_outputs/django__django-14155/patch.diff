diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..e51885218b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,9 +31,19 @@ from .utils import get_callable

 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
-        self.args = args
-        self.kwargs = kwargs
+        if isinstance(func, functools.partial):
+if isinstance(func, functools.partial):
+            self.func = func.func
+            self.args = args + list(func.args)
+            self.kwargs = {**kwargs, **func.keywords} if func.keywords else kwargs
+            self.func = func.func
+            self.args = args + list(func.args)
+            self.kwargs = {**kwargs, **func.keywords} if func.keywords else kwargs
+        else:
+            self.func = func
+            self.args = args
+            self.kwargs = kwargs
+
         self.url_name = url_name
         self.route = route
         self.tried = tried
@@ -59,6 +69,9 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]

     def __repr__(self):
+        if isinstance(self.func, functools.partial):
+            return (f"ResolverMatch(func={self.func.func}, args={self.func.args}, kwargs={self.func.keywords}, "
+                    f"url_name={self.url_name}, app_names={self.app_names}, namespaces={self.namespaces}, route={self.route})")
         return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
             self._func_path, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..c62b3389c8
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,18 @@
+import functools
+from django.urls import ResolverMatch
+
+def original_view(request):
+    return "Original View"
+
+partial_view = functools.partial(original_view, some_arg=42)
+
+match = ResolverMatch(
+    func=partial_view,
+    args=[],
+    kwargs={},
+    url_name='test',
+    app_names=[],
+    namespaces=[]
+)
+
+print(repr(match))
\ No newline at end of file
diff --git a/scripts/reproduce_error_debug.py b/scripts/reproduce_error_debug.py
new file mode 100644
index 0000000000..15f9be77d1
--- /dev/null
+++ b/scripts/reproduce_error_debug.py
@@ -0,0 +1,21 @@
+import functools
+from django.urls import ResolverMatch
+
+def original_view(request):
+    return "Original View"
+
+partial_view = functools.partial(original_view, some_arg=42)
+
+match = ResolverMatch(
+    func=partial_view,
+    args=[],
+    kwargs={},
+    url_name='test',
+    app_names=[],
+    namespaces=[],
+    route=None
+)
+
+print("Type of func:", type(match.func))
+print("Is func functools.partial?", isinstance(match.func, functools.partial))
+print(repr(match))
\ No newline at end of file
