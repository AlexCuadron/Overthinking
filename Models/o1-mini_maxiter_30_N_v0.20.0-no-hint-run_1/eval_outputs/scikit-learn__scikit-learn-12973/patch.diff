diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..f36c47c30
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,18 @@
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+# Generate sample data
+X = np.array([[1, 2], [3, 4], [5, 6]])
+y = np.array([1, 2, 3])
+
+# Initialize LassoLarsIC with copy_X=False
+model = LassoLarsIC(criterion='bic', copy_X=False)
+
+# Fit the model
+model.fit(X, y)
+
+# Modify X after fitting
+X[0, 0] = 100
+
+# Check if the model's internal X has changed
+print("Model's coefficients after modification:", model.coef_[0])
\ No newline at end of file
diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..54bb9d501 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,18 +1479,9 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True

-    def fit(self, X, y, copy_X=True):
-        """Fit the model using X, y as training data.
-
-        Parameters
-        ----------
-        X : array-like, shape (n_samples, n_features)
-            training data.
-
-        y : array-like, shape (n_samples,)
-            target values. Will be cast to X's dtype if necessary
-
-        copy_X : boolean, optional, default True
+    def fit(self, X, y, copy_X=None):
+    if copy_X is None:
+        copy_X = self.copy_X
             If ``True``, X will be copied; else, it may be overwritten.

         Returns
@@ -1498,6 +1489,7 @@ class LassoLarsIC(LassoLars):
         self : object
             returns an instance of self.
         """
+    """
         X, y = check_X_y(X, y, y_numeric=True)

         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(
