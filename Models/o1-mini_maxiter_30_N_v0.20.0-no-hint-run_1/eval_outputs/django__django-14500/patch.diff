diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..b7b014aabc 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -277,6 +277,9 @@ class MigrationExecutor:
             all_applied = all(m in applied for m in migration.replaces)
             if all_applied and key not in applied:
                 self.recorder.record_applied(*key)
+elif not all_applied and key in applied:
+            self.recorder.record_unapplied(*key)
+

     def detect_soft_applied(self, project_state, migration):
         """
diff --git a/django/migrations/0001_initial.py b/django/migrations/0001_initial.py
new file mode 100644
index 0000000000..a552f2693c
--- /dev/null
+++ b/django/migrations/0001_initial.py
@@ -0,0 +1,17 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='DummyModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=255)),
+            ],
+        ),
+    ]
\ No newline at end of file
diff --git a/django/migrations/__init__.py b/django/migrations/__init__.py
new file mode 100644
index 0000000000..f69e1c317b
--- /dev/null
+++ b/django/migrations/__init__.py
@@ -0,0 +1 @@
+# Generated by Django. You can add custom migration logic here if needed.
\ No newline at end of file
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..8e13c8c3fc
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,56 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+
+def setup_django():
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django',
+        ],
+    )
+    django.setup()
+
+def reproduce_error():
+    setup_django()
+    executor = MigrationExecutor(connection)
+    recorder = MigrationRecorder(connection)
+
+    # Apply initial migrations
+    executor.migrate([('contenttypes', '0001_initial'), ('auth', '0001_initial')])
+
+    # Create a dummy migration for demonstration
+    migration_name = '0002_auto_dummy'
+    migration = {
+        'app_label': 'django',
+        'migration': migration_name,
+    }
+
+    # Mark the dummy migration as applied
+    recorder.record_applied('django', migration_name)
+
+    # Assume a squashed migration exists
+    squashed_migration = '0001_squashed_0002_auto_dummy'
+
+    # Mark the squashed migration as applied
+    recorder.record_applied('django', squashed_migration)
+
+    # Attempt to unapply the squashed migration
+    try:
+        executor.migrate([('django', '0001_initial')])
+        print("Unapplied squashed migration successfully.")
+    except Exception as e:
+        print(f"Error during unapplying migration: {e}")
+
+if __name__ == "__main__":
+    reproduce_error()
\ No newline at end of file
