diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6190446aa3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,13 @@
+from sympy import *
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+print("First multiplication:")
+print(block_collapse(b * b))
+
+print("\nSecond multiplication:")
+try:
+    print(block_collapse(b * b * b))
+except AttributeError as e:
+    print(f"Error encountered: {e}")
\ No newline at end of file
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..a469b675b7 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,49 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            blocks = self.blocks*other.blocks
+for i in range(blocks.rows):
+        for j in range(blocks.cols):
+            if isinstance(blocks[i, j], Zero):
+                blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+            for j in range(blocks.cols):
+                if isinstance(blocks[i, j], Zero):
+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+            for j in range(blocks.cols):
+                if isinstance(blocks[i, j], Zero):
+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+        for i in range(blocks.rows):
+            for j in range(blocks.cols):
+                if isinstance(blocks[i, j], Zero):
+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+        return BlockMatrix(blocks)
+for i in range(blocks.rows):
+            for j in range(blocks.cols):
+                if isinstance(blocks[i, j], Zero):
+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+            for j in range(blocks.cols):
+                if isinstance(blocks[i, j], Zero):
+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+        for j in range(blocks.cols):
+            if isinstance(blocks[i, j], Zero):
+                blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+        for j in range(blocks.cols):
+            if isinstance(blocks[i, j], Zero):
+                blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+    for j in range(blocks.cols):
+        if isinstance(blocks[i, j], Zero):
+            blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+for i in range(blocks.rows):
+            for j in range(blocks.cols):
+                if isinstance(blocks[i, j], Zero):
+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)
+        return BlockMatrix(blocks)

         return self * other
