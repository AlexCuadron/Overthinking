2025-01-15 13:22:36,656 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bptueos0omzw4o3c_qroup3d3os79ipoo
2025-01-15 13:22:36,661 - INFO - [runtime 2d9eebeb-1874-452b-a0ee-bbf93fb3a2bf-b744e09c2530fc9e] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bptueos0omzw4o3c_qroup3d3os79ipoo
2025-01-15 13:22:37,803 - INFO - [runtime 2d9eebeb-1874-452b-a0ee-bbf93fb3a2bf-b744e09c2530fc9e] Container started: openhands-runtime-2d9eebeb-1874-452b-a0ee-bbf93fb3a2bf-b744e09c2530fc9e. VSCode URL: None
2025-01-15 13:22:37,803 - INFO - [runtime 2d9eebeb-1874-452b-a0ee-bbf93fb3a2bf-b744e09c2530fc9e] Waiting for client to become ready at http://localhost:30454...
2025-01-15 13:23:07,919 - INFO - [runtime 2d9eebeb-1874-452b-a0ee-bbf93fb3a2bf-b744e09c2530fc9e] Runtime is ready.
2025-01-15 13:23:08,562 - INFO - ------------------------------
2025-01-15 13:23:08,563 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 13:23:08,563 - INFO - ------------------------------
2025-01-15 13:23:08,563 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-5787' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 13:23:09,194 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:09,194 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 13:23:09,824 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:09,825 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 13:23:10,454 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:10,463 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 13:23:11,091 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=pytest-dev__pytest-5787
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:11,092 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 13:23:11,727 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:11,728 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 13:23:11,728 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 13:23:12,861 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__5.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:12,861 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.1
2025-01-15 13:23:13,497 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:13,498 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 13:23:14,127 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 955e54221 Merge pull request #5792 from dynatrace-oss-contrib/bugfix/badcase
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:14,127 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 13:23:14,758 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:14,758 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 13:23:15,387 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:23:15,387 - INFO - ------------------------------
2025-01-15 13:23:15,387 - INFO - END Runtime Initialization Fn
2025-01-15 13:23:15,387 - INFO - ------------------------------
2025-01-15 13:23:15,426 - INFO - [runtime 2d9eebeb-1874-452b-a0ee-bbf93fb3a2bf-b744e09c2530fc9e] Found 0 local microagents.
2025-01-15 13:23:15,429 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 13:23:15,430 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 13:23:22,436 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 13:23:28,172 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 13:23:36,270 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 13:23:44,627 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 13:23:55,593 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 13:24:05,460 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 13:24:13,849 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 13:24:21,816 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 13:24:30,342 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 13:24:36,838 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 13:24:54,456 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 13:25:06,123 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 13:25:16,754 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 13:25:24,558 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 13:25:31,837 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 13:25:38,676 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 13:25:49,771 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 13:25:57,531 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 13:26:04,187 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 13:26:11,825 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 13:26:27,955 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 13:26:35,529 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 13:26:50,665 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 13:27:11,036 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 13:27:20,802 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 13:27:34,827 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 13:27:48,653 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 13:27:57,174 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 13:28:11,789 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 13:28:20,311 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 13:28:20,311 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 13:28:20,312 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 13:28:20,313 - WARNING - Stopping agent due to traffic control
2025-01-15 13:28:20,313 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 13:28:20,752 - INFO - ------------------------------
2025-01-15 13:28:20,752 - INFO - BEGIN Runtime Completion Fn
2025-01-15 13:28:20,752 - INFO - ------------------------------
2025-01-15 13:28:20,752 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.1
2025-01-15 13:28:21,386 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:21,386 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 13:28:22,019 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:22,019 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 13:28:22,651 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:22,651 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 955e54221008aba577ecbaefa15679f6777d3bf8
2025-01-15 13:28:23,286 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "d2702083cffc",
  "working_dir": "/workspace/pytest-dev__pytest__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py
index a0f4d15ce..13de64325 100644
--- a/src/_pytest/_code/code.py
+++ b/src/_pytest/_code/code.py
@@ -903,9 +903,19 @@ class ReprExceptionInfo(ExceptionRepr):
         super().__init__()
         self.reprtraceback = reprtraceback
         self.reprcrash = reprcrash
+        self.chain = []

     def toterminal(self, tw):
         self.reprtraceback.toterminal(tw)
+
+        # Display chained exceptions
+        for i, cause in enumerate(self.chain):
+            if i == len(self.chain) - 1:
+                tw.line("\nThe above exception was the direct cause of the following exception:\n")
+            else:
+                tw.line("\nDuring handling of the above exception, another exception occurred:\n")
+            cause.reprtraceback.toterminal(tw)
+
         super().toterminal(tw)


diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index 4682d5b6e..e8e94d073 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -1,5 +1,6 @@
 from pprint import pprint
 from typing import Optional
+import enum

 import py

@@ -12,6 +13,7 @@ from _pytest._code.code import ReprFuncArgs
 from _pytest._code.code import ReprLocals
 from _pytest._code.code import ReprTraceback
 from _pytest._code.code import TerminalRepr
+from _pytest._code.code import ExceptionChainRepr
 from _pytest.outcomes import skip
 from _pytest.pathlib import Path

@@ -162,11 +164,7 @@ class BaseReport:
         """

         def disassembled_report(rep):
-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()
-
-            new_entries = []
-            for entry in reprtraceback["reprentries"]:
+            def serialize_traceback_entry(entry):
                 entry_data = {
                     "type": type(entry).__name__,
                     "data": entry.__dict__.copy(),
@@ -174,15 +172,42 @@ class BaseReport:
                 for key, value in entry_data["data"].items():
                     if hasattr(value, "__dict__"):
                         entry_data["data"][key] = value.__dict__.copy()
-                new_entries.append(entry_data)
-
-            reprtraceback["reprentries"] = new_entries
+                return entry_data
+
+            def serialize_exception_repr(longrepr):
+                reprtraceback = longrepr.reprtraceback.__dict__.copy()
+                reprcrash = longrepr.reprcrash.__dict__.copy()
+
+                new_entries = []
+                for entry in reprtraceback["reprentries"]:
+                    new_entries.append(serialize_traceback_entry(entry))
+                reprtraceback["reprentries"] = new_entries
+
+                return {
+                    "type": type(longrepr).__name__,
+                    "reprcrash": reprcrash,
+                    "reprtraceback": reprtraceback,
+                    "sections": getattr(longrepr, "sections", []),
+                }

-            return {
-                "reprcrash": reprcrash,
-                "reprtraceback": reprtraceback,
-                "sections": rep.longrepr.sections,
-            }
+            def serialize_chain_repr(longrepr):
+                result = serialize_exception_repr(longrepr)
+                if hasattr(longrepr, "chain"):
+                    result["chain"] = []
+                    for reprtraceback, reprcrash, descr in longrepr.chain:
+                        chain_entry = {
+                            "reprtraceback": reprtraceback.__dict__.copy(),
+                            "reprcrash": reprcrash.__dict__.copy() if reprcrash else None,
+                            "description": descr
+                        }
+                        chain_entry["reprtraceback"]["reprentries"] = [
+                            serialize_traceback_entry(entry)
+                            for entry in chain_entry["reprtraceback"]["reprentries"]
+                        ]
+                        result["chain"].append(chain_entry)
+                return result
+
+            return serialize_chain_repr(rep.longrepr)

         d = self.__dict__.copy()
         if hasattr(self.longrepr, "toterminal"):
@@ -199,6 +224,8 @@ class BaseReport:
                 d[name] = str(d[name])
             elif name == "result":
                 d[name] = None  # for now
+            elif name == "exitstatus" and isinstance(d[name], enum.Enum):
+                d[name] = d[name].value  # Convert enum to int
         return d

     @classmethod
@@ -250,14 +277,82 @@ class BaseReport:
                     unserialized_entries.append(reprentry)
                 reprtraceback["reprentries"] = unserialized_entries

-                exception_info = ReprExceptionInfo(
-                    reprtraceback=ReprTraceback(**reprtraceback),
-                    reprcrash=ReprFileLocation(**reprcrash),
-                )
+                def deserialize_traceback_entry(entry_data):
+                    data = entry_data["data"]
+                    entry_type = entry_data["type"]
+                    if entry_type == "ReprEntry":
+                        reprfuncargs = None
+                        reprfileloc = None
+                        reprlocals = None
+                        if data["reprfuncargs"]:
+                            reprfuncargs = ReprFuncArgs(**data["reprfuncargs"])
+                        if data["reprfileloc"]:
+                            reprfileloc = ReprFileLocation(**data["reprfileloc"])
+                        if data["reprlocals"]:
+                            reprlocals = ReprLocals(data["reprlocals"]["lines"])
+
+                        return ReprEntry(
+                            lines=data["lines"],
+                            reprfuncargs=reprfuncargs,
+                            reprlocals=reprlocals,
+                            filelocrepr=reprfileloc,
+                            style=data["style"],
+                        )
+                    elif entry_type == "ReprEntryNative":
+                        return ReprEntryNative(data["lines"])
+                    else:
+                        _report_unserialization_failure(entry_type, cls, reportdict)
+
+                def deserialize_exception_repr(data):
+                    reprtraceback = data["reprtraceback"]
+                    reprcrash = data["reprcrash"]
+
+                    # Deserialize traceback entries
+                    new_entries = []
+                    for entry_data in reprtraceback["reprentries"]:
+                        new_entries.append(deserialize_traceback_entry(entry_data))
+                    reprtraceback["reprentries"] = new_entries

-                for section in reportdict["longrepr"]["sections"]:
-                    exception_info.addsection(*section)
-                reportdict["longrepr"] = exception_info
+                    # Create exception info
+                    exception_info = ReprExceptionInfo(
+                        reprtraceback=ReprTraceback(**reprtraceback),
+                        reprcrash=ReprFileLocation(**reprcrash),
+                    )
+                    for section in data["sections"]:
+                        exception_info.addsection(*section)
+                    return exception_info
+
+                def deserialize_chain_repr(data):
+                    # Deserialize main exception
+                    exception_info = deserialize_exception_repr(data)
+
+                    # Deserialize chain if present
+                    if "chain" in data:
+                        chain = []
+                        for chain_entry in data["chain"]:
+                            reprtraceback = chain_entry["reprtraceback"]
+                            reprcrash = chain_entry["reprcrash"]
+                            descr = chain_entry["description"]
+
+                            # Deserialize traceback entries
+                            new_entries = []
+                            for entry_data in reprtraceback["reprentries"]:
+                                new_entries.append(deserialize_traceback_entry(entry_data))
+                            reprtraceback["reprentries"] = new_entries
+
+                            chain.append((
+                                ReprTraceback(**reprtraceback),
+                                ReprFileLocation(**reprcrash) if reprcrash else None,
+                                descr
+                            ))
+
+                        # Create ExceptionChainRepr
+                        chain_repr = ExceptionChainRepr(chain)
+                        chain_repr.sections = exception_info.sections
+                        return chain_repr
+                    return exception_info
+
+                reportdict["longrepr"] = deserialize_chain_repr(reportdict["longrepr"])

         return cls(**reportdict)
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:23,286 - INFO - ------------------------------
2025-01-15 13:28:23,286 - INFO - END Runtime Completion Fn
2025-01-15 13:28:23,286 - INFO - ------------------------------
2025-01-15 13:28:23,287 - INFO - Got git diff for instance pytest-dev__pytest-5787:
--------
diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py
index a0f4d15ce..13de64325 100644
--- a/src/_pytest/_code/code.py
+++ b/src/_pytest/_code/code.py
@@ -903,9 +903,19 @@ class ReprExceptionInfo(ExceptionRepr):
         super().__init__()
         self.reprtraceback = reprtraceback
         self.reprcrash = reprcrash
+        self.chain = []

     def toterminal(self, tw):
         self.reprtraceback.toterminal(tw)
+
+        # Display chained exceptions
+        for i, cause in enumerate(self.chain):
+            if i == len(self.chain) - 1:
+                tw.line("\nThe above exception was the direct cause of the following exception:\n")
+            else:
+                tw.line("\nDuring handling of the above exception, another exception occurred:\n")
+            cause.reprtraceback.toterminal(tw)
+
         super().toterminal(tw)


diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index 4682d5b6e..e8e94d073 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -1,5 +1,6 @@
 from pprint import pprint
 from typing import Optional
+import enum

 import py

@@ -12,6 +13,7 @@ from _pytest._code.code import ReprFuncArgs
 from _pytest._code.code import ReprLocals
 from _pytest._code.code import ReprTraceback
 from _pytest._code.code import TerminalRepr
+from _pytest._code.code import ExceptionChainRepr
 from _pytest.outcomes import skip
 from _pytest.pathlib import Path

@@ -162,11 +164,7 @@ class BaseReport:
         """

         def disassembled_report(rep):
-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()
-
-            new_entries = []
-            for entry in reprtraceback["reprentries"]:
+            def serialize_traceback_entry(entry):
                 entry_data = {
                     "type": type(entry).__name__,
                     "data": entry.__dict__.copy(),
@@ -174,15 +172,42 @@ class BaseReport:
                 for key, value in entry_data["data"].items():
                     if hasattr(value, "__dict__"):
                         entry_data["data"][key] = value.__dict__.copy()
-                new_entries.append(entry_data)
-
-            reprtraceback["reprentries"] = new_entries
+                return entry_data
+
+            def serialize_exception_repr(longrepr):
+                reprtraceback = longrepr.reprtraceback.__dict__.copy()
+                reprcrash = longrepr.reprcrash.__dict__.copy()
+
+                new_entries = []
+                for entry in reprtraceback["reprentries"]:
+                    new_entries.append(serialize_traceback_entry(entry))
+                reprtraceback["reprentries"] = new_entries
+
+                return {
+                    "type": type(longrepr).__name__,
+                    "reprcrash": reprcrash,
+                    "reprtraceback": reprtraceback,
+                    "sections": getattr(longrepr, "sections", []),
+                }

-            return {
-                "reprcrash": reprcrash,
-                "reprtraceback": reprtraceback,
-                "sections": rep.longrepr.sections,
-            }
+            def serialize_chain_repr(longrepr):
+                result = serialize_exception_repr(longrepr)
+                if hasattr(longrepr, "chain"):
+                    result["chain"] = []
+                    for reprtraceback, reprcrash, descr in longrepr.chain:
+                        chain_entry = {
+                            "reprtraceback": reprtraceback.__dict__.copy(),
+                            "reprcrash": reprcrash.__dict__.copy() if reprcrash else None,
+                            "description": descr
+                        }
+                        chain_entry["reprtraceback"]["reprentries"] = [
+                            serialize_traceback_entry(entry)
+                            for entry in chain_entry["reprtraceback"]["reprentries"]
+                        ]
+                        result["chain"].append(chain_entry)
+                return result
+
+            return serialize_chain_repr(rep.longrepr)

         d = self.__dict__.copy()
         if hasattr(self.longrepr, "toterminal"):
@@ -199,6 +224,8 @@ class BaseReport:
                 d[name] = str(d[name])
             elif name == "result":
                 d[name] = None  # for now
+            elif name == "exitstatus" and isinstance(d[name], enum.Enum):
+                d[name] = d[name].value  # Convert enum to int
         return d

     @classmethod
@@ -250,14 +277,82 @@ class BaseReport:
                     unserialized_entries.append(reprentry)
                 reprtraceback["reprentries"] = unserialized_entries

-                exception_info = ReprExceptionInfo(
-                    reprtraceback=ReprTraceback(**reprtraceback),
-                    reprcrash=ReprFileLocation(**reprcrash),
-                )
+                def deserialize_traceback_entry(entry_data):
+                    data = entry_data["data"]
+                    entry_type = entry_data["type"]
+                    if entry_type == "ReprEntry":
+                        reprfuncargs = None
+                        reprfileloc = None
+                        reprlocals = None
+                        if data["reprfuncargs"]:
+                            reprfuncargs = ReprFuncArgs(**data["reprfuncargs"])
+                        if data["reprfileloc"]:
+                            reprfileloc = ReprFileLocation(**data["reprfileloc"])
+                        if data["reprlocals"]:
+                            reprlocals = ReprLocals(data["reprlocals"]["lines"])
+
+                        return ReprEntry(
+                            lines=data["lines"],
+                            reprfuncargs=reprfuncargs,
+                            reprlocals=reprlocals,
+                            filelocrepr=reprfileloc,
+                            style=data["style"],
+                        )
+                    elif entry_type == "ReprEntryNative":
+                        return ReprEntryNative(data["lines"])
+                    else:
+                        _report_unserialization_failure(entry_type, cls, reportdict)
+
+                def deserialize_exception_repr(data):
+                    reprtraceback = data["reprtraceback"]
+                    reprcrash = data["reprcrash"]
+
+                    # Deserialize traceback entries
+                    new_entries = []
+                    for entry_data in reprtraceback["reprentries"]:
+                        new_entries.append(deserialize_traceback_entry(entry_data))
+                    reprtraceback["reprentries"] = new_entries

-                for section in reportdict["longrepr"]["sections"]:
-                    exception_info.addsection(*section)
-                reportdict["longrepr"] = exception_info
+                    # Create exception info
+                    exception_info = ReprExceptionInfo(
+                        reprtraceback=ReprTraceback(**reprtraceback),
+                        reprcrash=ReprFileLocation(**reprcrash),
+                    )
+                    for section in data["sections"]:
+                        exception_info.addsection(*section)
+                    return exception_info
+
+                def deserialize_chain_repr(data):
+                    # Deserialize main exception
+                    exception_info = deserialize_exception_repr(data)
+
+                    # Deserialize chain if present
+                    if "chain" in data:
+                        chain = []
+                        for chain_entry in data["chain"]:
+                            reprtraceback = chain_entry["reprtraceback"]
+                            reprcrash = chain_entry["reprcrash"]
+                            descr = chain_entry["description"]
+
+                            # Deserialize traceback entries
+                            new_entries = []
+                            for entry_data in reprtraceback["reprentries"]:
+                                new_entries.append(deserialize_traceback_entry(entry_data))
+                            reprtraceback["reprentries"] = new_entries
+
+                            chain.append((
+                                ReprTraceback(**reprtraceback),
+                                ReprFileLocation(**reprcrash) if reprcrash else None,
+                                descr
+                            ))
+
+                        # Create ExceptionChainRepr
+                        chain_repr = ExceptionChainRepr(chain)
+                        chain_repr.sections = exception_info.sections
+                        return chain_repr
+                    return exception_info
+
+                reportdict["longrepr"] = deserialize_chain_repr(reportdict["longrepr"])

         return cls(**reportdict)
--------
2025-01-15 13:28:24,344 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sphinx-doc_s_sphinx-9591. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 13:28:24,344 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-9591 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/claude-3-5-sonnet-20241022_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-9591
