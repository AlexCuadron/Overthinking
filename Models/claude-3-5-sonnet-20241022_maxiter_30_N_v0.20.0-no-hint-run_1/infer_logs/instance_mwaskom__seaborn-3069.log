2025-01-15 13:19:22,615 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_6qflfuk8tkzilaqh_qroup3d3os79ipoo
2025-01-15 13:19:22,620 - INFO - [runtime c3417522-cd26-4772-a754-f98420d64d15-06ac0395aa376652] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_6qflfuk8tkzilaqh_qroup3d3os79ipoo
2025-01-15 13:19:23,743 - INFO - [runtime c3417522-cd26-4772-a754-f98420d64d15-06ac0395aa376652] Container started: openhands-runtime-c3417522-cd26-4772-a754-f98420d64d15-06ac0395aa376652. VSCode URL: None
2025-01-15 13:19:23,743 - INFO - [runtime c3417522-cd26-4772-a754-f98420d64d15-06ac0395aa376652] Waiting for client to become ready at http://localhost:35053...
2025-01-15 13:19:53,850 - INFO - [runtime c3417522-cd26-4772-a754-f98420d64d15-06ac0395aa376652] Runtime is ready.
2025-01-15 13:19:54,499 - INFO - ------------------------------
2025-01-15 13:19:54,499 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 13:19:54,499 - INFO - ------------------------------
2025-01-15 13:19:54,499 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=mwaskom__seaborn-3069' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 13:19:55,130 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:55,130 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 13:19:55,761 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:55,761 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 13:19:56,391 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:56,400 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 13:19:57,029 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=mwaskom__seaborn-3069
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:57,030 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 13:19:57,659 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:57,660 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 13:19:57,660 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 13:19:58,797 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: mwaskom__seaborn__0.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:58,797 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/mwaskom__seaborn__0.12
2025-01-15 13:19:59,427 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:19:59,427 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 13:20:00,056 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 54cab15b Make Jitter do something by default (#3066)
[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:00,056 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 13:20:00,690 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:00,691 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 13:20:01,319 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:01,319 - INFO - ------------------------------
2025-01-15 13:20:01,319 - INFO - END Runtime Initialization Fn
2025-01-15 13:20:01,319 - INFO - ------------------------------
2025-01-15 13:20:01,355 - INFO - [runtime c3417522-cd26-4772-a754-f98420d64d15-06ac0395aa376652] Found 0 local microagents.
2025-01-15 13:20:01,357 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 13:20:01,360 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 13:20:07,443 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 13:20:14,577 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 13:20:20,739 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 13:20:28,828 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 13:20:35,249 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 13:20:43,369 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 13:20:49,866 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 13:20:56,609 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 13:21:07,609 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 13:21:16,385 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 13:21:24,553 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 13:21:33,825 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 13:21:43,062 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 13:21:55,271 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 13:22:04,045 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 13:22:24,140 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 13:22:36,423 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 13:22:45,308 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 13:23:04,111 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 13:23:12,906 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 13:23:24,781 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 13:23:33,563 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 13:23:43,447 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 13:23:52,140 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 13:24:08,120 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 13:24:17,217 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 13:24:24,528 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 13:24:36,933 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 13:24:46,232 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 13:24:53,505 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 13:24:53,506 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 13:24:53,507 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 13:24:53,507 - WARNING - Stopping agent due to traffic control
2025-01-15 13:24:53,508 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 13:24:53,651 - INFO - ------------------------------
2025-01-15 13:24:53,651 - INFO - BEGIN Runtime Completion Fn
2025-01-15 13:24:53,651 - INFO - ------------------------------
2025-01-15 13:24:53,651 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/mwaskom__seaborn__0.12
2025-01-15 13:24:54,283 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:54,284 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 13:24:54,916 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:54,917 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 13:24:55,553 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:55,554 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 54cab15bdacfaa05a88fbc5502a5b322d99f148e
2025-01-15 13:24:56,189 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0e46fdc4babf",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/nominal_scale_tests.png b/nominal_scale_tests.png
new file mode 100644
index 00000000..27bde0bf
Binary files /dev/null and b/nominal_scale_tests.png differ
diff --git a/nominal_scales.png b/nominal_scales.png
new file mode 100644
index 00000000..0b559a0e
Binary files /dev/null and b/nominal_scales.png differ
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..f36bff87
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+import seaborn.objects as so
+import pandas as pd
+import matplotlib.pyplot as plt
+
+# Create sample data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'],
+    'value': [10, 20, 15, 25]
+})
+
+# Create two subplots to compare x and y nominal scales
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
+
+# Plot with nominal scale on x-axis
+(so.Plot(data, x='category', y='value')
+ .add(so.Bar())
+ .on(ax1)
+ .plot())
+ax1.set_title('Nominal scale on x-axis')
+
+# Plot with nominal scale on y-axis
+(so.Plot(data, x='value', y='category')
+ .add(so.Bar())
+ .on(ax2)
+ .plot())
+ax2.set_title('Nominal scale on y-axis')
+
+plt.tight_layout()
+plt.savefig('nominal_scales.png')
+plt.close()
\ No newline at end of file
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..3ef11f6d 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -173,24 +173,48 @@ class Nominal(Scale):
         # major_locator, minor_locator = new._get_locators(**new._tick_params)
         # major_formatter = new._get_formatter(major_locator, **new._label_params)

+        # Get locators and formatter
+        major_locator, minor_locator = new._get_locators(**new._tick_params)
+        major_formatter = new._get_formatter(major_locator, **new._label_params)
+
         class CatScale(mpl.scale.LinearScale):
             name = None  # To work around mpl<3.4 compat issues

             def set_default_locators_and_formatters(self, axis):
-                ...
-                # axis.set_major_locator(major_locator)
-                # if minor_locator is not None:
-                #     axis.set_minor_locator(minor_locator)
-                # axis.set_major_formatter(major_formatter)
+                axis.set_major_locator(major_locator)
+                if minor_locator is not None:
+                    axis.set_minor_locator(minor_locator)
+                axis.set_major_formatter(major_formatter)
+
+                # Only apply axis-specific settings for real axes
+                if hasattr(axis, 'axes'):
+                    # Disable grid for nominal scales
+                    axis.grid(False)
+
+                    # Add invisible artist with sticky edges to control margins
+                    if isinstance(axis, mpl.axis.XAxis):
+                        artist = axis.axes.axhline(y=0, visible=False)
+                        artist.sticky_edges.x.extend([0])
+                    else:
+                        artist = axis.axes.axvline(x=0, visible=False)
+                        artist.sticky_edges.y.extend([0])
+
+                    # Set margins to 0 to allow sticky edges to control padding
+                    if isinstance(axis, mpl.axis.XAxis):
+                        axis.axes.margins(x=0)
+                    else:
+                        axis.axes.margins(y=0)
+
+                    # Invert y-axis for nominal scales
+                    if isinstance(axis, mpl.axis.YAxis):
+                        axis.axes.invert_yaxis()

         mpl_scale = CatScale(data.name)
         if axis is None:
             axis = PseudoAxis(mpl_scale)

-            # TODO Currently just used in non-Coordinate contexts, but should
-            # we use this to (A) set the padding we want for categorial plots
-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim
-            axis.set_view_interval(0, len(units_seed) - 1)
+            # Set view interval with 0.5 unit padding on each side
+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)

         new._matplotlib_scale = mpl_scale

diff --git a/test_nominal_scale.py b/test_nominal_scale.py
new file mode 100644
index 00000000..af4fc239
--- /dev/null
+++ b/test_nominal_scale.py
@@ -0,0 +1,38 @@
+import seaborn.objects as so
+import pandas as pd
+import matplotlib.pyplot as plt
+
+# Create sample data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'],
+    'value': [10, 20, 15, 25]
+})
+
+# Create three subplots to test each requirement
+fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
+
+# 1. Test axis limits extend by 0.5 units
+(so.Plot(data, x='category', y='value')
+ .add(so.Bar())
+ .on(ax1)
+ .plot())
+ax1.set_title('1. Axis limits extend by 0.5 units')
+
+# 2. Test grid is disabled for nominal scales
+plt.style.use('seaborn-darkgrid')  # Enable grid by default
+(so.Plot(data, x='category', y='value')
+ .add(so.Bar())
+ .on(ax2)
+ .plot())
+ax2.set_title('2. Grid is disabled for nominal scales')
+
+# 3. Test y-axis inversion for nominal scales
+(so.Plot(data, x='value', y='category')
+ .add(so.Bar())
+ .on(ax3)
+ .plot())
+ax3.set_title('3. Y-axis is inverted for nominal scales')
+
+plt.tight_layout()
+plt.savefig('nominal_scale_tests.png')
+plt.close()
\ No newline at end of file
[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:56,189 - INFO - ------------------------------
2025-01-15 13:24:56,189 - INFO - END Runtime Completion Fn
2025-01-15 13:24:56,189 - INFO - ------------------------------
2025-01-15 13:24:56,189 - INFO - Got git diff for instance mwaskom__seaborn-3069:
--------
diff --git a/nominal_scale_tests.png b/nominal_scale_tests.png
new file mode 100644
index 00000000..27bde0bf
Binary files /dev/null and b/nominal_scale_tests.png differ
diff --git a/nominal_scales.png b/nominal_scales.png
new file mode 100644
index 00000000..0b559a0e
Binary files /dev/null and b/nominal_scales.png differ
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..f36bff87
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+import seaborn.objects as so
+import pandas as pd
+import matplotlib.pyplot as plt
+
+# Create sample data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'],
+    'value': [10, 20, 15, 25]
+})
+
+# Create two subplots to compare x and y nominal scales
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
+
+# Plot with nominal scale on x-axis
+(so.Plot(data, x='category', y='value')
+ .add(so.Bar())
+ .on(ax1)
+ .plot())
+ax1.set_title('Nominal scale on x-axis')
+
+# Plot with nominal scale on y-axis
+(so.Plot(data, x='value', y='category')
+ .add(so.Bar())
+ .on(ax2)
+ .plot())
+ax2.set_title('Nominal scale on y-axis')
+
+plt.tight_layout()
+plt.savefig('nominal_scales.png')
+plt.close()
\ No newline at end of file
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..3ef11f6d 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -173,24 +173,48 @@ class Nominal(Scale):
         # major_locator, minor_locator = new._get_locators(**new._tick_params)
         # major_formatter = new._get_formatter(major_locator, **new._label_params)

+        # Get locators and formatter
+        major_locator, minor_locator = new._get_locators(**new._tick_params)
+        major_formatter = new._get_formatter(major_locator, **new._label_params)
+
         class CatScale(mpl.scale.LinearScale):
             name = None  # To work around mpl<3.4 compat issues

             def set_default_locators_and_formatters(self, axis):
-                ...
-                # axis.set_major_locator(major_locator)
-                # if minor_locator is not None:
-                #     axis.set_minor_locator(minor_locator)
-                # axis.set_major_formatter(major_formatter)
+                axis.set_major_locator(major_locator)
+                if minor_locator is not None:
+                    axis.set_minor_locator(minor_locator)
+                axis.set_major_formatter(major_formatter)
+
+                # Only apply axis-specific settings for real axes
+                if hasattr(axis, 'axes'):
+                    # Disable grid for nominal scales
+                    axis.grid(False)
+
+                    # Add invisible artist with sticky edges to control margins
+                    if isinstance(axis, mpl.axis.XAxis):
+                        artist = axis.axes.axhline(y=0, visible=False)
+                        artist.sticky_edges.x.extend([0])
+                    else:
+                        artist = axis.axes.axvline(x=0, visible=False)
+                        artist.sticky_edges.y.extend([0])
+
+                    # Set margins to 0 to allow sticky edges to control padding
+                    if isinstance(axis, mpl.axis.XAxis):
+                        axis.axes.margins(x=0)
+                    else:
+                        axis.axes.margins(y=0)
+
+                    # Invert y-axis for nominal scales
+                    if isinstance(axis, mpl.axis.YAxis):
+                        axis.axes.invert_yaxis()

         mpl_scale = CatScale(data.name)
         if axis is None:
             axis = PseudoAxis(mpl_scale)

-            # TODO Currently just used in non-Coordinate contexts, but should
-            # we use this to (A) set the padding we want for categorial plots
-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim
-            axis.set_view_interval(0, len(units_seed) - 1)
+            # Set view interval with 0.5 unit padding on each side
+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)

         new._matplotlib_scale = mpl_scale

diff --git a/test_nominal_scale.py b/test_nominal_scale.py
new file mode 100644
index 00000000..af4fc239
--- /dev/null
+++ b/test_nominal_scale.py
@@ -0,0 +1,38 @@
+import seaborn.objects as so
+import pandas as pd
+import matplotlib.pyplot as plt
+
+# Create sample data
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'],
+    'value': [10, 20, 15, 25]
+})
+
+# Create three subplots to test each requirement
+fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
+
+# 1. Test axis limits extend by 0.5 units
+(so.Plot(data, x='category', y='value')
+ .add(so.Bar())
+ .on(ax1)
+ .plot())
+ax1.set_title('1. Axis limits extend by 0.5 units')
+
+# 2. Test grid is disabled for nominal scales
+plt.style.use('seaborn-darkgrid')  # Enable grid by default
+(so.Plot(data, x='category', y='value')
+ .add(so.Bar())
+ .on(ax2)
+ .plot())
+ax2.set_title('2. Grid is disabled for nominal scales')
+
+# 3. Test y-axis inversion for nominal scales
+(so.Plot(data, x='value', y='category')
+ .add(so.Bar())
+ .on(ax3)
+ .plot())
+ax3.set_title('3. Y-axis is inverted for nominal scales')
+
+plt.tight_layout()
+plt.savefig('nominal_scale_tests.png')
+plt.close()
\ No newline at end of file
--------
2025-01-15 13:24:58,144 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sphinx-doc_s_sphinx-10466. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 13:24:58,145 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-10466 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/claude-3-5-sonnet-20241022_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-10466
