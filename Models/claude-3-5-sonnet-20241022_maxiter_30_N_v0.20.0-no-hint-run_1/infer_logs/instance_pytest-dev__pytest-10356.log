2025-01-15 13:22:16,904 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rvvmnrk3h40jxodr_qroup3d3os79ipoo
2025-01-15 13:22:16,907 - INFO - [runtime f07d714b-32b0-4fc4-b011-8c243963e733-254813407b70f999] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rvvmnrk3h40jxodr_qroup3d3os79ipoo
2025-01-15 13:22:18,435 - INFO - [runtime f07d714b-32b0-4fc4-b011-8c243963e733-254813407b70f999] Container started: openhands-runtime-f07d714b-32b0-4fc4-b011-8c243963e733-254813407b70f999. VSCode URL: None
2025-01-15 13:22:18,436 - INFO - [runtime f07d714b-32b0-4fc4-b011-8c243963e733-254813407b70f999] Waiting for client to become ready at http://localhost:39934...
2025-01-15 13:22:48,546 - INFO - [runtime f07d714b-32b0-4fc4-b011-8c243963e733-254813407b70f999] Runtime is ready.
2025-01-15 13:22:49,192 - INFO - ------------------------------
2025-01-15 13:22:49,193 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 13:22:49,193 - INFO - ------------------------------
2025-01-15 13:22:49,193 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-10356' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 13:22:49,823 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:49,824 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 13:22:50,456 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:50,456 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 13:22:51,085 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:51,094 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 13:22:51,723 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=pytest-dev__pytest-10356
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:51,723 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 13:22:52,352 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:52,352 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 13:22:52,352 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 13:22:53,492 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__7.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:53,492 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__7.2
2025-01-15 13:22:54,121 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:54,122 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 13:22:54,758 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 3c1534944 Merge pull request #10318 from pytest-dev/pre-commit-ci-update-config
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:54,758 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 13:22:55,406 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:55,406 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 13:22:56,039 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:22:56,039 - INFO - ------------------------------
2025-01-15 13:22:56,039 - INFO - END Runtime Initialization Fn
2025-01-15 13:22:56,040 - INFO - ------------------------------
2025-01-15 13:22:56,079 - INFO - [runtime f07d714b-32b0-4fc4-b011-8c243963e733-254813407b70f999] Found 0 local microagents.
2025-01-15 13:22:56,081 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 13:22:56,083 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 13:23:02,910 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 13:23:08,846 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 13:23:20,087 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 13:23:26,847 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 13:23:34,099 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 13:23:44,167 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 13:23:56,166 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 13:24:03,443 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 13:24:14,623 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 13:24:20,816 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 13:24:31,562 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 13:24:38,513 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 13:24:51,583 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 13:25:04,905 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 13:25:13,087 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 13:25:25,541 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 13:25:39,197 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 13:25:46,740 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 13:25:55,430 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 13:26:02,730 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 13:26:10,526 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 13:26:17,739 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 13:26:26,316 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 13:26:33,617 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 13:26:54,596 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 13:27:08,060 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 13:27:18,779 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 13:27:26,219 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 13:27:35,491 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 13:27:43,128 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 13:27:43,128 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 13:27:43,129 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 13:27:43,129 - WARNING - Stopping agent due to traffic control
2025-01-15 13:27:43,130 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 13:27:43,373 - INFO - ------------------------------
2025-01-15 13:27:43,373 - INFO - BEGIN Runtime Completion Fn
2025-01-15 13:27:43,373 - INFO - ------------------------------
2025-01-15 13:27:43,374 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__7.2
2025-01-15 13:27:44,006 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:27:44,007 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 13:27:44,638 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:27:44,638 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 13:27:45,269 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:27:45,270 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 3c1534944cbd34e8a41bc9e76818018fadefc9a1
2025-01-15 13:27:45,903 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ba94b32602d1",
  "working_dir": "/workspace/pytest-dev__pytest__7.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/reproduce_marker_issue.py b/reproduce_marker_issue.py
new file mode 100644
index 000000000..86ffdc58c
--- /dev/null
+++ b/reproduce_marker_issue.py
@@ -0,0 +1,46 @@
+import pytest
+
+class BaseMeta(type):
+    @property
+    def pytestmark(cls):
+        marks = []
+        # Collect marks from all parent classes in MRO order
+        for base in cls.__mro__:
+            marks.extend(getattr(base, "_pytestmark", []))
+        return marks
+
+    @pytestmark.setter
+    def pytestmark(cls, value):
+        if not isinstance(value, list):
+            value = [value]
+        cls._pytestmark = value
+
+class Base(metaclass=BaseMeta):
+    pass
+
+@pytest.mark.foo
+class Foo(Base):
+    pass
+
+@pytest.mark.bar
+class Bar(Base):
+    pass
+
+class TestDings(Foo, Bar):
+    def test_dings(self):
+        pass
+
+if __name__ == "__main__":
+    # Run pytest programmatically to check markers
+    import pytest
+    import _pytest.mark
+    import _pytest.nodes
+
+    # Create a pytest session to properly handle markers
+    test_class = TestDings
+    pytest.main(["-v", __file__])
+
+    # Also check direct marker access
+    marks = _pytest.mark.structures.get_unpacked_marks(test_class)
+    print("\nDirect marker access:")
+    print("Markers on TestDings:", [mark.name for mark in marks])
\ No newline at end of file
diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..ec5c5bea8 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -356,10 +356,22 @@ class MarkDecorator:


 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
-    """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    """Obtain the unpacked marks that are stored on an object.
+
+    For classes, this includes marks from all parent classes following MRO order."""
+    mark_list = []
+    if inspect.isclass(obj):
+        # For classes, collect marks from all parent classes following MRO
+        marks = getattr(obj, "pytestmark", [])
+        if not isinstance(marks, list):
+            marks = [marks]
+        mark_list.extend(marks)
+    else:
+        # For non-class objects, get marks directly
+        marks = getattr(obj, "pytestmark", [])
+        if not isinstance(marks, list):
+            marks = [marks]
+        mark_list.extend(marks)
     return normalize_mark_list(mark_list)


@@ -388,7 +400,10 @@ def store_mark(obj, mark: Mark) -> None:
     assert isinstance(mark, Mark), mark
     # Always reassign name to avoid updating pytestmark in a reference that
     # was only borrowed.
-    obj.pytestmark = [*get_unpacked_marks(obj), mark]
+    existing_marks = getattr(obj, "_pytestmark", [])
+    if not isinstance(existing_marks, list):
+        existing_marks = [existing_marks]
+    obj._pytestmark = [*existing_marks, mark]


 # Typing for builtin pytest marks. This is cheating; it gives builtin marks
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 3db877506..7235c0b34 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -384,6 +384,23 @@ del _EmptyClass
 # fmt: on


+class TestClassMeta(type):
+    """Metaclass for test classes to properly handle marker inheritance."""
+    @property
+    def pytestmark(cls):
+        marks = []
+        # Collect marks from all parent classes in MRO order
+        for base in cls.__mro__:
+            marks.extend(getattr(base, "_pytestmark", []))
+        return marks
+
+    @pytestmark.setter
+    def pytestmark(cls, value):
+        if not isinstance(value, list):
+            value = [value]
+        cls._pytestmark = value
+
+
 class PyCollector(PyobjMixin, nodes.Collector):
     def funcnamefilter(self, name: str) -> bool:
         return self._matches_prefix_or_glob_option("python_functions", name)
@@ -410,7 +427,11 @@ class PyCollector(PyobjMixin, nodes.Collector):
             return False

     def istestclass(self, obj: object, name: str) -> bool:
-        return self.classnamefilter(name) or self.isnosetest(obj)
+        is_test_class = self.classnamefilter(name) or self.isnosetest(obj)
+        if is_test_class and safe_isclass(obj):
+            # Apply metaclass to handle marker inheritance
+            obj.__class__ = TestClassMeta(obj.__name__, obj.__bases__, dict(obj.__dict__))
+        return is_test_class

     def _matches_prefix_or_glob_option(self, option_name: str, name: str) -> bool:
         """Check if the given name matches the prefix or glob-pattern defined
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__7.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:27:45,903 - INFO - ------------------------------
2025-01-15 13:27:45,903 - INFO - END Runtime Completion Fn
2025-01-15 13:27:45,903 - INFO - ------------------------------
2025-01-15 13:27:45,904 - INFO - Got git diff for instance pytest-dev__pytest-10356:
--------
diff --git a/reproduce_marker_issue.py b/reproduce_marker_issue.py
new file mode 100644
index 000000000..86ffdc58c
--- /dev/null
+++ b/reproduce_marker_issue.py
@@ -0,0 +1,46 @@
+import pytest
+
+class BaseMeta(type):
+    @property
+    def pytestmark(cls):
+        marks = []
+        # Collect marks from all parent classes in MRO order
+        for base in cls.__mro__:
+            marks.extend(getattr(base, "_pytestmark", []))
+        return marks
+
+    @pytestmark.setter
+    def pytestmark(cls, value):
+        if not isinstance(value, list):
+            value = [value]
+        cls._pytestmark = value
+
+class Base(metaclass=BaseMeta):
+    pass
+
+@pytest.mark.foo
+class Foo(Base):
+    pass
+
+@pytest.mark.bar
+class Bar(Base):
+    pass
+
+class TestDings(Foo, Bar):
+    def test_dings(self):
+        pass
+
+if __name__ == "__main__":
+    # Run pytest programmatically to check markers
+    import pytest
+    import _pytest.mark
+    import _pytest.nodes
+
+    # Create a pytest session to properly handle markers
+    test_class = TestDings
+    pytest.main(["-v", __file__])
+
+    # Also check direct marker access
+    marks = _pytest.mark.structures.get_unpacked_marks(test_class)
+    print("\nDirect marker access:")
+    print("Markers on TestDings:", [mark.name for mark in marks])
\ No newline at end of file
diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..ec5c5bea8 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -356,10 +356,22 @@ class MarkDecorator:


 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
-    """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    """Obtain the unpacked marks that are stored on an object.
+
+    For classes, this includes marks from all parent classes following MRO order."""
+    mark_list = []
+    if inspect.isclass(obj):
+        # For classes, collect marks from all parent classes following MRO
+        marks = getattr(obj, "pytestmark", [])
+        if not isinstance(marks, list):
+            marks = [marks]
+        mark_list.extend(marks)
+    else:
+        # For non-class objects, get marks directly
+        marks = getattr(obj, "pytestmark", [])
+        if not isinstance(marks, list):
+            marks = [marks]
+        mark_list.extend(marks)
     return normalize_mark_list(mark_list)


@@ -388,7 +400,10 @@ def store_mark(obj, mark: Mark) -> None:
     assert isinstance(mark, Mark), mark
     # Always reassign name to avoid updating pytestmark in a reference that
     # was only borrowed.
-    obj.pytestmark = [*get_unpacked_marks(obj), mark]
+    existing_marks = getattr(obj, "_pytestmark", [])
+    if not isinstance(existing_marks, list):
+        existing_marks = [existing_marks]
+    obj._pytestmark = [*existing_marks, mark]


 # Typing for builtin pytest marks. This is cheating; it gives builtin marks
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 3db877506..7235c0b34 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -384,6 +384,23 @@ del _EmptyClass
 # fmt: on


+class TestClassMeta(type):
+    """Metaclass for test classes to properly handle marker inheritance."""
+    @property
+    def pytestmark(cls):
+        marks = []
+        # Collect marks from all parent classes in MRO order
+        for base in cls.__mro__:
+            marks.extend(getattr(base, "_pytestmark", []))
+        return marks
+
+    @pytestmark.setter
+    def pytestmark(cls, value):
+        if not isinstance(value, list):
+            value = [value]
+        cls._pytestmark = value
+
+
 class PyCollector(PyobjMixin, nodes.Collector):
     def funcnamefilter(self, name: str) -> bool:
         return self._matches_prefix_or_glob_option("python_functions", name)
@@ -410,7 +427,11 @@ class PyCollector(PyobjMixin, nodes.Collector):
             return False

     def istestclass(self, obj: object, name: str) -> bool:
-        return self.classnamefilter(name) or self.isnosetest(obj)
+        is_test_class = self.classnamefilter(name) or self.isnosetest(obj)
+        if is_test_class and safe_isclass(obj):
+            # Apply metaclass to handle marker inheritance
+            obj.__class__ = TestClassMeta(obj.__name__, obj.__bases__, dict(obj.__dict__))
+        return is_test_class

     def _matches_prefix_or_glob_option(self, option_name: str, name: str) -> bool:
         """Check if the given name matches the prefix or glob-pattern defined
--------
2025-01-15 13:27:46,885 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sphinx-doc_s_sphinx-8638. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 13:27:46,886 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-8638 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/claude-3-5-sonnet-20241022_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-8638
