2025-01-15 13:19:26,829 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_pzqugdew2ial40c9_qroup3d3os79ipoo
2025-01-15 13:19:26,833 - INFO - [runtime 860c6e53-c570-496e-b7b6-8c6d307dc9c6-94dd0e4e6a173507] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_pzqugdew2ial40c9_qroup3d3os79ipoo
2025-01-15 13:19:29,135 - INFO - [runtime 860c6e53-c570-496e-b7b6-8c6d307dc9c6-94dd0e4e6a173507] Container started: openhands-runtime-860c6e53-c570-496e-b7b6-8c6d307dc9c6-94dd0e4e6a173507. VSCode URL: None
2025-01-15 13:19:29,136 - INFO - [runtime 860c6e53-c570-496e-b7b6-8c6d307dc9c6-94dd0e4e6a173507] Waiting for client to become ready at http://localhost:32195...
2025-01-15 13:19:59,245 - INFO - [runtime 860c6e53-c570-496e-b7b6-8c6d307dc9c6-94dd0e4e6a173507] Runtime is ready.
2025-01-15 13:19:59,890 - INFO - ------------------------------
2025-01-15 13:19:59,891 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 13:19:59,891 - INFO - ------------------------------
2025-01-15 13:19:59,891 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=psf__requests-5414' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 13:20:00,524 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:00,524 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 13:20:01,159 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:01,160 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 13:20:01,789 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:01,800 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 13:20:02,430 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=psf__requests-5414
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:02,430 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 13:20:03,068 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:03,068 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 13:20:03,068 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 13:20:03,709 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: psf__requests__2.26
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:03,709 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/psf__requests__2.26
2025-01-15 13:20:04,343 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:04,343 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 13:20:04,972 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 39d0fdd9 Update README.md (#5998)
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:04,972 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 13:20:05,603 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:05,604 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 13:20:06,232 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:20:06,233 - INFO - ------------------------------
2025-01-15 13:20:06,233 - INFO - END Runtime Initialization Fn
2025-01-15 13:20:06,233 - INFO - ------------------------------
2025-01-15 13:20:06,297 - INFO - [runtime 860c6e53-c570-496e-b7b6-8c6d307dc9c6-94dd0e4e6a173507] Found 0 local microagents.
2025-01-15 13:20:06,299 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 13:20:06,300 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 13:20:12,659 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 13:20:18,894 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 13:20:25,355 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 13:20:31,960 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 13:20:38,905 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 13:20:48,256 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 13:20:56,275 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 13:21:06,185 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 13:21:12,673 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 13:21:20,401 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 13:21:30,861 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 13:21:37,758 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 13:21:49,126 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 13:21:57,024 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 13:22:05,463 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 13:22:12,543 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 13:22:20,564 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 13:22:27,465 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 13:22:35,343 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 13:22:43,627 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 13:22:51,110 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 13:23:01,596 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 13:23:09,140 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 13:23:19,506 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 13:23:26,790 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 13:23:34,841 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 13:23:48,360 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 13:23:56,401 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 13:24:06,175 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 13:24:15,167 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 13:24:15,168 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 13:24:15,169 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 13:24:15,170 - WARNING - Stopping agent due to traffic control
2025-01-15 13:24:15,170 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 13:24:15,536 - INFO - ------------------------------
2025-01-15 13:24:15,536 - INFO - BEGIN Runtime Completion Fn
2025-01-15 13:24:15,536 - INFO - ------------------------------
2025-01-15 13:24:15,536 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/psf__requests__2.26
2025-01-15 13:24:16,168 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:16,168 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 13:24:16,797 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:16,798 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 13:24:17,426 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:17,426 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 39d0fdd9096f7dceccbc8f82e1eda7dd64717a8e
2025-01-15 13:24:18,058 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "18695bb9d2f2",
  "working_dir": "/workspace/psf__requests__2.26",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..22c92cc1 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -27,7 +27,7 @@ from urllib3.exceptions import ProtocolError
 from urllib3.exceptions import ReadTimeoutError
 from urllib3.exceptions import SSLError as _SSLError
 from urllib3.exceptions import ResponseError
-from urllib3.exceptions import LocationValueError
+from urllib3.exceptions import LocationValueError, LocationParseError

 from .models import Response
 from .compat import urlparse, basestring
@@ -313,7 +313,12 @@ class HTTPAdapter(BaseAdapter):
             # Only scheme should be lower case
             parsed = urlparse(url)
             url = parsed.geturl()
-            conn = self.poolmanager.connection_from_url(url)
+            try:
+                conn = self.poolmanager.connection_from_url(url)
+            except LocationParseError as e:
+                if 'label empty or too long' in str(e):
+                    raise InvalidURL('URL has an invalid label.')
+                raise InvalidURL(*e.args)

         return conn

@@ -411,7 +416,9 @@ class HTTPAdapter(BaseAdapter):

         try:
             conn = self.get_connection(request.url, proxies)
-        except LocationValueError as e:
+        except (LocationValueError, LocationParseError) as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.', request=request)
             raise InvalidURL(e, request=request)

         self.cert_verify(conn, request.url, verify, cert)
@@ -437,18 +444,23 @@ class HTTPAdapter(BaseAdapter):

         try:
             if not chunked:
-                resp = conn.urlopen(
-                    method=request.method,
-                    url=url,
-                    body=request.body,
-                    headers=request.headers,
-                    redirect=False,
-                    assert_same_host=False,
-                    preload_content=False,
-                    decode_content=False,
-                    retries=self.max_retries,
-                    timeout=timeout
-                )
+                try:
+                    resp = conn.urlopen(
+                        method=request.method,
+                        url=url,
+                        body=request.body,
+                        headers=request.headers,
+                        redirect=False,
+                        assert_same_host=False,
+                        preload_content=False,
+                        decode_content=False,
+                        retries=self.max_retries,
+                        timeout=timeout
+                    )
+                except LocationParseError as e:
+                    if 'label empty or too long' in str(e):
+                        raise InvalidURL('URL has an invalid label.', request=request)
+                    raise InvalidURL(e, request=request)

             # Send the request.
             else:
diff --git a/requests/models.py b/requests/models.py
index e7d292d5..930407ba 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -19,7 +19,7 @@ from urllib3.fields import RequestField
 from urllib3.filepost import encode_multipart_formdata
 from urllib3.util import parse_url
 from urllib3.exceptions import (
-    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)
+    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError, LocationValueError)

 from io import UnsupportedOperation
 from .hooks import default_hooks
@@ -354,7 +354,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         try:
             host = idna.encode(host, uts46=True).decode('utf-8')
         except idna.IDNAError:
-            raise UnicodeError
+            raise InvalidURL('URL has an invalid label.')
         return host

     def prepare_url(self, url, params):
@@ -379,10 +379,18 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
             self.url = url
             return

+        # Pre-validate URLs with invalid labels before parsing
+        if url.lower().startswith('http://') or url.lower().startswith('https://'):
+            host = url.split('//', 1)[1].split('/', 1)[0].split('?', 1)[0].split('#', 1)[0]
+            if '.' not in host or host.startswith('.') or host.endswith('.') or '..' in host:
+                raise InvalidURL('URL has an invalid label.')
+
         # Support for unicode domain names and paths.
         try:
             scheme, auth, host, port, path, query, fragment = parse_url(url)
-        except LocationParseError as e:
+        except (LocationParseError, LocationValueError) as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.')
             raise InvalidURL(*e.args)

         if not scheme:
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.26]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:24:18,058 - INFO - ------------------------------
2025-01-15 13:24:18,058 - INFO - END Runtime Completion Fn
2025-01-15 13:24:18,058 - INFO - ------------------------------
2025-01-15 13:24:18,059 - INFO - Got git diff for instance psf__requests-5414:
--------
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..22c92cc1 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -27,7 +27,7 @@ from urllib3.exceptions import ProtocolError
 from urllib3.exceptions import ReadTimeoutError
 from urllib3.exceptions import SSLError as _SSLError
 from urllib3.exceptions import ResponseError
-from urllib3.exceptions import LocationValueError
+from urllib3.exceptions import LocationValueError, LocationParseError

 from .models import Response
 from .compat import urlparse, basestring
@@ -313,7 +313,12 @@ class HTTPAdapter(BaseAdapter):
             # Only scheme should be lower case
             parsed = urlparse(url)
             url = parsed.geturl()
-            conn = self.poolmanager.connection_from_url(url)
+            try:
+                conn = self.poolmanager.connection_from_url(url)
+            except LocationParseError as e:
+                if 'label empty or too long' in str(e):
+                    raise InvalidURL('URL has an invalid label.')
+                raise InvalidURL(*e.args)

         return conn

@@ -411,7 +416,9 @@ class HTTPAdapter(BaseAdapter):

         try:
             conn = self.get_connection(request.url, proxies)
-        except LocationValueError as e:
+        except (LocationValueError, LocationParseError) as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.', request=request)
             raise InvalidURL(e, request=request)

         self.cert_verify(conn, request.url, verify, cert)
@@ -437,18 +444,23 @@ class HTTPAdapter(BaseAdapter):

         try:
             if not chunked:
-                resp = conn.urlopen(
-                    method=request.method,
-                    url=url,
-                    body=request.body,
-                    headers=request.headers,
-                    redirect=False,
-                    assert_same_host=False,
-                    preload_content=False,
-                    decode_content=False,
-                    retries=self.max_retries,
-                    timeout=timeout
-                )
+                try:
+                    resp = conn.urlopen(
+                        method=request.method,
+                        url=url,
+                        body=request.body,
+                        headers=request.headers,
+                        redirect=False,
+                        assert_same_host=False,
+                        preload_content=False,
+                        decode_content=False,
+                        retries=self.max_retries,
+                        timeout=timeout
+                    )
+                except LocationParseError as e:
+                    if 'label empty or too long' in str(e):
+                        raise InvalidURL('URL has an invalid label.', request=request)
+                    raise InvalidURL(e, request=request)

             # Send the request.
             else:
diff --git a/requests/models.py b/requests/models.py
index e7d292d5..930407ba 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -19,7 +19,7 @@ from urllib3.fields import RequestField
 from urllib3.filepost import encode_multipart_formdata
 from urllib3.util import parse_url
 from urllib3.exceptions import (
-    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)
+    DecodeError, ReadTimeoutError, ProtocolError, LocationParseError, LocationValueError)

 from io import UnsupportedOperation
 from .hooks import default_hooks
@@ -354,7 +354,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         try:
             host = idna.encode(host, uts46=True).decode('utf-8')
         except idna.IDNAError:
-            raise UnicodeError
+            raise InvalidURL('URL has an invalid label.')
         return host

     def prepare_url(self, url, params):
@@ -379,10 +379,18 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
             self.url = url
             return

+        # Pre-validate URLs with invalid labels before parsing
+        if url.lower().startswith('http://') or url.lower().startswith('https://'):
+            host = url.split('//', 1)[1].split('/', 1)[0].split('?', 1)[0].split('#', 1)[0]
+            if '.' not in host or host.startswith('.') or host.endswith('.') or '..' in host:
+                raise InvalidURL('URL has an invalid label.')
+
         # Support for unicode domain names and paths.
         try:
             scheme, auth, host, port, path, query, fragment = parse_url(url)
-        except LocationParseError as e:
+        except (LocationParseError, LocationValueError) as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.')
             raise InvalidURL(*e.args)

         if not scheme:
--------
2025-01-15 13:24:18,919 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.scikit-learn_s_scikit-learn-13142. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 13:24:18,920 - INFO - Logging LLM completions for instance scikit-learn__scikit-learn-13142 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/claude-3-5-sonnet-20241022_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/scikit-learn__scikit-learn-13142
