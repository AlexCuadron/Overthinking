2025-01-15 13:27:44,678 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bgejqco5q8xe099p_qroup3d3os79ipoo
2025-01-15 13:27:44,683 - INFO - [runtime 41435a7b-e800-4c64-9d87-449df16eddc6-6be7b5ce1640568e] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bgejqco5q8xe099p_qroup3d3os79ipoo
2025-01-15 13:27:46,163 - INFO - [runtime 41435a7b-e800-4c64-9d87-449df16eddc6-6be7b5ce1640568e] Container started: openhands-runtime-41435a7b-e800-4c64-9d87-449df16eddc6-6be7b5ce1640568e. VSCode URL: None
2025-01-15 13:27:46,163 - INFO - [runtime 41435a7b-e800-4c64-9d87-449df16eddc6-6be7b5ce1640568e] Waiting for client to become ready at http://localhost:38069...
2025-01-15 13:28:18,271 - INFO - [runtime 41435a7b-e800-4c64-9d87-449df16eddc6-6be7b5ce1640568e] Runtime is ready.
2025-01-15 13:28:18,918 - INFO - ------------------------------
2025-01-15 13:28:18,919 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 13:28:18,919 - INFO - ------------------------------
2025-01-15 13:28:18,919 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sphinx-doc__sphinx-8551' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 13:28:19,553 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:19,553 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 13:28:20,187 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:20,187 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 13:28:20,824 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:20,834 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 13:28:21,463 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sphinx-doc__sphinx-8551
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:21,464 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 13:28:22,093 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:22,093 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 13:28:22,093 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 13:28:23,733 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sphinx-doc__sphinx__3.4
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:23,733 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__3.4
2025-01-15 13:28:24,361 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:24,362 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 13:28:24,993 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 57ed10c68 Merge pull request #8548 from tk0miya/741_inherited_ivar
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:24,993 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 13:28:25,626 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:25,627 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 13:28:26,259 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:28:26,259 - INFO - ------------------------------
2025-01-15 13:28:26,259 - INFO - END Runtime Initialization Fn
2025-01-15 13:28:26,259 - INFO - ------------------------------
2025-01-15 13:28:26,307 - INFO - [runtime 41435a7b-e800-4c64-9d87-449df16eddc6-6be7b5ce1640568e] Found 0 local microagents.
2025-01-15 13:28:26,309 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 13:28:26,311 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 13:28:32,297 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 13:28:39,825 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 13:28:48,432 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 13:28:55,420 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 13:29:02,301 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 13:29:10,037 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 13:29:19,022 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 13:29:26,457 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 13:29:37,720 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 13:29:52,145 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 13:29:59,339 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 13:30:09,054 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 13:30:16,070 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 13:30:25,087 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 13:30:34,421 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 13:30:42,254 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 13:30:50,996 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 13:30:59,404 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 13:31:14,607 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 13:31:23,389 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 13:31:37,952 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 13:31:46,827 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 13:31:57,542 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 13:32:05,161 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 13:32:20,460 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 13:32:27,561 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 13:32:39,098 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 13:32:47,295 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 13:33:05,058 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 13:33:12,842 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 13:33:12,842 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 13:33:12,843 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 13:33:12,843 - WARNING - Stopping agent due to traffic control
2025-01-15 13:33:12,844 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 13:33:13,613 - INFO - ------------------------------
2025-01-15 13:33:13,613 - INFO - BEGIN Runtime Completion Fn
2025-01-15 13:33:13,613 - INFO - ------------------------------
2025-01-15 13:33:13,613 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__3.4
2025-01-15 13:33:14,244 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:33:14,245 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 13:33:14,876 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:33:14,877 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 13:33:15,507 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:33:15,508 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 57ed10c68057c96491acbd3e62254ccfaf9e3861
2025-01-15 13:33:16,140 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec6ab12ce74b",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..abee69452 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -86,13 +86,29 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr
         reftype = 'class'

     if env:
-        kwargs = {'py:module': env.ref_context.get('py:module'),
-                  'py:class': env.ref_context.get('py:class')}
+        modname = env.ref_context.get('py:module')
+        classname = env.ref_context.get('py:class')
+
+        # If we have an unqualified name and we're in a module context,
+        # try to qualify it with the current module
+        if modname and '.' not in text:
+            # Check if the name exists in the current module
+            domain = env.get_domain('py')
+            if isinstance(domain, PythonDomain):  # type: ignore
+                matches = domain.find_obj(env, modname, classname, text, reftype, 1)
+                if matches:
+                    # Use the first match from the current module
+                    for name, obj in matches:
+                        if name.startswith(modname + '.'):
+                            text = name
+                            break
+
+        kwargs = {'py:module': modname, 'py:class': classname}
     else:
         kwargs = {}

     return pending_xref('', nodes.Text(text),
-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)
+                        refdomain='py', reftype=reftype, reftarget=text, refspecific=True, **kwargs)


 def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:
@@ -1264,13 +1280,49 @@ class PythonDomain(Domain):
                        self.objects[modname + '.' + name].objtype in objtypes:
                         newname = modname + '.' + name
                     elif name in self.objects and self.objects[name].objtype in objtypes:
-                        newname = name
+                        # If we're in a module context and the name exists in that module,
+                        # prefer that over a global name
+                        if modname:
+                            modname_dot = modname + '.'
+                            for oname in self.objects:
+                                if (oname.endswith('.' + name) and
+                                    oname.startswith(modname_dot) and
+                                    self.objects[oname].objtype in objtypes):
+                                    newname = oname
+                                    break
+                            else:
+                                newname = name
+                        else:
+                            newname = name
                     else:
-                        # "fuzzy" searching mode
+                        # "fuzzy" searching mode - prioritize current module
                         searchname = '.' + name
-                        matches = [(oname, self.objects[oname]) for oname in self.objects
-                                   if oname.endswith(searchname) and
-                                   self.objects[oname].objtype in objtypes]
+                        matches = []
+
+                        # First try in current module and class
+                        if modname:
+                            # For unqualified names in a module context, only look in that module
+                            if '.' not in name:
+                                matches = [
+                                    (oname, self.objects[oname]) for oname in self.objects
+                                    if oname.endswith(searchname) and
+                                    oname.startswith(modname + '.') and
+                                    self.objects[oname].objtype in objtypes
+                                ]
+                            else:
+                                # For qualified names, search everywhere
+                                matches = [
+                                    (oname, self.objects[oname]) for oname in self.objects
+                                    if oname.endswith(searchname) and
+                                    self.objects[oname].objtype in objtypes
+                                ]
+                        else:
+                            # If no current module, search everywhere
+                            matches = [
+                                (oname, self.objects[oname]) for oname in self.objects
+                                if oname.endswith(searchname) and
+                                self.objects[oname].objtype in objtypes
+                            ]
         else:
             # NOTE: searching for exact match, object type is not considered
             if name in self.objects:
diff --git a/test_type_refs.py b/test_type_refs.py
new file mode 100644
index 000000000..d6a0b9847
--- /dev/null
+++ b/test_type_refs.py
@@ -0,0 +1,88 @@
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a temporary directory for the test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create source directory
+    srcdir = Path(tmpdir) / 'src'
+    srcdir.mkdir()
+
+    # Create conf.py
+    with open(srcdir / 'conf.py', 'w') as f:
+        f.write("""
+project = 'Test'
+copyright = '2023'
+author = 'Test'
+extensions = ['sphinx.ext.autodoc']
+""")
+
+    # Create index.rst with the test case
+    with open(srcdir / 'index.rst', 'w') as f:
+        f.write("""
+Test Document
+============
+
+.. py:class:: mod.A
+
+.. py:class:: mod.submod.A
+
+.. py:function:: f()
+
+   - :py:class:`mod.A`
+   - :py:class:`mod.submod.A`
+
+   :param mod.A a:
+   :param mod.submod.A b:
+   :rtype: mod.A
+   :rtype: mod.submod.A
+
+.. py:currentmodule:: mod
+
+.. py:function:: f()
+
+   - :py:class:`A`
+   - :py:class:`mod.A`
+   - :py:class:`mod.submod.A`
+
+   :param A a:
+   :param mod.A b:
+   :param mod.submod.A c:
+   :rtype: A
+   :rtype: mod.A
+   :rtype: mod.submod.A
+
+.. py:currentmodule:: mod.submod
+
+.. py:function:: f()
+
+   - :py:class:`A`
+   - :py:class:`mod.A`
+   - :py:class:`mod.submod.A`
+
+   :param A a:
+   :param mod.A b:
+   :param mod.submod.A c:
+   :rtype: A
+   :rtype: mod.A
+   :rtype: mod.submod.A
+""")
+
+    # Create build directory
+    builddir = Path(tmpdir) / 'build'
+    builddir.mkdir()
+
+    # Run Sphinx
+    with docutils_namespace():
+        app = Sphinx(
+            srcdir=str(srcdir),
+            confdir=str(srcdir),
+            outdir=str(builddir),
+            doctreedir=str(builddir / 'doctrees'),
+            buildername='html'
+        )
+        app.build()
\ No newline at end of file
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 13:33:16,140 - INFO - ------------------------------
2025-01-15 13:33:16,140 - INFO - END Runtime Completion Fn
2025-01-15 13:33:16,141 - INFO - ------------------------------
2025-01-15 13:33:16,141 - INFO - Got git diff for instance sphinx-doc__sphinx-8551:
--------
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..abee69452 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -86,13 +86,29 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr
         reftype = 'class'

     if env:
-        kwargs = {'py:module': env.ref_context.get('py:module'),
-                  'py:class': env.ref_context.get('py:class')}
+        modname = env.ref_context.get('py:module')
+        classname = env.ref_context.get('py:class')
+
+        # If we have an unqualified name and we're in a module context,
+        # try to qualify it with the current module
+        if modname and '.' not in text:
+            # Check if the name exists in the current module
+            domain = env.get_domain('py')
+            if isinstance(domain, PythonDomain):  # type: ignore
+                matches = domain.find_obj(env, modname, classname, text, reftype, 1)
+                if matches:
+                    # Use the first match from the current module
+                    for name, obj in matches:
+                        if name.startswith(modname + '.'):
+                            text = name
+                            break
+
+        kwargs = {'py:module': modname, 'py:class': classname}
     else:
         kwargs = {}

     return pending_xref('', nodes.Text(text),
-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)
+                        refdomain='py', reftype=reftype, reftarget=text, refspecific=True, **kwargs)


 def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:
@@ -1264,13 +1280,49 @@ class PythonDomain(Domain):
                        self.objects[modname + '.' + name].objtype in objtypes:
                         newname = modname + '.' + name
                     elif name in self.objects and self.objects[name].objtype in objtypes:
-                        newname = name
+                        # If we're in a module context and the name exists in that module,
+                        # prefer that over a global name
+                        if modname:
+                            modname_dot = modname + '.'
+                            for oname in self.objects:
+                                if (oname.endswith('.' + name) and
+                                    oname.startswith(modname_dot) and
+                                    self.objects[oname].objtype in objtypes):
+                                    newname = oname
+                                    break
+                            else:
+                                newname = name
+                        else:
+                            newname = name
                     else:
-                        # "fuzzy" searching mode
+                        # "fuzzy" searching mode - prioritize current module
                         searchname = '.' + name
-                        matches = [(oname, self.objects[oname]) for oname in self.objects
-                                   if oname.endswith(searchname) and
-                                   self.objects[oname].objtype in objtypes]
+                        matches = []
+
+                        # First try in current module and class
+                        if modname:
+                            # For unqualified names in a module context, only look in that module
+                            if '.' not in name:
+                                matches = [
+                                    (oname, self.objects[oname]) for oname in self.objects
+                                    if oname.endswith(searchname) and
+                                    oname.startswith(modname + '.') and
+                                    self.objects[oname].objtype in objtypes
+                                ]
+                            else:
+                                # For qualified names, search everywhere
+                                matches = [
+                                    (oname, self.objects[oname]) for oname in self.objects
+                                    if oname.endswith(searchname) and
+                                    self.objects[oname].objtype in objtypes
+                                ]
+                        else:
+                            # If no current module, search everywhere
+                            matches = [
+                                (oname, self.objects[oname]) for oname in self.objects
+                                if oname.endswith(searchname) and
+                                self.objects[oname].objtype in objtypes
+                            ]
         else:
             # NOTE: searching for exact match, object type is not considered
             if name in self.objects:
diff --git a/test_type_refs.py b/test_type_refs.py
new file mode 100644
index 000000000..d6a0b9847
--- /dev/null
+++ b/test_type_refs.py
@@ -0,0 +1,88 @@
+import os
+import sys
+import tempfile
+from pathlib import Path
+
+from sphinx.application import Sphinx
+from sphinx.util.docutils import docutils_namespace
+
+# Create a temporary directory for the test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create source directory
+    srcdir = Path(tmpdir) / 'src'
+    srcdir.mkdir()
+
+    # Create conf.py
+    with open(srcdir / 'conf.py', 'w') as f:
+        f.write("""
+project = 'Test'
+copyright = '2023'
+author = 'Test'
+extensions = ['sphinx.ext.autodoc']
+""")
+
+    # Create index.rst with the test case
+    with open(srcdir / 'index.rst', 'w') as f:
+        f.write("""
+Test Document
+============
+
+.. py:class:: mod.A
+
+.. py:class:: mod.submod.A
+
+.. py:function:: f()
+
+   - :py:class:`mod.A`
+   - :py:class:`mod.submod.A`
+
+   :param mod.A a:
+   :param mod.submod.A b:
+   :rtype: mod.A
+   :rtype: mod.submod.A
+
+.. py:currentmodule:: mod
+
+.. py:function:: f()
+
+   - :py:class:`A`
+   - :py:class:`mod.A`
+   - :py:class:`mod.submod.A`
+
+   :param A a:
+   :param mod.A b:
+   :param mod.submod.A c:
+   :rtype: A
+   :rtype: mod.A
+   :rtype: mod.submod.A
+
+.. py:currentmodule:: mod.submod
+
+.. py:function:: f()
+
+   - :py:class:`A`
+   - :py:class:`mod.A`
+   - :py:class:`mod.submod.A`
+
+   :param A a:
+   :param mod.A b:
+   :param mod.submod.A c:
+   :rtype: A
+   :rtype: mod.A
+   :rtype: mod.submod.A
+""")
+
+    # Create build directory
+    builddir = Path(tmpdir) / 'build'
+    builddir.mkdir()
+
+    # Run Sphinx
+    with docutils_namespace():
+        app = Sphinx(
+            srcdir=str(srcdir),
+            confdir=str(srcdir),
+            outdir=str(builddir),
+            doctreedir=str(builddir / 'doctrees'),
+            buildername='html'
+        )
+        app.build()
\ No newline at end of file
--------
2025-01-15 13:33:17,694 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sympy_s_sympy-17655. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 13:33:17,694 - INFO - Logging LLM completions for instance sympy__sympy-17655 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/claude-3-5-sonnet-20241022_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sympy__sympy-17655
