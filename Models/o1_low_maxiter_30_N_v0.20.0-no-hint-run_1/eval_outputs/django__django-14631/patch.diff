diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..6d89ee6b29 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -219,6 +219,25 @@ class BoundField:
             data = data.replace(microsecond=0)
         return data

+def did_change(self):
+    if not self.field.show_hidden_initial:
+        initial_value = self.initial
+        data_value = self.data
+    else:
+        # If show_hidden_initial is True, we mimic what changed_data does,
+        # pulling the initial from the hidden input.
+        initial_prefixed_name = self.form.add_initial_prefix(self.name)
+        hidden_widget = self.field.hidden_widget()
+        try:
+            initial_value = self.field.to_python(
+                hidden_widget.value_from_datadict(
+                    self.form.data, self.form.files, initial_prefixed_name
+                )
+            )
+        except:
+            initial_value = self.initial
+        data_value = self.data
+    return data_value != initial_value
     def build_widget_attrs(self, attrs, widget=None):
         widget = widget or self.field.widget
         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..61c7ff0ef3 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -388,10 +388,11 @@ class BaseForm:

     def _clean_fields(self):
         for name, field in self.fields.items():
+            bf = self[name]
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
                     initial = self.get_initial_for_field(field, name)
@@ -436,8 +437,7 @@ class BaseForm:

     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
+        return [name for name in self.fields if self[name].did_change()]
             data_value = self._field_data_value(field, self.add_prefix(name))
             if not field.show_hidden_initial:
                 # Use the BoundField's initial as this is the value passed to
