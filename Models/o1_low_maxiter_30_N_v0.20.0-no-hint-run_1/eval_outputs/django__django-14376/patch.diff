diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 2c62182d31..8b28a60485 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         if settings_dict['USER']:
             kwargs['user'] = settings_dict['USER']
         if settings_dict['NAME']:
-            kwargs['db'] = settings_dict['NAME']
+            kwargs['database'] = settings_dict['NAME']
         if settings_dict['PASSWORD']:
-            kwargs['passwd'] = settings_dict['PASSWORD']
+            kwargs['password'] = settings_dict['PASSWORD']
         if settings_dict['HOST'].startswith('/'):
             kwargs['unix_socket'] = settings_dict['HOST']
         elif settings_dict['HOST']:
diff --git a/test_mysql_deprecation.py b/test_mysql_deprecation.py
new file mode 100644
index 0000000000..3208497072
--- /dev/null
+++ b/test_mysql_deprecation.py
@@ -0,0 +1,28 @@
+import os
+import sys
+
+def test_deprecation():
+    # Minimal reproduction attempt:
+    # We'll mimic a settings dict with 'db' and 'passwd' and see if we get a deprecation warning
+    # from mysqlclient. Specifically, we will import the base module and
+    # create a DatabaseWrapper instance with settings that used to use 'db' and 'passwd'.
+
+    from django.db.backends.mysql.base import DatabaseWrapper
+
+    settings_dict = {
+        'USER': 'testuser',
+        'PASSWORD': 'testpassword',
+        'NAME': 'testdb',
+        'HOST': '',
+        'PORT': '',
+        'OPTIONS': {},
+    }
+
+    wrapper = DatabaseWrapper(settings_dict)
+    conn_params = wrapper.get_connection_params()
+    # Print out what keys are in conn_params to verify if "db" or "passwd" are used
+    print("Connection params:", conn_params)
+    print("If you see 'database' and 'password' instead of 'db' and 'passwd', then the change is working correctly!")
+
+if __name__ == "__main__":
+    test_deprecation()
\ No newline at end of file
