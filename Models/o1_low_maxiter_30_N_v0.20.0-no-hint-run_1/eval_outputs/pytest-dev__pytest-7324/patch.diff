diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..8425def6b
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,5 @@
+from _pytest.mark.expression import Expression
+
+if __name__ == "__main__":
+    print("Compiling 'False' with Expression.compile(), which might crash on debug builds for Python 3.8+...")
+    Expression.compile("False")
\ No newline at end of file
diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..34bc71611 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -129,7 +129,7 @@ class Scanner:

 def expression(s: Scanner) -> ast.Expression:
     if s.accept(TokenType.EOF):
-        ret = ast.NameConstant(False)  # type: ast.expr
+        ret = ast.Constant(False)  # type: ast.expr
     else:
         ret = expr(s)
         s.accept(TokenType.EOF, reject=True)
@@ -161,7 +161,7 @@ def not_expr(s: Scanner) -> ast.expr:
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
-        return ast.Name(ident.value, ast.Load())
+        if ident.value == "True":\n    return ast.NameConstant(True)\nelif ident.value == "False":\n    return ast.NameConstant(False)\nelif ident.value == "None":\n    return ast.NameConstant(None)\nelse:\n    return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
