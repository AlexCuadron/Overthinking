diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..d2c8513e02 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -577,7 +577,37 @@ def modelform_factory(
     Return a ModelForm containing form fields for the given model. You can
     optionally pass a `form` argument to use as a starting point for
     constructing the ModelForm.
-
+    """
+    if formfield_callback is None and hasattr(form, "Meta"):
+        meta_callback = getattr(form.Meta, "formfield_callback", None)
+        if meta_callback is not None:
+            formfield_callback = meta_callback
+
+# After we potentially discover a formfield_callback in form.Meta, let's ensure
+# the final Form class actually uses it by constructing a new form type that
+# overrides Meta if needed.
+if formfield_callback is not None:
+    form_meta = getattr(form, 'Meta', None)
+    # Build a new derived Form class that sets the discovered callback in Meta
+    class NewForm(form):
+        class Meta:
+            pass
+    if form_meta:  # copy everything from the old Meta
+        for attr_name in dir(form_meta):
+            if not attr_name.startswith('__'):
+                setattr(NewForm.Meta, attr_name, getattr(form_meta, attr_name))
+    NewForm.Meta.formfield_callback = formfield_callback
+    form = NewForm
+# If a callback wasn't explicitly passed and we found one in form.Meta...
+    # ...but the form still isn't injecting it into its own Meta class,
+    # let's inject it here so the final form class respects form.Meta.
+    if formfield_callback is not None:
+        if not hasattr(form, 'Meta'):
+            class NewMeta:
+                formfield_callback = formfield_callback
+            form.Meta = NewMeta
+        else:
+            setattr(form.Meta, 'formfield_callback', formfield_callback)
     ``fields`` is an optional list of field names. If provided, include only
     the named fields in the returned fields. If omitted or '__all__', use all
     fields.
