diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..f1f9c52238
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,47 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import migrations, connection
+
+# A minimal settings configuration
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],  # Add minimal apps used in migrations
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+# A trivial migration plan that may create repeated AddIndex/RemoveIndex
+# We'll intentionally create a fake plan with repeated AddIndex/RemoveIndex ops
+class FakeMigration(migrations.Migration):
+    operations = [
+        migrations.AddIndex(
+            model_name='user',
+            index=migrations.operations.models.Index(fields=['username'], name='test_idx')
+        ),
+        migrations.RemoveIndex(
+            model_name='user',
+            name='test_idx'
+        ),
+        migrations.AddIndex(
+            model_name='user',
+            index=migrations.operations.models.Index(fields=['username'], name='test_idx')
+        ),
+    ]
+
+migration_plan = [FakeMigration('0001_test', 'auth')]
+
+# The migration optimizer may reduce some operations, but let's see if it properly merges them
+from django.db.migrations.optimizer import MigrationOptimizer
+
+optimizer = MigrationOptimizer()
+optimized_plan = optimizer.optimize(migration_plan, connection.schema_editor())
+
+print("Original plan has", len(migration_plan[0].operations), "operations.")
+print("Optimized plan has", len(optimized_plan[0].operations), "operations if not properly optimized.")
\ No newline at end of file
