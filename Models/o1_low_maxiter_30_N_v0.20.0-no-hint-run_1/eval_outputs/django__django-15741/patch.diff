diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..77cb4b18f4 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -97,15 +97,51 @@ def get_format_modules(lang=None):
     return _format_modules_cache[lang]


-def get_format(format_type, lang=None, use_l10n=None):
+def get_format(user_format_type, lang=None, use_l10n=None):
     """
     For a specific format type, return the format for the current
     language (locale). Default to the format in the settings.
     format_type is the name of the format, e.g. 'DATE_FORMAT'.
-
+
     If use_l10n is provided and is not None, it forces the value to
     be localized (or not), overriding the value of settings.USE_L10N.
     """
+    # Convert lazy or any non-string format_type to string very early.
+    format_type = str(user_format_type)
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+
+    if use_l10n and lang is None:
+        lang = get_language()
+
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+
+    _format_cache[cache_key] = val
+    return val
     if use_l10n is None:
         try:
             use_l10n = settings._USE_L10N_INTERNAL
