2025-01-23 00:58:23,976 - INFO - Environment image sweb.env.x86_64.0c609b65ef40b42410cb20:latest found for pylint-dev__pylint-7080
Building instance image sweb.eval.x86_64.pylint-dev__pylint-7080:latest for pylint-dev__pylint-7080
2025-01-23 00:58:30,332 - INFO - Creating container for pylint-dev__pylint-7080...
2025-01-23 00:58:30,359 - INFO - Container for pylint-dev__pylint-7080 created: 3037ed07769a1b3dcfe9ff9d44e9882668f9fb013d6c95eea1b04e186c212809
2025-01-23 00:58:30,532 - INFO - Container for pylint-dev__pylint-7080 started: 3037ed07769a1b3dcfe9ff9d44e9882668f9fb013d6c95eea1b04e186c212809
2025-01-23 00:58:30,533 - INFO - Intermediate patch for pylint-dev__pylint-7080 written to logs/run_evaluation/20250123_004007/o1_maxiter_30_N_v0.20.0-no-hint-run_1/pylint-dev__pylint-7080/patch.diff, now applying to container...
2025-01-23 00:58:30,726 - INFO - Failed to apply patch to container, trying again...
2025-01-23 00:58:30,783 - INFO - >>>>> Applied Patch:
patching file doc/exts/pylint_options.py
patching file pylint/checkers/base/name_checker/checker.py
patching file pylint/checkers/base/name_checker/naming_style.py
patching file pylint/checkers/base_checker.py
patching file pylint/checkers/classes/class_checker.py
patching file pylint/checkers/deprecated.py
patching file pylint/checkers/design_analysis.py
patching file pylint/checkers/exceptions.py
patching file pylint/checkers/format.py
patching file pylint/checkers/imports.py
patching file pylint/checkers/logging.py
patching file pylint/checkers/misc.py
patching file pylint/checkers/newstyle.py
patching file pylint/checkers/similar.py
patching file pylint/checkers/stdlib.py
patching file pylint/checkers/strings.py
patching file pylint/checkers/typecheck.py
patching file pylint/checkers/variables.py
patching file pylint/config/arguments_manager.py
patching file pylint/config/arguments_provider.py
patching file pylint/config/option_manager_mixin.py
patching file pylint/config/options_provider_mixin.py
patching file pylint/constants.py
patching file pylint/lint/base_options.py
patching file pylint/lint/expand_modules.py
patching file pylint/lint/message_state_handler.py
patching file pylint/lint/parallel.py
patching file pylint/lint/pylinter.py
patching file pylint/message/message.py
patching file pylint/pl_typing.py (renamed from pylint/typing.py)
patching file pylint/pyreverse/main.py
patching file pylint/reporters/reports_handler_mix_in.py
patching file pylint/utils/linterstats.py
patching file pylint/utils/utils.py
patching file tests/benchmark/test_baseline_benchmarks.py
patching file tests/config/unittest_config.py
patching file tests/lint/unittest_expand_modules.py
patching file tests/lint/unittest_lint.py
patching file tests/message/unittest_message.py
patching file tests/test_check_parallel.py
patching file tests/testutils/test_output_line.py
patching file tests/unittest_reporting.py

2025-01-23 00:58:31,006 - INFO - Git diff before:
diff --git a/doc/exts/pylint_options.py b/doc/exts/pylint_options.py
index ed5af3194..7c50ab274 100644
--- a/doc/exts/pylint_options.py
+++ b/doc/exts/pylint_options.py
@@ -19,7 +19,7 @@ from pylint.checkers import initialize as initialize_checkers
 from pylint.checkers.base_checker import BaseChecker
 from pylint.extensions import initialize as initialize_extensions
 from pylint.lint import PyLinter
-from pylint.typing import OptionDict
+from pylint.pl_typing import OptionDict
 from pylint.utils import get_rst_title
 
 
diff --git a/pylint/checkers/base/name_checker/checker.py b/pylint/checkers/base/name_checker/checker.py
index 3f30fd8f0..4f7f0fae3 100644
--- a/pylint/checkers/base/name_checker/checker.py
+++ b/pylint/checkers/base/name_checker/checker.py
@@ -29,7 +29,7 @@ from pylint.checkers.base.name_checker.naming_style import (
     _create_naming_options,
 )
 from pylint.checkers.utils import is_property_deleter, is_property_setter
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 if TYPE_CHECKING:
     from pylint.lint.pylinter import PyLinter
diff --git a/pylint/checkers/base/name_checker/naming_style.py b/pylint/checkers/base/name_checker/naming_style.py
index 3b7833049..e3ea29dae 100644
--- a/pylint/checkers/base/name_checker/naming_style.py
+++ b/pylint/checkers/base/name_checker/naming_style.py
@@ -8,7 +8,7 @@ import re
 from re import Pattern
 
 from pylint import constants
-from pylint.typing import OptionDict, Options
+from pylint.pl_typing import OptionDict, Options
 
 
 class NamingStyle:
diff --git a/pylint/checkers/base_checker.py b/pylint/checkers/base_checker.py
index 778345de8..68fdb783a 100644
--- a/pylint/checkers/base_checker.py
+++ b/pylint/checkers/base_checker.py
@@ -19,7 +19,7 @@ from pylint.constants import _MSG_ORDER, MAIN_CHECKER_NAME, WarningScope
 from pylint.exceptions import InvalidMessageError
 from pylint.interfaces import Confidence, IRawChecker, ITokenChecker, implements
 from pylint.message.message_definition import MessageDefinition
-from pylint.typing import (
+from pylint.pl_typing import (
     ExtraMessageOptions,
     MessageDefinitionTuple,
     OptionDict,
diff --git a/pylint/checkers/classes/class_checker.py b/pylint/checkers/classes/class_checker.py
index ba5edad64..63532b903 100644
--- a/pylint/checkers/classes/class_checker.py
+++ b/pylint/checkers/classes/class_checker.py
@@ -36,7 +36,7 @@ from pylint.checkers.utils import (
     uninferable_final_decorators,
 )
 from pylint.interfaces import HIGH, INFERENCE
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if sys.version_info >= (3, 8):
     from functools import cached_property
diff --git a/pylint/checkers/deprecated.py b/pylint/checkers/deprecated.py
index 78d73586b..675765152 100644
--- a/pylint/checkers/deprecated.py
+++ b/pylint/checkers/deprecated.py
@@ -15,7 +15,7 @@ from astroid import nodes
 from pylint.checkers import utils
 from pylint.checkers.base_checker import BaseChecker
 from pylint.checkers.utils import get_import_name, infer_all, safe_infer
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 ACCEPTABLE_NODES = (
     astroid.BoundMethod,
diff --git a/pylint/checkers/design_analysis.py b/pylint/checkers/design_analysis.py
index c97393bcc..4b0c0c172 100644
--- a/pylint/checkers/design_analysis.py
+++ b/pylint/checkers/design_analysis.py
@@ -16,7 +16,7 @@ from astroid import nodes
 
 from pylint.checkers import BaseChecker
 from pylint.checkers.utils import only_required_for_messages
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/exceptions.py b/pylint/checkers/exceptions.py
index 38ecc437c..0ab872cda 100644
--- a/pylint/checkers/exceptions.py
+++ b/pylint/checkers/exceptions.py
@@ -16,7 +16,7 @@ from astroid import nodes, objects
 from pylint import checkers
 from pylint.checkers import utils
 from pylint.interfaces import HIGH
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/format.py b/pylint/checkers/format.py
index 7489207e5..63486a930 100644
--- a/pylint/checkers/format.py
+++ b/pylint/checkers/format.py
@@ -27,7 +27,7 @@ from pylint.checkers.utils import (
     only_required_for_messages,
 )
 from pylint.constants import WarningScope
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py
index 97d9d51f6..061c2f77b 100644
--- a/pylint/checkers/imports.py
+++ b/pylint/checkers/imports.py
@@ -26,7 +26,7 @@ from pylint.checkers.utils import (
 from pylint.exceptions import EmptyReportError
 from pylint.graph import DotBackend, get_cycles
 from pylint.reporters.ureports.nodes import Paragraph, Section, VerbatimText
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 from pylint.utils import IsortDriver
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/logging.py b/pylint/checkers/logging.py
index a82afcdef..6a606aa00 100644
--- a/pylint/checkers/logging.py
+++ b/pylint/checkers/logging.py
@@ -15,7 +15,7 @@ from astroid import nodes
 from pylint import checkers
 from pylint.checkers import utils
 from pylint.checkers.utils import infer_all
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py
index 623db8c78..3b1dc8173 100644
--- a/pylint/checkers/misc.py
+++ b/pylint/checkers/misc.py
@@ -13,7 +13,7 @@ from typing import TYPE_CHECKING
 from astroid import nodes
 
 from pylint.checkers import BaseRawFileChecker, BaseTokenChecker
-from pylint.typing import ManagedMessage
+from pylint.pl_typing import ManagedMessage
 from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/newstyle.py b/pylint/checkers/newstyle.py
index 0aed97183..1a38aa331 100644
--- a/pylint/checkers/newstyle.py
+++ b/pylint/checkers/newstyle.py
@@ -17,7 +17,7 @@ from pylint.checkers.utils import (
     node_frame_class,
     only_required_for_messages,
 )
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py
index 77f2fc835..89e5ececd 100644
--- a/pylint/checkers/similar.py
+++ b/pylint/checkers/similar.py
@@ -50,7 +50,7 @@ from astroid import nodes
 
 from pylint.checkers import BaseChecker, BaseRawFileChecker, table_lines_from_stats
 from pylint.reporters.ureports.nodes import Table
-from pylint.typing import MessageDefinitionTuple, Options
+from pylint.pl_typing import MessageDefinitionTuple, Options
 from pylint.utils import LinterStats, decoding_stream
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/stdlib.py b/pylint/checkers/stdlib.py
index 884f72d90..93786808c 100644
--- a/pylint/checkers/stdlib.py
+++ b/pylint/checkers/stdlib.py
@@ -15,7 +15,7 @@ from astroid import nodes
 
 from pylint import interfaces
 from pylint.checkers import BaseChecker, DeprecatedMixin, utils
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/strings.py b/pylint/checkers/strings.py
index e7f14e20b..92ba111b6 100644
--- a/pylint/checkers/strings.py
+++ b/pylint/checkers/strings.py
@@ -20,7 +20,7 @@ from astroid import nodes
 from pylint.checkers import BaseChecker, BaseRawFileChecker, BaseTokenChecker, utils
 from pylint.checkers.utils import only_required_for_messages
 from pylint.interfaces import HIGH
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/typecheck.py b/pylint/checkers/typecheck.py
index dd289bfbe..eecc6d783 100644
--- a/pylint/checkers/typecheck.py
+++ b/pylint/checkers/typecheck.py
@@ -48,7 +48,7 @@ from pylint.checkers.utils import (
     supports_setitem,
 )
 from pylint.interfaces import INFERENCE
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if sys.version_info >= (3, 8):
     from functools import cached_property
diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py
index b945bfbd8..7b28e9da5 100644
--- a/pylint/checkers/variables.py
+++ b/pylint/checkers/variables.py
@@ -28,7 +28,7 @@ from pylint.checkers.utils import (
 )
 from pylint.constants import PY39_PLUS, TYPING_TYPE_CHECKS_GUARDS
 from pylint.interfaces import CONTROL_FLOW, HIGH, INFERENCE, INFERENCE_FAILURE
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if sys.version_info >= (3, 8):
     from functools import cached_property
diff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py
index eda1a583d..d4ff49b7b 100644
--- a/pylint/config/arguments_manager.py
+++ b/pylint/config/arguments_manager.py
@@ -42,7 +42,7 @@ from pylint.config.option_parser import OptionParser
 from pylint.config.options_provider_mixin import OptionsProviderMixIn
 from pylint.config.utils import _convert_option_to_argument, _parse_rich_type_value
 from pylint.constants import MAIN_CHECKER_NAME
-from pylint.typing import DirectoryNamespaceDict, OptionDict
+from pylint.pl_typing import DirectoryNamespaceDict, OptionDict
 
 if sys.version_info >= (3, 11):
     import tomllib
diff --git a/pylint/config/arguments_provider.py b/pylint/config/arguments_provider.py
index 2ab44b161..4bb065cfb 100644
--- a/pylint/config/arguments_provider.py
+++ b/pylint/config/arguments_provider.py
@@ -13,7 +13,7 @@ from collections.abc import Iterator
 from typing import Any
 
 from pylint.config.arguments_manager import _ArgumentsManager
-from pylint.typing import OptionDict, Options
+from pylint.pl_typing import OptionDict, Options
 
 
 class UnsupportedAction(Exception):
diff --git a/pylint/config/option_manager_mixin.py b/pylint/config/option_manager_mixin.py
index 2f0aac75f..bccf08560 100644
--- a/pylint/config/option_manager_mixin.py
+++ b/pylint/config/option_manager_mixin.py
@@ -20,7 +20,7 @@ from typing import Any, TextIO
 from pylint import utils
 from pylint.config.option import Option
 from pylint.config.option_parser import OptionParser
-from pylint.typing import OptionDict
+from pylint.pl_typing import OptionDict
 
 if sys.version_info >= (3, 11):
     import tomllib
diff --git a/pylint/config/options_provider_mixin.py b/pylint/config/options_provider_mixin.py
index 5b20a290f..068aa100b 100644
--- a/pylint/config/options_provider_mixin.py
+++ b/pylint/config/options_provider_mixin.py
@@ -7,7 +7,7 @@ import warnings
 
 from pylint.config.callback_actions import _CallbackAction
 from pylint.config.option import _validate
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 
 class UnsupportedAction(Exception):
diff --git a/pylint/constants.py b/pylint/constants.py
index a609f9cd6..d68cd587e 100644
--- a/pylint/constants.py
+++ b/pylint/constants.py
@@ -14,7 +14,7 @@ import astroid
 import platformdirs
 
 from pylint.__pkginfo__ import __version__
-from pylint.typing import MessageTypesFullName
+from pylint.pl_typing import MessageTypesFullName
 
 PY38_PLUS = sys.version_info[:2] >= (3, 8)
 PY39_PLUS = sys.version_info[:2] >= (3, 9)
diff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py
index d909e39c5..1d2fa3e58 100644
--- a/pylint/lint/base_options.py
+++ b/pylint/lint/base_options.py
@@ -28,7 +28,7 @@ from pylint.config.callback_actions import (
     _MessageHelpAction,
     _OutputFormatAction,
 )
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter, Run
diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index 5cacc0371..635bc9965 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -11,7 +11,7 @@ from re import Pattern
 
 from astroid import modutils
 
-from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict
+from pylint.pl_typing import ErrorDescriptionDict, ModuleDescriptionDict
 
 
 def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:
@@ -52,6 +52,7 @@ def _is_ignored_file(
     ignore_list_re: list[Pattern[str]],
     ignore_list_paths_re: list[Pattern[str]],
 ) -> bool:
+    element = element.replace("\\", "/")
     basename = os.path.basename(element)
     return (
         basename in ignore_list
diff --git a/pylint/lint/message_state_handler.py b/pylint/lint/message_state_handler.py
index 8415c8854..b6fb8d959 100644
--- a/pylint/lint/message_state_handler.py
+++ b/pylint/lint/message_state_handler.py
@@ -19,7 +19,7 @@ from pylint.constants import (
 )
 from pylint.interfaces import HIGH
 from pylint.message import MessageDefinition
-from pylint.typing import ManagedMessage
+from pylint.pl_typing import ManagedMessage
 from pylint.utils.pragma_parser import (
     OPTION_PO,
     InvalidPragmaError,
diff --git a/pylint/lint/parallel.py b/pylint/lint/parallel.py
index 646d26994..a40f10b0c 100644
--- a/pylint/lint/parallel.py
+++ b/pylint/lint/parallel.py
@@ -15,7 +15,7 @@ import dill
 from pylint import reporters
 from pylint.lint.utils import _patch_sys_path
 from pylint.message import Message
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 from pylint.utils import LinterStats, merge_stats
 
 try:
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index e2bbf061e..47ab464a5 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -52,7 +52,7 @@ from pylint.message import Message, MessageDefinition, MessageDefinitionStore
 from pylint.reporters.base_reporter import BaseReporter
 from pylint.reporters.text import TextReporter
 from pylint.reporters.ureports import nodes as report_nodes
-from pylint.typing import (
+from pylint.pl_typing import (
     DirectoryNamespaceDict,
     FileItem,
     ManagedMessage,
diff --git a/pylint/message/message.py b/pylint/message/message.py
index 4efa3f124..aa0cca545 100644
--- a/pylint/message/message.py
+++ b/pylint/message/message.py
@@ -9,7 +9,7 @@ from warnings import warn
 
 from pylint.constants import MSG_TYPES
 from pylint.interfaces import UNDEFINED, Confidence
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 
 
 @dataclass(unsafe_hash=True)
diff --git a/pylint/pyreverse/main.py b/pylint/pyreverse/main.py
index 043e2a3f3..4ee898a54 100644
--- a/pylint/pyreverse/main.py
+++ b/pylint/pyreverse/main.py
@@ -22,7 +22,7 @@ from pylint.pyreverse.utils import (
     check_if_graphviz_supports_format,
     insert_default_options,
 )
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 DIRECTLY_SUPPORTED_FORMATS = (
     "dot",
diff --git a/pylint/reporters/reports_handler_mix_in.py b/pylint/reporters/reports_handler_mix_in.py
index 32a7190e7..514c7a6f2 100644
--- a/pylint/reporters/reports_handler_mix_in.py
+++ b/pylint/reporters/reports_handler_mix_in.py
@@ -10,7 +10,7 @@ from typing import TYPE_CHECKING, DefaultDict, List, Tuple
 
 from pylint.exceptions import EmptyReportError
 from pylint.reporters.ureports.nodes import Section
-from pylint.typing import ReportsCallable
+from pylint.pl_typing import ReportsCallable
 from pylint.utils import LinterStats
 
 if TYPE_CHECKING:
diff --git a/pylint/typing.py b/pylint/typing.py
deleted file mode 100644
index 224e0bd6b..000000000
--- a/pylint/typing.py
+++ /dev/null
@@ -1,134 +0,0 @@
-# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
-# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
-# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt
-
-"""A collection of typing utilities."""
-
-from __future__ import annotations
-
-import argparse
-import sys
-from pathlib import Path
-from typing import (
-    TYPE_CHECKING,
-    Any,
-    Callable,
-    Dict,
-    Iterable,
-    NamedTuple,
-    Optional,
-    Pattern,
-    Tuple,
-    Type,
-    Union,
-)
-
-if sys.version_info >= (3, 8):
-    from typing import Literal, TypedDict
-else:
-    from typing_extensions import Literal, TypedDict
-
-if TYPE_CHECKING:
-    from pylint.config.callback_actions import _CallbackAction
-    from pylint.reporters.ureports.nodes import Section
-    from pylint.utils import LinterStats
-
-
-class FileItem(NamedTuple):
-    """Represents data about a file handled by pylint.
-
-    Each file item has:
-    - name: full name of the module
-    - filepath: path of the file
-    - modname: module name
-    """
-
-    name: str
-    filepath: str
-    modpath: str
-
-
-class ModuleDescriptionDict(TypedDict):
-    """Represents data about a checked module."""
-
-    path: str
-    name: str
-    isarg: bool
-    basepath: str
-    basename: str
-
-
-class ErrorDescriptionDict(TypedDict):
-    """Represents data about errors collected during checking of a module."""
-
-    key: Literal["fatal"]
-    mod: str
-    ex: ImportError | SyntaxError
-
-
-class MessageLocationTuple(NamedTuple):
-    """Tuple with information about the location of a to-be-displayed message."""
-
-    abspath: str
-    path: str
-    module: str
-    obj: str
-    line: int
-    column: int
-    end_line: int | None = None
-    end_column: int | None = None
-
-
-class ManagedMessage(NamedTuple):
-    """Tuple with information about a managed message of the linter."""
-
-    name: str | None
-    msgid: str
-    symbol: str
-    line: int | None
-    is_disabled: bool
-
-
-MessageTypesFullName = Literal[
-    "convention", "error", "fatal", "info", "refactor", "statement", "warning"
-]
-"""All possible message categories."""
-
-
-OptionDict = Dict[
-    str,
-    Union[
-        None,
-        str,
-        bool,
-        int,
-        Pattern[str],
-        Iterable[Union[str, int, Pattern[str]]],
-        Type["_CallbackAction"],
-        Callable[[Any], Any],
-        Callable[[Any, Any, Any, Any], Any],
-    ],
-]
-Options = Tuple[Tuple[str, OptionDict], ...]
-
-
-ReportsCallable = Callable[["Section", "LinterStats", Optional["LinterStats"]], None]
-"""Callable to create a report."""
-
-
-class ExtraMessageOptions(TypedDict, total=False):
-    """All allowed keys in the extra options for message definitions."""
-
-    scope: str
-    old_names: list[tuple[str, str]]
-    maxversion: tuple[int, int]
-    minversion: tuple[int, int]
-    shared: bool
-
-
-MessageDefinitionTuple = Union[
-    Tuple[str, str, str],
-    Tuple[str, str, str, ExtraMessageOptions],
-]
-# Mypy doesn't support recursive types (yet), see https://github.com/python/mypy/issues/731
-DirectoryNamespaceDict = Dict[Path, Tuple[argparse.Namespace, "DirectoryNamespaceDict"]]  # type: ignore[misc]
diff --git a/pylint/utils/linterstats.py b/pylint/utils/linterstats.py
index 11338850c..d2647f218 100644
--- a/pylint/utils/linterstats.py
+++ b/pylint/utils/linterstats.py
@@ -7,7 +7,7 @@ from __future__ import annotations
 import sys
 from typing import cast
 
-from pylint.typing import MessageTypesFullName
+from pylint.pl_typing import MessageTypesFullName
 
 if sys.version_info >= (3, 8):
     from typing import Literal, TypedDict
diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py
index 6a4277642..d999c7875 100644
--- a/pylint/utils/utils.py
+++ b/pylint/utils/utils.py
@@ -38,7 +38,7 @@ from typing import (
 from astroid import Module, modutils, nodes
 
 from pylint.constants import PY_EXTS
-from pylint.typing import OptionDict
+from pylint.pl_typing import OptionDict
 
 if sys.version_info >= (3, 8):
     from typing import Literal
diff --git a/tests/benchmark/test_baseline_benchmarks.py b/tests/benchmark/test_baseline_benchmarks.py
index 6fb1cdf18..9daa66936 100644
--- a/tests/benchmark/test_baseline_benchmarks.py
+++ b/tests/benchmark/test_baseline_benchmarks.py
@@ -18,7 +18,7 @@ from pylint.checkers import BaseRawFileChecker
 from pylint.lint import PyLinter, check_parallel
 from pylint.testutils import GenericTestReporter as Reporter
 from pylint.testutils._run import _Run as Run
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 from pylint.utils import register_plugins
 
 
diff --git a/tests/config/unittest_config.py b/tests/config/unittest_config.py
index 8c668aa52..fad45fa95 100644
--- a/tests/config/unittest_config.py
+++ b/tests/config/unittest_config.py
@@ -14,7 +14,7 @@ import pytest
 from pylint import config
 from pylint.checkers import BaseChecker
 from pylint.testutils import CheckerTestCase, set_config
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 
 def test__regexp_validator_valid() -> None:
diff --git a/tests/lint/unittest_expand_modules.py b/tests/lint/unittest_expand_modules.py
index 15f72d0c5..3d574e74f 100644
--- a/tests/lint/unittest_expand_modules.py
+++ b/tests/lint/unittest_expand_modules.py
@@ -12,7 +12,7 @@ import pytest
 from pylint.checkers import BaseChecker
 from pylint.lint.expand_modules import _is_in_ignore_list_re, expand_modules
 from pylint.testutils import CheckerTestCase, set_config
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 
 def test__is_in_ignore_list_re_match() -> None:
diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py
index 3dbde39ce..025805e60 100644
--- a/tests/lint/unittest_lint.py
+++ b/tests/lint/unittest_lint.py
@@ -44,7 +44,7 @@ from pylint.message import Message
 from pylint.reporters import text
 from pylint.testutils import create_files
 from pylint.testutils._run import _Run as Run
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 from pylint.utils import FileState, print_full_documentation, tokenize_module
 
 if os.name == "java":
diff --git a/tests/message/unittest_message.py b/tests/message/unittest_message.py
index d0805e337..7138f3e47 100644
--- a/tests/message/unittest_message.py
+++ b/tests/message/unittest_message.py
@@ -9,7 +9,7 @@ from collections.abc import ValuesView
 from pylint.interfaces import HIGH
 from pylint.message import Message
 from pylint.message.message_definition import MessageDefinition
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 
 
 def test_new_message(message_definitions: ValuesView[MessageDefinition]) -> None:
diff --git a/tests/test_check_parallel.py b/tests/test_check_parallel.py
index 259c236d4..807539357 100644
--- a/tests/test_check_parallel.py
+++ b/tests/test_check_parallel.py
@@ -24,7 +24,7 @@ from pylint.lint.parallel import _worker_check_single_file as worker_check_singl
 from pylint.lint.parallel import _worker_initialize as worker_initialize
 from pylint.lint.parallel import check_parallel
 from pylint.testutils import GenericTestReporter as Reporter
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 from pylint.utils import LinterStats, ModuleStats
 
 
diff --git a/tests/testutils/test_output_line.py b/tests/testutils/test_output_line.py
index 2a21ce1fd..304d6a0e4 100644
--- a/tests/testutils/test_output_line.py
+++ b/tests/testutils/test_output_line.py
@@ -14,7 +14,7 @@ from pylint.constants import PY38_PLUS
 from pylint.interfaces import HIGH, INFERENCE, Confidence
 from pylint.message import Message
 from pylint.testutils.output_line import OutputLine
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 
 
 @pytest.fixture()
diff --git a/tests/unittest_reporting.py b/tests/unittest_reporting.py
index ebc4a225f..505bf592a 100644
--- a/tests/unittest_reporting.py
+++ b/tests/unittest_reporting.py
@@ -19,7 +19,7 @@ from pylint import checkers
 from pylint.lint import PyLinter
 from pylint.reporters import BaseReporter
 from pylint.reporters.text import ParseableTextReporter, TextReporter
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 
 if TYPE_CHECKING:
     from pylint.reporters.ureports.nodes import Section
2025-01-23 00:58:31,006 - INFO - Eval script for pylint-dev__pylint-7080 written to logs/run_evaluation/20250123_004007/o1_maxiter_30_N_v0.20.0-no-hint-run_1/pylint-dev__pylint-7080/eval.sh; copying to container...
2025-01-23 00:58:54,748 - INFO - Test runtime: 23.58 seconds
2025-01-23 00:58:54,748 - INFO - Test output for pylint-dev__pylint-7080 written to logs/run_evaluation/20250123_004007/o1_maxiter_30_N_v0.20.0-no-hint-run_1/pylint-dev__pylint-7080/test_output.txt
2025-01-23 00:58:54,819 - INFO - Git diff after:
diff --git a/doc/exts/pylint_options.py b/doc/exts/pylint_options.py
index ed5af3194..7c50ab274 100644
--- a/doc/exts/pylint_options.py
+++ b/doc/exts/pylint_options.py
@@ -19,7 +19,7 @@ from pylint.checkers import initialize as initialize_checkers
 from pylint.checkers.base_checker import BaseChecker
 from pylint.extensions import initialize as initialize_extensions
 from pylint.lint import PyLinter
-from pylint.typing import OptionDict
+from pylint.pl_typing import OptionDict
 from pylint.utils import get_rst_title
 
 
diff --git a/pylint/checkers/base/name_checker/checker.py b/pylint/checkers/base/name_checker/checker.py
index 3f30fd8f0..4f7f0fae3 100644
--- a/pylint/checkers/base/name_checker/checker.py
+++ b/pylint/checkers/base/name_checker/checker.py
@@ -29,7 +29,7 @@ from pylint.checkers.base.name_checker.naming_style import (
     _create_naming_options,
 )
 from pylint.checkers.utils import is_property_deleter, is_property_setter
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 if TYPE_CHECKING:
     from pylint.lint.pylinter import PyLinter
diff --git a/pylint/checkers/base/name_checker/naming_style.py b/pylint/checkers/base/name_checker/naming_style.py
index 3b7833049..e3ea29dae 100644
--- a/pylint/checkers/base/name_checker/naming_style.py
+++ b/pylint/checkers/base/name_checker/naming_style.py
@@ -8,7 +8,7 @@ import re
 from re import Pattern
 
 from pylint import constants
-from pylint.typing import OptionDict, Options
+from pylint.pl_typing import OptionDict, Options
 
 
 class NamingStyle:
diff --git a/pylint/checkers/base_checker.py b/pylint/checkers/base_checker.py
index 778345de8..68fdb783a 100644
--- a/pylint/checkers/base_checker.py
+++ b/pylint/checkers/base_checker.py
@@ -19,7 +19,7 @@ from pylint.constants import _MSG_ORDER, MAIN_CHECKER_NAME, WarningScope
 from pylint.exceptions import InvalidMessageError
 from pylint.interfaces import Confidence, IRawChecker, ITokenChecker, implements
 from pylint.message.message_definition import MessageDefinition
-from pylint.typing import (
+from pylint.pl_typing import (
     ExtraMessageOptions,
     MessageDefinitionTuple,
     OptionDict,
diff --git a/pylint/checkers/classes/class_checker.py b/pylint/checkers/classes/class_checker.py
index ba5edad64..63532b903 100644
--- a/pylint/checkers/classes/class_checker.py
+++ b/pylint/checkers/classes/class_checker.py
@@ -36,7 +36,7 @@ from pylint.checkers.utils import (
     uninferable_final_decorators,
 )
 from pylint.interfaces import HIGH, INFERENCE
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if sys.version_info >= (3, 8):
     from functools import cached_property
diff --git a/pylint/checkers/deprecated.py b/pylint/checkers/deprecated.py
index 78d73586b..675765152 100644
--- a/pylint/checkers/deprecated.py
+++ b/pylint/checkers/deprecated.py
@@ -15,7 +15,7 @@ from astroid import nodes
 from pylint.checkers import utils
 from pylint.checkers.base_checker import BaseChecker
 from pylint.checkers.utils import get_import_name, infer_all, safe_infer
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 ACCEPTABLE_NODES = (
     astroid.BoundMethod,
diff --git a/pylint/checkers/design_analysis.py b/pylint/checkers/design_analysis.py
index c97393bcc..4b0c0c172 100644
--- a/pylint/checkers/design_analysis.py
+++ b/pylint/checkers/design_analysis.py
@@ -16,7 +16,7 @@ from astroid import nodes
 
 from pylint.checkers import BaseChecker
 from pylint.checkers.utils import only_required_for_messages
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/exceptions.py b/pylint/checkers/exceptions.py
index 38ecc437c..0ab872cda 100644
--- a/pylint/checkers/exceptions.py
+++ b/pylint/checkers/exceptions.py
@@ -16,7 +16,7 @@ from astroid import nodes, objects
 from pylint import checkers
 from pylint.checkers import utils
 from pylint.interfaces import HIGH
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/format.py b/pylint/checkers/format.py
index 7489207e5..63486a930 100644
--- a/pylint/checkers/format.py
+++ b/pylint/checkers/format.py
@@ -27,7 +27,7 @@ from pylint.checkers.utils import (
     only_required_for_messages,
 )
 from pylint.constants import WarningScope
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py
index 97d9d51f6..061c2f77b 100644
--- a/pylint/checkers/imports.py
+++ b/pylint/checkers/imports.py
@@ -26,7 +26,7 @@ from pylint.checkers.utils import (
 from pylint.exceptions import EmptyReportError
 from pylint.graph import DotBackend, get_cycles
 from pylint.reporters.ureports.nodes import Paragraph, Section, VerbatimText
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 from pylint.utils import IsortDriver
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/logging.py b/pylint/checkers/logging.py
index a82afcdef..6a606aa00 100644
--- a/pylint/checkers/logging.py
+++ b/pylint/checkers/logging.py
@@ -15,7 +15,7 @@ from astroid import nodes
 from pylint import checkers
 from pylint.checkers import utils
 from pylint.checkers.utils import infer_all
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py
index 623db8c78..3b1dc8173 100644
--- a/pylint/checkers/misc.py
+++ b/pylint/checkers/misc.py
@@ -13,7 +13,7 @@ from typing import TYPE_CHECKING
 from astroid import nodes
 
 from pylint.checkers import BaseRawFileChecker, BaseTokenChecker
-from pylint.typing import ManagedMessage
+from pylint.pl_typing import ManagedMessage
 from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/newstyle.py b/pylint/checkers/newstyle.py
index 0aed97183..1a38aa331 100644
--- a/pylint/checkers/newstyle.py
+++ b/pylint/checkers/newstyle.py
@@ -17,7 +17,7 @@ from pylint.checkers.utils import (
     node_frame_class,
     only_required_for_messages,
 )
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py
index 77f2fc835..89e5ececd 100644
--- a/pylint/checkers/similar.py
+++ b/pylint/checkers/similar.py
@@ -50,7 +50,7 @@ from astroid import nodes
 
 from pylint.checkers import BaseChecker, BaseRawFileChecker, table_lines_from_stats
 from pylint.reporters.ureports.nodes import Table
-from pylint.typing import MessageDefinitionTuple, Options
+from pylint.pl_typing import MessageDefinitionTuple, Options
 from pylint.utils import LinterStats, decoding_stream
 
 if TYPE_CHECKING:
diff --git a/pylint/checkers/stdlib.py b/pylint/checkers/stdlib.py
index 884f72d90..93786808c 100644
--- a/pylint/checkers/stdlib.py
+++ b/pylint/checkers/stdlib.py
@@ -15,7 +15,7 @@ from astroid import nodes
 
 from pylint import interfaces
 from pylint.checkers import BaseChecker, DeprecatedMixin, utils
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/strings.py b/pylint/checkers/strings.py
index e7f14e20b..92ba111b6 100644
--- a/pylint/checkers/strings.py
+++ b/pylint/checkers/strings.py
@@ -20,7 +20,7 @@ from astroid import nodes
 from pylint.checkers import BaseChecker, BaseRawFileChecker, BaseTokenChecker, utils
 from pylint.checkers.utils import only_required_for_messages
 from pylint.interfaces import HIGH
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter
diff --git a/pylint/checkers/typecheck.py b/pylint/checkers/typecheck.py
index dd289bfbe..eecc6d783 100644
--- a/pylint/checkers/typecheck.py
+++ b/pylint/checkers/typecheck.py
@@ -48,7 +48,7 @@ from pylint.checkers.utils import (
     supports_setitem,
 )
 from pylint.interfaces import INFERENCE
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if sys.version_info >= (3, 8):
     from functools import cached_property
diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py
index b945bfbd8..7b28e9da5 100644
--- a/pylint/checkers/variables.py
+++ b/pylint/checkers/variables.py
@@ -28,7 +28,7 @@ from pylint.checkers.utils import (
 )
 from pylint.constants import PY39_PLUS, TYPING_TYPE_CHECKS_GUARDS
 from pylint.interfaces import CONTROL_FLOW, HIGH, INFERENCE, INFERENCE_FAILURE
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 if sys.version_info >= (3, 8):
     from functools import cached_property
diff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py
index eda1a583d..d4ff49b7b 100644
--- a/pylint/config/arguments_manager.py
+++ b/pylint/config/arguments_manager.py
@@ -42,7 +42,7 @@ from pylint.config.option_parser import OptionParser
 from pylint.config.options_provider_mixin import OptionsProviderMixIn
 from pylint.config.utils import _convert_option_to_argument, _parse_rich_type_value
 from pylint.constants import MAIN_CHECKER_NAME
-from pylint.typing import DirectoryNamespaceDict, OptionDict
+from pylint.pl_typing import DirectoryNamespaceDict, OptionDict
 
 if sys.version_info >= (3, 11):
     import tomllib
diff --git a/pylint/config/arguments_provider.py b/pylint/config/arguments_provider.py
index 2ab44b161..4bb065cfb 100644
--- a/pylint/config/arguments_provider.py
+++ b/pylint/config/arguments_provider.py
@@ -13,7 +13,7 @@ from collections.abc import Iterator
 from typing import Any
 
 from pylint.config.arguments_manager import _ArgumentsManager
-from pylint.typing import OptionDict, Options
+from pylint.pl_typing import OptionDict, Options
 
 
 class UnsupportedAction(Exception):
diff --git a/pylint/config/option_manager_mixin.py b/pylint/config/option_manager_mixin.py
index 2f0aac75f..bccf08560 100644
--- a/pylint/config/option_manager_mixin.py
+++ b/pylint/config/option_manager_mixin.py
@@ -20,7 +20,7 @@ from typing import Any, TextIO
 from pylint import utils
 from pylint.config.option import Option
 from pylint.config.option_parser import OptionParser
-from pylint.typing import OptionDict
+from pylint.pl_typing import OptionDict
 
 if sys.version_info >= (3, 11):
     import tomllib
diff --git a/pylint/config/options_provider_mixin.py b/pylint/config/options_provider_mixin.py
index 5b20a290f..068aa100b 100644
--- a/pylint/config/options_provider_mixin.py
+++ b/pylint/config/options_provider_mixin.py
@@ -7,7 +7,7 @@ import warnings
 
 from pylint.config.callback_actions import _CallbackAction
 from pylint.config.option import _validate
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 
 class UnsupportedAction(Exception):
diff --git a/pylint/constants.py b/pylint/constants.py
index a609f9cd6..d68cd587e 100644
--- a/pylint/constants.py
+++ b/pylint/constants.py
@@ -14,7 +14,7 @@ import astroid
 import platformdirs
 
 from pylint.__pkginfo__ import __version__
-from pylint.typing import MessageTypesFullName
+from pylint.pl_typing import MessageTypesFullName
 
 PY38_PLUS = sys.version_info[:2] >= (3, 8)
 PY39_PLUS = sys.version_info[:2] >= (3, 9)
diff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py
index d909e39c5..1d2fa3e58 100644
--- a/pylint/lint/base_options.py
+++ b/pylint/lint/base_options.py
@@ -28,7 +28,7 @@ from pylint.config.callback_actions import (
     _MessageHelpAction,
     _OutputFormatAction,
 )
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 if TYPE_CHECKING:
     from pylint.lint import PyLinter, Run
diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index 5cacc0371..635bc9965 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -11,7 +11,7 @@ from re import Pattern
 
 from astroid import modutils
 
-from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict
+from pylint.pl_typing import ErrorDescriptionDict, ModuleDescriptionDict
 
 
 def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:
@@ -52,6 +52,7 @@ def _is_ignored_file(
     ignore_list_re: list[Pattern[str]],
     ignore_list_paths_re: list[Pattern[str]],
 ) -> bool:
+    element = element.replace("\\", "/")
     basename = os.path.basename(element)
     return (
         basename in ignore_list
diff --git a/pylint/lint/message_state_handler.py b/pylint/lint/message_state_handler.py
index 8415c8854..b6fb8d959 100644
--- a/pylint/lint/message_state_handler.py
+++ b/pylint/lint/message_state_handler.py
@@ -19,7 +19,7 @@ from pylint.constants import (
 )
 from pylint.interfaces import HIGH
 from pylint.message import MessageDefinition
-from pylint.typing import ManagedMessage
+from pylint.pl_typing import ManagedMessage
 from pylint.utils.pragma_parser import (
     OPTION_PO,
     InvalidPragmaError,
diff --git a/pylint/lint/parallel.py b/pylint/lint/parallel.py
index 646d26994..a40f10b0c 100644
--- a/pylint/lint/parallel.py
+++ b/pylint/lint/parallel.py
@@ -15,7 +15,7 @@ import dill
 from pylint import reporters
 from pylint.lint.utils import _patch_sys_path
 from pylint.message import Message
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 from pylint.utils import LinterStats, merge_stats
 
 try:
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index e2bbf061e..47ab464a5 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -52,7 +52,7 @@ from pylint.message import Message, MessageDefinition, MessageDefinitionStore
 from pylint.reporters.base_reporter import BaseReporter
 from pylint.reporters.text import TextReporter
 from pylint.reporters.ureports import nodes as report_nodes
-from pylint.typing import (
+from pylint.pl_typing import (
     DirectoryNamespaceDict,
     FileItem,
     ManagedMessage,
diff --git a/pylint/message/message.py b/pylint/message/message.py
index 4efa3f124..aa0cca545 100644
--- a/pylint/message/message.py
+++ b/pylint/message/message.py
@@ -9,7 +9,7 @@ from warnings import warn
 
 from pylint.constants import MSG_TYPES
 from pylint.interfaces import UNDEFINED, Confidence
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 
 
 @dataclass(unsafe_hash=True)
diff --git a/pylint/pyreverse/main.py b/pylint/pyreverse/main.py
index 043e2a3f3..4ee898a54 100644
--- a/pylint/pyreverse/main.py
+++ b/pylint/pyreverse/main.py
@@ -22,7 +22,7 @@ from pylint.pyreverse.utils import (
     check_if_graphviz_supports_format,
     insert_default_options,
 )
-from pylint.typing import Options
+from pylint.pl_typing import Options
 
 DIRECTLY_SUPPORTED_FORMATS = (
     "dot",
diff --git a/pylint/reporters/reports_handler_mix_in.py b/pylint/reporters/reports_handler_mix_in.py
index 32a7190e7..514c7a6f2 100644
--- a/pylint/reporters/reports_handler_mix_in.py
+++ b/pylint/reporters/reports_handler_mix_in.py
@@ -10,7 +10,7 @@ from typing import TYPE_CHECKING, DefaultDict, List, Tuple
 
 from pylint.exceptions import EmptyReportError
 from pylint.reporters.ureports.nodes import Section
-from pylint.typing import ReportsCallable
+from pylint.pl_typing import ReportsCallable
 from pylint.utils import LinterStats
 
 if TYPE_CHECKING:
diff --git a/pylint/typing.py b/pylint/typing.py
deleted file mode 100644
index 224e0bd6b..000000000
--- a/pylint/typing.py
+++ /dev/null
@@ -1,134 +0,0 @@
-# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
-# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
-# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt
-
-"""A collection of typing utilities."""
-
-from __future__ import annotations
-
-import argparse
-import sys
-from pathlib import Path
-from typing import (
-    TYPE_CHECKING,
-    Any,
-    Callable,
-    Dict,
-    Iterable,
-    NamedTuple,
-    Optional,
-    Pattern,
-    Tuple,
-    Type,
-    Union,
-)
-
-if sys.version_info >= (3, 8):
-    from typing import Literal, TypedDict
-else:
-    from typing_extensions import Literal, TypedDict
-
-if TYPE_CHECKING:
-    from pylint.config.callback_actions import _CallbackAction
-    from pylint.reporters.ureports.nodes import Section
-    from pylint.utils import LinterStats
-
-
-class FileItem(NamedTuple):
-    """Represents data about a file handled by pylint.
-
-    Each file item has:
-    - name: full name of the module
-    - filepath: path of the file
-    - modname: module name
-    """
-
-    name: str
-    filepath: str
-    modpath: str
-
-
-class ModuleDescriptionDict(TypedDict):
-    """Represents data about a checked module."""
-
-    path: str
-    name: str
-    isarg: bool
-    basepath: str
-    basename: str
-
-
-class ErrorDescriptionDict(TypedDict):
-    """Represents data about errors collected during checking of a module."""
-
-    key: Literal["fatal"]
-    mod: str
-    ex: ImportError | SyntaxError
-
-
-class MessageLocationTuple(NamedTuple):
-    """Tuple with information about the location of a to-be-displayed message."""
-
-    abspath: str
-    path: str
-    module: str
-    obj: str
-    line: int
-    column: int
-    end_line: int | None = None
-    end_column: int | None = None
-
-
-class ManagedMessage(NamedTuple):
-    """Tuple with information about a managed message of the linter."""
-
-    name: str | None
-    msgid: str
-    symbol: str
-    line: int | None
-    is_disabled: bool
-
-
-MessageTypesFullName = Literal[
-    "convention", "error", "fatal", "info", "refactor", "statement", "warning"
-]
-"""All possible message categories."""
-
-
-OptionDict = Dict[
-    str,
-    Union[
-        None,
-        str,
-        bool,
-        int,
-        Pattern[str],
-        Iterable[Union[str, int, Pattern[str]]],
-        Type["_CallbackAction"],
-        Callable[[Any], Any],
-        Callable[[Any, Any, Any, Any], Any],
-    ],
-]
-Options = Tuple[Tuple[str, OptionDict], ...]
-
-
-ReportsCallable = Callable[["Section", "LinterStats", Optional["LinterStats"]], None]
-"""Callable to create a report."""
-
-
-class ExtraMessageOptions(TypedDict, total=False):
-    """All allowed keys in the extra options for message definitions."""
-
-    scope: str
-    old_names: list[tuple[str, str]]
-    maxversion: tuple[int, int]
-    minversion: tuple[int, int]
-    shared: bool
-
-
-MessageDefinitionTuple = Union[
-    Tuple[str, str, str],
-    Tuple[str, str, str, ExtraMessageOptions],
-]
-# Mypy doesn't support recursive types (yet), see https://github.com/python/mypy/issues/731
-DirectoryNamespaceDict = Dict[Path, Tuple[argparse.Namespace, "DirectoryNamespaceDict"]]  # type: ignore[misc]
diff --git a/pylint/utils/linterstats.py b/pylint/utils/linterstats.py
index 11338850c..d2647f218 100644
--- a/pylint/utils/linterstats.py
+++ b/pylint/utils/linterstats.py
@@ -7,7 +7,7 @@ from __future__ import annotations
 import sys
 from typing import cast
 
-from pylint.typing import MessageTypesFullName
+from pylint.pl_typing import MessageTypesFullName
 
 if sys.version_info >= (3, 8):
     from typing import Literal, TypedDict
diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py
index 6a4277642..d999c7875 100644
--- a/pylint/utils/utils.py
+++ b/pylint/utils/utils.py
@@ -38,7 +38,7 @@ from typing import (
 from astroid import Module, modutils, nodes
 
 from pylint.constants import PY_EXTS
-from pylint.typing import OptionDict
+from pylint.pl_typing import OptionDict
 
 if sys.version_info >= (3, 8):
     from typing import Literal
diff --git a/tests/benchmark/test_baseline_benchmarks.py b/tests/benchmark/test_baseline_benchmarks.py
index 6fb1cdf18..9daa66936 100644
--- a/tests/benchmark/test_baseline_benchmarks.py
+++ b/tests/benchmark/test_baseline_benchmarks.py
@@ -18,7 +18,7 @@ from pylint.checkers import BaseRawFileChecker
 from pylint.lint import PyLinter, check_parallel
 from pylint.testutils import GenericTestReporter as Reporter
 from pylint.testutils._run import _Run as Run
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 from pylint.utils import register_plugins
 
 
diff --git a/tests/config/unittest_config.py b/tests/config/unittest_config.py
index 8c668aa52..fad45fa95 100644
--- a/tests/config/unittest_config.py
+++ b/tests/config/unittest_config.py
@@ -14,7 +14,7 @@ import pytest
 from pylint import config
 from pylint.checkers import BaseChecker
 from pylint.testutils import CheckerTestCase, set_config
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 
 def test__regexp_validator_valid() -> None:
diff --git a/tests/lint/unittest_expand_modules.py b/tests/lint/unittest_expand_modules.py
index 15f72d0c5..3d574e74f 100644
--- a/tests/lint/unittest_expand_modules.py
+++ b/tests/lint/unittest_expand_modules.py
@@ -12,7 +12,7 @@ import pytest
 from pylint.checkers import BaseChecker
 from pylint.lint.expand_modules import _is_in_ignore_list_re, expand_modules
 from pylint.testutils import CheckerTestCase, set_config
-from pylint.typing import MessageDefinitionTuple
+from pylint.pl_typing import MessageDefinitionTuple
 
 
 def test__is_in_ignore_list_re_match() -> None:
diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py
index 3dbde39ce..025805e60 100644
--- a/tests/lint/unittest_lint.py
+++ b/tests/lint/unittest_lint.py
@@ -44,7 +44,7 @@ from pylint.message import Message
 from pylint.reporters import text
 from pylint.testutils import create_files
 from pylint.testutils._run import _Run as Run
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 from pylint.utils import FileState, print_full_documentation, tokenize_module
 
 if os.name == "java":
diff --git a/tests/message/unittest_message.py b/tests/message/unittest_message.py
index d0805e337..7138f3e47 100644
--- a/tests/message/unittest_message.py
+++ b/tests/message/unittest_message.py
@@ -9,7 +9,7 @@ from collections.abc import ValuesView
 from pylint.interfaces import HIGH
 from pylint.message import Message
 from pylint.message.message_definition import MessageDefinition
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 
 
 def test_new_message(message_definitions: ValuesView[MessageDefinition]) -> None:
diff --git a/tests/test_check_parallel.py b/tests/test_check_parallel.py
index 259c236d4..807539357 100644
--- a/tests/test_check_parallel.py
+++ b/tests/test_check_parallel.py
@@ -24,7 +24,7 @@ from pylint.lint.parallel import _worker_check_single_file as worker_check_singl
 from pylint.lint.parallel import _worker_initialize as worker_initialize
 from pylint.lint.parallel import check_parallel
 from pylint.testutils import GenericTestReporter as Reporter
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 from pylint.utils import LinterStats, ModuleStats
 
 
diff --git a/tests/testutils/test_output_line.py b/tests/testutils/test_output_line.py
index 2a21ce1fd..304d6a0e4 100644
--- a/tests/testutils/test_output_line.py
+++ b/tests/testutils/test_output_line.py
@@ -14,7 +14,7 @@ from pylint.constants import PY38_PLUS
 from pylint.interfaces import HIGH, INFERENCE, Confidence
 from pylint.message import Message
 from pylint.testutils.output_line import OutputLine
-from pylint.typing import MessageLocationTuple
+from pylint.pl_typing import MessageLocationTuple
 
 
 @pytest.fixture()
diff --git a/tests/unittest_reporting.py b/tests/unittest_reporting.py
index ebc4a225f..505bf592a 100644
--- a/tests/unittest_reporting.py
+++ b/tests/unittest_reporting.py
@@ -19,7 +19,7 @@ from pylint import checkers
 from pylint.lint import PyLinter
 from pylint.reporters import BaseReporter
 from pylint.reporters.text import ParseableTextReporter, TextReporter
-from pylint.typing import FileItem
+from pylint.pl_typing import FileItem
 
 if TYPE_CHECKING:
     from pylint.reporters.ureports.nodes import Section
2025-01-23 00:58:54,820 - INFO - Grading answer for pylint-dev__pylint-7080...
2025-01-23 00:58:54,835 - INFO - report: {'pylint-dev__pylint-7080': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['tests/test_self.py::TestRunTC::test_ignore_path_recursive_current_dir']}, 'PASS_TO_PASS': {'success': ['tests/test_self.py::TestRunTC::test_pkginfo', 'tests/test_self.py::TestRunTC::test_all', 'tests/test_self.py::TestRunTC::test_no_ext_file', 'tests/test_self.py::TestRunTC::test_w0704_ignored', 'tests/test_self.py::TestRunTC::test_exit_zero', 'tests/test_self.py::TestRunTC::test_nonexistent_config_file', 'tests/test_self.py::TestRunTC::test_error_missing_arguments', 'tests/test_self.py::TestRunTC::test_no_out_encoding', 'tests/test_self.py::TestRunTC::test_parallel_execution', 'tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments', 'tests/test_self.py::TestRunTC::test_enable_all_works', 'tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled', 'tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports', 'tests/test_self.py::TestRunTC::test_reject_empty_indent_strings', 'tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error', 'tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing', 'tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes', 'tests/test_self.py::TestRunTC::test_information_category_disabled_by_default', 'tests/test_self.py::TestRunTC::test_error_mode_shows_no_score', 'tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default', 'tests/test_self.py::TestRunTC::test_confidence_levels', 'tests/test_self.py::TestRunTC::test_bom_marker', 'tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options', 'tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values', 'tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults', 'tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8', 'tests/test_self.py::TestRunTC::test_parseable_file_path', 'tests/test_self.py::TestRunTC::test_stdin[/mymodule.py]', 'tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py]', 'tests/test_self.py::TestRunTC::test_stdin_missing_modulename', 'tests/test_self.py::TestRunTC::test_relative_imports[False]', 'tests/test_self.py::TestRunTC::test_relative_imports[True]', 'tests/test_self.py::TestRunTC::test_stdin_syntaxerror', 'tests/test_self.py::TestRunTC::test_version', 'tests/test_self.py::TestRunTC::test_fail_under', 'tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[6-missing-function-docstring-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[7.5-missing-function-docstring-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[7.6-missing-function-docstring-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[-11-missing-function-docstring-fail_under_minus10.py-22]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-missing-function-docstring-fail_under_minus10.py-22]', 'tests/test_self.py::TestRunTC::test_fail_on[-9-missing-function-docstring-fail_under_minus10.py-22]', 'tests/test_self.py::TestRunTC::test_fail_on[-5-missing-function-docstring-fail_under_minus10.py-22]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_plus7_5.py-0]', 'tests/test_self.py::TestRunTC::test_fail_on[6-broad-except-fail_under_plus7_5.py-0]', 'tests/test_self.py::TestRunTC::test_fail_on[7.5-broad-except-fail_under_plus7_5.py-0]', 'tests/test_self.py::TestRunTC::test_fail_on[7.6-broad-except-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[-11-broad-except-fail_under_minus10.py-0]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-broad-except-fail_under_minus10.py-0]', 'tests/test_self.py::TestRunTC::test_fail_on[-9-broad-except-fail_under_minus10.py-22]', 'tests/test_self.py::TestRunTC::test_fail_on[-5-broad-except-fail_under_minus10.py-22]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-C0116-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-C-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-fake1,C,fake2-fail_under_plus7_5.py-16]', 'tests/test_self.py::TestRunTC::test_fail_on[-10-C0115-fail_under_plus7_5.py-0]', 'tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts0-0]', 'tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts1-0]', 'tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts2-16]', 'tests/test_self.py::TestRunTC::test_fail_on_edge_case[opts3-16]', 'tests/test_self.py::TestRunTC::test_modify_sys_path', 'tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory', 'tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory_with_pythonpath', 'tests/test_self.py::TestRunTC::test_import_plugin_from_local_directory_if_pythonpath_cwd', 'tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check', 'tests/test_self.py::TestRunTC::test_can_list_directories_without_dunder_init', 'tests/test_self.py::TestRunTC::test_jobs_score', 'tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath', 'tests/test_self.py::TestRunTC::test_output_file_valid_path', 'tests/test_self.py::TestRunTC::test_output_file_invalid_path_exits_with_code_32', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args0-0]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args1-0]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args2-0]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args3-6]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args4-6]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args5-22]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args6-22]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args7-6]', 'tests/test_self.py::TestRunTC::test_fail_on_exit_code[args8-22]', 'tests/test_self.py::TestRunTC::test_one_module_fatal_error', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args0-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args1-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args2-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args3-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args4-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args5-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args6-0]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args7-1]', 'tests/test_self.py::TestRunTC::test_fail_on_info_only_exit_code[args8-1]', 'tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[text-tests/regrtest_data/unused_variable.py:4:4:', 'tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[parseable-tests/regrtest_data/unused_variable.py:4:', 'tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[msvs-tests/regrtest_data/unused_variable.py(4):', 'tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[colorized-tests/regrtest_data/unused_variable.py:4:4:', 'tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_output_format_option[json-"message":', 'tests/test_self.py::TestRunTC::test_output_file_can_be_combined_with_custom_reporter', 'tests/test_self.py::TestRunTC::test_output_file_specified_in_rcfile', 'tests/test_self.py::TestRunTC::test_load_text_repoter_if_not_provided', 'tests/test_self.py::TestRunTC::test_regex_paths_csv_validator', 'tests/test_self.py::TestRunTC::test_max_inferred_for_complicated_class_hierarchy', 'tests/test_self.py::TestRunTC::test_regression_recursive', 'tests/test_self.py::TestRunTC::test_recursive', 'tests/test_self.py::TestRunTC::test_ignore_recursive', 'tests/test_self.py::TestRunTC::test_ignore_pattern_recursive', 'tests/test_self.py::TestRunTC::test_ignore_path_recursive', 'tests/test_self.py::TestRunTC::test_recursive_current_dir', 'tests/test_self.py::TestRunTC::test_regression_recursive_current_dir', 'tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command0-Emittable', 'tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command1-Enabled', 'tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command2-nonascii-checker]', "tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command3-Confidence(name='HIGH',", 'tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command4-pylint.extensions.empty_comment]', 'tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command5-Pylint', 'tests/test_self.py::TestCallbackOptions::test_output_of_callback_options[command6-Environment', 'tests/test_self.py::TestCallbackOptions::test_help_msg[args0-:unreachable', 'tests/test_self.py::TestCallbackOptions::test_help_msg[args1-No', 'tests/test_self.py::TestCallbackOptions::test_help_msg[args2---help-msg:', 'tests/test_self.py::TestCallbackOptions::test_generate_rcfile', 'tests/test_self.py::TestCallbackOptions::test_generate_config_disable_symbolic_names', 'tests/test_self.py::TestCallbackOptions::test_errors_only', 'tests/test_self.py::TestCallbackOptions::test_errors_only_functions_as_disable', 'tests/test_self.py::TestCallbackOptions::test_verbose', 'tests/test_self.py::TestCallbackOptions::test_enable_all_extensions'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for pylint-dev__pylint-7080: resolved: False
2025-01-23 00:58:54,835 - INFO - Attempting to stop container sweb.eval.pylint-dev__pylint-7080.20250123_004007...
2025-01-23 00:59:10,006 - INFO - Attempting to remove container sweb.eval.pylint-dev__pylint-7080.20250123_004007...
2025-01-23 00:59:10,037 - INFO - Container sweb.eval.pylint-dev__pylint-7080.20250123_004007 removed.
