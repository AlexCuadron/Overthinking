diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..eec9f91ca8 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -94,6 +94,12 @@ class Apps:
                         "Application labels aren't unique, "
                         "duplicates: %s" % app_config.label)

+                fixed_label = app_config.label.lower()
+                if fixed_label != app_config.label:
+                    import warnings
+                    warnings.warn(f"Converting app label {app_config.label} to lowercase {fixed_label}.", RuntimeWarning)
+                app_config.label = fixed_label
+
                 self.app_configs[app_config.label] = app_config
                 app_config.apps = self

diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..374267d2c7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,42 @@
+import os
+import subprocess
+import sys
+
+
+def main():
+    # Attempt to simulate the environment to reproduce the makemigrations error
+    # We'll create a minimal Django project or possibly attempt to run makemigrations directly.
+    # For demonstration, let's try running a typical Django management command:
+
+    # Here we assume /workspace/django__django__3.2 is the root of Django source
+    # In a real scenario, we'd install Django from source, then run e.g. manage.py
+    # But let's just run "python setup.py install" to install our local Django.
+
+    print("Installing local Django from source...")
+    result = subprocess.run([sys.executable, "setup.py", "install"], cwd="/workspace/django__django__3.2", stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+    print(result.stdout, result.stderr)
+
+    # Next, try to create a new project to demonstrate usage with an uppercase app name
+    # For simplicity, let's place the new test project in /workspace/django__django__3.2/testproj
+    project_dir = "/workspace/django__django__3.2/testproj"
+    if not os.path.exists(project_dir):
+        print("Creating test Django project 'testproj'...")
+        subprocess.run([sys.executable, "-m", "django", "startproject", "testproj"], cwd="/workspace/django__django__3.2", stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+
+    manage_py = os.path.join(project_dir, "manage.py")
+
+    # Modify settings to install the uppercase app name
+    # But since we don't have the actual "DJ_RegLogin" code in this repo, let's just show the point where we'd reproduce the error:
+    print("Running makemigrations to see if we can reproduce the error...")
+    result = subprocess.run([sys.executable, manage_py, "makemigrations"], cwd=project_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+    print(result.stdout)
+    print(result.stderr)
+    print("Return code:", result.returncode)
+    if result.returncode != 0:
+        print("Error encountered - likely the same error described in PR.")
+    else:
+        print("No error encountered - we might need adjustments to properly reproduce.")
+
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/testproj/db.sqlite3 b/testproj/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproj/manage.py b/testproj/manage.py
new file mode 100755
index 0000000000..0e1a0b64a6
--- /dev/null
+++ b/testproj/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproj/testproj/__init__.py b/testproj/testproj/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproj/testproj/asgi.py b/testproj/testproj/asgi.py
new file mode 100644
index 0000000000..02b35ed559
--- /dev/null
+++ b/testproj/testproj/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproj project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')
+
+application = get_asgi_application()
diff --git a/testproj/testproj/settings.py b/testproj/testproj/settings.py
new file mode 100644
index 0000000000..53d29d9d3c
--- /dev/null
+++ b/testproj/testproj/settings.py
@@ -0,0 +1,120 @@
+"""
+Django settings for testproj project.
+
+Generated by 'django-admin startproject' using Django 3.2.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'y-qh12&o-tnutb(x+@2w&rnv8lrhikakhqq+hkj@-t+oe74%qk'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproj.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproj.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproj/testproj/urls.py b/testproj/testproj/urls.py
new file mode 100644
index 0000000000..5a1c72f4ac
--- /dev/null
+++ b/testproj/testproj/urls.py
@@ -0,0 +1,21 @@
+"""testproj URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/testproj/testproj/wsgi.py b/testproj/testproj/wsgi.py
new file mode 100644
index 0000000000..e66cfcd7cb
--- /dev/null
+++ b/testproj/testproj/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproj project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')
+
+application = get_wsgi_application()
