diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 2fef3edb..fabf5d0a 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3481,17 +3481,27 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)

     def integrate(
-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
     ) -> "DataArray":
         """ integrate the array with the trapezoidal rule.

+        if isinstance(coord, str):
+            coords = [coord]
+        else:
+            coords = coord
+
+        ds = self._to_temp_dataset()
+        for c in coords:
+            ds = ds.integrate(c, datetime_unit)
+        return self._from_temp_dataset(ds)
+
         .. note::
-            This feature is limited to simple cartesian geometry, i.e. dim
+            This feature is limited to simple cartesian geometry, i.e. coord
             must be one dimensional.

         Parameters
         ----------
-        dim : hashable, or sequence of hashable
+        coord : hashable, or sequence of hashable
             Coordinate(s) used for the integration.
         datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
                          "ps", "fs", "as"}, optional
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index a73e299e..47d85a55 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -5952,11 +5952,11 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):

         variables = {}
         for k, v in self.variables.items():
-            if k in self.data_vars and dim in v.dims and k not in self.coords:
+            if k in self.data_vars and coord in v.dims and k not in self.coords:
                 if _contains_datetime_like_objects(v):
                     v = v._to_numeric(datetime_unit=datetime_unit)
                 grad = duck_array_ops.gradient(
-                    v.data, coord_var, edge_order=edge_order, axis=v.get_axis_num(dim)
+                    v.data, coord_var, edge_order=edge_order, axis=v.get_axis_num(coord)
                 )
                 variables[k] = Variable(v.dims, grad)
             else:
@@ -5964,7 +5964,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
         return self._replace(variables)

     def integrate(self, coord, datetime_unit=None):
-        """ integrate the array with the trapezoidal rule.
+        """ integrate the dataset with the trapezoidal rule.

         .. note::
             This feature is limited to simple cartesian geometry, i.e. coord
