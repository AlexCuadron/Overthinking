diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index b068fbb1d8..6e28ea3049 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1318,23 +1318,9 @@ def _check_1d(x):
             #
             # This code should correctly identify and coerce to a
             # numpy array all pandas versions.
-            with warnings.catch_warnings(record=True) as w:
-                warnings.filterwarnings(
-                    "always",
-                    category=Warning,
-                    message='Support for multi-dimensional indexing')
-
-                ndim = x[:, None].ndim
-                # we have definitely hit a pandas index or series object
-                # cast to a numpy array.
-                if len(w) > 0:
-                    return np.asanyarray(x)
-            # We have likely hit a pandas object, or at least
-            # something where 2D slicing does not result in a 2D
-            # object.
-            if ndim < 2:
-                return np.atleast_1d(x)
-            return x
+            # Force conversion to numpy array.
+            return np.asanyarray(x)
+            return np.asanyarray(x)
         # In pandas 1.1.0, multidimensional indexing leads to an
         # AssertionError for some Series objects, but should be
         # IndexError as described in
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..a414b40547
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,16 @@
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+
+np.random.seed(1)
+matplotlib.rcParams["text.usetex"] = True
+
+dates = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
+data = np.random.rand(100)
+
+fig, ax = plt.subplots(constrained_layout=True)
+ax.plot(dates, data)
+plt.savefig("reproduce_bug_output.png")
+
+print(f"Created reproduce_bug_output.png using Matplotlib version: {matplotlib.__version__}")
\ No newline at end of file
