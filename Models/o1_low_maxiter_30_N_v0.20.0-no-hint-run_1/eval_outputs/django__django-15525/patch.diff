diff --git a/default.db b/default.db
new file mode 100644
index 0000000000..2acd01abdb
Binary files /dev/null and b/default.db differ
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..44131386f7
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,20 @@
+#!/usr/bin/env python3
+import os
+import sys
+
+def main():
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django.conf.global_settings")
+    # Alternatively, point to a specific settings file if you have one,
+    # e.g. "myproject.settings". For demonstration, we use global_settings.
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/other.db b/other.db
new file mode 100644
index 0000000000..ee7a28f189
Binary files /dev/null and b/other.db differ
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..d8f8ba92f6
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,31 @@
+import subprocess
+import sys
+import os
+
+def main():
+    # Hypothetical reproduction script for loading a fixture with natural keys
+    # on a non-default DB. This expects a Django project structure with a manage.py
+    # or an equivalent entry point in the environment that can call loaddata.
+    # For demonstration, we'll assume we have a 'testbug' fixture named books.json
+    # and a second database named 'other'.
+    # Modify as needed for your local environment.
+
+    fixture_path = 'books.json'
+    database_name = 'other'
+    command = [
+        sys.executable,
+        'manage.py',  # Adjust if manage.py is in a different location
+        'loaddata',
+        '--database', database_name,
+        '--format', 'json',
+        fixture_path
+    ]
+    print(f"Running: {' '.join(command)}")
+    try:
+        subprocess.check_call(command)
+    except subprocess.CalledProcessError as e:
+        print("Error reproducing the issue:", e)
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/testbug/__init__.py b/testbug/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testbug/apps.py b/testbug/apps.py
new file mode 100644
index 0000000000..4f581f74e2
--- /dev/null
+++ b/testbug/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestbugConfig(AppConfig):
+    name = 'testbug'
\ No newline at end of file
diff --git a/testbug/books.json b/testbug/books.json
new file mode 100644
index 0000000000..9a5345e1e3
--- /dev/null
+++ b/testbug/books.json
@@ -0,0 +1,17 @@
+[
+  {
+    "model": "testbug.author",
+    "fields": {
+      "name": "JR Tolkien"
+    }
+  },
+  {
+    "model": "testbug.book",
+    "fields": {
+      "title": "The Ring",
+      "author": [
+        "JR Tolkien"
+      ]
+    }
+  }
+]
\ No newline at end of file
diff --git a/testbug/migrations/0001_initial.py b/testbug/migrations/0001_initial.py
new file mode 100644
index 0000000000..54d48ade80
--- /dev/null
+++ b/testbug/migrations/0001_initial.py
@@ -0,0 +1,39 @@
+# Generated by Django 4.1.dev20220318075532 on 2025-01-22 17:13
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Author",
+            fields=[
+                ("id", models.AutoField(primary_key=True, serialize=False)),
+                ("name", models.CharField(max_length=255, unique=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Book",
+            fields=[
+                ("id", models.AutoField(primary_key=True, serialize=False)),
+                ("title", models.CharField(max_length=255)),
+                (
+                    "author",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.DO_NOTHING,
+                        related_name="books",
+                        to="testbug.author",
+                    ),
+                ),
+            ],
+            options={
+                "unique_together": {("title", "author")},
+            },
+        ),
+    ]
diff --git a/testbug/migrations/__init__.py b/testbug/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testbug/models.py b/testbug/models.py
new file mode 100644
index 0000000000..6a155d02a9
--- /dev/null
+++ b/testbug/models.py
@@ -0,0 +1,42 @@
+from django.db import models
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author_name):
+        from testbug.models import Author
+        author_obj, _ = Author.objects.using(self._db).get_or_create(name=author_name)
+        obj, _ = self.get_or_create(title=title, author=author_obj)
+        return obj
+
+class Book(models.Model):
+    id = models.AutoField(primary_key=True)
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+    objects = BookManager()
+
+    def natural_key(self):
+        try:
+            return (self.title,) + self.author.natural_key()
+        except Author.DoesNotExist:
+            return (self.title,)
+
+
+    class Meta:
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
\ No newline at end of file
diff --git a/testbug/settings.py b/testbug/settings.py
new file mode 100644
index 0000000000..c894684b6d
--- /dev/null
+++ b/testbug/settings.py
@@ -0,0 +1,22 @@
+SECRET_KEY = "fake-key"
+DEBUG = True
+ALLOWED_HOSTS = ["*"]
+
+INSTALLED_APPS = [
+    "django.contrib.contenttypes",
+    "django.contrib.auth",
+    "testbug.apps.TestbugConfig",
+]
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": "default.db",
+    },
+    "other": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": "other.db",
+    },
+}
+
+ROOT_URLCONF = "testbug.urls"
\ No newline at end of file
diff --git a/testbug/urls.py b/testbug/urls.py
new file mode 100644
index 0000000000..2012ebe144
--- /dev/null
+++ b/testbug/urls.py
@@ -0,0 +1 @@
+urlpatterns = []
\ No newline at end of file
