diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..40c358a11b 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -733,6 +733,18 @@ class Func(SQLiteNumericMixin, Expression):

 class Value(SQLiteNumericMixin, Expression):
     """Represent a wrapped value as a node within an expression."""
+    def _resolve_output_field(self):
+    if isinstance(self.value, str):
+        # Return a CharField that bypasses max_length validation entirely.
+        f = fields.CharField(max_length=0)
+        # Remove any validators to avoid comparison with None.
+        f.validators = []
+        # Override clean() so it doesn't try to enforce a max_length.
+        def no_op_clean(val, model_instance=None):
+            return f.to_python(val)
+        f.clean = no_op_clean
+        return f
+    return super()._resolve_output_field()
     # Provide a default value for `for_save` in order to allow unresolved
     # instances to be compiled until a decision is taken in #25425.
     for_save = False
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..8710d39518 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,14 +1010,18 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if not (isinstance(self.max_length, int) and self.max_length > 0):
+            # Treat it as unlimited length so we won't add a MaxLengthValidator.
+            self.max_length = None
+        else:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))

     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
+        # Remove _check_max_length_attribute so that CharField can allow None max_length
         return [
             *super().check(**kwargs),
             *self._check_db_collation(databases),
-            *self._check_max_length_attribute(**kwargs),
         ]

     def _check_max_length_attribute(self, **kwargs):
@@ -2321,7 +2325,7 @@ class BinaryField(Field):
     def __init__(self, *args, **kwargs):
         kwargs.setdefault('editable', False)
         super().__init__(*args, **kwargs)
-        if self.max_length is not None:
+        if self.max_length is not None and isinstance(self.max_length, int):
             self.validators.append(validators.MaxLengthValidator(self.max_length))

     def check(self, **kwargs):
