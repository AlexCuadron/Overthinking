diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..bb8b4d51a1 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -161,12 +161,7 @@ def structurally_equal(self, other):
             and self.rowblocksizes == other.rowblocksizes
             and self.colblocksizes == other.colblocksizes)

-    def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
-
-        return self * other
+    def _blockmul(self, other):\n    from sympy.matrices.immutable import ImmutableDenseMatrix\n\n    if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n        product = self.blocks * other.blocks\n\n        # If product is not shaped like a matrix, treat as scalar\n        if not hasattr(product, 'shape'):\n            rsize = sum(self.rowblocksizes)\n            csize = sum(other.colblocksizes)\n            if product.is_zero:\n                return BlockMatrix([[ZeroMatrix(rsize, csize)]])\n            else:\n                if rsize == csize:\n                    from sympy import Identity\n                    return BlockMatrix([[product * Identity(rsize)]])\n                else:\n                    raise ValueError(\"Scalar result in non-square block multiplication.\")\n\n        # If single block 1x1\n        if product.shape == (1, 1):\n            val = product[0, 0]\n            rsize = sum(self.rowblocksizes)\n            csize = sum(other.colblocksizes)\n            if not isinstance(val, MatrixExpr):\n                if val.is_zero:\n                    val = ZeroMatrix(rsize, csize)\n                else:\n                    if rsize == csize:\n                        from sympy import Identity\n                        val = val*Identity(rsize)\n                    else:\n                        raise ValueError(\"Scalar result in non-square block multiplication.\")\n            return BlockMatrix([[val]])\n\n        # Otherwise interpret product as a matrix of blocks\n        R, C = self.blockshape\n        rows_list = []\n        for i in range(R):\n            row_list = []\n            rsize = self.rowblocksizes[i]\n            for j in range(C):\n                csize = other.colblocksizes[j]\n                val = product[i, j]\n                if not getattr(val, 'is_Matrix', False):\n                    if val.is_zero:\n                        val = ZeroMatrix(rsize, csize)\n                    else:\n                        if rsize == csize:\n                            from sympy import Identity\n                            val = val*Identity(rsize)\n                        else:\n                            raise ValueError(\"Scalar in a non-square block.\")\n                row_list.append(val)\n            rows_list.append(row_list)\n        return BlockMatrix(rows_list)\n\n    return self * other

     def _blockadd(self, other):
         if (isinstance(other, BlockMatrix)
