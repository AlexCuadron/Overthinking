diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..b20f5e3543 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -251,7 +251,8 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                # Use the reference value instead of 1.0 for sliced-out dimensions
+                world_arrays_new.append(self._wcs.wcs.crval[iworld])

         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..bf0fd258ad
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,61 @@
+import sys
+
+def main():
+    import numpy as np
+    import astropy.wcs
+    from astropy.coordinates import SkyCoord
+    import astropy.units as u
+    import astropy.wcs.wcsapi
+
+    print("Setting up 3D WCS...")
+    nx = 100
+    ny = 25
+    nz = 2
+    wcs_header = {
+        'WCSAXES': 3,
+        'CRPIX1': (nx + 1)/2,
+        'CRPIX2': (ny + 1)/2,
+        'CRPIX3': 1.0,
+        'PC1_1': 0.0,
+        'PC1_2': -1.0,
+        'PC1_3': 0.0,
+        'PC2_1': 1.0,
+        'PC2_2': 0.0,
+        'PC2_3': -1.0,
+        'CDELT1': 5,
+        'CDELT2': 5,
+        'CDELT3': 0.055,
+        'CUNIT1': 'arcsec',
+        'CUNIT2': 'arcsec',
+        'CUNIT3': 'Angstrom',
+        'CTYPE1': 'HPLN-TAN',
+        'CTYPE2': 'HPLT-TAN',
+        'CTYPE3': 'WAVE',
+        'CRVAL1': 0.0,
+        'CRVAL2': 0.0,
+        'CRVAL3': 1.05,
+    }
+
+    fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+    print("Performing world_to_pixel on full WCS with a known world point...")
+    pt = SkyCoord(0*u.arcsec, 0*u.arcsec, frame="icrs")
+    px_full = fits_wcs.world_to_pixel(pt.ra, pt.dec, 1.05*u.angstrom)
+
+    print("Full WCS world_to_pixel returned:", px_full)
+
+    print("Slicing down to 2D on wavelength dimension...")
+    ll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)
+    hl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)
+
+    print("Performing same world_to_pixel on the sliced WCS...")
+    px_sliced = hl_sliced_wcs.world_to_pixel(pt.ra, pt.dec)
+    print("Sliced WCS world_to_pixel returned:", px_sliced)
+
+    if not np.isfinite(px_sliced[0]):
+        print("BUG DETECTED: The first coordinate is not finite!")
+    else:
+        print("No bug detected. The first coordinate is finite.")
+
+if __name__ == "__main__":
+    sys.exit(main())
\ No newline at end of file
