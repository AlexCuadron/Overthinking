diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 802fd3c997..fe9b53c91f 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -74,6 +74,30 @@ class _axis_method_wrapper:
         def wrapper(self, *args, **kwargs):
             return get_method(self)(*args, **kwargs)

+# Re-apply hidden state for shared axes after clearing
+x_sibs = self.get_shared_x_axes().get_siblings(self)
+if x_sibs:
+    # Use one sibling as reference for x-axis tick/label visibility
+    ref = x_sibs[0] if x_sibs[0] is not self else (x_sibs[1] if len(x_sibs) > 1 else None)
+    if ref:
+        self.xaxis.set_tick_params(
+            labeltop=ref.xaxis.get_tick_params()['labeltop'],
+            labelbottom=ref.xaxis.get_tick_params()['labelbottom'],
+        )
+        self.spines['top'].set_visible(ref.spines['top'].get_visible())
+        self.spines['bottom'].set_visible(ref.spines['bottom'].get_visible())
+
+y_sibs = self.get_shared_y_axes().get_siblings(self)
+if y_sibs:
+    # Use one sibling as reference for y-axis tick/label visibility
+    ref = y_sibs[0] if y_sibs[0] is not self else (y_sibs[1] if len(y_sibs) > 1 else None)
+    if ref:
+        self.yaxis.set_tick_params(
+            labelleft=ref.yaxis.get_tick_params()['labelleft'],
+            labelright=ref.yaxis.get_tick_params()['labelright'],
+        )
+        self.spines['left'].set_visible(ref.spines['left'].get_visible())
+        self.spines['right'].set_visible(ref.spines['right'].get_visible())
         wrapper.__module__ = owner.__module__
         wrapper.__name__ = name
         wrapper.__qualname__ = f"{owner.__qualname__}.{name}"
