diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..977e078ec5 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2131,27 +2131,114 @@ def is_primitive(self, randomized=True):
         return True

     def minimal_blocks(self, randomized=True):
-        '''
-        For a transitive group, return the list of all minimal
-        block systems. If a group is intransitive, return `False`.
+    """
+    A fully replaced minimal_blocks method to avoid IndexError.
+    If a group is intransitive, return False. Otherwise, returns a list
+    of minimal block systems.

-        Examples
-        ========
-        >>> from sympy.combinatorics import Permutation
-        >>> from sympy.combinatorics.perm_groups import PermutationGroup
-        >>> from sympy.combinatorics.named_groups import DihedralGroup
-        >>> DihedralGroup(6).minimal_blocks()
-        [[0, 1, 0, 1, 0, 1], [0, 1, 2, 0, 1, 2]]
-        >>> G = PermutationGroup(Permutation(1,2,5))
-        >>> G.minimal_blocks()
-        False
+    This method ensures we delete elements from lists safely by using
+    a to_delete array and removing from the end backward.

-        See Also
-        ========
+    Parameters
+    ==========
+    randomized : bool
+        Randomize the stabilizer, as previously done.
+
+    Returns
+    =======
+    list or bool
+        Returns a list of minimal block systems if transitive,
+        otherwise False.
+    """
+    def _number_blocks(blocks):
+        n = len(blocks)
+        appeared = {}
+        m = 0
+        b = [None]*n
+        for i in range(n):
+            if blocks[i] not in appeared:
+                appeared[blocks[i]] = m
+                b[i] = m
+                m += 1
+            else:
+                b[i] = appeared[blocks[i]]
+        return tuple(b), m

-        minimal_block, is_transitive, is_primitive
+    if not self.is_transitive():
+        return False

-        '''
+    blocks = []
+    num_blocks = []
+    rep_blocks = []
+
+    if randomized:
+        random_stab_gens = []
+        v = self.schreier_vector(0)
+        for i in range(len(self)):
+            random_stab_gens.append(self.random_stab(0, v))
+        stab = PermutationGroup(random_stab_gens)
+    else:
+        stab = self.stabilizer(0)
+
+    orbits = stab.orbits()
+    for orb in orbits:
+        if len(orb) == 0:
+            continue
+        x = orb.pop()
+        if x != 0:
+            block = self.minimal_block([0, x])
+            nb_tuple, m = _number_blocks(block)
+            rep = {j for j in range(self.degree) if nb_tuple[j] == 0}
+
+            minimal = True
+            to_delete = []
+
+            for i, r in enumerate(rep_blocks):
+                if len(r) > len(rep) and rep.issubset(r):
+                    to_delete.append(i)
+                elif len(r) < len(rep) and r.issubset(rep):
+                    minimal = False
+                    break
+
+            for j in reversed(to_delete):
+                num_blocks.pop(j)
+                blocks.pop(j)
+            rep_blocks = [r for idx, r in enumerate(rep_blocks) if idx not in to_delete]
+
+            if minimal and nb_tuple not in num_blocks:
+                blocks.append(block)
+                num_blocks.append(nb_tuple)
+                rep_blocks.append(rep)
+
+    return blocks
+    """
+    For a transitive group, return the list of all minimal block systems.
+    If a group is intransitive, return ``False``.
+
+    This version avoids simultaneous list-index deletion, which can cause
+    IndexError. Instead we mark indices to delete and remove them safely
+    at once in reverse order.
+
+    Returns
+    =======
+    list
+        A list of all minimal block systems if transitive, else ``False``.
+
+    Examples
+    ========
+    >>> from sympy.combinatorics import Permutation
+    >>> from sympy.combinatorics.perm_groups import PermutationGroup
+    >>> from sympy.combinatorics.named_groups import DihedralGroup
+    >>> DihedralGroup(6).minimal_blocks()
+    [[0, 1, 0, 1, 0, 1], [0, 1, 2, 0, 1, 2]]
+    >>> G = PermutationGroup(Permutation(1,2,5))
+    >>> G.minimal_blocks()
+    False
+
+    See Also
+    ========
+    minimal_block, is_transitive, is_primitive
+    """
         def _number_blocks(blocks):
             # number the blocks of a block system
             # in order and return the number of
@@ -2194,18 +2281,20 @@ def _number_blocks(blocks):
                 # check if the system is minimal with
                 # respect to the already discovere ones
                 minimal = True
-                to_remove = []
+                to_delete = []
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
+                        to_delete.append(i)
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
-                # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                for j in reversed(to_delete):
+                    # Use pop to avoid IndexError
+                    num_blocks.pop(j)
+                    blocks.pop(j)
+                rep_blocks = [r for i, r in enumerate(rep_blocks) if i not in to_delete]

                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
