diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..f934c37ee6 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -22,6 +22,7 @@ should be in a separate module, which should be imported in this package's
 imported.  Placing the transformation functions in separate modules avoids
 circular dependencies, because they need references to the frame classes.
 """
+from .itrs_observed_transforms import itrs_to_observed, observed_to_itrs

 from .baseradec import BaseRADecFrame
 from .icrs import ICRS
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..816f52705a
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,50 @@
+import numpy as np
+from astropy import units as u
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+def itrs_to_observed_mat(observed_frame):
+
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        elat = lat.to_value(u.radian)
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    else:
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    # This treats the ITRS position as time invariant. We simply transform from ITRS
+    # to topocentric ITRS, and then rotate into the observer's local AltAz or HADec frame.
+
+    topocentric_itrs_repr = (
+        itrs_coo.cartesian
+        - observed_frame.location.get_itrs().cartesian
+    )
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    topocentric_itrs_repr = observed_coo.cartesian.transform(
+        matrix_transpose(itrs_to_observed_mat(observed_coo))
+    )
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
\ No newline at end of file
