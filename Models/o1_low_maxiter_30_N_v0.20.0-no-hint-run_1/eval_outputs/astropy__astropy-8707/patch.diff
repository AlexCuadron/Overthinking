diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..cf308586ad 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -545,7 +545,9 @@ class Card(_Verify):
                 not self.comment)

     @classmethod
-    def fromstring(cls, image):
+    def fromstring(cls, image):
+        if isinstance(image, bytes):
+            image = image.decode('ascii', errors='strict')
         """
         Construct a `Card` object from a (raw) string. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..987385f741 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -328,6 +328,8 @@ class Header:

     @classmethod
     def fromstring(cls, data, sep=''):
+        if isinstance(data, bytes):
+            data = data.decode('ascii', errors='strict')
         """
         Creates an HDU header from a byte string containing the entire header
         data.
@@ -374,10 +376,15 @@ class Header:
             idx = end_idx + len(sep)

             if image:
+                if isinstance(next_image, bytes):
+                    next_image = next_image.decode('ascii', errors='strict')
                 if next_image[:8] == 'CONTINUE':
                     image.append(next_image)
                     continue
-                cards.append(Card.fromstring(''.join(image)))
+                cards.append(Card.fromstring(''.join(
+                    part.decode('ascii', errors='strict') if isinstance(part, bytes) else part
+                    for part in image
+                )))

             if require_full_cardlength:
                 if next_image == END_CARD:
