diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..65f9642894 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -540,6 +540,22 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):
         super().__init__(name, unique_together)


+def reduce(self, operation, app_label):
+    result = super().reduce(operation, app_label)
+    if result is not False:
+        return result
+
+    if (
+        isinstance(operation, self.__class__) and
+        self.name_lower == operation.name_lower
+    ):
+        if not self.option_value and operation.option_value:
+            merged_op = self.__class__(self.name, operation.option_value)
+            return [merged_op]
+        if not operation.option_value and self.option_value:
+            merged_op = self.__class__(self.name, self.option_value)
+            return [merged_op]
+    return False
 class AlterIndexTogether(AlterTogetherOptionOperation):
     """
     Change the value of index_together to the target one.
@@ -554,6 +570,22 @@ class AlterIndexTogether(AlterTogetherOptionOperation):
 class AlterOrderWithRespectTo(ModelOptionOperation):
     """Represent a change with the order_with_respect_to option."""

+def reduce(self, operation, app_label):
+    result = super().reduce(operation, app_label)
+    if result is not False:
+        return result
+
+    if (
+        isinstance(operation, self.__class__) and
+        self.name_lower == operation.name_lower
+    ):
+        if not self.option_value and operation.option_value:
+            merged_op = self.__class__(self.name, operation.option_value)
+            return [merged_op]
+        if not operation.option_value and self.option_value:
+            merged_op = self.__class__(self.name, self.option_value)
+            return [merged_op]
+    return False
     option_name = 'order_with_respect_to'

     def __init__(self, name, order_with_respect_to):
