diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py
index 4532fd1896..c41123c2a6 100644
--- a/sympy/matrices/dense.py
+++ b/sympy/matrices/dense.py
@@ -111,7 +111,20 @@ def _force_mutable(x):
 class MutableDenseMatrix(DenseMatrix, MutableRepMatrix):

     def simplify(self, **kwargs):
-        """Applies simplify to the elements of a matrix in place.
+    """Applies simplify to the elements of a matrix in place.
+
+    This is a shortcut for M.applyfunc(lambda x: simplify(x, ratio, measure))
+    See Also
+    ========
+    sympy.simplify.simplify.simplify
+    """
+    from sympy.simplify.simplify import simplify as _simplify
+    for (i, j), element in self.todok().items():
+        self[i, j] = _simplify(element, **kwargs)
+
+def hermite_normal_form(self, D=None, check_rank=False):
+    from sympy.matrices.normalforms import hermite_normal_form
+    return hermite_normal_form(self, D=D, check_rank=check_rank)

         This is a shortcut for M.applyfunc(lambda x: simplify(x, ratio, measure))

diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py
index f0acde7774..55f7208dff 100644
--- a/sympy/matrices/matrices.py
+++ b/sympy/matrices/matrices.py
@@ -342,6 +342,10 @@ def elementary_row_op(self, op="n->kn", row=None, k=None, row1=None, row2=None):


 class MatrixSubspaces(MatrixReductions):
+    def hermite_normal_form(self, D=None, check_rank=False):
+        from sympy.matrices.normalforms import hermite_normal_form
+        return hermite_normal_form(self, D=D, check_rank=check_rank)
+
     """Provides methods relating to the fundamental subspaces of a matrix.
     Should not be instantiated directly. See ``subspaces.py`` for their
     implementations."""
diff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py
index 30f5534b08..5138e639a4 100644
--- a/sympy/polys/matrices/normalforms.py
+++ b/sympy/polys/matrices/normalforms.py
@@ -235,7 +235,7 @@ def _hermite_normal_form(A):
         # way to the left. In this case, we are still working on the same pivot
         # col for the next row. Therefore:
         if b == 0:
-            k += 1
+            pass
         # If the pivot entry is nonzero, then we want to reduce all entries to its
         # right in the sense of the division algorithm, i.e. make them all remainders
         # w.r.t. the pivot as divisor.
