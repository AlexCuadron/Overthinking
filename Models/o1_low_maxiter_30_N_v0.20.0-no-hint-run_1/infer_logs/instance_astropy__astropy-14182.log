2025-01-22 22:55:42,546 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_5v93not0y0l7c6um_u9zk9ldda9d7wsfd
2025-01-22 23:00:11,203 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_5v93not0y0l7c6um_u9zk9ldda9d7wsfd] build finished.
2025-01-22 23:00:11,220 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_5v93not0y0l7c6um_u9zk9ldda9d7wsfd] with more generic tag [oh_v0.20.0_5v93not0y0l7c6um]
2025-01-22 23:00:11,222 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_5v93not0y0l7c6um_u9zk9ldda9d7wsfd, oh_v0.20.0_5v93not0y0l7c6um] built successfully
2025-01-22 23:00:11,234 - INFO - [runtime ee3f1959-d3d9-45d8-b459-5fbc251488f4-f505b59262879a90] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_5v93not0y0l7c6um_u9zk9ldda9d7wsfd
2025-01-22 23:00:12,423 - INFO - [runtime ee3f1959-d3d9-45d8-b459-5fbc251488f4-f505b59262879a90] Container started: openhands-runtime-ee3f1959-d3d9-45d8-b459-5fbc251488f4-f505b59262879a90. VSCode URL: None
2025-01-22 23:00:12,423 - INFO - [runtime ee3f1959-d3d9-45d8-b459-5fbc251488f4-f505b59262879a90] Waiting for client to become ready at http://localhost:31158...
2025-01-22 23:00:46,529 - INFO - [runtime ee3f1959-d3d9-45d8-b459-5fbc251488f4-f505b59262879a90] Runtime is ready.
2025-01-22 23:00:47,171 - INFO - ------------------------------
2025-01-22 23:00:47,178 - INFO - BEGIN Runtime Initialization Fn
2025-01-22 23:00:47,178 - INFO - ------------------------------
2025-01-22 23:00:47,178 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=astropy__astropy-14182' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-22 23:00:47,800 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:47,801 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-22 23:00:48,423 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:48,423 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-22 23:00:49,043 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:49,050 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-22 23:00:49,670 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=astropy__astropy-14182
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:49,671 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-22 23:00:50,291 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:50,291 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-22 23:00:50,291 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-22 23:00:51,416 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: astropy__astropy__5.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:51,426 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/astropy__astropy__5.1
2025-01-22 23:00:52,048 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:52,048 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-22 23:00:52,671 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at a5917978be Merge pull request #14172 from astropy/pre-commit-ci-update-config
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:52,672 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-22 23:00:53,299 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:53,299 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-22 23:00:53,924 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:53,924 - INFO - ------------------------------
2025-01-22 23:00:53,924 - INFO - END Runtime Initialization Fn
2025-01-22 23:00:53,925 - INFO - ------------------------------
2025-01-22 23:00:53,926 - INFO - Function calling not enabled for model openai/o1. Mocking function calling via prompting.
2025-01-22 23:00:53,933 - INFO - [runtime ee3f1959-d3d9-45d8-b459-5fbc251488f4-f505b59262879a90] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-22 23:00:53,950 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-22 23:00:53,958 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-22 23:00:56,722 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-22 23:01:02,342 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-22 23:01:07,049 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-22 23:01:09,667 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-22 23:01:12,260 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-22 23:01:17,249 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-22 23:01:22,947 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-22 23:01:29,944 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-22 23:01:41,438 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-22 23:02:08,325 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-22 23:02:26,814 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-22 23:02:46,917 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-22 23:02:54,273 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-22 23:03:01,143 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-22 23:03:07,992 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-22 23:03:11,129 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-22 23:03:33,824 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-22 23:03:40,248 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-22 23:03:47,017 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-22 23:03:57,090 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-22 23:04:00,082 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-22 23:04:09,282 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-22 23:04:13,212 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-22 23:04:18,253 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-22 23:04:25,103 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-22 23:04:33,239 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-22 23:04:44,040 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-22 23:04:48,210 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-22 23:04:49,197 - INFO - ------------------------------
2025-01-22 23:04:49,198 - INFO - BEGIN Runtime Completion Fn
2025-01-22 23:04:49,198 - INFO - ------------------------------
2025-01-22 23:04:49,198 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/astropy__astropy__5.1
2025-01-22 23:04:49,825 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:04:49,825 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-22 23:04:50,446 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:04:50,456 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-22 23:04:51,081 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:04:51,084 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached a5917978be39d13cd90b517e1de4e7a539ffaa48
2025-01-22 23:04:51,709 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0dc5c0fd1ab5",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/astropy/io/ascii/connect.py b/astropy/io/ascii/connect.py
index 1501e45035..d1e6cb9f86 100644
--- a/astropy/io/ascii/connect.py
+++ b/astropy/io/ascii/connect.py
@@ -25,7 +25,11 @@ def io_write(format, table, filename, **kwargs):
     if format != "ascii":
         format = re.sub(r"^ascii\.", "", format)
         kwargs["format"] = format
-    return write(table, filename, **kwargs)
+    header_rows = kwargs.pop("header_rows", None)
+result = write(table, filename, **kwargs)
+if header_rows is not None and hasattr(table, "write") and hasattr(table.write, "header_rows"):
+    table.write.header_rows = header_rows
+return result


 def io_identify(suffix, origin, filepath, fileobj, *args, **kwargs):
diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py
index 381b5b13db..98f7c0ac51 100644
--- a/astropy/io/ascii/core.py
+++ b/astropy/io/ascii/core.py
@@ -1812,7 +1812,14 @@ def _get_writer(Writer, fast_writer, **kwargs):
         return FAST_CLASSES[f"fast_{Writer._format_name}"](**kwargs)

     writer_kwargs = {k: v for k, v in kwargs.items() if k not in extra_writer_pars}
-    writer = Writer(**writer_kwargs)
+    # Temporarily strip out "header_rows" if present to avoid errors in Writer constructor
+header_rows = writer_kwargs.pop("header_rows", None)
+writer = Writer(**writer_kwargs)
+if header_rows is not None:
+    # If the writer supports a "header_rows" concept, store it somewhere
+    # This way, it can still be used by the writer if it wants.
+    if hasattr(writer, "header_rows"):
+        writer.header_rows = header_rows

     if "delimiter" in kwargs:
         writer.header.splitter.delimiter = kwargs["delimiter"]
diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..ca4cb6107a 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -32,6 +32,8 @@ class SimpleRSTData(FixedWidthData):
     splitter_class = FixedWidthTwoLineDataSplitter


+from .fixedwidth import FixedWidth
+
 class RST(FixedWidth):
     """reStructuredText simple format table.

@@ -57,8 +59,20 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader

-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+
+def __init__(self, **kwargs):
+    # Safely gather 'header_rows' if provided from user
+    header_rows = kwargs.pop('header_rows', None)
+    # Provide default arguments that RST expects
+    if 'delimiter_pad' not in kwargs:
+        kwargs['delimiter_pad'] = None
+    if 'bookend' not in kwargs:
+        kwargs['bookend'] = False
+    # Call parent constructor
+    super().__init__(**kwargs)
+    # If user specified 'header_rows', store it in the base class
+    if header_rows is not None:
+        self.header_rows = header_rows

     def write(self, lines):
         lines = super().write(lines)
diff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py
index 993dacf512..5af04188fa 100644
--- a/astropy/io/ascii/ui.py
+++ b/astropy/io/ascii/ui.py
@@ -972,7 +972,12 @@ def write(
         fast_writer = False

     Writer = _get_format_class(format, Writer, "Writer")
-    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)
+    # Remove "header_rows" to avoid errors in Writer constructor
+hr = kwargs.pop("header_rows", None)
+writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)
+# If we popped header_rows, store it on the writer if possible
+if hr is not None and hasattr(writer, "header_rows"):
+    writer.header_rows = hr
     if writer._format_name in core.FAST_CLASSES:
         writer.write(table, output)
         return
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:04:51,736 - INFO - ------------------------------
2025-01-22 23:04:51,736 - INFO - END Runtime Completion Fn
2025-01-22 23:04:51,736 - INFO - ------------------------------
2025-01-22 23:04:51,736 - INFO - Got git diff for instance astropy__astropy-14182:
--------
diff --git a/astropy/io/ascii/connect.py b/astropy/io/ascii/connect.py
index 1501e45035..d1e6cb9f86 100644
--- a/astropy/io/ascii/connect.py
+++ b/astropy/io/ascii/connect.py
@@ -25,7 +25,11 @@ def io_write(format, table, filename, **kwargs):
     if format != "ascii":
         format = re.sub(r"^ascii\.", "", format)
         kwargs["format"] = format
-    return write(table, filename, **kwargs)
+    header_rows = kwargs.pop("header_rows", None)
+result = write(table, filename, **kwargs)
+if header_rows is not None and hasattr(table, "write") and hasattr(table.write, "header_rows"):
+    table.write.header_rows = header_rows
+return result


 def io_identify(suffix, origin, filepath, fileobj, *args, **kwargs):
diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py
index 381b5b13db..98f7c0ac51 100644
--- a/astropy/io/ascii/core.py
+++ b/astropy/io/ascii/core.py
@@ -1812,7 +1812,14 @@ def _get_writer(Writer, fast_writer, **kwargs):
         return FAST_CLASSES[f"fast_{Writer._format_name}"](**kwargs)

     writer_kwargs = {k: v for k, v in kwargs.items() if k not in extra_writer_pars}
-    writer = Writer(**writer_kwargs)
+    # Temporarily strip out "header_rows" if present to avoid errors in Writer constructor
+header_rows = writer_kwargs.pop("header_rows", None)
+writer = Writer(**writer_kwargs)
+if header_rows is not None:
+    # If the writer supports a "header_rows" concept, store it somewhere
+    # This way, it can still be used by the writer if it wants.
+    if hasattr(writer, "header_rows"):
+        writer.header_rows = header_rows

     if "delimiter" in kwargs:
         writer.header.splitter.delimiter = kwargs["delimiter"]
diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8efb..ca4cb6107a 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -32,6 +32,8 @@ class SimpleRSTData(FixedWidthData):
     splitter_class = FixedWidthTwoLineDataSplitter


+from .fixedwidth import FixedWidth
+
 class RST(FixedWidth):
     """reStructuredText simple format table.

@@ -57,8 +59,20 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader

-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+
+def __init__(self, **kwargs):
+    # Safely gather 'header_rows' if provided from user
+    header_rows = kwargs.pop('header_rows', None)
+    # Provide default arguments that RST expects
+    if 'delimiter_pad' not in kwargs:
+        kwargs['delimiter_pad'] = None
+    if 'bookend' not in kwargs:
+        kwargs['bookend'] = False
+    # Call parent constructor
+    super().__init__(**kwargs)
+    # If user specified 'header_rows', store it in the base class
+    if header_rows is not None:
+        self.header_rows = header_rows

     def write(self, lines):
         lines = super().write(lines)
diff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py
index 993dacf512..5af04188fa 100644
--- a/astropy/io/ascii/ui.py
+++ b/astropy/io/ascii/ui.py
@@ -972,7 +972,12 @@ def write(
         fast_writer = False

     Writer = _get_format_class(format, Writer, "Writer")
-    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)
+    # Remove "header_rows" to avoid errors in Writer constructor
+hr = kwargs.pop("header_rows", None)
+writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)
+# If we popped header_rows, store it on the writer if possible
+if hr is not None and hasattr(writer, "header_rows"):
+    writer.header_rows = hr
     if writer._format_name in core.FAST_CLASSES:
         writer.write(table, output)
         return
--------
2025-01-22 23:04:54,248 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-14771. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-22 23:04:54,249 - INFO - Logging LLM completions for instance django__django-14771 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-14771
