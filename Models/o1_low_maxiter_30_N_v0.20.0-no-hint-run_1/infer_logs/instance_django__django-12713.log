2025-01-22 22:55:42,545 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bcp8g811wqnqq2de_u9zk9ldda9d7wsfd
2025-01-22 23:00:09,624 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bcp8g811wqnqq2de_u9zk9ldda9d7wsfd] build finished.
2025-01-22 23:00:09,646 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bcp8g811wqnqq2de_u9zk9ldda9d7wsfd] with more generic tag [oh_v0.20.0_bcp8g811wqnqq2de]
2025-01-22 23:00:09,648 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_bcp8g811wqnqq2de_u9zk9ldda9d7wsfd, oh_v0.20.0_bcp8g811wqnqq2de] built successfully
2025-01-22 23:00:09,661 - INFO - [runtime 02b3b5d6-be36-490a-93fb-1239227d1601-69843f0f433f1afb] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_bcp8g811wqnqq2de_u9zk9ldda9d7wsfd
2025-01-22 23:00:11,490 - INFO - [runtime 02b3b5d6-be36-490a-93fb-1239227d1601-69843f0f433f1afb] Container started: openhands-runtime-02b3b5d6-be36-490a-93fb-1239227d1601-69843f0f433f1afb. VSCode URL: None
2025-01-22 23:00:11,490 - INFO - [runtime 02b3b5d6-be36-490a-93fb-1239227d1601-69843f0f433f1afb] Waiting for client to become ready at http://localhost:33713...
2025-01-22 23:00:49,600 - INFO - [runtime 02b3b5d6-be36-490a-93fb-1239227d1601-69843f0f433f1afb] Runtime is ready.
2025-01-22 23:00:50,232 - INFO - ------------------------------
2025-01-22 23:00:50,251 - INFO - BEGIN Runtime Initialization Fn
2025-01-22 23:00:50,251 - INFO - ------------------------------
2025-01-22 23:00:50,251 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-12713' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-22 23:00:50,875 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:50,875 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-22 23:00:51,496 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:51,496 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-22 23:00:52,117 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:52,124 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-22 23:00:52,747 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-12713
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:52,747 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-22 23:00:53,369 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:53,369 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-22 23:00:53,369 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-22 23:00:54,495 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:54,496 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.1
2025-01-22 23:00:55,117 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:55,118 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-22 23:00:56,252 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 5b884d45ac Fixed #29501 -- Allowed dbshell to pass options to underlying tool.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:56,252 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-22 23:00:56,885 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:56,886 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-22 23:00:57,507 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:00:57,507 - INFO - ------------------------------
2025-01-22 23:00:57,507 - INFO - END Runtime Initialization Fn
2025-01-22 23:00:57,507 - INFO - ------------------------------
2025-01-22 23:00:57,508 - INFO - Function calling not enabled for model openai/o1. Mocking function calling via prompting.
2025-01-22 23:00:57,513 - INFO - [runtime 02b3b5d6-be36-490a-93fb-1239227d1601-69843f0f433f1afb] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-22 23:00:57,530 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-22 23:00:57,531 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-22 23:01:01,740 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-22 23:01:11,380 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-22 23:01:14,559 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-22 23:01:22,131 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-22 23:01:40,564 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-22 23:01:52,001 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-22 23:01:59,851 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-22 23:02:10,325 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-22 23:02:13,363 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-22 23:02:16,247 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-22 23:02:27,458 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-22 23:02:48,765 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-22 23:03:14,953 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-22 23:03:38,082 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-22 23:03:41,058 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-22 23:03:43,566 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-22 23:03:54,505 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-22 23:04:06,141 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-22 23:04:21,283 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-22 23:04:24,910 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-22 23:04:31,886 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-22 23:04:35,766 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-22 23:04:38,648 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-22 23:05:06,052 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-22 23:05:10,217 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-22 23:05:20,060 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-22 23:05:20,780 - INFO - ------------------------------
2025-01-22 23:05:20,780 - INFO - BEGIN Runtime Completion Fn
2025-01-22 23:05:20,780 - INFO - ------------------------------
2025-01-22 23:05:20,780 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.1
2025-01-22 23:05:21,403 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:05:21,416 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-22 23:05:22,035 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:05:22,040 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-22 23:05:23,169 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:05:23,169 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 5b884d45ac5b76234eca614d90c83b347294c332
2025-01-22 23:05:23,799 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "ec9b0961b0c7",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..f59b7adb2c
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..ba5e551c5f 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')

-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        # Only apply Django defaults if the user hasn't already provided a widget.
+        if 'widget' not in kwargs:
+            if db_field.name in self.get_autocomplete_fields(request):
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )

         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
@@ -266,8 +267,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                 kwargs['queryset'] = queryset

         form_field = db_field.formfield(**kwargs)
-        if (isinstance(form_field.widget, SelectMultiple) and
-                not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):
+        if (
+            isinstance(form_field.widget, SelectMultiple)
+            and not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))
+        ):
             msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')
             help_text = form_field.help_text
             form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..eb32786c2b
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,95 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.contrib import admin
+from django.core.management import call_command
+from django import forms
+
+# Minimal settings for a quick test
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+DATABASE_FILENAME = os.path.join(BASE_DIR, "db.sqlite3")
+
+settings.configure(
+    SECRET_KEY="abc123",
+    DEBUG=True,
+    ROOT_URLCONF=__name__,
+    INSTALLED_APPS=[
+        "django.contrib.admin",
+        "django.contrib.auth",
+        "django.contrib.contenttypes",
+        "django.contrib.sessions",
+        "django.contrib.messages",
+        "django.contrib.staticfiles",
+        __name__,
+    ],
+    MIDDLEWARE=[
+        "django.contrib.sessions.middleware.SessionMiddleware",
+        "django.contrib.messages.middleware.MessageMiddleware",
+        "django.contrib.auth.middleware.AuthenticationMiddleware",
+    ],
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": DATABASE_FILENAME,
+        }
+    },
+    TEMPLATES=[
+        {
+            "BACKEND": "django.template.backends.django.DjangoTemplates",
+            "DIRS": [],
+            "APP_DIRS": True,
+            "OPTIONS": {
+                "context_processors": [
+                    "django.template.context_processors.debug",
+                    "django.template.context_processors.request",
+                    "django.contrib.auth.context_processors.auth",
+                    "django.contrib.messages.context_processors.messages",
+                ],
+            },
+        },
+    ],
+)
+import django
+
+django.setup()
+
+# Create minimal models
+class Author(models.Model):
+    name = models.CharField(max_length=50)
+
+class Book(models.Model):
+    authors = models.ManyToManyField(Author)
+
+# Register a custom Admin
+class BookAdmin(admin.ModelAdmin):
+    # Attempting to override the widget via formfield_for_manytomany
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        if db_field.name == "authors":
+            kwargs["widget"] = forms.TextInput
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+admin.site.register(Author)
+admin.site.register(Book, BookAdmin)
+
+# Actually run a quick test to see if the widget override works.
+def run_repro():
+    django.setup()
+    # Migrate so we can create a Book
+    call_command("migrate", verbosity=0, interactive=False)
+    # Create an instance of BookAdmin and check if the widget was properly assigned:
+    model_admin = BookAdmin(Book, admin.site)
+
+    class DummyRequest:
+        class DummyUser:
+            def has_perm(self, perm):
+                return True
+        user = DummyUser()
+
+    request = DummyRequest()
+    form = model_admin.get_form(request)()
+    widget_class = form.fields["authors"].widget.__class__
+    print("Widget class for authors M2M is:", widget_class)
+
+if __name__ == "__main__":
+    run_repro()
\ No newline at end of file
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-22 23:05:23,799 - INFO - ------------------------------
2025-01-22 23:05:23,799 - INFO - END Runtime Completion Fn
2025-01-22 23:05:23,799 - INFO - ------------------------------
2025-01-22 23:05:23,800 - INFO - Got git diff for instance django__django-12713:
--------
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..f59b7adb2c
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..ba5e551c5f 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')

-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        # Only apply Django defaults if the user hasn't already provided a widget.
+        if 'widget' not in kwargs:
+            if db_field.name in self.get_autocomplete_fields(request):
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )

         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
@@ -266,8 +267,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                 kwargs['queryset'] = queryset

         form_field = db_field.formfield(**kwargs)
-        if (isinstance(form_field.widget, SelectMultiple) and
-                not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):
+        if (
+            isinstance(form_field.widget, SelectMultiple)
+            and not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))
+        ):
             msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')
             help_text = form_field.help_text
             form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..eb32786c2b
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,95 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.contrib import admin
+from django.core.management import call_command
+from django import forms
+
+# Minimal settings for a quick test
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+DATABASE_FILENAME = os.path.join(BASE_DIR, "db.sqlite3")
+
+settings.configure(
+    SECRET_KEY="abc123",
+    DEBUG=True,
+    ROOT_URLCONF=__name__,
+    INSTALLED_APPS=[
+        "django.contrib.admin",
+        "django.contrib.auth",
+        "django.contrib.contenttypes",
+        "django.contrib.sessions",
+        "django.contrib.messages",
+        "django.contrib.staticfiles",
+        __name__,
+    ],
+    MIDDLEWARE=[
+        "django.contrib.sessions.middleware.SessionMiddleware",
+        "django.contrib.messages.middleware.MessageMiddleware",
+        "django.contrib.auth.middleware.AuthenticationMiddleware",
+    ],
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": DATABASE_FILENAME,
+        }
+    },
+    TEMPLATES=[
+        {
+            "BACKEND": "django.template.backends.django.DjangoTemplates",
+            "DIRS": [],
+            "APP_DIRS": True,
+            "OPTIONS": {
+                "context_processors": [
+                    "django.template.context_processors.debug",
+                    "django.template.context_processors.request",
+                    "django.contrib.auth.context_processors.auth",
+                    "django.contrib.messages.context_processors.messages",
+                ],
+            },
+        },
+    ],
+)
+import django
+
+django.setup()
+
+# Create minimal models
+class Author(models.Model):
+    name = models.CharField(max_length=50)
+
+class Book(models.Model):
+    authors = models.ManyToManyField(Author)
+
+# Register a custom Admin
+class BookAdmin(admin.ModelAdmin):
+    # Attempting to override the widget via formfield_for_manytomany
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        if db_field.name == "authors":
+            kwargs["widget"] = forms.TextInput
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+admin.site.register(Author)
+admin.site.register(Book, BookAdmin)
+
+# Actually run a quick test to see if the widget override works.
+def run_repro():
+    django.setup()
+    # Migrate so we can create a Book
+    call_command("migrate", verbosity=0, interactive=False)
+    # Create an instance of BookAdmin and check if the widget was properly assigned:
+    model_admin = BookAdmin(Book, admin.site)
+
+    class DummyRequest:
+        class DummyUser:
+            def has_perm(self, perm):
+                return True
+        user = DummyUser()
+
+    request = DummyRequest()
+    form = model_admin.get_form(request)()
+    widget_class = form.fields["authors"].widget.__class__
+    print("Widget class for authors M2M is:", widget_class)
+
+if __name__ == "__main__":
+    run_repro()
\ No newline at end of file
--------
2025-01-22 23:05:28,786 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-15268. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-22 23:05:28,787 - INFO - Logging LLM completions for instance django__django-15268 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-15268
