2025-01-14 18:03:21,401 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rmuj12wlu2oanwcw_qroup3d3os79ipoo
2025-01-14 18:05:54,824 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rmuj12wlu2oanwcw_qroup3d3os79ipoo] build finished.
2025-01-14 18:05:54,838 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rmuj12wlu2oanwcw_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_rmuj12wlu2oanwcw]
2025-01-14 18:05:54,841 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_rmuj12wlu2oanwcw_qroup3d3os79ipoo, oh_v0.20.0_rmuj12wlu2oanwcw] built successfully
2025-01-14 18:05:54,862 - INFO - [runtime d6b89832-27d7-4f7a-a764-1d7e72d25635-6f071a740a716d37] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_rmuj12wlu2oanwcw_qroup3d3os79ipoo
2025-01-14 18:05:55,771 - INFO - [runtime d6b89832-27d7-4f7a-a764-1d7e72d25635-6f071a740a716d37] Container started: openhands-runtime-d6b89832-27d7-4f7a-a764-1d7e72d25635-6f071a740a716d37. VSCode URL: None
2025-01-14 18:05:55,771 - INFO - [runtime d6b89832-27d7-4f7a-a764-1d7e72d25635-6f071a740a716d37] Waiting for client to become ready at http://localhost:34186...
2025-01-14 18:06:21,851 - INFO - [runtime d6b89832-27d7-4f7a-a764-1d7e72d25635-6f071a740a716d37] Runtime is ready.
2025-01-14 18:06:22,490 - INFO - ------------------------------
2025-01-14 18:06:22,490 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 18:06:22,490 - INFO - ------------------------------
2025-01-14 18:06:22,491 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sphinx-doc__sphinx-10466' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 18:06:23,122 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:23,122 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 18:06:23,749 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:23,750 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 18:06:24,377 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:24,385 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 18:06:25,011 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sphinx-doc__sphinx-10466
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:25,011 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 18:06:25,637 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:25,638 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 18:06:25,638 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 18:06:26,265 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sphinx-doc__sphinx__5.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:26,265 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__5.0
2025-01-14 18:06:26,893 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:26,893 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 18:06:27,522 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at cab2d9307 Merge pull request #10386 from mxd4/10384-comment-img-magick
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:27,523 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 18:06:28,151 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:28,151 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 18:06:28,777 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:06:28,777 - INFO - ------------------------------
2025-01-14 18:06:28,778 - INFO - END Runtime Initialization Fn
2025-01-14 18:06:28,778 - INFO - ------------------------------
2025-01-14 18:06:28,792 - INFO - [runtime d6b89832-27d7-4f7a-a764-1d7e72d25635-6f071a740a716d37] Found 0 local microagents.
2025-01-14 18:06:28,794 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 18:06:28,795 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 18:06:48,027 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 18:07:03,929 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 18:08:57,651 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 18:09:23,255 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 18:09:32,772 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 18:09:40,631 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 18:09:48,860 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 18:10:08,220 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 18:10:19,838 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 18:10:43,381 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 18:10:53,661 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 18:11:13,844 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 18:11:35,090 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 18:11:56,451 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 18:12:40,342 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 18:13:01,534 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-14 18:13:02,176 - INFO - ------------------------------
2025-01-14 18:13:02,176 - INFO - BEGIN Runtime Completion Fn
2025-01-14 18:13:02,176 - INFO - ------------------------------
2025-01-14 18:13:02,176 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__5.0
2025-01-14 18:13:02,803 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:13:02,804 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 18:13:03,432 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:13:03,433 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 18:13:04,063 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:13:04,064 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached cab2d93076d0cca7c53fac885f927dde3e2a5fec
2025-01-14 18:13:04,693 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5217151507cf",
  "working_dir": "/workspace/sphinx-doc__sphinx__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..84c72ff29
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,60 @@
+import subprocess
+import os
+
+def main():
+    # Attempt to reproduce the duplicated location lines in the .pot file
+
+    # We'll try to run "make clean; make gettext" from the top-level if a Makefile is found.
+    if os.path.exists("Makefile"):
+        # The top-level Makefile doesn't directly have a 'gettext' target, but it has 'docs' with an optional 'target' variable.
+        subprocess.run(["make", "docs", "target=clean"])
+        subprocess.run(["make", "docs", "target=gettext"])
+    elif os.path.exists(os.path.join("doc", "Makefile")):
+        subprocess.run(["make", "-C", "doc", "clean"])
+        subprocess.run(["make", "-C", "doc", "gettext"])
+    else:
+        # If neither is found, we do a direct sphinx-build.
+        print("No suitable Makefile found for 'clean' and 'gettext' targets.")
+        print("Try running manually: sphinx-build -b gettext doc doc/_build/gettext")
+        return
+
+    # We guess the pot files might be generated under "_build/gettext" or "doc/_build/gettext".
+    pot_candidates = [
+        os.path.join("_build", "gettext"),
+        os.path.join("doc", "_build", "gettext"),
+        os.path.join("build", "gettext"),
+    ]
+
+    pot_files = []
+    for candidate in pot_candidates:
+        if os.path.isdir(candidate):
+            for f in os.listdir(candidate):
+                if f.endswith(".pot"):
+                    pot_files.append(os.path.join(candidate, f))
+
+    if not pot_files:
+        print("No .pot files found, cannot check for duplicates.")
+        return
+
+    # Look for repeated lines.
+    found_duplicates = False
+    for pot_file in pot_files:
+        with open(pot_file, encoding="utf-8") as pf:
+            lines = pf.readlines()
+        duplicates = {}  # line -> count
+        for line in lines:
+            if line.startswith('#:'):
+                duplicates[line.strip()] = duplicates.get(line.strip(), 0) + 1
+        # Print out duplicates > 1
+        for line_str, cnt in duplicates.items():
+            if cnt > 1:
+                if not found_duplicates:
+                    print("Duplicates found in:" + pot_file)
+                    found_duplicates = True
+                print(f"   {line_str} appears {cnt} times")
+
+    if not found_duplicates:
+        print("No duplicate lines found.")
+
+if __name__ == "__main__":
+    main()
diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py
index e8bc547b7..b091ce21f 100644
--- a/sphinx/builders/gettext.py
+++ b/sphinx/builders/gettext.py
@@ -32,9 +32,12 @@ class Message:
     """An entry of translatable message."""
     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):
         self.text = text
-        self.locations = locations
+        self.locations = self._unique_locations(locations)
         self.uuids = uuids

+    def _unique_locations(self, locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:
+        return list(set(locations))
+

 class Catalog:
     """Catalog of translatable messages."""
@@ -53,7 +56,10 @@ class Catalog:
         if msg not in self.metadata:  # faster lookup in hash
             self.messages.append(msg)
             self.metadata[msg] = []
-        self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore
+        # Only add if not already present by path & line, ignore different UIDs
+        existing_locations = {(s, l) for (s, l, u) in self.metadata[msg]}
+        if (origin.source, origin.line) not in existing_locations:
+            self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore

     def __iter__(self) -> Generator[Message, None, None]:
         for message in self.messages:
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 18:13:04,693 - INFO - ------------------------------
2025-01-14 18:13:04,693 - INFO - END Runtime Completion Fn
2025-01-14 18:13:04,693 - INFO - ------------------------------
2025-01-14 18:13:04,694 - INFO - Got git diff for instance sphinx-doc__sphinx-10466:
--------
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..84c72ff29
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,60 @@
+import subprocess
+import os
+
+def main():
+    # Attempt to reproduce the duplicated location lines in the .pot file
+
+    # We'll try to run "make clean; make gettext" from the top-level if a Makefile is found.
+    if os.path.exists("Makefile"):
+        # The top-level Makefile doesn't directly have a 'gettext' target, but it has 'docs' with an optional 'target' variable.
+        subprocess.run(["make", "docs", "target=clean"])
+        subprocess.run(["make", "docs", "target=gettext"])
+    elif os.path.exists(os.path.join("doc", "Makefile")):
+        subprocess.run(["make", "-C", "doc", "clean"])
+        subprocess.run(["make", "-C", "doc", "gettext"])
+    else:
+        # If neither is found, we do a direct sphinx-build.
+        print("No suitable Makefile found for 'clean' and 'gettext' targets.")
+        print("Try running manually: sphinx-build -b gettext doc doc/_build/gettext")
+        return
+
+    # We guess the pot files might be generated under "_build/gettext" or "doc/_build/gettext".
+    pot_candidates = [
+        os.path.join("_build", "gettext"),
+        os.path.join("doc", "_build", "gettext"),
+        os.path.join("build", "gettext"),
+    ]
+
+    pot_files = []
+    for candidate in pot_candidates:
+        if os.path.isdir(candidate):
+            for f in os.listdir(candidate):
+                if f.endswith(".pot"):
+                    pot_files.append(os.path.join(candidate, f))
+
+    if not pot_files:
+        print("No .pot files found, cannot check for duplicates.")
+        return
+
+    # Look for repeated lines.
+    found_duplicates = False
+    for pot_file in pot_files:
+        with open(pot_file, encoding="utf-8") as pf:
+            lines = pf.readlines()
+        duplicates = {}  # line -> count
+        for line in lines:
+            if line.startswith('#:'):
+                duplicates[line.strip()] = duplicates.get(line.strip(), 0) + 1
+        # Print out duplicates > 1
+        for line_str, cnt in duplicates.items():
+            if cnt > 1:
+                if not found_duplicates:
+                    print("Duplicates found in:" + pot_file)
+                    found_duplicates = True
+                print(f"   {line_str} appears {cnt} times")
+
+    if not found_duplicates:
+        print("No duplicate lines found.")
+
+if __name__ == "__main__":
+    main()
diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py
index e8bc547b7..b091ce21f 100644
--- a/sphinx/builders/gettext.py
+++ b/sphinx/builders/gettext.py
@@ -32,9 +32,12 @@ class Message:
     """An entry of translatable message."""
     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):
         self.text = text
-        self.locations = locations
+        self.locations = self._unique_locations(locations)
         self.uuids = uuids

+    def _unique_locations(self, locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:
+        return list(set(locations))
+

 class Catalog:
     """Catalog of translatable messages."""
@@ -53,7 +56,10 @@ class Catalog:
         if msg not in self.metadata:  # faster lookup in hash
             self.messages.append(msg)
             self.metadata[msg] = []
-        self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore
+        # Only add if not already present by path & line, ignore different UIDs
+        existing_locations = {(s, l) for (s, l, u) in self.metadata[msg]}
+        if (origin.source, origin.line) not in existing_locations:
+            self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore

     def __iter__(self) -> Generator[Message, None, None]:
         for message in self.messages:
--------
2025-01-14 18:13:06,069 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sphinx-doc_s_sphinx-7910. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 18:13:06,069 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-7910 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-7910
