2025-01-14 17:31:51,202 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9ljgndyi0y1r97ey_qroup3d3os79ipoo
2025-01-14 17:33:45,302 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9ljgndyi0y1r97ey_qroup3d3os79ipoo] build finished.
2025-01-14 17:33:45,314 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9ljgndyi0y1r97ey_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_9ljgndyi0y1r97ey]
2025-01-14 17:33:45,317 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_9ljgndyi0y1r97ey_qroup3d3os79ipoo, oh_v0.20.0_9ljgndyi0y1r97ey] built successfully
2025-01-14 17:33:45,325 - INFO - [runtime 084dc72a-c8f9-4742-8b3a-2e07bcae2a85-3ae49036d37be5bd] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_9ljgndyi0y1r97ey_qroup3d3os79ipoo
2025-01-14 17:33:47,459 - INFO - [runtime 084dc72a-c8f9-4742-8b3a-2e07bcae2a85-3ae49036d37be5bd] Container started: openhands-runtime-084dc72a-c8f9-4742-8b3a-2e07bcae2a85-3ae49036d37be5bd. VSCode URL: None
2025-01-14 17:33:47,459 - INFO - [runtime 084dc72a-c8f9-4742-8b3a-2e07bcae2a85-3ae49036d37be5bd] Waiting for client to become ready at http://localhost:37194...
2025-01-14 17:34:09,530 - INFO - [runtime 084dc72a-c8f9-4742-8b3a-2e07bcae2a85-3ae49036d37be5bd] Runtime is ready.
2025-01-14 17:34:10,170 - INFO - ------------------------------
2025-01-14 17:34:10,170 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 17:34:10,170 - INFO - ------------------------------
2025-01-14 17:34:10,170 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-6197' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 17:34:10,798 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:10,798 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 17:34:11,428 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:11,428 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 17:34:12,057 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:12,067 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 17:34:12,696 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=pytest-dev__pytest-6197
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:12,696 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 17:34:13,325 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:13,325 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 17:34:13,326 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 17:34:13,953 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__5.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:13,953 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.2
2025-01-14 17:34:14,076 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:14,076 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 17:34:14,701 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at e856638ba Preparing release version 5.2.3 (#6190)
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:14,702 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 17:34:15,328 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:15,328 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 17:34:15,955 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:34:15,956 - INFO - ------------------------------
2025-01-14 17:34:15,956 - INFO - END Runtime Initialization Fn
2025-01-14 17:34:15,956 - INFO - ------------------------------
2025-01-14 17:34:15,971 - INFO - [runtime 084dc72a-c8f9-4742-8b3a-2e07bcae2a85-3ae49036d37be5bd] Found 0 local microagents.
2025-01-14 17:34:15,973 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 17:34:15,974 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 17:34:33,439 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 17:35:04,937 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 17:35:21,424 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 17:35:27,836 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 17:35:31,644 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 17:35:50,586 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 17:36:20,026 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 17:36:47,288 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 17:37:00,442 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 17:37:43,931 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 17:37:58,416 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 17:38:33,174 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 17:38:53,799 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 17:39:18,291 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 17:39:46,189 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 17:39:51,851 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 17:40:00,584 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 17:40:35,043 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 17:41:05,948 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 17:41:13,657 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 17:41:25,172 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 17:42:02,066 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 17:42:41,802 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 17:43:53,228 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 17:44:15,897 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 17:44:27,058 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 17:44:53,007 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 17:45:24,236 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 17:46:19,161 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 17:46:26,241 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 17:46:26,241 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 17:46:26,242 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 17:46:26,242 - WARNING - Stopping agent due to traffic control
2025-01-14 17:46:26,242 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 17:46:26,692 - INFO - ------------------------------
2025-01-14 17:46:26,692 - INFO - BEGIN Runtime Completion Fn
2025-01-14 17:46:26,692 - INFO - ------------------------------
2025-01-14 17:46:26,693 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.2
2025-01-14 17:46:27,318 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:46:27,319 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 17:46:27,944 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:46:27,944 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 17:46:28,569 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:46:28,569 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached e856638ba086fcf5bebf1bebea32d5cf78de87b4
2025-01-14 17:46:29,198 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e9244ac767d8",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/foobar/__init__.py b/foobar/__init__.py
new file mode 100644
index 000000000..2cfffa40d
--- /dev/null
+++ b/foobar/__init__.py
@@ -0,0 +1 @@
+assert False
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..9127ca8c3
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+import os, subprocess
+
+try:
+    os.mkdir("foobar")
+except FileExistsError:
+    pass
+
+with open("foobar/__init__.py", "w") as f:
+    f.write("assert False\n")
+
+tox_ini = """[tox]\nenvlist = py37-pytest{522,523}\nskipsdist = true\n\n[testenv]\ndeps =\n    pytest522: pytest==5.2.2\n    pytest523: pytest==5.2.3\ncommands = pytest\n"""
+
+with open("tox.ini", "w") as f:
+    f.write(tox_ini)
+
+subprocess.run(["tox"], check=False)
\ No newline at end of file
diff --git a/reproduce_bug2.py b/reproduce_bug2.py
new file mode 100644
index 000000000..444bd164a
--- /dev/null
+++ b/reproduce_bug2.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+import os, subprocess, sys
+def run(cmd):
+    print(f"Running: {cmd}")
+    res = subprocess.run(cmd, shell=True)
+    print(f"Return code: {res.returncode}\n")
+
+print("Creating test folder and files...")
+
+os.makedirs("foobar", exist_ok=True)
+with open("foobar/__init__.py", "w") as f:
+    f.write("assert False\n")
+
+with open("test_foo.py", "w") as f:
+    f.write("def test_pass():\n    assert True\n")
+
+print("Running with pytest 5.2.2")
+run("pip install --quiet pytest==5.2.2")
+run("pytest")
+print("Running with pytest 5.2.3")
+run("pip install --quiet pytest==5.2.3")
+run("pytest")
\ No newline at end of file
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 306e5f217..aa933fb41 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -178,7 +178,7 @@ def pytest_collect_file(path, parent):
     if ext == ".py":
         if not parent.session.isinitpath(path):
             if not path_matches_patterns(
-                path, parent.config.getini("python_files") + ["__init__.py"]
+                path, parent.config.getini("python_files")
             ):
                 return
         ihook = parent.session.gethookproxy(path)
@@ -192,7 +192,11 @@ def path_matches_patterns(path, patterns):

 def pytest_pycollect_makemodule(path, parent):
     if path.basename == "__init__.py":
-        return Package(path, parent)
+        # avoid collecting __init__.py unless it's an explicitly specified initpath
+        if not parent.session.isinitpath(path):
+            return None
+        else:
+            return Package(path, parent)
     return Module(path, parent)


@@ -644,7 +648,7 @@ class Package(Module):
         init_module = this_path.join("__init__.py")
         if init_module.check(file=1) and path_matches_patterns(
             init_module, self.config.getini("python_files")
-        ):
+        ) and self.session.isinitpath(init_module):
             yield Module(init_module, self)
         pkg_prefixes = set()
         for path in this_path.visit(rec=self._recurse, bf=True, sort=True):
diff --git a/test_foo.py b/test_foo.py
new file mode 100644
index 000000000..b953a0f5b
--- /dev/null
+++ b/test_foo.py
@@ -0,0 +1,2 @@
+def test_pass():
+    assert True
diff --git a/test_pr_fix.sh b/test_pr_fix.sh
new file mode 100755
index 000000000..6b7fd66b6
--- /dev/null
+++ b/test_pr_fix.sh
@@ -0,0 +1,29 @@
+#!/usr/bin/env bash
+set -eux
+
+# We will create a folder with an __init__.py that causes an AssertionError,
+# then run pytest ignoring the existing test suite so that only our minimal test
+# is picked up.
+
+rm -rf foobar test_foo.py || true
+mkdir foobar
+
+cat <<EOF > foobar/__init__.py
+assert False
+EOF
+
+cat <<EOF > test_foo.py
+def test_pass():
+    assert True
+EOF
+
+echo "Install pytest==5.2.2 and run tests"
+pip install --quiet pytest==5.2.2
+pytest foobar test_foo.py || true
+
+echo "Install pytest==5.2.3 and run tests"
+pip install --quiet pytest==5.2.3
+pytest foobar test_foo.py || true
+
+
+echo "Done. We expect that with 5.2.2 and 5.2.3 the 'foobar/__init__.py' isn't discovered anymore."
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index b03941657..47f32ecd2 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,181 +1,9 @@
 [tox]
-isolated_build = True
-minversion = 3.5.3
-distshare = {homedir}/.tox/distshare
-# make sure to update environment list in travis.yml and appveyor.yml
-envlist =
-    linting
-    py35
-    py36
-    py37
-    py38
-    pypy
-    pypy3
-    py37-{pexpect,xdist,twisted,numpy,pluggymaster}
-    doctesting
-    py37-freeze
-    docs
+envlist = py37-pytest{522,523}
+skipsdist = true

 [testenv]
-commands =
-    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest {posargs:{env:_PYTEST_TOX_DEFAULT_POSARGS:}}
-    coverage: coverage combine
-    coverage: coverage report -m
-passenv = USER USERNAME COVERAGE_* TRAVIS PYTEST_ADDOPTS
-setenv =
-    _PYTEST_TOX_DEFAULT_POSARGS={env:_PYTEST_TOX_POSARGS_LSOF:} {env:_PYTEST_TOX_POSARGS_XDIST:}
-
-    # Configuration to run with coverage similar to Travis/Appveyor, e.g.
-    # "tox -e py37-coverage".
-    coverage: _PYTEST_TOX_COVERAGE_RUN=coverage run -m
-    coverage: _PYTEST_TOX_EXTRA_DEP=coverage-enable-subprocess
-    coverage: COVERAGE_FILE={toxinidir}/.coverage
-    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc
-
-    nobyte: PYTHONDONTWRITEBYTECODE=1
-
-    lsof: _PYTEST_TOX_POSARGS_LSOF=--lsof
-
-    pexpect: _PYTEST_TOX_PLATFORM=linux|darwin
-
-    xdist: _PYTEST_TOX_POSARGS_XDIST=-n auto
-extras = testing
-deps =
-    oldattrs: attrs==17.4.0
-    oldattrs: hypothesis<=4.38.1
-    numpy: numpy
-    pexpect: pexpect
-    pluggymaster: git+https://github.com/pytest-dev/pluggy.git@master
-    twisted: twisted
-    xdist: pytest-xdist>=1.13
-    {env:_PYTEST_TOX_EXTRA_DEP:}
-platform = {env:_PYTEST_TOX_PLATFORM:.*}
-
-[testenv:linting]
-skip_install = True
-basepython = python3
-deps = pre-commit>=1.11.0
-commands = pre-commit run --all-files --show-diff-on-failure
-
-[testenv:docs]
-basepython = python3
-usedevelop = True
-changedir = doc/en
-deps = -r{toxinidir}/doc/en/requirements.txt
-
-commands =
-    sphinx-build -W -b html . _build
-
-[testenv:doctesting]
-basepython = python3
-skipsdist = True
-deps =
-    {[testenv]deps}
-    PyYAML
-commands =
-    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest doc/en
-    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest --doctest-modules --pyargs _pytest
-
-[testenv:regen]
-changedir = doc/en
-skipsdist = True
-basepython = python3
-deps =
-    sphinx
-    PyYAML
-    regendoc>=0.6.1
-    dataclasses
-whitelist_externals =
-    rm
-    make
-commands =
-    # don't show hypothesis plugin info in docs, see #4602
-    pip uninstall hypothesis -y
-    rm -rf /tmp/doc-exec*
-    rm -rf {envdir}/.pytest_cache
-    make regen
-
-[testenv:py37-freeze]
-changedir = testing/freeze
 deps =
-    pyinstaller
-commands =
-    {envpython} create_executable.py
-    {envpython} tox_run.py
-
-[testenv:release]
-decription = do a release, required posarg of the version number
-basepython = python3
-usedevelop = True
-passenv = *
-deps =
-    colorama
-    gitpython
-    pre-commit>=1.11.0
-    towncrier
-    wheel
-commands = python scripts/release.py {posargs}
-
-[testenv:publish_gh_release_notes]
-description = create GitHub release after deployment
-basepython = python3
-usedevelop = True
-passenv = GH_RELEASE_NOTES_TOKEN TRAVIS_TAG TRAVIS_REPO_SLUG
-deps =
-    github3.py
-    pypandoc
-commands = python scripts/publish_gh_release_notes.py
-
-
-[pytest]
-minversion = 2.0
-addopts = -ra -p pytester --strict-markers
-rsyncdirs = tox.ini doc src testing
-python_files = test_*.py *_test.py testing/*/*.py
-python_classes = Test Acceptance
-python_functions = test
-# NOTE: "doc" is not included here, but gets tested explicitly via "doctesting".
-testpaths = testing
-norecursedirs = testing/example_scripts
-xfail_strict=true
-filterwarnings =
-    error
-    default:Using or importing the ABCs:DeprecationWarning:unittest2.*
-    ignore:Module already imported so cannot be rewritten:pytest.PytestWarning
-    # https://github.com/pytest-dev/pytest/issues/5974
-    default:\(rm_rf\) error removing.*:pytest.PytestWarning
-    # produced by python3.6/site.py itself (3.6.7 on Travis, could not trigger it with 3.6.8).
-    ignore:.*U.*mode is deprecated:DeprecationWarning:(?!(pytest|_pytest))
-    # produced by pytest-xdist
-    ignore:.*type argument to addoption.*:DeprecationWarning
-    # produced by python >=3.5 on execnet (pytest-xdist)
-    ignore:.*inspect.getargspec.*deprecated, use inspect.signature.*:DeprecationWarning
-    # pytest's own futurewarnings
-    ignore::pytest.PytestExperimentalApiWarning
-    # Do not cause SyntaxError for invalid escape sequences in py37.
-    # Those are caught/handled by pyupgrade, and not easy to filter with the
-    # module being the filename (with .py removed).
-    default:invalid escape sequence:DeprecationWarning
-    # ignore use of unregistered marks, because we use many to test the implementation
-    ignore::_pytest.warning_types.PytestUnknownMarkWarning
-pytester_example_dir = testing/example_scripts
-markers =
-    # dummy markers for testing
-    foo
-    bar
-    baz
-    # conftest.py reorders tests moving slow ones to the end of the list
-    slow
-    # experimental mark for all tests using pexpect
-    uses_pexpect
-
-[flake8]
-max-line-length = 120
-extend-ignore = E203
-
-[isort]
-; This config mimics what reorder-python-imports does.
-force_single_line = 1
-known_localfolder = pytest,_pytest
-known_third_party = test_source,test_excinfo
-force_alphabetical_sort_within_sections = 1
+    pytest522: pytest==5.2.2
+    pytest523: pytest==5.2.3
+commands = pytest
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:46:29,199 - INFO - ------------------------------
2025-01-14 17:46:29,199 - INFO - END Runtime Completion Fn
2025-01-14 17:46:29,199 - INFO - ------------------------------
2025-01-14 17:46:29,199 - INFO - Got git diff for instance pytest-dev__pytest-6197:
--------
diff --git a/foobar/__init__.py b/foobar/__init__.py
new file mode 100644
index 000000000..2cfffa40d
--- /dev/null
+++ b/foobar/__init__.py
@@ -0,0 +1 @@
+assert False
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..9127ca8c3
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,17 @@
+#!/usr/bin/env python3
+import os, subprocess
+
+try:
+    os.mkdir("foobar")
+except FileExistsError:
+    pass
+
+with open("foobar/__init__.py", "w") as f:
+    f.write("assert False\n")
+
+tox_ini = """[tox]\nenvlist = py37-pytest{522,523}\nskipsdist = true\n\n[testenv]\ndeps =\n    pytest522: pytest==5.2.2\n    pytest523: pytest==5.2.3\ncommands = pytest\n"""
+
+with open("tox.ini", "w") as f:
+    f.write(tox_ini)
+
+subprocess.run(["tox"], check=False)
\ No newline at end of file
diff --git a/reproduce_bug2.py b/reproduce_bug2.py
new file mode 100644
index 000000000..444bd164a
--- /dev/null
+++ b/reproduce_bug2.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+import os, subprocess, sys
+def run(cmd):
+    print(f"Running: {cmd}")
+    res = subprocess.run(cmd, shell=True)
+    print(f"Return code: {res.returncode}\n")
+
+print("Creating test folder and files...")
+
+os.makedirs("foobar", exist_ok=True)
+with open("foobar/__init__.py", "w") as f:
+    f.write("assert False\n")
+
+with open("test_foo.py", "w") as f:
+    f.write("def test_pass():\n    assert True\n")
+
+print("Running with pytest 5.2.2")
+run("pip install --quiet pytest==5.2.2")
+run("pytest")
+print("Running with pytest 5.2.3")
+run("pip install --quiet pytest==5.2.3")
+run("pytest")
\ No newline at end of file
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 306e5f217..aa933fb41 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -178,7 +178,7 @@ def pytest_collect_file(path, parent):
     if ext == ".py":
         if not parent.session.isinitpath(path):
             if not path_matches_patterns(
-                path, parent.config.getini("python_files") + ["__init__.py"]
+                path, parent.config.getini("python_files")
             ):
                 return
         ihook = parent.session.gethookproxy(path)
@@ -192,7 +192,11 @@ def path_matches_patterns(path, patterns):

 def pytest_pycollect_makemodule(path, parent):
     if path.basename == "__init__.py":
-        return Package(path, parent)
+        # avoid collecting __init__.py unless it's an explicitly specified initpath
+        if not parent.session.isinitpath(path):
+            return None
+        else:
+            return Package(path, parent)
     return Module(path, parent)


@@ -644,7 +648,7 @@ class Package(Module):
         init_module = this_path.join("__init__.py")
         if init_module.check(file=1) and path_matches_patterns(
             init_module, self.config.getini("python_files")
-        ):
+        ) and self.session.isinitpath(init_module):
             yield Module(init_module, self)
         pkg_prefixes = set()
         for path in this_path.visit(rec=self._recurse, bf=True, sort=True):
diff --git a/test_foo.py b/test_foo.py
new file mode 100644
index 000000000..b953a0f5b
--- /dev/null
+++ b/test_foo.py
@@ -0,0 +1,2 @@
+def test_pass():
+    assert True
diff --git a/test_pr_fix.sh b/test_pr_fix.sh
new file mode 100755
index 000000000..6b7fd66b6
--- /dev/null
+++ b/test_pr_fix.sh
@@ -0,0 +1,29 @@
+#!/usr/bin/env bash
+set -eux
+
+# We will create a folder with an __init__.py that causes an AssertionError,
+# then run pytest ignoring the existing test suite so that only our minimal test
+# is picked up.
+
+rm -rf foobar test_foo.py || true
+mkdir foobar
+
+cat <<EOF > foobar/__init__.py
+assert False
+EOF
+
+cat <<EOF > test_foo.py
+def test_pass():
+    assert True
+EOF
+
+echo "Install pytest==5.2.2 and run tests"
+pip install --quiet pytest==5.2.2
+pytest foobar test_foo.py || true
+
+echo "Install pytest==5.2.3 and run tests"
+pip install --quiet pytest==5.2.3
+pytest foobar test_foo.py || true
+
+
+echo "Done. We expect that with 5.2.2 and 5.2.3 the 'foobar/__init__.py' isn't discovered anymore."
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index b03941657..47f32ecd2 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,181 +1,9 @@
 [tox]
-isolated_build = True
-minversion = 3.5.3
-distshare = {homedir}/.tox/distshare
-# make sure to update environment list in travis.yml and appveyor.yml
-envlist =
-    linting
-    py35
-    py36
-    py37
-    py38
-    pypy
-    pypy3
-    py37-{pexpect,xdist,twisted,numpy,pluggymaster}
-    doctesting
-    py37-freeze
-    docs
+envlist = py37-pytest{522,523}
+skipsdist = true

 [testenv]
-commands =
-    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest {posargs:{env:_PYTEST_TOX_DEFAULT_POSARGS:}}
-    coverage: coverage combine
-    coverage: coverage report -m
-passenv = USER USERNAME COVERAGE_* TRAVIS PYTEST_ADDOPTS
-setenv =
-    _PYTEST_TOX_DEFAULT_POSARGS={env:_PYTEST_TOX_POSARGS_LSOF:} {env:_PYTEST_TOX_POSARGS_XDIST:}
-
-    # Configuration to run with coverage similar to Travis/Appveyor, e.g.
-    # "tox -e py37-coverage".
-    coverage: _PYTEST_TOX_COVERAGE_RUN=coverage run -m
-    coverage: _PYTEST_TOX_EXTRA_DEP=coverage-enable-subprocess
-    coverage: COVERAGE_FILE={toxinidir}/.coverage
-    coverage: COVERAGE_PROCESS_START={toxinidir}/.coveragerc
-
-    nobyte: PYTHONDONTWRITEBYTECODE=1
-
-    lsof: _PYTEST_TOX_POSARGS_LSOF=--lsof
-
-    pexpect: _PYTEST_TOX_PLATFORM=linux|darwin
-
-    xdist: _PYTEST_TOX_POSARGS_XDIST=-n auto
-extras = testing
-deps =
-    oldattrs: attrs==17.4.0
-    oldattrs: hypothesis<=4.38.1
-    numpy: numpy
-    pexpect: pexpect
-    pluggymaster: git+https://github.com/pytest-dev/pluggy.git@master
-    twisted: twisted
-    xdist: pytest-xdist>=1.13
-    {env:_PYTEST_TOX_EXTRA_DEP:}
-platform = {env:_PYTEST_TOX_PLATFORM:.*}
-
-[testenv:linting]
-skip_install = True
-basepython = python3
-deps = pre-commit>=1.11.0
-commands = pre-commit run --all-files --show-diff-on-failure
-
-[testenv:docs]
-basepython = python3
-usedevelop = True
-changedir = doc/en
-deps = -r{toxinidir}/doc/en/requirements.txt
-
-commands =
-    sphinx-build -W -b html . _build
-
-[testenv:doctesting]
-basepython = python3
-skipsdist = True
-deps =
-    {[testenv]deps}
-    PyYAML
-commands =
-    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest doc/en
-    {env:_PYTEST_TOX_COVERAGE_RUN:} pytest --doctest-modules --pyargs _pytest
-
-[testenv:regen]
-changedir = doc/en
-skipsdist = True
-basepython = python3
-deps =
-    sphinx
-    PyYAML
-    regendoc>=0.6.1
-    dataclasses
-whitelist_externals =
-    rm
-    make
-commands =
-    # don't show hypothesis plugin info in docs, see #4602
-    pip uninstall hypothesis -y
-    rm -rf /tmp/doc-exec*
-    rm -rf {envdir}/.pytest_cache
-    make regen
-
-[testenv:py37-freeze]
-changedir = testing/freeze
 deps =
-    pyinstaller
-commands =
-    {envpython} create_executable.py
-    {envpython} tox_run.py
-
-[testenv:release]
-decription = do a release, required posarg of the version number
-basepython = python3
-usedevelop = True
-passenv = *
-deps =
-    colorama
-    gitpython
-    pre-commit>=1.11.0
-    towncrier
-    wheel
-commands = python scripts/release.py {posargs}
-
-[testenv:publish_gh_release_notes]
-description = create GitHub release after deployment
-basepython = python3
-usedevelop = True
-passenv = GH_RELEASE_NOTES_TOKEN TRAVIS_TAG TRAVIS_REPO_SLUG
-deps =
-    github3.py
-    pypandoc
-commands = python scripts/publish_gh_release_notes.py
-
-
-[pytest]
-minversion = 2.0
-addopts = -ra -p pytester --strict-markers
-rsyncdirs = tox.ini doc src testing
-python_files = test_*.py *_test.py testing/*/*.py
-python_classes = Test Acceptance
-python_functions = test
-# NOTE: "doc" is not included here, but gets tested explicitly via "doctesting".
-testpaths = testing
-norecursedirs = testing/example_scripts
-xfail_strict=true
-filterwarnings =
-    error
-    default:Using or importing the ABCs:DeprecationWarning:unittest2.*
-    ignore:Module already imported so cannot be rewritten:pytest.PytestWarning
-    # https://github.com/pytest-dev/pytest/issues/5974
-    default:\(rm_rf\) error removing.*:pytest.PytestWarning
-    # produced by python3.6/site.py itself (3.6.7 on Travis, could not trigger it with 3.6.8).
-    ignore:.*U.*mode is deprecated:DeprecationWarning:(?!(pytest|_pytest))
-    # produced by pytest-xdist
-    ignore:.*type argument to addoption.*:DeprecationWarning
-    # produced by python >=3.5 on execnet (pytest-xdist)
-    ignore:.*inspect.getargspec.*deprecated, use inspect.signature.*:DeprecationWarning
-    # pytest's own futurewarnings
-    ignore::pytest.PytestExperimentalApiWarning
-    # Do not cause SyntaxError for invalid escape sequences in py37.
-    # Those are caught/handled by pyupgrade, and not easy to filter with the
-    # module being the filename (with .py removed).
-    default:invalid escape sequence:DeprecationWarning
-    # ignore use of unregistered marks, because we use many to test the implementation
-    ignore::_pytest.warning_types.PytestUnknownMarkWarning
-pytester_example_dir = testing/example_scripts
-markers =
-    # dummy markers for testing
-    foo
-    bar
-    baz
-    # conftest.py reorders tests moving slow ones to the end of the list
-    slow
-    # experimental mark for all tests using pexpect
-    uses_pexpect
-
-[flake8]
-max-line-length = 120
-extend-ignore = E203
-
-[isort]
-; This config mimics what reorder-python-imports does.
-force_single_line = 1
-known_localfolder = pytest,_pytest
-known_third_party = test_source,test_excinfo
-force_alphabetical_sort_within_sections = 1
+    pytest522: pytest==5.2.2
+    pytest523: pytest==5.2.3
+commands = pytest
--------
2025-01-14 17:46:30,318 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.scikit-learn_s_scikit-learn-13328. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 17:46:30,318 - INFO - Logging LLM completions for instance scikit-learn__scikit-learn-13328 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/scikit-learn__scikit-learn-13328
