2025-01-14 00:32:39,999 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_glohklmmr4l4p3fm_492h283ma6jm1v1e
2025-01-14 00:34:43,950 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_glohklmmr4l4p3fm_492h283ma6jm1v1e] build finished.
2025-01-14 00:34:43,962 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_glohklmmr4l4p3fm_492h283ma6jm1v1e] with more generic tag [oh_v0.20.0_glohklmmr4l4p3fm]
2025-01-14 00:34:43,965 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_glohklmmr4l4p3fm_492h283ma6jm1v1e, oh_v0.20.0_glohklmmr4l4p3fm] built successfully
2025-01-14 00:34:43,977 - INFO - [runtime 6ad9d5ce-b85e-4794-a378-4ecd7f05ccd0-98135113edfcff5c] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_glohklmmr4l4p3fm_492h283ma6jm1v1e
2025-01-14 00:34:44,609 - INFO - [runtime 6ad9d5ce-b85e-4794-a378-4ecd7f05ccd0-98135113edfcff5c] Container started: openhands-runtime-6ad9d5ce-b85e-4794-a378-4ecd7f05ccd0-98135113edfcff5c. VSCode URL: None
2025-01-14 00:34:44,610 - INFO - [runtime 6ad9d5ce-b85e-4794-a378-4ecd7f05ccd0-98135113edfcff5c] Waiting for client to become ready at http://localhost:33438...
2025-01-14 00:35:08,716 - INFO - [runtime 6ad9d5ce-b85e-4794-a378-4ecd7f05ccd0-98135113edfcff5c] Runtime is ready.
2025-01-14 00:35:08,863 - INFO - ------------------------------
2025-01-14 00:35:08,863 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 00:35:08,863 - INFO - ------------------------------
2025-01-14 00:35:08,864 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-13449' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 00:35:09,500 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:09,501 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 00:35:10,132 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:10,133 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 00:35:10,764 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:10,775 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 00:35:11,407 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-13449
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:11,408 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 00:35:12,037 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:12,037 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 00:35:12,038 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 00:35:13,679 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:13,680 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.2
2025-01-14 00:35:14,310 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:14,310 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 00:35:15,447 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 2a55431a56 Fixed #32016 -- Clarified manual logging config docs.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:15,447 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 00:35:16,098 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:16,098 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 00:35:16,732 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:35:16,733 - INFO - ------------------------------
2025-01-14 00:35:16,733 - INFO - END Runtime Initialization Fn
2025-01-14 00:35:16,733 - INFO - ------------------------------
2025-01-14 00:35:16,754 - INFO - [runtime 6ad9d5ce-b85e-4794-a378-4ecd7f05ccd0-98135113edfcff5c] Found 0 local microagents.
2025-01-14 00:35:16,756 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 00:35:16,757 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 00:35:47,405 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 00:36:03,188 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 00:36:17,233 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 00:37:10,755 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 00:38:05,560 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 00:39:12,279 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 00:39:31,375 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 00:39:36,964 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 00:40:31,001 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 00:41:11,590 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 00:41:30,796 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 00:42:09,772 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 00:43:03,797 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 00:43:56,240 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 00:44:32,451 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 00:44:56,151 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 00:45:23,002 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 00:46:28,654 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 00:46:49,594 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 00:47:12,785 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 00:47:48,950 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 00:48:11,376 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 00:48:32,106 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 00:48:58,918 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 00:49:57,166 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 00:50:48,077 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 00:51:18,677 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 00:52:31,070 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 00:53:07,617 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 00:53:37,238 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 00:53:37,238 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 00:53:37,239 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 00:53:37,240 - WARNING - Stopping agent due to traffic control
2025-01-14 00:53:37,240 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 00:53:37,856 - INFO - ------------------------------
2025-01-14 00:53:37,856 - INFO - BEGIN Runtime Completion Fn
2025-01-14 00:53:37,857 - INFO - ------------------------------
2025-01-14 00:53:37,857 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.2
2025-01-14 00:53:38,488 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:53:38,489 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 00:53:39,123 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:53:39,123 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 00:53:39,755 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:53:39,755 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 2a55431a5678af52f669ffe7dff3dd0bd21727f8
2025-01-14 00:53:40,392 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a3b145bc0746",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..0f34099ad9 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -24,7 +24,29 @@ class SQLiteNumericMixin:
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
             if self.output_field.get_internal_type() == 'DecimalField':
-                sql = 'CAST(%s AS NUMERIC)' % sql
+                import re
+
+                def _cast_window_func(expr_sql):
+                    pattern = r'(LAG|LEAD)\(([^)]*)\)'  # capture function call
+                    m = re.search(pattern, expr_sql, re.IGNORECASE)
+                    if not m:
+                        return expr_sql
+                    func_name = m.group(1)
+                    args_str = m.group(2)
+                    args_list = [x.strip() for x in args_str.split(',')]
+                    if args_list:
+                        # cast the first argument only if it's not already cast
+                        first_arg = args_list[0]
+                        if not first_arg.upper().startswith('CAST('):
+                            args_list[0] = f'CAST({first_arg} AS NUMERIC)'
+                    new_args = ', '.join(args_list)
+                    new_call = f'{func_name}({new_args})'
+                    return expr_sql[:m.start()] + new_call + expr_sql[m.end():]
+
+                if 'OVER(' in sql.upper():
+                    sql = f'CAST(({sql}) AS NUMERIC)'
+                else:
+                    sql = 'CAST((%s) AS NUMERIC)' % sql
         except FieldError:
             pass
         return sql, params
diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py
index 84b2b24ffa..30a994536c 100644
--- a/django/db/models/functions/window.py
+++ b/django/db/models/functions/window.py
@@ -44,6 +44,54 @@ class LagLeadFunction(Func):
             args += (default,)
         super().__init__(*args, **extra)

+
+    def as_sqlite(self, compiler, connection, **extra_context):
+        exprs = self.get_source_expressions()
+        if exprs:
+            from django.db.models import DecimalField, FloatField
+            from django.db.models.expressions import CombinedExpression, Value
+            first_expr = exprs[0]
+            # If the field is Decimal, convert to float via a multiplication expression.
+            if hasattr(first_expr, 'output_field') and isinstance(first_expr.output_field, DecimalField):
+                new_expr = CombinedExpression(
+                    first_expr,
+                    '*',
+                    Value(1.0, output_field=FloatField()),
+                    output_field=FloatField()
+                )
+                exprs[0] = new_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+
+        # If the first argument is a DecimalField, cast it inside the function call.
+        exprs = self.get_source_expressions()
+        if exprs:
+            from django.db.models.fields import DecimalField
+            from django.db.models.functions import Cast
+            first_expr = exprs[0]
+            if hasattr(first_expr, 'output_field') and isinstance(first_expr.output_field, DecimalField):
+                casted_expr = Cast(
+                    first_expr,
+                    output_field=DecimalField(
+                        max_digits=first_expr.output_field.max_digits,
+                        decimal_places=first_expr.output_field.decimal_places,
+                    )
+                )
+                exprs[0] = casted_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+
+                casted_expr = Cast(
+                    first_expr,
+                    output_field=DecimalField(
+                        max_digits=first_expr.output_field.max_digits,
+                        decimal_places=first_expr.output_field.decimal_places
+                    )
+                )
+                exprs[0] = casted_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+
     def _resolve_output_field(self):
         sources = self.get_source_expressions()
         return sources[0].output_field
@@ -61,6 +109,23 @@ class LastValue(Func):

 class Lead(LagLeadFunction):
     function = 'LEAD'
+    def as_sqlite(self, compiler, connection, **extra_context):
+        exprs = self.get_source_expressions()
+        from django.db.models import DecimalField, FloatField
+        from django.db.models.expressions import CombinedExpression, Value
+        if len(exprs) > 0:
+            first_expr = exprs[0]
+            if hasattr(first_expr, 'output_field') and isinstance(first_expr.output_field, DecimalField):
+                new_expr = CombinedExpression(
+                    Value(1.0, output_field=FloatField()),
+                    '*',
+                    first_expr,
+                    output_field=FloatField()
+                )
+                exprs[0] = new_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+


 class NthValue(Func):
diff --git a/scripts/reproduce_lag_bug.py b/scripts/reproduce_lag_bug.py
new file mode 100644
index 0000000000..e5931e2d88
--- /dev/null
+++ b/scripts/reproduce_lag_bug.py
@@ -0,0 +1,51 @@
+import sys
+import django
+from django.conf import settings
+
+
+def main():
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test',
+        INSTALLED_APPS=[__name__],  # We'll define the model inline
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+    from django.db import models
+
+    class LagTest(models.Model):
+        modified = models.DateField()
+        data = models.FloatField()
+        amount = models.DecimalField(decimal_places=4, max_digits=7)
+
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(LagTest)
+
+    # Insert some test data
+    from datetime import date
+    LagTest.objects.create(modified=date(2020,1,1), data=1.23, amount=10.00)
+
+    # Attempt to run a query using LAG on a DecimalField.
+    from django.db.models import F
+    from django.db.models.functions import Lag
+    from django.db.models import Window
+    qs = LagTest.objects.all().annotate(
+        w=Window(
+            expression=Lag('amount', 7),
+            partition_by=[F('modified')],
+            order_by=F('modified').asc()
+        )
+    )
+    print(qs)
+
+if __name__ == '__main__':
+    main()
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 00:53:40,393 - INFO - ------------------------------
2025-01-14 00:53:40,393 - INFO - END Runtime Completion Fn
2025-01-14 00:53:40,393 - INFO - ------------------------------
2025-01-14 00:53:40,393 - INFO - Got git diff for instance django__django-13449:
--------
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..0f34099ad9 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -24,7 +24,29 @@ class SQLiteNumericMixin:
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
             if self.output_field.get_internal_type() == 'DecimalField':
-                sql = 'CAST(%s AS NUMERIC)' % sql
+                import re
+
+                def _cast_window_func(expr_sql):
+                    pattern = r'(LAG|LEAD)\(([^)]*)\)'  # capture function call
+                    m = re.search(pattern, expr_sql, re.IGNORECASE)
+                    if not m:
+                        return expr_sql
+                    func_name = m.group(1)
+                    args_str = m.group(2)
+                    args_list = [x.strip() for x in args_str.split(',')]
+                    if args_list:
+                        # cast the first argument only if it's not already cast
+                        first_arg = args_list[0]
+                        if not first_arg.upper().startswith('CAST('):
+                            args_list[0] = f'CAST({first_arg} AS NUMERIC)'
+                    new_args = ', '.join(args_list)
+                    new_call = f'{func_name}({new_args})'
+                    return expr_sql[:m.start()] + new_call + expr_sql[m.end():]
+
+                if 'OVER(' in sql.upper():
+                    sql = f'CAST(({sql}) AS NUMERIC)'
+                else:
+                    sql = 'CAST((%s) AS NUMERIC)' % sql
         except FieldError:
             pass
         return sql, params
diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py
index 84b2b24ffa..30a994536c 100644
--- a/django/db/models/functions/window.py
+++ b/django/db/models/functions/window.py
@@ -44,6 +44,54 @@ class LagLeadFunction(Func):
             args += (default,)
         super().__init__(*args, **extra)

+
+    def as_sqlite(self, compiler, connection, **extra_context):
+        exprs = self.get_source_expressions()
+        if exprs:
+            from django.db.models import DecimalField, FloatField
+            from django.db.models.expressions import CombinedExpression, Value
+            first_expr = exprs[0]
+            # If the field is Decimal, convert to float via a multiplication expression.
+            if hasattr(first_expr, 'output_field') and isinstance(first_expr.output_field, DecimalField):
+                new_expr = CombinedExpression(
+                    first_expr,
+                    '*',
+                    Value(1.0, output_field=FloatField()),
+                    output_field=FloatField()
+                )
+                exprs[0] = new_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+
+        # If the first argument is a DecimalField, cast it inside the function call.
+        exprs = self.get_source_expressions()
+        if exprs:
+            from django.db.models.fields import DecimalField
+            from django.db.models.functions import Cast
+            first_expr = exprs[0]
+            if hasattr(first_expr, 'output_field') and isinstance(first_expr.output_field, DecimalField):
+                casted_expr = Cast(
+                    first_expr,
+                    output_field=DecimalField(
+                        max_digits=first_expr.output_field.max_digits,
+                        decimal_places=first_expr.output_field.decimal_places,
+                    )
+                )
+                exprs[0] = casted_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+
+                casted_expr = Cast(
+                    first_expr,
+                    output_field=DecimalField(
+                        max_digits=first_expr.output_field.max_digits,
+                        decimal_places=first_expr.output_field.decimal_places
+                    )
+                )
+                exprs[0] = casted_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+
     def _resolve_output_field(self):
         sources = self.get_source_expressions()
         return sources[0].output_field
@@ -61,6 +109,23 @@ class LastValue(Func):

 class Lead(LagLeadFunction):
     function = 'LEAD'
+    def as_sqlite(self, compiler, connection, **extra_context):
+        exprs = self.get_source_expressions()
+        from django.db.models import DecimalField, FloatField
+        from django.db.models.expressions import CombinedExpression, Value
+        if len(exprs) > 0:
+            first_expr = exprs[0]
+            if hasattr(first_expr, 'output_field') and isinstance(first_expr.output_field, DecimalField):
+                new_expr = CombinedExpression(
+                    Value(1.0, output_field=FloatField()),
+                    '*',
+                    first_expr,
+                    output_field=FloatField()
+                )
+                exprs[0] = new_expr
+                self.set_source_expressions(exprs)
+        return super().as_sqlite(compiler, connection, **extra_context)
+


 class NthValue(Func):
diff --git a/scripts/reproduce_lag_bug.py b/scripts/reproduce_lag_bug.py
new file mode 100644
index 0000000000..e5931e2d88
--- /dev/null
+++ b/scripts/reproduce_lag_bug.py
@@ -0,0 +1,51 @@
+import sys
+import django
+from django.conf import settings
+
+
+def main():
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test',
+        INSTALLED_APPS=[__name__],  # We'll define the model inline
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+    from django.db import models
+
+    class LagTest(models.Model):
+        modified = models.DateField()
+        data = models.FloatField()
+        amount = models.DecimalField(decimal_places=4, max_digits=7)
+
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(LagTest)
+
+    # Insert some test data
+    from datetime import date
+    LagTest.objects.create(modified=date(2020,1,1), data=1.23, amount=10.00)
+
+    # Attempt to run a query using LAG on a DecimalField.
+    from django.db.models import F
+    from django.db.models.functions import Lag
+    from django.db.models import Window
+    qs = LagTest.objects.all().annotate(
+        w=Window(
+            expression=Lag('amount', 7),
+            partition_by=[F('modified')],
+            order_by=F('modified').asc()
+        )
+    )
+    print(qs)
+
+if __name__ == '__main__':
+    main()
--------
2025-01-14 00:53:41,920 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-14349. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 00:53:41,921 - INFO - Logging LLM completions for instance django__django-14349 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-14349
