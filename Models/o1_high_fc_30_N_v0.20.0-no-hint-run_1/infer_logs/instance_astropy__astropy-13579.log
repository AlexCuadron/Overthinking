2025-01-13 22:34:21,630 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e
2025-01-13 22:37:00,598 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e
2025-01-13 22:37:51,867 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e
2025-01-13 22:40:57,757 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e] build finished.
2025-01-13 22:40:57,773 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e] with more generic tag [oh_v0.20.0_ncaowhoqymr27mkk]
2025-01-13 22:40:57,777 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e, oh_v0.20.0_ncaowhoqymr27mkk] built successfully
2025-01-13 22:40:57,827 - INFO - [runtime ec788e46-8348-4709-a0a1-2173d674aea7-3f94cadc584835cd] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ncaowhoqymr27mkk_492h283ma6jm1v1e
2025-01-13 22:40:59,159 - INFO - [runtime ec788e46-8348-4709-a0a1-2173d674aea7-3f94cadc584835cd] Container started: openhands-runtime-ec788e46-8348-4709-a0a1-2173d674aea7-3f94cadc584835cd. VSCode URL: None
2025-01-13 22:40:59,160 - INFO - [runtime ec788e46-8348-4709-a0a1-2173d674aea7-3f94cadc584835cd] Waiting for client to become ready at http://localhost:36875...
2025-01-13 22:41:39,311 - INFO - [runtime ec788e46-8348-4709-a0a1-2173d674aea7-3f94cadc584835cd] Runtime is ready.
2025-01-13 22:41:39,970 - INFO - ------------------------------
2025-01-13 22:41:39,970 - INFO - BEGIN Runtime Initialization Fn
2025-01-13 22:41:39,971 - INFO - ------------------------------
2025-01-13 22:41:39,971 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=astropy__astropy-13579' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-13 22:41:40,645 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:40,646 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-13 22:41:41,282 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:41,283 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-13 22:41:41,920 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:41,934 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-13 22:41:42,576 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=astropy__astropy-13579
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:42,577 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-13 22:41:43,215 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:43,215 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-13 22:41:43,215 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-13 22:41:44,368 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: astropy__astropy__5.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:44,368 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/astropy__astropy__5.0
2025-01-13 22:41:45,005 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:45,006 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-13 22:41:45,661 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 0df94ff709 Merge pull request #13574 from pllim/rm-corpus-404
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:45,662 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-13 22:41:46,304 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:46,304 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-13 22:41:46,942 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 22:41:46,942 - INFO - ------------------------------
2025-01-13 22:41:46,942 - INFO - END Runtime Initialization Fn
2025-01-13 22:41:46,942 - INFO - ------------------------------
2025-01-13 22:41:46,967 - INFO - [runtime ec788e46-8348-4709-a0a1-2173d674aea7-3f94cadc584835cd] Found 0 local microagents.
2025-01-13 22:41:46,971 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-13 22:41:46,987 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-13 22:42:03,599 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-13 22:42:09,903 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-13 22:42:17,709 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-13 22:42:20,539 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-13 22:46:25,226 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-13 22:48:31,088 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-13 22:48:45,999 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-13 22:50:51,805 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-13 22:53:24,201 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-13 22:54:23,843 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-13 22:54:56,277 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-13 22:55:09,182 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-13 22:55:26,520 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-13 22:56:05,216 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-13 22:56:23,361 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-13 22:56:38,688 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-13 22:56:46,160 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-13 22:57:03,934 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-13 22:57:55,625 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-13 22:58:56,893 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-13 22:59:26,811 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-13 22:59:58,909 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-13 23:00:14,851 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-13 23:00:20,653 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-13 23:01:32,082 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-13 23:03:08,274 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-13 23:03:43,024 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-13 23:05:24,529 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-13 23:05:56,783 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-13 23:06:16,329 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-13 23:06:16,330 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-13 23:06:16,331 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-13 23:06:16,331 - WARNING - Stopping agent due to traffic control
2025-01-13 23:06:16,331 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-13 23:06:16,442 - INFO - ------------------------------
2025-01-13 23:06:16,442 - INFO - BEGIN Runtime Completion Fn
2025-01-13 23:06:16,442 - INFO - ------------------------------
2025-01-13 23:06:16,443 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/astropy__astropy__5.0
2025-01-13 23:06:17,074 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 23:06:17,074 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-13 23:06:17,705 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 23:06:17,705 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-13 23:06:18,335 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 23:06:18,335 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 0df94ff7097961e92fd7812036a24b145bc13ca8
2025-01-13 23:06:18,968 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6b3121859a52",
  "working_dir": "/workspace/astropy__astropy__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..a7148c5e09 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -153,7 +153,47 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
             raise ValueError("Cannot slice WCS: the resulting WCS should have "
                              "at least one pixel and one world dimension.")

-    @lazyproperty
+        # Store reference world values for any integer-sliced pixel dimensions.
+        self._frozen_world_values = [None] * self._wcs.world_n_dim
+        pixel_ref = [0]*self._wcs.pixel_n_dim
+        for ipix_dim in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix_dim], numbers.Integral):
+                pixel_ref[ipix_dim] = self._slices_pixel[ipix_dim]
+
+        ref_world = self._wcs.pixel_to_world_values(*pixel_ref)
+        if self._wcs.world_n_dim == 1:
+            ref_world = (ref_world,)
+
+        # For any dimension not in _world_keep, freeze it at the reference world value.
+        for iworld_dim in range(self._wcs.world_n_dim):
+            if iworld_dim not in self._world_keep:
+                self._frozen_world_values[iworld_dim] = ref_world[iworld_dim]
+
+
+    # @lazyproperty
+'''
+        # Store the world coordinate values for any integer-sliced pixel dimensions.
+        # This ensures that world_to_pixel can properly fix those dropped dimensions.
+        self._frozen_world_values = [None] * self._wcs.world_n_dim
+
+        # Build a pixel array using 0 for slice(None) dims and the integer slice value for integer-sliced dims.
+        pixel_array = [0]*self._wcs.pixel_n_dim
+        for ipix_dim in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix_dim], numbers.Integral):
+                pixel_array[ipix_dim] = self._slices_pixel[ipix_dim]
+
+        # Compute the world coords for that reference pixel.
+        ref_w = self._wcs.pixel_to_world_values(*pixel_array)
+
+        # If world_n_dim == 1, pixel_to_world_values returns a scalar, so wrap it in a tuple.
+        if self._wcs.world_n_dim == 1:
+            ref_w = (ref_w,)
+
+        # For any world dimension that was dropped, fix its world value.
+        for iworld_dim in range(self._wcs.world_n_dim):
+            if iworld_dim not in self._world_keep:
+                self._frozen_world_values[iworld_dim] = ref_w[iworld_dim]
+
     def dropped_world_dimensions(self):
         """
         Information describing the dropped world dimensions.
@@ -251,7 +291,7 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                world_arrays_new.append(self._frozen_world_values[iworld])

         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..0eb5afa0d2
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,65 @@
+import numpy as np
+import astropy.wcs
+from astropy.coordinates import SkyCoord
+import astropy.units as u
+from astropy.wcs.wcsapi import SlicedLowLevelWCS, HighLevelWCSWrapper
+import astropy.wcs.utils
+
+# Reproduction script for the issue described in the PR
+
+nx = 100
+ny = 25
+nz = 2
+wcs_header = {
+    'WCSAXES': 3,
+    'CRPIX1': (nx + 1)/2,
+    'CRPIX2': (ny + 1)/2,
+    'CRPIX3': 1.0,
+    'PC1_1': 0.0,
+    'PC1_2': -1.0,
+    'PC1_3': 0.0,
+    'PC2_1': 1.0,
+    'PC2_2': 0.0,
+    'PC2_3': -1.0,
+    'CDELT1': 5,
+    'CDELT2': 5,
+    'CDELT3': 0.055,
+    'CUNIT1': 'arcsec',
+    'CUNIT2': 'arcsec',
+    'CUNIT3': 'Angstrom',
+    'CTYPE1': 'HPLN-TAN',
+    'CTYPE2': 'HPLT-TAN',
+    'CTYPE3': 'WAVE',
+    'CRVAL1': 0.0,
+    'CRVAL2': 0.0,
+    'CRVAL3': 1.05,
+}
+
+fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec,
+              frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))
+
+print("==== Full (unsliced) WCS world_to_pixel ====")
+full_pix = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)
+print("world_to_pixel(pt, 1.05 * A) =>", full_pix)
+
+print("\n==== Sliced WCS ====")
+ll_sliced_wcs = SlicedLowLevelWCS(fits_wcs, 0)
+hl_sliced_wcs = HighLevelWCSWrapper(ll_sliced_wcs)
+sliced_pix = hl_sliced_wcs.world_to_pixel(pt)
+print("With slice=0 => world_to_pixel(pt)", sliced_pix)
+
+print("\n==== Checking pixel_to_world consistency ====")
+
+px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)
+mw_full = fits_wcs.pixel_to_world(px, py, pz)
+print("Full WCS -> pixel -> world =>", mw_full)
+
+if ll_sliced_wcs.pixel_n_dim == 2:
+    # get the 2D pixel coords from the full transform
+    mw_sliced = hl_sliced_wcs.pixel_to_world(px, py)
+    print("Sliced WCS -> same pixel -> world =>", mw_sliced)
+
+print("\nDone.")
+
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-13 23:06:18,969 - INFO - ------------------------------
2025-01-13 23:06:18,969 - INFO - END Runtime Completion Fn
2025-01-13 23:06:18,969 - INFO - ------------------------------
2025-01-13 23:06:18,969 - INFO - Got git diff for instance astropy__astropy-13579:
--------
diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..a7148c5e09 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -153,7 +153,47 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
             raise ValueError("Cannot slice WCS: the resulting WCS should have "
                              "at least one pixel and one world dimension.")

-    @lazyproperty
+        # Store reference world values for any integer-sliced pixel dimensions.
+        self._frozen_world_values = [None] * self._wcs.world_n_dim
+        pixel_ref = [0]*self._wcs.pixel_n_dim
+        for ipix_dim in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix_dim], numbers.Integral):
+                pixel_ref[ipix_dim] = self._slices_pixel[ipix_dim]
+
+        ref_world = self._wcs.pixel_to_world_values(*pixel_ref)
+        if self._wcs.world_n_dim == 1:
+            ref_world = (ref_world,)
+
+        # For any dimension not in _world_keep, freeze it at the reference world value.
+        for iworld_dim in range(self._wcs.world_n_dim):
+            if iworld_dim not in self._world_keep:
+                self._frozen_world_values[iworld_dim] = ref_world[iworld_dim]
+
+
+    # @lazyproperty
+'''
+        # Store the world coordinate values for any integer-sliced pixel dimensions.
+        # This ensures that world_to_pixel can properly fix those dropped dimensions.
+        self._frozen_world_values = [None] * self._wcs.world_n_dim
+
+        # Build a pixel array using 0 for slice(None) dims and the integer slice value for integer-sliced dims.
+        pixel_array = [0]*self._wcs.pixel_n_dim
+        for ipix_dim in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix_dim], numbers.Integral):
+                pixel_array[ipix_dim] = self._slices_pixel[ipix_dim]
+
+        # Compute the world coords for that reference pixel.
+        ref_w = self._wcs.pixel_to_world_values(*pixel_array)
+
+        # If world_n_dim == 1, pixel_to_world_values returns a scalar, so wrap it in a tuple.
+        if self._wcs.world_n_dim == 1:
+            ref_w = (ref_w,)
+
+        # For any world dimension that was dropped, fix its world value.
+        for iworld_dim in range(self._wcs.world_n_dim):
+            if iworld_dim not in self._world_keep:
+                self._frozen_world_values[iworld_dim] = ref_w[iworld_dim]
+
     def dropped_world_dimensions(self):
         """
         Information describing the dropped world dimensions.
@@ -251,7 +291,7 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                world_arrays_new.append(self._frozen_world_values[iworld])

         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..0eb5afa0d2
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,65 @@
+import numpy as np
+import astropy.wcs
+from astropy.coordinates import SkyCoord
+import astropy.units as u
+from astropy.wcs.wcsapi import SlicedLowLevelWCS, HighLevelWCSWrapper
+import astropy.wcs.utils
+
+# Reproduction script for the issue described in the PR
+
+nx = 100
+ny = 25
+nz = 2
+wcs_header = {
+    'WCSAXES': 3,
+    'CRPIX1': (nx + 1)/2,
+    'CRPIX2': (ny + 1)/2,
+    'CRPIX3': 1.0,
+    'PC1_1': 0.0,
+    'PC1_2': -1.0,
+    'PC1_3': 0.0,
+    'PC2_1': 1.0,
+    'PC2_2': 0.0,
+    'PC2_3': -1.0,
+    'CDELT1': 5,
+    'CDELT2': 5,
+    'CDELT3': 0.055,
+    'CUNIT1': 'arcsec',
+    'CUNIT2': 'arcsec',
+    'CUNIT3': 'Angstrom',
+    'CTYPE1': 'HPLN-TAN',
+    'CTYPE2': 'HPLT-TAN',
+    'CTYPE3': 'WAVE',
+    'CRVAL1': 0.0,
+    'CRVAL2': 0.0,
+    'CRVAL3': 1.05,
+}
+
+fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec,
+              frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))
+
+print("==== Full (unsliced) WCS world_to_pixel ====")
+full_pix = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)
+print("world_to_pixel(pt, 1.05 * A) =>", full_pix)
+
+print("\n==== Sliced WCS ====")
+ll_sliced_wcs = SlicedLowLevelWCS(fits_wcs, 0)
+hl_sliced_wcs = HighLevelWCSWrapper(ll_sliced_wcs)
+sliced_pix = hl_sliced_wcs.world_to_pixel(pt)
+print("With slice=0 => world_to_pixel(pt)", sliced_pix)
+
+print("\n==== Checking pixel_to_world consistency ====")
+
+px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)
+mw_full = fits_wcs.pixel_to_world(px, py, pz)
+print("Full WCS -> pixel -> world =>", mw_full)
+
+if ll_sliced_wcs.pixel_n_dim == 2:
+    # get the 2D pixel coords from the full transform
+    mw_sliced = hl_sliced_wcs.pixel_to_world(px, py)
+    print("Sliced WCS -> same pixel -> world =>", mw_sliced)
+
+print("\nDone.")
+
--------
2025-01-13 23:06:20,082 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-11728. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-13 23:06:20,082 - INFO - Logging LLM completions for instance django__django-11728 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-11728
