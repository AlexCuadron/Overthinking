2025-01-14 01:28:02,651 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_sencbr6x9pmjqkmo_492h283ma6jm1v1e
2025-01-14 01:30:05,183 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_sencbr6x9pmjqkmo_492h283ma6jm1v1e] build finished.
2025-01-14 01:30:05,197 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_sencbr6x9pmjqkmo_492h283ma6jm1v1e] with more generic tag [oh_v0.20.0_sencbr6x9pmjqkmo]
2025-01-14 01:30:05,200 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_sencbr6x9pmjqkmo_492h283ma6jm1v1e, oh_v0.20.0_sencbr6x9pmjqkmo] built successfully
2025-01-14 01:30:05,211 - INFO - [runtime 2a7afe64-37d7-4c22-a68b-623f7b2dc0de-88c74c13f89d7968] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_sencbr6x9pmjqkmo_492h283ma6jm1v1e
2025-01-14 01:30:06,339 - INFO - [runtime 2a7afe64-37d7-4c22-a68b-623f7b2dc0de-88c74c13f89d7968] Container started: openhands-runtime-2a7afe64-37d7-4c22-a68b-623f7b2dc0de-88c74c13f89d7968. VSCode URL: None
2025-01-14 01:30:06,339 - INFO - [runtime 2a7afe64-37d7-4c22-a68b-623f7b2dc0de-88c74c13f89d7968] Waiting for client to become ready at http://localhost:33610...
2025-01-14 01:30:34,435 - INFO - [runtime 2a7afe64-37d7-4c22-a68b-623f7b2dc0de-88c74c13f89d7968] Runtime is ready.
2025-01-14 01:30:35,078 - INFO - ------------------------------
2025-01-14 01:30:35,078 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 01:30:35,079 - INFO - ------------------------------
2025-01-14 01:30:35,079 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-15563' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 01:30:35,711 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:35,711 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 01:30:36,344 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:36,344 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 01:30:36,974 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:36,983 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 01:30:37,613 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-15563
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:37,613 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 01:30:38,243 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:38,244 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 01:30:38,244 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 01:30:39,886 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:39,887 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__4.1
2025-01-14 01:30:40,518 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:40,518 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 01:30:41,652 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 9ffd4eae2c Fixed #33611 -- Allowed View subclasses to define async method handlers.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:41,653 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 01:30:42,284 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:42,285 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 01:30:42,914 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:30:42,914 - INFO - ------------------------------
2025-01-14 01:30:42,914 - INFO - END Runtime Initialization Fn
2025-01-14 01:30:42,914 - INFO - ------------------------------
2025-01-14 01:30:42,931 - INFO - [runtime 2a7afe64-37d7-4c22-a68b-623f7b2dc0de-88c74c13f89d7968] Found 0 local microagents.
2025-01-14 01:30:42,933 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 01:30:42,934 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 01:31:06,404 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 01:31:38,893 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 01:31:53,719 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 01:32:24,908 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 01:32:45,114 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 01:32:48,245 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 01:35:07,939 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 01:35:29,067 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 01:36:24,476 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 01:36:29,482 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 01:36:47,518 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 01:38:14,066 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 01:38:51,998 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 01:39:59,142 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 01:40:04,935 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 01:40:47,883 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 01:41:56,693 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 01:44:00,302 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 01:44:49,606 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 01:45:49,536 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 01:46:41,202 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 01:47:13,474 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 01:47:53,397 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 01:49:46,969 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 01:50:53,096 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 01:51:50,489 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 01:52:07,841 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 01:53:50,484 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-14 01:53:51,294 - INFO - ------------------------------
2025-01-14 01:53:51,294 - INFO - BEGIN Runtime Completion Fn
2025-01-14 01:53:51,294 - INFO - ------------------------------
2025-01-14 01:53:51,294 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__4.1
2025-01-14 01:53:51,928 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:53:51,928 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 01:53:52,562 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:53:52,562 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 01:53:53,192 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:53:53,193 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 9ffd4eae2ce7a7100c98f681e2b6ab818df384a4
2025-01-14 01:53:53,838 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "f6b619a8ff7b",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..ec4abfebf4 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -70,6 +70,17 @@ class UpdateQuery(Query):

     def update_batch(self, pk_list, values, using):
         self.add_update_values(values)
+        # Only run the main update if there are actually fields to update on this (child) table.
+        if self.values:
+            for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):
+                self.clear_where()
+                self.add_filter(
+                    "pk__in", pk_list[offset : offset + GET_ITERATOR_CHUNK_SIZE]
+                )
+                self.get_compiler(using).execute_sql(NO_RESULTS)
+
+        # Now proceed with parent updates if needed.
+
         for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):
             self.clear_where()
             self.add_filter(
@@ -77,13 +88,37 @@ class UpdateQuery(Query):
             )
             self.get_compiler(using).execute_sql(NO_RESULTS)

+        # Perform parent updates for multi-inheritance.
+        if self.related_updates:
+            child_columns = set(f.column for f in self.get_meta().local_concrete_fields)
+            from django.db import connections
+            connection = connections[using]
+            # Convert pk_list to a comma-separated string.
+            pk_list_str = ','.join(str(pk) for pk in pk_list)
+            for pm, fields_dict in self.related_updates.items():
+                parent_db_table = pm._meta.db_table
+                parent_pk_column = pm._meta.pk.column
+                child_db_table = self.get_meta().db_table
+                child_pk_column = self.get_meta().pk.column
+                parent_link = self.get_meta().get_ancestor_link(pm)
+                parent_link_column = parent_link.column
+                # For each field to update on the parent, build a raw SQL update with a subselect.
+                for f, val in fields_dict.items():
+                    sql = f"UPDATE \"{parent_db_table}\" SET \"{f.column}\" = ? WHERE \"{parent_pk_column}\" IN (SELECT \"{parent_link_column}\" FROM \"{child_db_table}\" WHERE \"{child_pk_column}\" IN ({pk_list_str}))"
+
+                    with connection.cursor() as cursor:
+                        cursor.execute(sql, [val])
+
     def add_update_values(self, values):
         """
         Convert a dictionary of field name to value mappings into an update
         query. This is the entry point for the public update() method on
         querysets.
         """
+        # Distinguish between child columns and parent columns
+        child_field_names = {f.name for f in self.get_meta().local_fields}
         values_seq = []
+        child_columns = set(f.column for f in self.get_meta().local_concrete_fields)
         for name, val in values.items():
             field = self.get_meta().get_field(name)
             direct = (
diff --git a/reproducer.py b/reproducer.py
new file mode 100644
index 0000000000..239a9289e8
--- /dev/null
+++ b/reproducer.py
@@ -0,0 +1,61 @@
+import django
+import sys
+from django.conf import settings
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['__main__'],
+        SECRET_KEY='testkey',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+import django
+django.setup()
+
+from django.db import models
+
+class Base(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField()
+
+class OtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField()
+
+class Child(Base, OtherBase):
+    pass
+
+def main():
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Base)
+        schema_editor.create_model(OtherBase)
+        schema_editor.create_model(Child)
+
+
+    b1 = OtherBase.objects.create(field_otherbase=100)
+    b2 = OtherBase.objects.create(field_otherbase=101)
+    c1 = Child.objects.create(field_base=0, field_otherbase=0)
+    c2 = Child.objects.create(field_base=1, field_otherbase=1)
+
+    Child.objects.update(field_otherbase=55)
+    from django.db import connection
+    with connection.cursor() as cursor:
+        cursor.execute('PRAGMA table_info("__main___otherbase");')
+        print("__main___otherbase schema:", cursor.fetchall())
+        cursor.execute('PRAGMA table_info("__main___child");')
+        print("__main___child schema:", cursor.fetchall())
+
+    print("Child field_otherbase after update:", list(Child.objects.values('field_otherbase')))
+    print("OtherBase field_otherbase after update:", list(OtherBase.objects.values('field_otherbase')))
+
+if __name__ == '__main__':
+    main()
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:53:53,838 - INFO - ------------------------------
2025-01-14 01:53:53,838 - INFO - END Runtime Completion Fn
2025-01-14 01:53:53,838 - INFO - ------------------------------
2025-01-14 01:53:53,838 - INFO - Got git diff for instance django__django-15563:
--------
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..ec4abfebf4 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -70,6 +70,17 @@ class UpdateQuery(Query):

     def update_batch(self, pk_list, values, using):
         self.add_update_values(values)
+        # Only run the main update if there are actually fields to update on this (child) table.
+        if self.values:
+            for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):
+                self.clear_where()
+                self.add_filter(
+                    "pk__in", pk_list[offset : offset + GET_ITERATOR_CHUNK_SIZE]
+                )
+                self.get_compiler(using).execute_sql(NO_RESULTS)
+
+        # Now proceed with parent updates if needed.
+
         for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):
             self.clear_where()
             self.add_filter(
@@ -77,13 +88,37 @@ class UpdateQuery(Query):
             )
             self.get_compiler(using).execute_sql(NO_RESULTS)

+        # Perform parent updates for multi-inheritance.
+        if self.related_updates:
+            child_columns = set(f.column for f in self.get_meta().local_concrete_fields)
+            from django.db import connections
+            connection = connections[using]
+            # Convert pk_list to a comma-separated string.
+            pk_list_str = ','.join(str(pk) for pk in pk_list)
+            for pm, fields_dict in self.related_updates.items():
+                parent_db_table = pm._meta.db_table
+                parent_pk_column = pm._meta.pk.column
+                child_db_table = self.get_meta().db_table
+                child_pk_column = self.get_meta().pk.column
+                parent_link = self.get_meta().get_ancestor_link(pm)
+                parent_link_column = parent_link.column
+                # For each field to update on the parent, build a raw SQL update with a subselect.
+                for f, val in fields_dict.items():
+                    sql = f"UPDATE \"{parent_db_table}\" SET \"{f.column}\" = ? WHERE \"{parent_pk_column}\" IN (SELECT \"{parent_link_column}\" FROM \"{child_db_table}\" WHERE \"{child_pk_column}\" IN ({pk_list_str}))"
+
+                    with connection.cursor() as cursor:
+                        cursor.execute(sql, [val])
+
     def add_update_values(self, values):
         """
         Convert a dictionary of field name to value mappings into an update
         query. This is the entry point for the public update() method on
         querysets.
         """
+        # Distinguish between child columns and parent columns
+        child_field_names = {f.name for f in self.get_meta().local_fields}
         values_seq = []
+        child_columns = set(f.column for f in self.get_meta().local_concrete_fields)
         for name, val in values.items():
             field = self.get_meta().get_field(name)
             direct = (
diff --git a/reproducer.py b/reproducer.py
new file mode 100644
index 0000000000..239a9289e8
--- /dev/null
+++ b/reproducer.py
@@ -0,0 +1,61 @@
+import django
+import sys
+from django.conf import settings
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=['__main__'],
+        SECRET_KEY='testkey',
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+
+import django
+django.setup()
+
+from django.db import models
+
+class Base(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField()
+
+class OtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField()
+
+class Child(Base, OtherBase):
+    pass
+
+def main():
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Base)
+        schema_editor.create_model(OtherBase)
+        schema_editor.create_model(Child)
+
+
+    b1 = OtherBase.objects.create(field_otherbase=100)
+    b2 = OtherBase.objects.create(field_otherbase=101)
+    c1 = Child.objects.create(field_base=0, field_otherbase=0)
+    c2 = Child.objects.create(field_base=1, field_otherbase=1)
+
+    Child.objects.update(field_otherbase=55)
+    from django.db import connection
+    with connection.cursor() as cursor:
+        cursor.execute('PRAGMA table_info("__main___otherbase");')
+        print("__main___otherbase schema:", cursor.fetchall())
+        cursor.execute('PRAGMA table_info("__main___child");')
+        print("__main___child schema:", cursor.fetchall())
+
+    print("Child field_otherbase after update:", list(Child.objects.values('field_otherbase')))
+    print("OtherBase field_otherbase after update:", list(OtherBase.objects.values('field_otherbase')))
+
+if __name__ == '__main__':
+    main()
--------
2025-01-14 01:53:55,746 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-16661. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 01:53:55,747 - INFO - Logging LLM completions for instance django__django-16661 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-16661
