2025-01-14 02:19:11,506 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ra8g67kqrfbp9qs1_492h283ma6jm1v1e
2025-01-14 02:22:06,205 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ra8g67kqrfbp9qs1_492h283ma6jm1v1e] build finished.
2025-01-14 02:22:06,221 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ra8g67kqrfbp9qs1_492h283ma6jm1v1e] with more generic tag [oh_v0.20.0_ra8g67kqrfbp9qs1]
2025-01-14 02:22:06,225 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_ra8g67kqrfbp9qs1_492h283ma6jm1v1e, oh_v0.20.0_ra8g67kqrfbp9qs1] built successfully
2025-01-14 02:22:06,243 - INFO - [runtime 0a8222c5-73bd-4ebc-98ef-1b4518dee2b3-b1e283444072fa9c] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ra8g67kqrfbp9qs1_492h283ma6jm1v1e
2025-01-14 02:22:07,690 - INFO - [runtime 0a8222c5-73bd-4ebc-98ef-1b4518dee2b3-b1e283444072fa9c] Container started: openhands-runtime-0a8222c5-73bd-4ebc-98ef-1b4518dee2b3-b1e283444072fa9c. VSCode URL: None
2025-01-14 02:22:07,690 - INFO - [runtime 0a8222c5-73bd-4ebc-98ef-1b4518dee2b3-b1e283444072fa9c] Waiting for client to become ready at http://localhost:31295...
2025-01-14 02:22:37,804 - INFO - [runtime 0a8222c5-73bd-4ebc-98ef-1b4518dee2b3-b1e283444072fa9c] Runtime is ready.
2025-01-14 02:22:38,453 - INFO - ------------------------------
2025-01-14 02:22:38,454 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 02:22:38,454 - INFO - ------------------------------
2025-01-14 02:22:38,454 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=matplotlib__matplotlib-24637' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 02:22:39,127 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:39,128 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 02:22:39,761 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:39,761 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 02:22:40,393 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:40,403 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 02:22:41,036 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=matplotlib__matplotlib-24637
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:41,036 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 02:22:41,668 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:41,669 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 02:22:41,669 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 02:22:43,312 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: matplotlib__matplotlib__3.6
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:43,312 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.6
2025-01-14 02:22:43,945 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:43,946 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 02:22:45,082 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at a9ba9d5d3f Merge pull request #24736 from tacaswell/doc/dict_in_checkboxes
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:45,082 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 02:22:45,715 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:45,715 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 02:22:46,349 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:22:46,349 - INFO - ------------------------------
2025-01-14 02:22:46,349 - INFO - END Runtime Initialization Fn
2025-01-14 02:22:46,349 - INFO - ------------------------------
2025-01-14 02:22:46,367 - INFO - [runtime 0a8222c5-73bd-4ebc-98ef-1b4518dee2b3-b1e283444072fa9c] Found 0 local microagents.
2025-01-14 02:22:46,369 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 02:22:46,371 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 02:23:04,418 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 02:23:25,895 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 02:23:45,815 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 02:23:53,230 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 02:24:20,253 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 02:25:09,370 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 02:26:05,774 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 02:26:59,097 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 02:27:27,235 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 02:27:52,223 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 02:28:28,977 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 02:28:53,798 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 02:29:23,774 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 02:30:14,809 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 02:30:49,011 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 02:32:28,715 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 02:33:23,883 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 02:34:21,974 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 02:35:05,000 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 02:35:51,687 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 02:36:38,624 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 02:37:39,797 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 02:38:02,999 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 02:38:13,926 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 02:38:26,675 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 02:38:32,986 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 02:39:41,329 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 02:40:33,853 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 02:41:42,121 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 02:42:25,556 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 02:42:25,557 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 02:42:25,558 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 02:42:25,558 - WARNING - Stopping agent due to traffic control
2025-01-14 02:42:25,559 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 02:42:26,540 - INFO - ------------------------------
2025-01-14 02:42:26,540 - INFO - BEGIN Runtime Completion Fn
2025-01-14 02:42:26,540 - INFO - ------------------------------
2025-01-14 02:42:26,541 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.6
2025-01-14 02:42:27,172 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:42:27,172 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 02:42:27,806 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:42:27,806 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 02:42:28,942 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:42:28,942 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached a9ba9d5d3fe9d5ac15fbdb06127f97d381148dd0
2025-01-14 02:42:29,574 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "05269ab6c2a7",
  "working_dir": "/workspace/matplotlib__matplotlib__3.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/example.svg b/example.svg
new file mode 100644
index 0000000000..6f265ddbe3
Binary files /dev/null and b/example.svg differ
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..b12c337500 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1453,6 +1453,9 @@ or callable, default: value of *xycoords*
         if not self.get_visible() or not self._check_xy(renderer):
             return
         self.update_positions(renderer)
+        renderer.open_group('annotationbbox', gid=self.get_gid())
+
+
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
                 self.arrow_patch.figure = self.figure
@@ -1460,6 +1463,7 @@ or callable, default: value of *xycoords*
         self.patch.draw(renderer)
         self.offsetbox.draw(renderer)
         self.stale = False
+        renderer.close_group('annotationbbox')


 class DraggableBase:
diff --git a/reproduce_annotationbbox_gid_issue.py b/reproduce_annotationbbox_gid_issue.py
new file mode 100644
index 0000000000..9295385080
--- /dev/null
+++ b/reproduce_annotationbbox_gid_issue.py
@@ -0,0 +1,56 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)
+
+"""
+Reproduction script for AnnotationBbox GID issue.
+
+Creates an AnnotationBbox with a custom GID and saves an SVG.
+We expect the SVG to contain gid="My_label" in the relevant group
+once the fix is applied.
+
+Usage:
+    python reproduce_annotationbbox_gid_issue.py
+"""
+
+def main():
+    fig, ax = plt.subplots()
+
+    # We'll just create a dummy image in memory for demonstration.
+    # Or you can read from an actual PNG, e.g. 'plt.imread("undraw_flowers_vx06.png")'
+    import numpy as np
+    arr_img = np.random.rand(10, 10, 3)  # placeholder image
+
+    xy = [0.3, 0.55]
+
+    imagebox = OffsetImage(arr_img, zoom=0.1)
+    imagebox.image.axes = ax
+
+    ab = AnnotationBbox(
+        imagebox,
+        xy,
+        xybox=(120., -80.),
+        xycoords='data',
+        boxcoords="offset points",
+        pad=0.5,
+        arrowprops=dict(
+            arrowstyle="->",
+            connectionstyle="angle,angleA=0,angleB=90,rad=3"
+        )
+    )
+    ab.set_gid('My_label')
+    ax.add_artist(ab)
+
+    print(f"GID set to: {ab.get_gid()}")
+
+    svg_filename = "example.svg"
+    fig.savefig(svg_filename, format="svg")
+    print(f"Saved {svg_filename}.")
+
+    # We'll show up to 2000 chars from the SVG.
+    with open(svg_filename, 'r') as f:
+        content = f.read()
+        print("SVG snippet:")
+        print(content[:2000])
+
+if __name__ == "__main__":
+    main()
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 02:42:29,574 - INFO - ------------------------------
2025-01-14 02:42:29,574 - INFO - END Runtime Completion Fn
2025-01-14 02:42:29,575 - INFO - ------------------------------
2025-01-14 02:42:29,575 - INFO - Got git diff for instance matplotlib__matplotlib-24637:
--------
diff --git a/example.svg b/example.svg
new file mode 100644
index 0000000000..6f265ddbe3
Binary files /dev/null and b/example.svg differ
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..b12c337500 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1453,6 +1453,9 @@ or callable, default: value of *xycoords*
         if not self.get_visible() or not self._check_xy(renderer):
             return
         self.update_positions(renderer)
+        renderer.open_group('annotationbbox', gid=self.get_gid())
+
+
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
                 self.arrow_patch.figure = self.figure
@@ -1460,6 +1463,7 @@ or callable, default: value of *xycoords*
         self.patch.draw(renderer)
         self.offsetbox.draw(renderer)
         self.stale = False
+        renderer.close_group('annotationbbox')


 class DraggableBase:
diff --git a/reproduce_annotationbbox_gid_issue.py b/reproduce_annotationbbox_gid_issue.py
new file mode 100644
index 0000000000..9295385080
--- /dev/null
+++ b/reproduce_annotationbbox_gid_issue.py
@@ -0,0 +1,56 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)
+
+"""
+Reproduction script for AnnotationBbox GID issue.
+
+Creates an AnnotationBbox with a custom GID and saves an SVG.
+We expect the SVG to contain gid="My_label" in the relevant group
+once the fix is applied.
+
+Usage:
+    python reproduce_annotationbbox_gid_issue.py
+"""
+
+def main():
+    fig, ax = plt.subplots()
+
+    # We'll just create a dummy image in memory for demonstration.
+    # Or you can read from an actual PNG, e.g. 'plt.imread("undraw_flowers_vx06.png")'
+    import numpy as np
+    arr_img = np.random.rand(10, 10, 3)  # placeholder image
+
+    xy = [0.3, 0.55]
+
+    imagebox = OffsetImage(arr_img, zoom=0.1)
+    imagebox.image.axes = ax
+
+    ab = AnnotationBbox(
+        imagebox,
+        xy,
+        xybox=(120., -80.),
+        xycoords='data',
+        boxcoords="offset points",
+        pad=0.5,
+        arrowprops=dict(
+            arrowstyle="->",
+            connectionstyle="angle,angleA=0,angleB=90,rad=3"
+        )
+    )
+    ab.set_gid('My_label')
+    ax.add_artist(ab)
+
+    print(f"GID set to: {ab.get_gid()}")
+
+    svg_filename = "example.svg"
+    fig.savefig(svg_filename, format="svg")
+    print(f"Saved {svg_filename}.")
+
+    # We'll show up to 2000 chars from the SVG.
+    with open(svg_filename, 'r') as f:
+        content = f.read()
+        print("SVG snippet:")
+        print(content[:2000])
+
+if __name__ == "__main__":
+    main()
--------
