2025-01-14 17:35:12,372 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ohlp4io77yl9n7on_qroup3d3os79ipoo
2025-01-14 17:37:12,510 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ohlp4io77yl9n7on_qroup3d3os79ipoo] build finished.
2025-01-14 17:37:12,525 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ohlp4io77yl9n7on_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_ohlp4io77yl9n7on]
2025-01-14 17:37:12,527 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_ohlp4io77yl9n7on_qroup3d3os79ipoo, oh_v0.20.0_ohlp4io77yl9n7on] built successfully
2025-01-14 17:37:12,535 - INFO - [runtime 5da6f746-10e8-488e-a92b-e128f1a72380-f13482561bc4e4e1] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_ohlp4io77yl9n7on_qroup3d3os79ipoo
2025-01-14 17:37:13,292 - INFO - [runtime 5da6f746-10e8-488e-a92b-e128f1a72380-f13482561bc4e4e1] Container started: openhands-runtime-5da6f746-10e8-488e-a92b-e128f1a72380-f13482561bc4e4e1. VSCode URL: None
2025-01-14 17:37:13,293 - INFO - [runtime 5da6f746-10e8-488e-a92b-e128f1a72380-f13482561bc4e4e1] Waiting for client to become ready at http://localhost:33317...
2025-01-14 17:37:39,377 - INFO - [runtime 5da6f746-10e8-488e-a92b-e128f1a72380-f13482561bc4e4e1] Runtime is ready.
2025-01-14 17:37:40,025 - INFO - ------------------------------
2025-01-14 17:37:40,026 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 17:37:40,026 - INFO - ------------------------------
2025-01-14 17:37:40,027 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-7490' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 17:37:40,657 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:40,658 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 17:37:41,284 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:41,284 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 17:37:41,909 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:41,917 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 17:37:42,542 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=pytest-dev__pytest-7490
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:42,542 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 17:37:43,169 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:43,169 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 17:37:43,169 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 17:37:43,796 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__6.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:43,796 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__6.0
2025-01-14 17:37:44,421 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:44,422 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 17:37:45,048 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 7f7a36478 Merge pull request #7482 from nicoddemus/changelog-adjustments
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:45,049 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 17:37:45,678 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:45,678 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 17:37:46,303 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:37:46,304 - INFO - ------------------------------
2025-01-14 17:37:46,304 - INFO - END Runtime Initialization Fn
2025-01-14 17:37:46,304 - INFO - ------------------------------
2025-01-14 17:37:46,319 - INFO - [runtime 5da6f746-10e8-488e-a92b-e128f1a72380-f13482561bc4e4e1] Found 0 local microagents.
2025-01-14 17:37:46,322 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 17:37:46,323 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 17:38:27,742 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 17:38:43,245 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 17:38:54,128 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 17:39:23,100 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 17:40:08,374 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 17:41:16,471 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 17:41:43,182 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 17:42:10,351 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 17:42:22,368 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 17:43:21,910 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 17:43:45,726 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 17:44:14,506 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 17:45:00,749 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 17:45:27,068 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 17:45:50,749 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 17:46:19,500 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 17:46:33,314 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 17:47:08,586 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 17:47:38,870 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 17:47:47,437 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-14 17:48:12,601 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-14 17:49:08,034 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-14 17:49:47,359 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-14 17:50:16,781 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-14 17:50:35,751 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-14 17:50:47,621 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-14 17:51:01,537 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-14 17:51:16,309 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-14 17:51:37,933 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-14 17:51:41,728 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-14 17:51:41,728 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-14 17:51:41,729 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-14 17:51:41,729 - WARNING - Stopping agent due to traffic control
2025-01-14 17:51:41,729 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-14 17:51:42,145 - INFO - ------------------------------
2025-01-14 17:51:42,145 - INFO - BEGIN Runtime Completion Fn
2025-01-14 17:51:42,145 - INFO - ------------------------------
2025-01-14 17:51:42,145 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__6.0
2025-01-14 17:51:42,772 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:51:42,773 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 17:51:43,398 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:51:43,398 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 17:51:44,025 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:51:44,025 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 7f7a36478abe7dd1fa993b115d22606aa0e35e88
2025-01-14 17:51:44,652 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "8400ec83a23c",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..94ac34d99
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,11 @@
+import subprocess
+
+if __name__ == "__main__":
+    with open("test_foo.py", "w") as f:
+        f.write("import pytest\n\n")
+        f.write("def test_xfail_test(request):\n")
+        f.write("    mark = pytest.mark.xfail(reason=\"dynamic xfail\")\n")
+        f.write("    request.node.add_marker(mark)\n")
+        f.write("    assert 0\n")
+
+    subprocess.run(["pytest", "test_foo.py"])
\ No newline at end of file
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 335e10996..d7c5ae31b 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -246,21 +246,27 @@ def pytest_runtest_setup(item: Item) -> None:

 @hookimpl(hookwrapper=True)
 def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
-    xfailed = item._store.get(xfailed_key, None)
-    if xfailed is None:
-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
-
-    if not item.config.option.runxfail:
-        if xfailed and not xfailed.run:
-            xfail("[NOTRUN] " + xfailed.reason)
-
     yield

-
+    if not item.config.option.runxfail:
+        # re-check if xfail was dynamically added
+        xfailed = evaluate_xfail_marks(item)
+        if xfailed:
+            xfail(f"[Dynamically added xfail after test execution] {xfailed.reason}")
 @hookimpl(hookwrapper=True)
 def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
     outcome = yield
     rep = outcome.get_result()
+
+    # If the test fails at call time, check if xfail was dynamically added.
+    # If so, report as xfail instead of failure.
+    if rep.when == "call" and rep.failed and not item.config.option.runxfail:
+        xfailed_new = evaluate_xfail_marks(item)
+        if xfailed_new:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed_new.reason
+
+
     xfailed = item._store.get(xfailed_key, None)
     # unittest special case, see setting of unexpectedsuccess_key
     if unexpectedsuccess_key in item._store and rep.when == "call":
@@ -290,6 +296,14 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
                 rep.longrepr = "[XPASS(strict)] " + xfailed.reason
             else:
                 rep.outcome = "passed"
+    # Check if test has just failed with an AssertionError
+    # and re-evaluate the markers in case an xfail was dynamically added.
+    if rep.failed and call.excinfo and isinstance(call.excinfo.value, AssertionError):
+        xfailed_new = evaluate_xfail_marks(item)
+        if xfailed_new:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed_new.reason
+
                 rep.wasxfail = xfailed.reason

     if (
@@ -310,6 +324,13 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str
     if hasattr(report, "wasxfail"):
         if report.skipped:
             return "xfailed", "x", "XFAIL"
+    # Fix for dynamically added xfail in test body
+    if rep.failed and call.excinfo and isinstance(call.excinfo.value, AssertionError):
+        xfailed = evaluate_xfail_marks(item)
+        if xfailed:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed.reason
+
         elif report.passed:
             return "xpassed", "X", "XPASS"
     return None
diff --git a/test_foo.py b/test_foo.py
new file mode 100644
index 000000000..d18fa3602
--- /dev/null
+++ b/test_foo.py
@@ -0,0 +1,6 @@
+import pytest
+
+def test_xfail_test(request):
+    mark = pytest.mark.xfail(reason="dynamic xfail")
+    request.node.add_marker(mark)
+    assert 0
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:51:44,652 - INFO - ------------------------------
2025-01-14 17:51:44,652 - INFO - END Runtime Completion Fn
2025-01-14 17:51:44,652 - INFO - ------------------------------
2025-01-14 17:51:44,653 - INFO - Got git diff for instance pytest-dev__pytest-7490:
--------
diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..94ac34d99
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,11 @@
+import subprocess
+
+if __name__ == "__main__":
+    with open("test_foo.py", "w") as f:
+        f.write("import pytest\n\n")
+        f.write("def test_xfail_test(request):\n")
+        f.write("    mark = pytest.mark.xfail(reason=\"dynamic xfail\")\n")
+        f.write("    request.node.add_marker(mark)\n")
+        f.write("    assert 0\n")
+
+    subprocess.run(["pytest", "test_foo.py"])
\ No newline at end of file
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 335e10996..d7c5ae31b 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -246,21 +246,27 @@ def pytest_runtest_setup(item: Item) -> None:

 @hookimpl(hookwrapper=True)
 def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
-    xfailed = item._store.get(xfailed_key, None)
-    if xfailed is None:
-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
-
-    if not item.config.option.runxfail:
-        if xfailed and not xfailed.run:
-            xfail("[NOTRUN] " + xfailed.reason)
-
     yield

-
+    if not item.config.option.runxfail:
+        # re-check if xfail was dynamically added
+        xfailed = evaluate_xfail_marks(item)
+        if xfailed:
+            xfail(f"[Dynamically added xfail after test execution] {xfailed.reason}")
 @hookimpl(hookwrapper=True)
 def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
     outcome = yield
     rep = outcome.get_result()
+
+    # If the test fails at call time, check if xfail was dynamically added.
+    # If so, report as xfail instead of failure.
+    if rep.when == "call" and rep.failed and not item.config.option.runxfail:
+        xfailed_new = evaluate_xfail_marks(item)
+        if xfailed_new:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed_new.reason
+
+
     xfailed = item._store.get(xfailed_key, None)
     # unittest special case, see setting of unexpectedsuccess_key
     if unexpectedsuccess_key in item._store and rep.when == "call":
@@ -290,6 +296,14 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
                 rep.longrepr = "[XPASS(strict)] " + xfailed.reason
             else:
                 rep.outcome = "passed"
+    # Check if test has just failed with an AssertionError
+    # and re-evaluate the markers in case an xfail was dynamically added.
+    if rep.failed and call.excinfo and isinstance(call.excinfo.value, AssertionError):
+        xfailed_new = evaluate_xfail_marks(item)
+        if xfailed_new:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed_new.reason
+
                 rep.wasxfail = xfailed.reason

     if (
@@ -310,6 +324,13 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str
     if hasattr(report, "wasxfail"):
         if report.skipped:
             return "xfailed", "x", "XFAIL"
+    # Fix for dynamically added xfail in test body
+    if rep.failed and call.excinfo and isinstance(call.excinfo.value, AssertionError):
+        xfailed = evaluate_xfail_marks(item)
+        if xfailed:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed.reason
+
         elif report.passed:
             return "xpassed", "X", "XPASS"
     return None
diff --git a/test_foo.py b/test_foo.py
new file mode 100644
index 000000000..d18fa3602
--- /dev/null
+++ b/test_foo.py
@@ -0,0 +1,6 @@
+import pytest
+
+def test_xfail_test(request):
+    mark = pytest.mark.xfail(reason="dynamic xfail")
+    request.node.add_marker(mark)
+    assert 0
--------
2025-01-14 17:51:45,201 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.scikit-learn_s_scikit-learn-14710. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 17:51:45,202 - INFO - Logging LLM completions for instance scikit-learn__scikit-learn-14710 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/scikit-learn__scikit-learn-14710
