2025-01-14 17:39:34,222 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_152mu5bzvcone3ed_qroup3d3os79ipoo
2025-01-14 17:41:38,969 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_152mu5bzvcone3ed_qroup3d3os79ipoo] build finished.
2025-01-14 17:41:38,980 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_152mu5bzvcone3ed_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_152mu5bzvcone3ed]
2025-01-14 17:41:38,982 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_152mu5bzvcone3ed_qroup3d3os79ipoo, oh_v0.20.0_152mu5bzvcone3ed] built successfully
2025-01-14 17:41:38,990 - INFO - [runtime 86044b10-ad88-4ab5-8895-bb8eb8b62c10-64bbb8e4d364f38b] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_152mu5bzvcone3ed_qroup3d3os79ipoo
2025-01-14 17:41:39,712 - INFO - [runtime 86044b10-ad88-4ab5-8895-bb8eb8b62c10-64bbb8e4d364f38b] Container started: openhands-runtime-86044b10-ad88-4ab5-8895-bb8eb8b62c10-64bbb8e4d364f38b. VSCode URL: None
2025-01-14 17:41:39,712 - INFO - [runtime 86044b10-ad88-4ab5-8895-bb8eb8b62c10-64bbb8e4d364f38b] Waiting for client to become ready at http://localhost:36141...
2025-01-14 17:42:01,786 - INFO - [runtime 86044b10-ad88-4ab5-8895-bb8eb8b62c10-64bbb8e4d364f38b] Runtime is ready.
2025-01-14 17:42:02,427 - INFO - ------------------------------
2025-01-14 17:42:02,427 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 17:42:02,427 - INFO - ------------------------------
2025-01-14 17:42:02,427 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=scikit-learn__scikit-learn-11578' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 17:42:03,072 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:03,072 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 17:42:03,697 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:03,697 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 17:42:04,323 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:04,332 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 17:42:04,957 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=scikit-learn__scikit-learn-11578
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:04,957 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 17:42:05,583 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:05,584 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 17:42:05,584 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 17:42:06,713 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: scikit-learn__scikit-learn__0.20
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:06,713 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/scikit-learn__scikit-learn__0.20
2025-01-14 17:42:07,338 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:07,339 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 17:42:07,991 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at dd69361a0 [MRG+2] ENH&BUG Add pos_label parameter and fix a bug in average_precision_score (#9980)
[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:07,991 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 17:42:08,620 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:08,621 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 17:42:09,247 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:42:09,248 - INFO - ------------------------------
2025-01-14 17:42:09,248 - INFO - END Runtime Initialization Fn
2025-01-14 17:42:09,248 - INFO - ------------------------------
2025-01-14 17:42:09,263 - INFO - [runtime 86044b10-ad88-4ab5-8895-bb8eb8b62c10-64bbb8e4d364f38b] Found 0 local microagents.
2025-01-14 17:42:09,265 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 17:42:09,266 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 17:42:32,589 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 17:42:56,473 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 17:43:02,060 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 17:43:07,070 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 17:43:44,996 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 17:44:18,090 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 17:44:26,475 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 17:44:43,277 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-14 17:44:43,415 - INFO - ------------------------------
2025-01-14 17:44:43,415 - INFO - BEGIN Runtime Completion Fn
2025-01-14 17:44:43,415 - INFO - ------------------------------
2025-01-14 17:44:43,415 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/scikit-learn__scikit-learn__0.20
2025-01-14 17:44:44,046 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:44:44,047 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 17:44:44,684 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:44:44,684 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 17:44:45,329 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:44:45,329 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached dd69361a0d9c6ccde0d2353b00b86e0e7541a3e3
2025-01-14 17:44:45,977 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "bfb11eacf115",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.20",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..e61bdbba8
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,84 @@
+import numpy as np
+from sklearn import preprocessing, linear_model, utils
+
+
+def ovr_approach(decision_function):
+    probs = 1. / (1. + np.exp(-decision_function))
+    probs = probs / probs.sum(axis=1).reshape((probs.shape[0], -1))
+    return probs
+
+def score_from_probs(probs, y_bin):
+    return (y_bin * np.log(probs)).sum(axis=1).mean()
+
+
+if __name__ == "__main__":
+    np.random.seed(seed=1234)
+
+    samples = 200
+    features = 5
+    folds = 10
+
+    # Use a "probabilistic" scorer
+    scorer = 'neg_log_loss'
+
+    x = np.random.random(size=(samples, features))
+    y = np.random.choice(['a', 'b', 'c'], size=samples)
+
+    test = np.random.choice(range(samples), size=int(samples / float(folds)), replace=False)
+    train = [idx for idx in range(samples) if idx not in test]
+
+    # Binarize the labels for y[test]
+    lb = preprocessing.label.LabelBinarizer()
+    lb.fit(y[test])
+    y_bin = lb.transform(y[test])
+
+    # What does _log_reg_scoring_path give us for the score?
+    coefs, _, scores, _ = linear_model.logistic._log_reg_scoring_path(
+        x, y, train, test, fit_intercept=True, scoring=scorer, multi_class='multinomial'
+    )
+
+    c_index = 0
+    coefs = coefs[c_index]
+    scores = scores[c_index]
+
+    existing_log_reg = linear_model.LogisticRegression(fit_intercept=True)
+    existing_log_reg.coef_ = coefs[:, :-1]
+    existing_log_reg.intercept_ = coefs[:, -1]
+
+    existing_dec_fn = existing_log_reg.decision_function(x[test])
+    existing_probs_builtin = existing_log_reg.predict_proba(x[test])
+    existing_probs_ovr = ovr_approach(existing_dec_fn)
+    existing_probs_multi = utils.extmath.softmax(existing_dec_fn)
+
+    new_log_reg = linear_model.LogisticRegression(fit_intercept=True, multi_class='multinomial')
+    new_log_reg.coef_ = coefs[:, :-1]
+    new_log_reg.intercept_ = coefs[:, -1]
+
+    new_dec_fn = new_log_reg.decision_function(x[test])
+    new_probs_builtin = new_log_reg.predict_proba(x[test])
+    new_probs_ovr = ovr_approach(new_dec_fn)
+    new_probs_multi = utils.extmath.softmax(new_dec_fn)
+
+    print("score returned by _log_reg_scoring_path")
+    print(scores)
+
+    print("OvR LR decision function == multinomial LR decision function?")
+    print((existing_dec_fn == new_dec_fn).all())
+
+    print("score calculated via OvR method (either decision function)")
+    print(score_from_probs(existing_probs_ovr, y_bin))
+
+    print("score calculated via multinomial method (either decision function)")
+    print(score_from_probs(existing_probs_multi, y_bin))
+
+    print("probs predicted by existing_log_reg.predict_proba() == probs generated via the OvR approach?")
+    print((existing_probs_builtin == existing_probs_ovr).all())
+
+    print("probs predicted by existing_log_reg.predict_proba() == probs generated via the multinomial approach?")
+    print((existing_probs_builtin == existing_probs_multi).any())
+
+    print("probs predicted by new_log_reg.predict_proba() == probs generated via the OvR approach?")
+    print((new_probs_builtin == new_probs_ovr).all())
+
+    print("probs predicted by new_log_reg.predict_proba() == probs generated via the multinomial approach?")
+    print((new_probs_builtin == new_probs_multi).any())
diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index e4ea696ce..38da54a89 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -922,7 +922,18 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,
         check_input=False, max_squared_sum=max_squared_sum,
         sample_weight=sample_weight)

-    log_reg = LogisticRegression(fit_intercept=fit_intercept)
+    log_reg = LogisticRegression(
+        fit_intercept=fit_intercept,
+        multi_class=multi_class,
+        solver=solver,
+        penalty=penalty,
+        dual=dual,
+        intercept_scaling=intercept_scaling,
+        class_weight=class_weight,
+        random_state=random_state,
+        max_iter=max_iter,
+        tol=tol
+    )

     # The score method of Logistic Regression has a classes_ attribute.
     if multi_class == 'ovr':
[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.20]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 17:44:45,978 - INFO - ------------------------------
2025-01-14 17:44:45,978 - INFO - END Runtime Completion Fn
2025-01-14 17:44:45,978 - INFO - ------------------------------
2025-01-14 17:44:45,978 - INFO - Got git diff for instance scikit-learn__scikit-learn-11578:
--------
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..e61bdbba8
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,84 @@
+import numpy as np
+from sklearn import preprocessing, linear_model, utils
+
+
+def ovr_approach(decision_function):
+    probs = 1. / (1. + np.exp(-decision_function))
+    probs = probs / probs.sum(axis=1).reshape((probs.shape[0], -1))
+    return probs
+
+def score_from_probs(probs, y_bin):
+    return (y_bin * np.log(probs)).sum(axis=1).mean()
+
+
+if __name__ == "__main__":
+    np.random.seed(seed=1234)
+
+    samples = 200
+    features = 5
+    folds = 10
+
+    # Use a "probabilistic" scorer
+    scorer = 'neg_log_loss'
+
+    x = np.random.random(size=(samples, features))
+    y = np.random.choice(['a', 'b', 'c'], size=samples)
+
+    test = np.random.choice(range(samples), size=int(samples / float(folds)), replace=False)
+    train = [idx for idx in range(samples) if idx not in test]
+
+    # Binarize the labels for y[test]
+    lb = preprocessing.label.LabelBinarizer()
+    lb.fit(y[test])
+    y_bin = lb.transform(y[test])
+
+    # What does _log_reg_scoring_path give us for the score?
+    coefs, _, scores, _ = linear_model.logistic._log_reg_scoring_path(
+        x, y, train, test, fit_intercept=True, scoring=scorer, multi_class='multinomial'
+    )
+
+    c_index = 0
+    coefs = coefs[c_index]
+    scores = scores[c_index]
+
+    existing_log_reg = linear_model.LogisticRegression(fit_intercept=True)
+    existing_log_reg.coef_ = coefs[:, :-1]
+    existing_log_reg.intercept_ = coefs[:, -1]
+
+    existing_dec_fn = existing_log_reg.decision_function(x[test])
+    existing_probs_builtin = existing_log_reg.predict_proba(x[test])
+    existing_probs_ovr = ovr_approach(existing_dec_fn)
+    existing_probs_multi = utils.extmath.softmax(existing_dec_fn)
+
+    new_log_reg = linear_model.LogisticRegression(fit_intercept=True, multi_class='multinomial')
+    new_log_reg.coef_ = coefs[:, :-1]
+    new_log_reg.intercept_ = coefs[:, -1]
+
+    new_dec_fn = new_log_reg.decision_function(x[test])
+    new_probs_builtin = new_log_reg.predict_proba(x[test])
+    new_probs_ovr = ovr_approach(new_dec_fn)
+    new_probs_multi = utils.extmath.softmax(new_dec_fn)
+
+    print("score returned by _log_reg_scoring_path")
+    print(scores)
+
+    print("OvR LR decision function == multinomial LR decision function?")
+    print((existing_dec_fn == new_dec_fn).all())
+
+    print("score calculated via OvR method (either decision function)")
+    print(score_from_probs(existing_probs_ovr, y_bin))
+
+    print("score calculated via multinomial method (either decision function)")
+    print(score_from_probs(existing_probs_multi, y_bin))
+
+    print("probs predicted by existing_log_reg.predict_proba() == probs generated via the OvR approach?")
+    print((existing_probs_builtin == existing_probs_ovr).all())
+
+    print("probs predicted by existing_log_reg.predict_proba() == probs generated via the multinomial approach?")
+    print((existing_probs_builtin == existing_probs_multi).any())
+
+    print("probs predicted by new_log_reg.predict_proba() == probs generated via the OvR approach?")
+    print((new_probs_builtin == new_probs_ovr).all())
+
+    print("probs predicted by new_log_reg.predict_proba() == probs generated via the multinomial approach?")
+    print((new_probs_builtin == new_probs_multi).any())
diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index e4ea696ce..38da54a89 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -922,7 +922,18 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,
         check_input=False, max_squared_sum=max_squared_sum,
         sample_weight=sample_weight)

-    log_reg = LogisticRegression(fit_intercept=fit_intercept)
+    log_reg = LogisticRegression(
+        fit_intercept=fit_intercept,
+        multi_class=multi_class,
+        solver=solver,
+        penalty=penalty,
+        dual=dual,
+        intercept_scaling=intercept_scaling,
+        class_weight=class_weight,
+        random_state=random_state,
+        max_iter=max_iter,
+        tol=tol
+    )

     # The score method of Logistic Regression has a classes_ attribute.
     if multi_class == 'ovr':
--------
2025-01-14 17:44:46,919 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.scikit-learn_s_scikit-learn-13142. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 17:44:46,920 - INFO - Logging LLM completions for instance scikit-learn__scikit-learn-13142 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/scikit-learn__scikit-learn-13142
