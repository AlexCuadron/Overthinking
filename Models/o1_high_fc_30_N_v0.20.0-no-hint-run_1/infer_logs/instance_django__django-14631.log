2025-01-14 01:01:28,266 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_k9s5c9uinvbawfdj_492h283ma6jm1v1e
2025-01-14 01:03:47,229 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_k9s5c9uinvbawfdj_492h283ma6jm1v1e] build finished.
2025-01-14 01:03:47,243 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_k9s5c9uinvbawfdj_492h283ma6jm1v1e] with more generic tag [oh_v0.20.0_k9s5c9uinvbawfdj]
2025-01-14 01:03:47,246 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_k9s5c9uinvbawfdj_492h283ma6jm1v1e, oh_v0.20.0_k9s5c9uinvbawfdj] built successfully
2025-01-14 01:03:47,256 - INFO - [runtime b35d2fe8-bfbb-42ca-9667-2bdfe04fd920-74d5c91c1f2fc9c9] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_k9s5c9uinvbawfdj_492h283ma6jm1v1e
2025-01-14 01:03:50,251 - INFO - [runtime b35d2fe8-bfbb-42ca-9667-2bdfe04fd920-74d5c91c1f2fc9c9] Container started: openhands-runtime-b35d2fe8-bfbb-42ca-9667-2bdfe04fd920-74d5c91c1f2fc9c9. VSCode URL: None
2025-01-14 01:03:50,251 - INFO - [runtime b35d2fe8-bfbb-42ca-9667-2bdfe04fd920-74d5c91c1f2fc9c9] Waiting for client to become ready at http://localhost:32750...
2025-01-14 01:04:16,341 - INFO - [runtime b35d2fe8-bfbb-42ca-9667-2bdfe04fd920-74d5c91c1f2fc9c9] Runtime is ready.
2025-01-14 01:04:16,484 - INFO - ------------------------------
2025-01-14 01:04:16,485 - INFO - BEGIN Runtime Initialization Fn
2025-01-14 01:04:16,485 - INFO - ------------------------------
2025-01-14 01:04:16,485 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-14631' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-14 01:04:17,117 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:17,117 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-14 01:04:17,748 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:17,748 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-14 01:04:18,379 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:18,389 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-14 01:04:19,020 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-14631
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:19,020 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-14 01:04:19,651 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:19,652 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-14 01:04:19,652 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-14 01:04:21,293 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:21,293 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__4.0
2025-01-14 01:04:21,925 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:21,925 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-14 01:04:23,062 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 84400d2e9d Fixed #32905 -- Added CSS class for non-form errors of formsets.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:23,062 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-14 01:04:23,698 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:23,698 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-14 01:04:24,329 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:04:24,330 - INFO - ------------------------------
2025-01-14 01:04:24,330 - INFO - END Runtime Initialization Fn
2025-01-14 01:04:24,330 - INFO - ------------------------------
2025-01-14 01:04:24,345 - INFO - [runtime b35d2fe8-bfbb-42ca-9667-2bdfe04fd920-74d5c91c1f2fc9c9] Found 0 local microagents.
2025-01-14 01:04:24,347 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-14 01:04:24,349 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-14 01:04:40,044 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-14 01:04:47,439 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-14 01:05:03,771 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-14 01:05:18,513 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-14 01:05:33,652 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-14 01:06:04,803 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-14 01:06:40,881 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-14 01:07:17,950 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-14 01:08:02,058 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-14 01:08:57,605 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-14 01:09:55,707 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-14 01:10:05,037 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-14 01:11:04,468 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-14 01:11:30,742 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-14 01:11:39,257 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-14 01:12:09,353 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-14 01:13:09,165 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-14 01:13:28,083 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-14 01:13:38,467 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-14 01:13:44,380 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-14 01:13:44,908 - INFO - ------------------------------
2025-01-14 01:13:44,909 - INFO - BEGIN Runtime Completion Fn
2025-01-14 01:13:44,909 - INFO - ------------------------------
2025-01-14 01:13:44,909 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__4.0
2025-01-14 01:13:45,541 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:13:45,542 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-14 01:13:46,175 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:13:46,176 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-14 01:13:46,813 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:13:46,813 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 84400d2e9db7c51fee4e9bb04c028f665b8e7624
2025-01-14 01:13:47,447 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e53bb5abbc93",
  "working_dir": "/workspace/django__django__4.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..481fa48806 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -44,6 +44,22 @@ class BoundField:
         """
         id_ = self.field.widget.attrs.get('id') or self.auto_id
         attrs = {'id': id_} if id_ else {}
+    def value(self):
+        return self.form._field_data_value(self.field, self.html_name)
+
+    def _did_change(self):
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                return True
+        return self.field.has_changed(initial_value, self.value())
         attrs = self.build_widget_attrs(attrs)
         return [
             BoundWidget(self.field.widget, widget, self.form.renderer)
@@ -213,6 +229,14 @@ class BoundField:
     def initial(self):
         data = self.form.get_initial_for_field(self.field, self.name)
         # If this is an auto-generated default date, nix the microseconds for
+        if callable(data):
+            data = data()
+        from django.core.exceptions import ValidationError
+        try:
+            data = self.field.to_python(data)
+        except ValidationError:
+            pass
+
         # standardized handling. See #22502.
         if (isinstance(data, (datetime.datetime, datetime.time)) and
                 not self.field.widget.supports_microseconds):
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..c41494a992 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -388,10 +388,11 @@ class BaseForm:

     def _clean_fields(self):
         for name, field in self.fields.items():
-            if field.disabled:
-                value = self.get_initial_for_field(field, name)
+            bf = self[name]
+            if bf.field.disabled:
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.value()
             try:
                 if isinstance(field, FileField):
                     initial = self.get_initial_for_field(field, name)
@@ -436,27 +437,7 @@ class BaseForm:

     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name in self.fields if self[name]._did_change()]

     @property
     def media(self):
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..d72257db9a
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,31 @@
+import django
+import sys
+from django import forms
+from django.conf import settings
+
+# Configure Django (only needed if certain parts of Django are used that
+# require settings). We'll do minimal config.
+settings.configure()
+django.setup()
+
+class MyForm(forms.Form):
+    # This replicates the scenario: a field with a callable initial.
+    # We want to see if _clean_fields() returns a different value from BoundField.initial.
+    my_field = forms.DateTimeField(initial=lambda: '2020-01-01 12:00', disabled=False)
+
+if __name__ == "__main__":
+    # Provide form data that exactly matches the callable initial.
+    form_data = {'my_field': '2020-01-01 12:00'}
+    f = MyForm(data=form_data)
+    f.is_valid()  # triggers _clean_fields()
+
+    bf_initial = f['my_field'].initial
+    cleaned_data_val = f.cleaned_data.get('my_field')
+
+    print("BoundField initial:", bf_initial)
+    print("cleaned_data['my_field']:", cleaned_data_val)
+
+    if cleaned_data_val != bf_initial:
+        print("BUG: _clean_fields() value doesn't match BoundField.initial")
+    else:
+        print("No Bug: values match.")
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-14 01:13:47,447 - INFO - ------------------------------
2025-01-14 01:13:47,447 - INFO - END Runtime Completion Fn
2025-01-14 01:13:47,447 - INFO - ------------------------------
2025-01-14 01:13:47,447 - INFO - Got git diff for instance django__django-14631:
--------
diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..481fa48806 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -44,6 +44,22 @@ class BoundField:
         """
         id_ = self.field.widget.attrs.get('id') or self.auto_id
         attrs = {'id': id_} if id_ else {}
+    def value(self):
+        return self.form._field_data_value(self.field, self.html_name)
+
+    def _did_change(self):
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                return True
+        return self.field.has_changed(initial_value, self.value())
         attrs = self.build_widget_attrs(attrs)
         return [
             BoundWidget(self.field.widget, widget, self.form.renderer)
@@ -213,6 +229,14 @@ class BoundField:
     def initial(self):
         data = self.form.get_initial_for_field(self.field, self.name)
         # If this is an auto-generated default date, nix the microseconds for
+        if callable(data):
+            data = data()
+        from django.core.exceptions import ValidationError
+        try:
+            data = self.field.to_python(data)
+        except ValidationError:
+            pass
+
         # standardized handling. See #22502.
         if (isinstance(data, (datetime.datetime, datetime.time)) and
                 not self.field.widget.supports_microseconds):
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..c41494a992 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -388,10 +388,11 @@ class BaseForm:

     def _clean_fields(self):
         for name, field in self.fields.items():
-            if field.disabled:
-                value = self.get_initial_for_field(field, name)
+            bf = self[name]
+            if bf.field.disabled:
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.value()
             try:
                 if isinstance(field, FileField):
                     initial = self.get_initial_for_field(field, name)
@@ -436,27 +437,7 @@ class BaseForm:

     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name in self.fields if self[name]._did_change()]

     @property
     def media(self):
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..d72257db9a
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,31 @@
+import django
+import sys
+from django import forms
+from django.conf import settings
+
+# Configure Django (only needed if certain parts of Django are used that
+# require settings). We'll do minimal config.
+settings.configure()
+django.setup()
+
+class MyForm(forms.Form):
+    # This replicates the scenario: a field with a callable initial.
+    # We want to see if _clean_fields() returns a different value from BoundField.initial.
+    my_field = forms.DateTimeField(initial=lambda: '2020-01-01 12:00', disabled=False)
+
+if __name__ == "__main__":
+    # Provide form data that exactly matches the callable initial.
+    form_data = {'my_field': '2020-01-01 12:00'}
+    f = MyForm(data=form_data)
+    f.is_valid()  # triggers _clean_fields()
+
+    bf_initial = f['my_field'].initial
+    cleaned_data_val = f.cleaned_data.get('my_field')
+
+    print("BoundField initial:", bf_initial)
+    print("cleaned_data['my_field']:", cleaned_data_val)
+
+    if cleaned_data_val != bf_initial:
+        print("BUG: _clean_fields() value doesn't match BoundField.initial")
+    else:
+        print("No Bug: values match.")
--------
2025-01-14 01:13:48,712 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-15268. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-14 01:13:48,712 - INFO - Logging LLM completions for instance django__django-15268 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-15268
