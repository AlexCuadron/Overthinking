diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..b3c4020f39 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -250,15 +250,16 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         db = kwargs.get('using')

         autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        if 'widget' not in kwargs:
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )

         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/m2m_repro.py b/m2m_repro.py
new file mode 100644
index 0000000000..f63b4eb589
--- /dev/null
+++ b/m2m_repro.py
@@ -0,0 +1,56 @@
+import os
+import sys
+
+from django.conf import settings
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:'
+    }
+}
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            '__main__',
+        ],
+        DATABASES=DATABASES,
+        MIDDLEWARE=[],
+        SECRET_KEY='test'
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.forms import CheckboxSelectMultiple
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+
+class Tag(models.Model):
+    name = models.CharField(max_length=100)
+
+class MyModel(models.Model):
+    tags = models.ManyToManyField(Tag)
+
+class MyModelAdmin(admin.ModelAdmin):
+    def formfield_for_manytomany(self, db_field, request, **kwargs):
+        if db_field.name == 'tags':
+            print("Setting widget to custom widget")
+            kwargs['widget'] = CheckboxSelectMultiple()
+        return super().formfield_for_manytomany(db_field, request, **kwargs)
+
+def main():
+    site = AdminSite()
+    site.register(MyModel, MyModelAdmin)
+    ma = MyModelAdmin(MyModel, site)
+
+    formfield = ma.formfield_for_manytomany(MyModel._meta.get_field('tags'), None)
+    print("Widget:", formfield.widget)
+
+if __name__ == '__main__':
+    main()
