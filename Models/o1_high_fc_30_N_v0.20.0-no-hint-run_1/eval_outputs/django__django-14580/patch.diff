diff --git a/app/__init__.py b/app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/apps.py b/app/apps.py
new file mode 100644
index 0000000000..497dc06e85
--- /dev/null
+++ b/app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class AppConfig(AppConfig):
+    name = 'app'
diff --git a/app/migrations/0001_initial.py b/app/migrations/0001_initial.py
new file mode 100644
index 0000000000..58b3987d60
--- /dev/null
+++ b/app/migrations/0001_initial.py
@@ -0,0 +1,25 @@
+# Generated by Django 4.0.dev20210701101319 on 2025-01-14 01:17
+
+import app.models
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyModel',
+            fields=[
+                ('new_name', app.models.MyField(primary_key=True, serialize=False)),
+            ],
+            options={
+                'abstract': False,
+            },
+            bases=(app.models.MyMixin, models.Model),
+        ),
+    ]
diff --git a/app/migrations/__init__.py b/app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/models.py b/app/models.py
new file mode 100644
index 0000000000..2547eab593
--- /dev/null
+++ b/app/models.py
@@ -0,0 +1,14 @@
+from django.db import models
+
+class MyField(models.TextField):
+    pass
+
+class MyBaseModel(models.Model):
+    class Meta:
+        abstract = True
+
+class MyMixin:
+    pass
+
+class MyModel(MyMixin, MyBaseModel):
+    name = MyField(primary_key=True)
diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py
index 4918261fb0..12e7b65607 100644
--- a/django/db/migrations/writer.py
+++ b/django/db/migrations/writer.py
@@ -139,6 +139,8 @@ class MigrationWriter:
         operations = []
         for operation in self.migration.operations:
             operation_string, operation_imports = OperationWriter(operation).serialize()
+            if "models." in operation_string:
+                operation_imports.add("from django.db import models")
             imports.update(operation_imports)
             operations.append(operation_string)
         items["operations"] = "\n".join(operations) + "\n" if operations else ""
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f05c7c4fdc
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,58 @@
+import os
+import django
+from django.conf import settings
+import sys
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+# Minimal Django settings.
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=["app.apps.AppConfig"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE=[],
+        ROOT_URLCONF=None,
+        SECRET_KEY="secret"
+    )
+
+# django.setup()
+
+# Create the app directory if it doesn't exist.
+os.makedirs(os.path.join(BASE_DIR, "app"), exist_ok=True)
+with open(os.path.join(BASE_DIR, "app", "__init__.py"), "w") as f:
+    pass
+
+# Create the models.py file.
+# Create the apps.py file
+with open(os.path.join(BASE_DIR, "app", "apps.py"), "w") as f:
+    f.write("""from django.apps import AppConfig\n\nclass AppConfig(AppConfig):\n    name = 'app'\n""")
+
+django.setup()
+
+model_content = """from django.db import models\n\nclass MyField(models.TextField):\n    pass\n\nclass MyBaseModel(models.Model):\n    class Meta:\n        abstract = True\n\nclass MyMixin:\n    pass\n\nclass MyModel(MyMixin, MyBaseModel):\n    name = MyField(primary_key=True)\n"""
+with open(os.path.join(BASE_DIR, "app", "models.py"), "w") as f:
+    f.write(model_content)
+
+# Run makemigrations and show the result.
+from django.core.management import call_command
+
+print("Running makemigrations for 'app'...")
+call_command("makemigrations", "app")
+print("Makemigrations finished.")
+
+call_command("migrate", "app")
+
+# Show the generated migration file.
+migration_dir = os.path.join(BASE_DIR, "app", "migrations")
+if os.path.isdir(migration_dir):
+    # Usually this file is called '0001_initial.py'
+    for filename in sorted(os.listdir(migration_dir)):
+        if filename.endswith(".py") and filename != "__init__.py":
+            print("\n========== Contents of", filename, "==========")
+            with open(os.path.join(migration_dir, filename), "r") as mf:
+                print(mf.read())
