diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py
index 8fa122022..3be5e0a44 100644
--- a/pylint/pyreverse/inspector.py
+++ b/pylint/pyreverse/inspector.py
@@ -184,6 +184,21 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
         if self.tag:
             node.uid = self.generate_id()

+        # Insert logic for capturing annotation-based type hints in __init__ methods
+        if (
+            node.name == "__init__"
+            and isinstance(node.parent, astroid.ClassDef)
+            and node.args
+            and node.args.args
+        ):
+            for param in node.args.args:
+                if param.name == "self":
+                    continue
+                if param.annotation:
+                    annotation_str = param.annotation.as_string()
+                    cst = astroid.Const(annotation_str)
+                    node.parent.instance_attrs_type[param.name].append(cst)
+
     link_project = visit_project
     link_module = visit_module
     link_class = visit_classdef
diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..93d4287c7
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,22 @@
+import subprocess
+import sys
+import os
+
+# This script reproduces the issue that pyreverse does not read python type hints.
+
+
+def main():
+    test_file_content = '''\
+class C(object):
+    def __init__(self, a: str = None):
+        self.a = a
+'''
+    with open('test.py', 'w') as f:
+        f.write(test_file_content)
+
+    cmd = [sys.executable, '-m', 'pylint.pyreverse', 'test.py', '-o', 'dot', '-p', 'TestDiagram']
+    print("Running command:", " ".join(cmd))
+    subprocess.run(cmd, check=True)
+
+if __name__ == '__main__':
+    main()
diff --git a/test.py b/test.py
new file mode 100644
index 000000000..a90f4b2dc
--- /dev/null
+++ b/test.py
@@ -0,0 +1,3 @@
+class C(object):
+    def __init__(self, a: str = None):
+        self.a = a
