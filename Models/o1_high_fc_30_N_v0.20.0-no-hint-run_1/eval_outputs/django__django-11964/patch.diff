diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..aed47c339e 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -61,6 +61,9 @@ class ChoicesMeta(enum.EnumMeta):
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
     pass
+    def __str__(self):
+        return str(self.value)
+


 class IntegerChoices(int, Choices):
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 0000000000..71c5d646d8
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,48 @@
+import sys
+
+from django.conf import settings
+from django.core.management import call_command
+
+settings.configure(
+    INSTALLED_APPS=["__main__"],
+    SECRET_KEY="dummy",
+    DATABASES={"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}},
+)
+
+import django
+django.setup()
+
+from django.db import models
+call_command('makemigrations', '__main__', interactive=False)
+
+call_command('migrate', interactive=False, run_syncdb=True)
+
+from django.test import TestCase
+from django.utils.translation import gettext_lazy as _
+
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice, it is")
+    SECOND_CHOICE = "second", _("The second choice, it is")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
+
+    class Meta:
+        app_label = '__main__'
+class EnumTest(TestCase):
+    def setUp(self):
+        MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)
+
+    def test_created_object_is_str(self):
+        my_obj = MyObject.objects.get()
+        print("type of my_obj.my_str_value:", type(my_obj.my_str_value))
+        print("str(my_obj.my_str_value):", str(my_obj.my_str_value))
+        print("isinstance(my_obj.my_str_value, str)?", isinstance(my_obj.my_str_value, str))
+        self.assertIsInstance(my_obj.my_str_value, str)
+        self.assertEqual(str(my_obj.my_str_value), "first")
+
+if __name__ == "__main__":
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(["__main__"])
+    sys.exit(bool(failures))
\ No newline at end of file
