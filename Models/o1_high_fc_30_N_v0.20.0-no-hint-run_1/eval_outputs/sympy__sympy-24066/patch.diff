diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..25a7458359
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,14 @@
+from sympy import exp
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+expr = units.second / (units.ohm * units.farad)
+print('Dimension of expr:', SI._collect_factor_and_dimension(expr)[1])
+assert SI.get_dimension_system().is_dimensionless(SI._collect_factor_and_dimension(expr)[1]), "expr should be dimensionless"
+
+buggy_expr = 100 + exp(expr)
+print('Dimension of exp(expr):', SI._collect_factor_and_dimension(exp(expr))[1])
+print('Attempting to collect factor and dimension of 100 + exp(expr)...')
+res = SI._collect_factor_and_dimension(buggy_expr)
+print('Result:', res)
+
diff --git a/sympy/physics/units/definitions/dimension_definitions.py b/sympy/physics/units/definitions/dimension_definitions.py
index c9950d5855..ea9b14a110 100644
--- a/sympy/physics/units/definitions/dimension_definitions.py
+++ b/sympy/physics/units/definitions/dimension_definitions.py
@@ -30,14 +30,26 @@
 volume = Dimension("volume")

 # derived dimensions (MKSA not in MKS)
-voltage = Dimension(name='voltage', symbol='U')  # type: Dimension
-impedance = Dimension(name='impedance', symbol='Z')  # type: Dimension
-conductance = Dimension(name='conductance', symbol='G')  # type: Dimension
-capacitance = Dimension(name='capacitance')  # type: Dimension
-inductance = Dimension(name='inductance')  # type: Dimension
-charge = Dimension(name='charge', symbol='Q')  # type: Dimension
+voltage = Dimension({mass:1, length:2, time:-3, current:-1})
+voltage.name = 'voltage'
+voltage.symbol = 'U'
+impedance = Dimension({mass:1, length:2, time:-3, current:-2})
+impedance.name = 'impedance'
+impedance.symbol = 'Z'
+conductance = Dimension({mass:-1, length:-2, time:3, current:2})
+conductance.name = 'conductance'
+conductance.symbol = 'G'
+capacitance = Dimension({mass:-1, length:-2, time:4, current:2}, name='capacitance')
+inductance = Dimension({mass:1, length:2, time:-2, current:-2}, name='inductance')  # type: Dimension
+charge = Dimension(time*current, name='charge', symbol='Q')
 magnetic_density = Dimension(name='magnetic_density', symbol='B')  # type: Dimension
 magnetic_flux = Dimension(name='magnetic_flux')  # type: Dimension

+# Link these derived dimensions to the base ones so that certain expressions become dimensionless.
+from sympy.physics.units.definitions.dimension_definitions import mass, length, time, current
+charge.set_dimensional_dependencies({mass: 0, length: 0, time: 1, current: 1})
+voltage.set_dimensional_dependencies({mass: 1, length: 2, time: -3, current: -1})
+impedance.set_dimensional_dependencies({mass: 1, length: 2, time: -3, current: -2})
+capacitance.set_dimensional_dependencies({mass: -1, length: -2, time: 4, current: 2})
 # Dimensions in information theory:
 information = Dimension(name='information')  # type: Dimension
diff --git a/sympy/physics/units/systems/si.py b/sympy/physics/units/systems/si.py
index 700495ad9d..691ca96e96 100644
--- a/sympy/physics/units/systems/si.py
+++ b/sympy/physics/units/systems/si.py
@@ -111,10 +111,14 @@
 # MKSA extension to MKS: derived units

 SI.set_quantity_scale_factor(coulomb, One)
+# Ensure that "coulomb" is recognized as current * time, so that expressions like second/(farad*ohm) become dimensionless.
+SI.set_quantity_dimension(coulomb, SI.get_quantity_dimension(ampere)*SI.get_quantity_dimension(second))

 SI.set_quantity_scale_factor(volt, joule/coulomb)

 SI.set_quantity_scale_factor(ohm, volt/ampere)
+SI.set_quantity_dimension(ohm, SI.get_quantity_dimension(volt)/SI.get_quantity_dimension(ampere))
+SI.set_quantity_dimension(farad, SI.get_quantity_dimension(coulomb)/SI.get_quantity_dimension(volt))

 SI.set_quantity_scale_factor(siemens, ampere/volt)
