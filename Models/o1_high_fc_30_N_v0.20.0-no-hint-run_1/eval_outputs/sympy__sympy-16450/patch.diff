diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py
index c6b511f206..8672cc72b9 100644
--- a/sympy/simplify/simplify.py
+++ b/sympy/simplify/simplify.py
@@ -251,10 +251,35 @@ def posify(eq):
             eq[i] = e.subs(reps)
         return f(eq), {r: s for s, r in reps.items()}

-    reps = {s: Dummy(s.name, positive=True)
-                 for s in eq.free_symbols if s.is_positive is None}
-    eq = eq.subs(reps)
-    return eq, {r: s for s, r in reps.items()}
+    reps_dict = {}
+    for s in eq.free_symbols:
+        if s.is_positive is None:
+            new_assumptions = {}
+            if s.is_finite:
+                new_assumptions['finite'] = True
+                new_assumptions['bounded'] = True
+                new_assumptions['infinite'] = False
+                # Also ensure itâ€™s treated as extended real so that is_finite is recognized
+                new_assumptions['extended_real'] = True
+                new_assumptions['real'] = True
+            if s.is_integer:
+                new_assumptions['integer'] = True
+            if s.is_rational:
+                new_assumptions['rational'] = True
+            if s.is_irrational:
+                new_assumptions['irrational'] = True
+            if s.is_even:
+                new_assumptions['even'] = True
+            if s.is_odd:
+                new_assumptions['odd'] = True
+            if s.is_prime:
+                new_assumptions['prime'] = True
+            if s.is_composite:
+                new_assumptions['composite'] = True
+            new_assumptions['positive'] = True
+            reps_dict[s] = Dummy(s.name, **new_assumptions)
+    eq = eq.subs(reps_dict)
+    return eq, {r: s for s, r in reps_dict.items()}


 def hypersimp(f, k):
