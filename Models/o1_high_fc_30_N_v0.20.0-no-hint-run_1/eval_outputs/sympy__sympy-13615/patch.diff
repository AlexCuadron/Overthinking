diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..82ce834ef0
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,13 @@
+
+from sympy import Symbol, FiniteSet, Interval, Complement
+
+x = Symbol('x', real=True)
+y = Symbol('y', real=True)
+
+a = FiniteSet(x, y, 2)
+b = Interval(-10, 10)
+
+print('Complement(a, b) =>', Complement(a, b))
+
+print('Complement(a, b).args =>', Complement(a, b).args)
+print('repr(Complement(a, b)) =>', repr(Complement(a, b)))
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..01d13ef3ad 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -204,8 +204,25 @@ def _complement(self, other):
             return Union(p for p in product_sets if p != other)

         elif isinstance(other, Interval):
-            if isinstance(self, Interval) or isinstance(self, FiniteSet):
+            if isinstance(self, Interval):
                 return Intersection(other, self.complement(S.Reals))
+            elif isinstance(self, FiniteSet):
+                # Handle purely numeric FiniteSets
+                if all(e.is_number for e in self):
+                    known_not_in_interval = []
+                unknown = []
+                for e in self:
+                    c = other.contains(e)
+                    if c is S.true:
+                        pass
+                    elif c is S.false:
+                        known_not_in_interval.append(e)
+                    else:
+                        unknown.append(e)
+                res = FiniteSet(*known_not_in_interval)
+                if unknown:
+                    res = Union(res, Complement(FiniteSet(*unknown), other, evaluate=False), evaluate=False)
+                return res

         elif isinstance(other, Union):
             return Union(o - self for o in other.args)
