diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..887a5e10c9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+from sympy import Symbol, expand
+from sympy.physics.quantum import TensorProduct as tp
+from sympy.physics.quantum import tensor_product_simp as tps
+from sympy.physics.paulialgebra import Pauli
+
+# Reproduction script based on the PR description
+
+a = Symbol('a', commutative=False)
+
+print('---- Reproducing Issue ----')
+
+t1 = tp(1,1)*tp(1,1)
+print("t1 =", t1)
+print("tps(t1) =", tps(t1))
+print("t1.expand(tensorproduct=True) =", t1.expand(tensorproduct=True))
+
+# Substitution test
+expr_t1 = tps(tp(1,1)*tp(1,a)).subs(a, 1)
+print("tps(tp(1,1)*tp(1,a)).subs(a, 1) =", expr_t1)
+
+print("\n")
+t2 = tp(1,Pauli(3))*tp(1,Pauli(3))
+print("t2 =", t2)
+print("tps(t2) =", tps(t2))
+print("t2.expand(tensorproduct=True) =", t2.expand(tensorproduct=True))
+
+# Substitution test
+expr_t2 = tps(tp(1,Pauli(3))*tp(1,a)).subs(a, Pauli(3))
+print("tps(tp(1,Pauli(3))*tp(1,a)).subs(a, Pauli(3)) =", expr_t2)
+
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..ad314a8776 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -3,6 +3,7 @@
 from __future__ import print_function, division

 from sympy import Expr, Add, Mul, Matrix, Pow, sympify
+from sympy.simplify.simplify import simplify
 from sympy.core.compatibility import range
 from sympy.core.trace import Tr
 from sympy.printing.pretty.stringpict import prettyForm
@@ -143,6 +144,21 @@ def flatten(cls, args):
     def _eval_adjoint(self):
         return TensorProduct(*[Dagger(i) for i in self.args])

+    def _eval_power(self, exponent):
+        from sympy import sympify
+        exponent = sympify(exponent)
+        # Only handle nonnegative integer exponents here.
+        # (If exponent is negative or not an integer, fall back to default.)
+        if exponent.is_Integer and exponent.is_nonnegative:
+            if exponent == 0:
+                # x^0 => identity, but we have no well-defined identity for any dimension?
+                # Minimal approach: return 1 to signal scalar 1.
+                return 1
+            # (tp(a1,a2,...))^n => tp(a1^n, a2^n, ...)
+            new_args = [arg**exponent for arg in self.args]
+            return TensorProduct(*new_args)
+        return super(TensorProduct, self)._eval_power(exponent)
+
     def _eval_rewrite(self, pattern, rule, **hints):
         sargs = self.args
         terms = [t._eval_rewrite(pattern, rule, **hints) for t in sargs]
