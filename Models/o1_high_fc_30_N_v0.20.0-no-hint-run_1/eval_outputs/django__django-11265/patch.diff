diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..ba8b8278e0 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1666,6 +1666,7 @@ class Query(BaseExpression):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
+        query._filtered_relations = self._filtered_relations.copy()
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/scripts/reproduce_exclude_filtered_relation.py b/scripts/reproduce_exclude_filtered_relation.py
new file mode 100644
index 0000000000..410cc79c69
--- /dev/null
+++ b/scripts/reproduce_exclude_filtered_relation.py
@@ -0,0 +1,26 @@
+import os
+import sys
+
+# Minimal script to reproduce the exclude() with annotated FilteredRelation error
+
+if __name__ == "__main__":
+    # Insert the django__django__3.0 path so we can run the test suite directly.
+    sys.path.insert(0, "/workspace/django__django__3.0")
+
+    import django
+    from django.conf import settings
+    # The built-in test suite runner from django, used in the test directory.
+    from tests.runtests import runtests
+
+    # Django normally expects to be configured; let's do that
+    # (Django test runner will configure as needed, but we can supply minimal settings)
+
+    # Start the test runner for only the test in filtered_relation.
+    # We put it in a try block so we can see if it fails.
+    try:
+        # The argument is the label of the test app or test module to run.
+        result = runtests(["filtered_relation"], verbosity=2, interactive=False)
+        sys.exit(result)
+    except SystemExit as e:
+        # This will show us the error code for the test.
+        sys.exit(e.code)
