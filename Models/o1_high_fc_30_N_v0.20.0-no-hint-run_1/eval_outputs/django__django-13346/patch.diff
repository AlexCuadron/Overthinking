diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..74b78aa8be 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -424,7 +424,78 @@ class KeyTransformExact(JSONExact):


 class KeyTransformIExact(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact):
-    pass
+
+# Add a KeyTransformIn lookup so that __in filters on key transforms behave consistently
+from django.db.models.lookups import In
+
+class KeyTransformIn(In):
+    lookup_name = 'in'
+    can_use_none_as_rhs = True
+
+    def process_lhs(self, compiler, connection):
+        # Reuse the left-hand side logic from KeyTransformExact.
+        # That means calling KeyTransformExact.process_lhs(...) the same way.
+        # Directly calling KeyTransformExact here:
+        from django.db.models.fields.json import KeyTransformExact
+        return KeyTransformExact.process_lhs(self, compiler, connection)
+
+    def process_rhs(self, compiler, connection):
+        # For the right side, we replicate KeyTransformExact logic but for multiple values.
+        # We'll rely on 'In' base logic, then do DB-specific tweaks.
+        rhs, rhs_params = super().process_rhs(compiler, connection)
+
+        vendor = connection.vendor
+        # The single-value KeyTransformExact has specific logic for Oracle, MySQL, and SQLite.
+        # We'll apply a subset of that logic here.
+
+        if vendor == 'oracle':
+            # Oracle doesn't allow JSON path expressions as bind parameters, so we have to embed them.
+            new_formatters = []
+            new_params = []
+            for val in rhs_params:
+                if val is None or val == 'null':
+                    new_formatters.append('%s')
+                    new_params.append('null')
+                else:
+                    import json
+                    try:
+                        loaded_value = json.loads(val)
+                    except (json.JSONDecodeError, TypeError):
+                        loaded_value = val
+                    function = 'JSON_QUERY' if isinstance(loaded_value, (dict, list)) else 'JSON_VALUE'
+                    # Wrap in a JSON object so that the path is valid.
+                    new_formatters.append("%s('%s', '$.value')" % (
+                        function,
+                        json.dumps({'value': loaded_value}),
+                    ))
+            rhs = rhs % tuple(new_formatters)
+            rhs_params = []
+        elif vendor == 'mysql':
+            # MySQL expects the comparison to use JSON_EXTRACT on each param.
+            func = ["JSON_EXTRACT(%s, '$')"] * len(rhs_params)
+            rhs = rhs % tuple(func)
+        elif vendor == 'sqlite':
+            # For SQLite we replicate KeyTransformExact's approach.
+            # If value is 'null', we keep it as is, else JSON_EXTRACT(...)
+            import json
+            func = []
+            new_params = []
+            for val in rhs_params:
+                if val is None or val == 'null':
+                    func.append('%s')
+                    new_params.append('null')
+                else:
+                    func.append("JSON_EXTRACT(%s, '$')")
+                    new_params.append(val)
+            rhs = rhs % tuple(func)
+            rhs_params = new_params
+
+        return rhs, rhs_params
+
+KeyTransform.register_lookup(KeyTransformIn)
+
+
+


 class KeyTransformIContains(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains):
diff --git a/scripts/reproduce_in_lookup_issue.py b/scripts/reproduce_in_lookup_issue.py
new file mode 100644
index 0000000000..633c1ae7fa
--- /dev/null
+++ b/scripts/reproduce_in_lookup_issue.py
@@ -0,0 +1,72 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import execute_from_command_line
+from django.db import models, connection
+
+# We'll define settings on the fly.
+# This will run a small test DB in memory using sqlite, so we can replicate the issue.
+
+def setup_settings():
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                '__main__',  # We define our model in __main__ (this script)
+            ],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            SECRET_KEY='test',
+        )
+    django.setup()
+
+setup_settings()
+
+class OurModel(models.Model):
+    # We'll have a JSONField
+    our_field = models.JSONField()
+
+# After we define the model, we can run migrations or create the tables.
+
+def migrate():
+    # We'll create the table for OurModel using schema_editor.
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(OurModel)
+
+
+def main():
+    setup_settings()
+    migrate()
+
+    # Insert some rows
+    # We'll create some rows with an integer key in the JSON.
+    # For example, {"key": 0}
+    # We'll create multiple rows with the same key.
+
+    objs = []
+    for i in range(500):
+        objs.append(OurModel(our_field={"key": 0}))
+    OurModel.objects.bulk_create(objs)
+
+    # Now let's do filter with a single value = 0
+    single_filter_qs = OurModel.objects.filter(our_field__key=0)
+    single_count = single_filter_qs.count()
+    print("Filter with a single value gave:", single_count)
+
+    # Next do filter with __in
+    in_filter_qs = OurModel.objects.filter(our_field__key__in=[0])
+    in_count = in_filter_qs.count()
+    print("Filter with __in=[0] gave:", in_count)
+
+    # We expect them to match.
+    if single_count == in_count:
+        print("SUCCESS: The counts match.")
+    else:
+        print("FAIL: The counts do not match.")
+
+if __name__ == '__main__':
+    main()
