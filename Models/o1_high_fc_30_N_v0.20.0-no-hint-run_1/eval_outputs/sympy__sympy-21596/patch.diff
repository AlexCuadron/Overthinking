diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..eb55627055
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,10 @@
+from sympy import S, imageset, Lambda, I, symbols
+
+n = symbols('n', real=True)
+
+S1 = imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers)
+print('S1 =', S1)
+print('2 in S1 ?', 2 in S1)
+s1capreals = S1.intersect(S.Reals)
+print('S1.intersect(Reals) =', s1capreals)
+print('2 in S1.intersect(Reals) ?', 2 in s1capreals)
diff --git a/sympy/sets/fancysets.py b/sympy/sets/fancysets.py
index 80189c344c..7b71c0da45 100644
--- a/sympy/sets/fancysets.py
+++ b/sympy/sets/fancysets.py
@@ -277,6 +277,13 @@ def __eq__(self, other):
     def __hash__(self):
         return hash(Interval(S.NegativeInfinity, S.Infinity))

+    def _eval_intersect(self, other):
+        # Delegate intersection with ImageSet to the ImageSet's method.
+        from .fancysets import ImageSet
+        if isinstance(other, ImageSet):
+            return other._eval_intersect(self)
+        return super(Reals, self)._eval_intersect(other)
+

 class ImageSet(Set):
     """
@@ -488,6 +495,41 @@ def get_equations(expr, candidate):
             return None
         return fuzzy_not(solnset.is_empty)

+    def _eval_intersect(self, other):
+        if other == S.Reals:
+            from sympy import Eq, im
+            from sympy.solvers.solveset import solveset
+            if len(self.lamda.variables) == 1:
+                var = self.lamda.variables[0]
+                base = self.base_set
+                # solve the imaginary part = 0
+                expr_im = im(self.lamda.expr)
+                sol = solveset(Eq(expr_im, 0), var, domain=base)
+    def _eval_is_subset(self, other):
+        # If other is Reals but the image is not purely real for all members,
+        # then we are definitely not a subset.
+        if other == S.Reals:
+            from sympy import im, simplify
+            # If the imaginary part of the expression is identically zero, the image is real
+            expr_im_simpl = simplify(im(self.lamda.expr))
+            if expr_im_simpl.is_zero:
+                return True  # fully real image
+            return False
+        return None
+
+                if sol.is_FiniteSet:
+                    # Return the real values that satisfy imag=0
+                    real_vals = [self.lamda(s) for s in sol]
+                    return FiniteSet(*real_vals)
+                # If infinite or something else, return a new ImageSet intersect Real
+                # For this single-variable case, all real points come from solutions of imag=0.
+                # If sol is infinite, a more complete fix would yield an infinite set of real solutions.
+                # But for now, we will simply gather the solutions in a finite or empty set.
+                if sol.is_empty:
+                    return S.EmptySet
+                return FiniteSet(*(self.lamda(x) for x in sol))
+        return None
+
     @property
     def is_iterable(self):
         return all(s.is_iterable for s in self.base_sets)
