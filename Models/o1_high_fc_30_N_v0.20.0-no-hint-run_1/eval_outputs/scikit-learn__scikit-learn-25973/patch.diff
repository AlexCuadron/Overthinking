diff --git a/bug_repro.py b/bug_repro.py
new file mode 100644
index 000000000..1e8334cfe
--- /dev/null
+++ b/bug_repro.py
@@ -0,0 +1,14 @@
+import numpy as np
+from sklearn.datasets import make_classification
+from sklearn.feature_selection import SequentialFeatureSelector
+from sklearn.neighbors import KNeighborsClassifier
+from sklearn.model_selection import LeaveOneGroupOut
+
+X, y = make_classification()
+groups = np.zeros_like(y, dtype=int)
+groups[y.size//2:] = 1
+cv = LeaveOneGroupOut()
+splits = cv.split(X, y, groups=groups)
+clf = KNeighborsClassifier(n_neighbors=5)
+seq = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)
+seq.fit(X, y)
diff --git a/sklearn/feature_selection/_sequential.py b/sklearn/feature_selection/_sequential.py
index e983c55de..33d67d522 100644
--- a/sklearn/feature_selection/_sequential.py
+++ b/sklearn/feature_selection/_sequential.py
@@ -186,6 +186,13 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator
         self.cv = cv
         self.n_jobs = n_jobs

+        # Fix for iterable CV objects that can be consumed only once.
+        # If self.cv is an iterable without split(), we convert it to a list.
+        # This way we can reuse the splits each time cross_val_score is called.
+        if not hasattr(self.cv, 'split') and hasattr(self.cv, '__iter__'):
+            self._reusable_cv = list(self.cv)
+        else:
+            self._reusable_cv = self.cv
     def fit(self, X, y=None):
         """Learn the features to select from X.

@@ -309,7 +316,7 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator
                 estimator,
                 X_new,
                 y,
-                cv=self.cv,
+                cv=self._reusable_cv,
                 scoring=self.scoring,
                 n_jobs=self.n_jobs,
             ).mean()
