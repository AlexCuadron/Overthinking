diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..fc7d102c00
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,19 @@
+
+#!/usr/bin/env python3
+
+from sympy.polys.rings import ring
+from sympy.polys.domains import ZZ
+from sympy import symbols, pprint
+
+R, x, y, z = ring("x,y,z", ZZ)
+f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+U, V, W = symbols("u v w")
+
+print("Polynomial:", f)
+print("Attempting to convert to expression with new symbols (u, v, w):")
+expr = f.as_expr(U, V, W)
+print("Result:")
+pprint(expr)
+
+print("\nExpected it to use (u, v, w) instead of (x, y, z).")
\ No newline at end of file
diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py
index 12bd2fc920..2f01ad79c3 100644
--- a/sympy/polys/rings.py
+++ b/sympy/polys/rings.py
@@ -616,12 +616,14 @@ def set_ring(self, new_ring):
             return new_ring.from_dict(self, self.ring.domain)

     def as_expr(self, *symbols):
-        if symbols and len(symbols) != self.ring.ngens:
-            raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
+        if symbols:
+            if len(symbols) != self.ring.ngens:
+                raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
+            syms = symbols
         else:
-            symbols = self.ring.symbols
+            syms = self.ring.symbols

-        return expr_from_dict(self.as_expr_dict(), *symbols)
+        return expr_from_dict(self.as_expr_dict(), *syms)

     def as_expr_dict(self):
         to_sympy = self.ring.domain.to_sympy
