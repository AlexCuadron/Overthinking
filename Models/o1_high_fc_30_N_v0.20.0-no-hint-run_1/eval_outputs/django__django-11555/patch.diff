diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index e15e64cde4..4a89516422 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2217,6 +2217,11 @@ def get_order_dir(field, default='ASC'):
     The 'default' param is used to indicate which way no prefix (or a '+'
     prefix) should sort. The '-' prefix always sorts the opposite way.
     """
+    # Handle cases where 'field' might be an expression object instead of a string.
+    if not isinstance(field, str):
+        dirn = ORDER_DIR[default]
+        return field, dirn[0]
+
     dirn = ORDER_DIR[default]
     if field[0] == '-':
         return field[1:], dirn[1]
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..8928b607bb
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,35 @@
+import os
+import django
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dev',
+    INSTALLED_APPS=['repro_app'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+)
+
+django.setup()
+
+from repro_app.models import Parent, Child
+if __name__ == '__main__':
+    from django.core.management import call_command
+    # Make migrations on the fly
+    # First create migrations.
+    call_command('makemigrations', verbosity=0)
+    # Then actually create the tables with migrate.
+    call_command('migrate', run_syncdb=True, verbosity=0)
+
+    # create some entries
+    Child.objects.create(name='test1')
+    Child.objects.create(name='test2')
+
+    # Attempt to query
+    # If the bug is present, an error might be thrown.
+    qs = Child.objects.all()
+    print('Queryset executed successfully:', list(qs))
diff --git a/repro_app/__init__.py b/repro_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/repro_app/migrations/0001_initial.py b/repro_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..f94a98b5e4
--- /dev/null
+++ b/repro_app/migrations/0001_initial.py
@@ -0,0 +1,33 @@
+# Generated by Django 3.0.dev20190711082539 on 2025-01-13 23:15
+
+from django.db import migrations, models
+import django.db.models.deletion
+import django.db.models.expressions
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Parent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+            options={
+                'ordering': [django.db.models.expressions.OrderBy(django.db.models.expressions.F('id'))],
+            },
+        ),
+        migrations.CreateModel(
+            name='Child',
+            fields=[
+                ('parent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='repro_app.Parent')),
+            ],
+            bases=('repro_app.parent',),
+        ),
+    ]
diff --git a/repro_app/migrations/__init__.py b/repro_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/repro_app/models.py b/repro_app/models.py
new file mode 100644
index 0000000000..0fe4a0d5db
--- /dev/null
+++ b/repro_app/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class Parent(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        ordering = [models.F('id').asc()]
+
+class Child(Parent):
+    pass
