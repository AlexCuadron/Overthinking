diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..08e56a65f1
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,8 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='cython')
+print(f(np.array([[1.0, 2.0]])))
\ No newline at end of file
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..896d2233ba 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -310,6 +310,11 @@ def __init__(self, name, datatype=None, dimensions=None, precision=None):
         if not isinstance(name, (Symbol, MatrixSymbol)):
             raise TypeError("The first argument must be a sympy symbol.")
         if datatype is None:
+            if isinstance(name, MatrixSymbol) and dimensions is None:
+                # If this Variable is based on a MatrixSymbol, but no dimensions were given,
+                # deduce them from the MatrixSymbol's shape so that codegen knows it's an array.
+                r, c = name.shape
+                dimensions = tuple((0, d - 1) for d in (r, c))
             datatype = get_default_datatype(name)
         elif not isinstance(datatype, DataType):
             raise TypeError("The (optional) `datatype' argument must be an "
@@ -910,7 +915,8 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
-            if arg.dimensions or isinstance(arg, ResultBase):
+            # Fix: For array arguments, we check if arg is a MatrixSymbol or has dimensions
+            if isinstance(arg.name, MatrixSymbol) or arg.dimensions or isinstance(arg, ResultBase):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
                 type_args.append((arg.get_datatype('C'), name))
