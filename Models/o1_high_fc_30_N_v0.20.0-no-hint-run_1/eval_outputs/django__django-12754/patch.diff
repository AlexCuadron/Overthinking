diff --git a/bug_repro_script.py b/bug_repro_script.py
new file mode 100644
index 0000000000..0587193681
--- /dev/null
+++ b/bug_repro_script.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+
+import subprocess
+import os
+import shutil
+
+# Helper to run commands in a shell.
+def run(cmd):
+    print("Running:", cmd)
+    subprocess.check_call(cmd, shell=True)
+
+def main():
+    # Install this Django version in editable mode
+    # so that we pick up changes in the source code.
+    run("cd /workspace/django__django__3.2 && pip install -e .")
+
+    # Remove any leftover test project.
+    if os.path.exists("testproj"):
+        shutil.rmtree("testproj")
+
+    # Create a new Django project.
+    run("django-admin startproject testproj")
+
+    # Create a new Django app within that project.
+    run("cd testproj && python manage.py startapp testapp")
+
+    # Write out an initial models.py that has a 'Readable' model with a 'title' field.
+    # Insert 'testapp' into INSTALLED_APPS so Django sees it.
+    settings_path = "testproj/testproj/settings.py"
+    with open(settings_path, "r") as f:
+        content = f.read()
+    content = content.replace(
+        "INSTALLED_APPS = [",
+        "INSTALLED_APPS = [\n    'testapp.apps.TestappConfig',"
+    )
+    with open(settings_path, "w") as f:
+        f.write(content)
+
+    initial_models = """from django.db import models\n\nclass Readable(models.Model):\n    title = models.CharField(max_length=200)\n"""
+    with open("testproj/testapp/models.py", "w") as f:
+        f.write(initial_models)
+
+    # Make initial migrations and migrate.
+    run("cd testproj && python manage.py makemigrations testapp")
+    run("cd testproj && python manage.py migrate")
+
+    # Now change the models so that 'Readable' has no fields,
+    # and create a subclass Book(Readable) that has the 'title' field.
+    new_models = """from django.db import models\n\nclass Readable(models.Model):\n    pass\n\nclass Book(Readable):\n    title = models.CharField(max_length=200)\n"""
+    with open("testproj/testapp/models.py", "w") as f:
+        f.write(new_models)
+
+    # Make migrations again and then migrate. This is where the FieldError is expected.
+    run("cd testproj && python manage.py makemigrations testapp")
+    run("cd testproj && python manage.py migrate")
+
+if __name__ == "__main__":
+    main()
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..351f1e9fbf 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -165,8 +165,9 @@ class MigrationAutodetector:

         # Generate non-rename model operations
         self.generate_deleted_models()
-        self.generate_created_models()
         self.generate_deleted_proxies()
+        self.generate_removed_fields()
+        self.generate_created_models()
         self.generate_created_proxies()
         self.generate_altered_options()
         self.generate_altered_managers()
@@ -181,7 +182,6 @@ class MigrationAutodetector:
         self.generate_removed_indexes()
         # Generate field operations
         self.generate_renamed_fields()
-        self.generate_removed_fields()
         self.generate_added_fields()
         self.generate_altered_fields()
         self.generate_altered_unique_together()
@@ -193,7 +193,7 @@ class MigrationAutodetector:

         self._sort_migrations()
         self._build_migration_list(graph)
-        self._optimize_migrations()
+        # self._optimize_migrations()

         return self.migrations

diff --git a/testproj/db.sqlite3 b/testproj/db.sqlite3
new file mode 100644
index 0000000000..4a982cab12
Binary files /dev/null and b/testproj/db.sqlite3 differ
diff --git a/testproj/manage.py b/testproj/manage.py
new file mode 100755
index 0000000000..0e1a0b64a6
--- /dev/null
+++ b/testproj/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproj/testapp/__init__.py b/testproj/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproj/testapp/admin.py b/testproj/testapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/testproj/testapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/testproj/testapp/apps.py b/testproj/testapp/apps.py
new file mode 100644
index 0000000000..9806af7f75
--- /dev/null
+++ b/testproj/testapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class TestappConfig(AppConfig):
+    name = 'testapp'
diff --git a/testproj/testapp/migrations/0001_initial.py b/testproj/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..e29e822566
--- /dev/null
+++ b/testproj/testapp/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.2 on 2025-01-14 00:45
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Readable',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=200)),
+            ],
+        ),
+    ]
diff --git a/testproj/testapp/migrations/0002_auto_20250114_0045.py b/testproj/testapp/migrations/0002_auto_20250114_0045.py
new file mode 100644
index 0000000000..a194256a5f
--- /dev/null
+++ b/testproj/testapp/migrations/0002_auto_20250114_0045.py
@@ -0,0 +1,26 @@
+# Generated by Django 3.2 on 2025-01-14 00:45
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('testapp', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+                ('readable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='testapp.readable')),
+                ('title', models.CharField(max_length=200)),
+            ],
+            bases=('testapp.readable',),
+        ),
+        migrations.RemoveField(
+            model_name='readable',
+            name='title',
+        ),
+    ]
diff --git a/testproj/testapp/migrations/__init__.py b/testproj/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproj/testapp/models.py b/testproj/testapp/models.py
new file mode 100644
index 0000000000..89290b1cc0
--- /dev/null
+++ b/testproj/testapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
diff --git a/testproj/testapp/tests.py b/testproj/testapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/testproj/testapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/testproj/testapp/views.py b/testproj/testapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testproj/testapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/testproj/testproj/__init__.py b/testproj/testproj/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproj/testproj/asgi.py b/testproj/testproj/asgi.py
new file mode 100644
index 0000000000..02b35ed559
--- /dev/null
+++ b/testproj/testproj/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproj project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')
+
+application = get_asgi_application()
diff --git a/testproj/testproj/settings.py b/testproj/testproj/settings.py
new file mode 100644
index 0000000000..4d5a720536
--- /dev/null
+++ b/testproj/testproj/settings.py
@@ -0,0 +1,121 @@
+"""
+Django settings for testproj project.
+
+Generated by 'django-admin startproject' using Django 3.2.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '%pwupn1_0dq2)ce^9f(hg7m+h=x=&dz*yggnn%=n-4g=hf!tw3'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'testapp.apps.TestappConfig',
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproj.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproj.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproj/testproj/urls.py b/testproj/testproj/urls.py
new file mode 100644
index 0000000000..5a1c72f4ac
--- /dev/null
+++ b/testproj/testproj/urls.py
@@ -0,0 +1,21 @@
+"""testproj URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/testproj/testproj/wsgi.py b/testproj/testproj/wsgi.py
new file mode 100644
index 0000000000..e66cfcd7cb
--- /dev/null
+++ b/testproj/testproj/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproj project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproj.settings')
+
+application = get_wsgi_application()
