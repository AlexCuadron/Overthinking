diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..3eef4891c
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,35 @@
+import itertools
+import pytest
+
+class BaseMeta(type):
+    @property
+    def pytestmark(self):
+        return (
+            getattr(self, "_pytestmark", []) +
+            list(itertools.chain.from_iterable(getattr(x, "_pytestmark", []) for x in self.__mro__))
+        )
+
+    @pytestmark.setter
+    def pytestmark(self, value):
+        self._pytestmark = value
+
+
+class Base(object):
+    __metaclass__ = BaseMeta
+
+@pytest.mark.foo
+class Foo(Base):
+    pass
+
+@pytest.mark.bar
+class Bar(Base):
+    pass
+
+class TestDings(Foo, Bar):
+    def test_dings(self):
+        pass
+
+if __name__ == "__main__":
+    import sys
+    # run via pytest
+    sys.exit(pytest.main([__file__]))
\ No newline at end of file
diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..98e34c899 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -357,12 +357,23 @@ class MarkDecorator:

 def get_unpacked_marks(obj: object) -> Iterable[Mark]:
     """Obtain the unpacked marks that are stored on an object."""
-    mark_list = getattr(obj, "pytestmark", [])
-    if not isinstance(mark_list, list):
-        mark_list = [mark_list]
+    import inspect
+    if inspect.isclass(obj):
+        collected = []
+        for base in reversed(obj.__mro__):
+            base_marks = getattr(base, "pytestmark", [])
+            if not isinstance(base_marks, list):
+                base_marks = [base_marks]
+            collected.extend(base_marks)
+        mark_list = collected
+    else:
+        mark_list = getattr(obj, "pytestmark", [])
+        if not isinstance(mark_list, list):
+            mark_list = [mark_list]
     return normalize_mark_list(mark_list)


+
 def normalize_mark_list(
     mark_list: Iterable[Union[Mark, MarkDecorator]]
 ) -> Iterable[Mark]:
