diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index 088f5c41f0..dc65c7e10a 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -91,8 +91,9 @@ class ProjectState:
     def __init__(self, models=None, real_apps=None):
         self.models = models or {}
         # Apps to include from main registry, usually unmigrated ones
-        if real_apps:
-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)
+        if real_apps is not None:
+            assert isinstance(real_apps, set), "real_apps must be a set."
+            self.real_apps = real_apps
         else:
             self.real_apps = set()
         self.is_delayed = False
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..6988304473
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,16 @@
+from django.db.migrations.state import ProjectState
+
+print("Step 2: Reproduction script for real_apps not being a set.")
+
+# We'll pass a list instead of a set.
+invalid_real_apps = ["app1", "app2"]
+print("Passing a list as real_apps:", invalid_real_apps)
+
+try:
+    state = ProjectState(real_apps=invalid_real_apps)
+    print("No error was raised. 'real_apps' is:", state.real_apps)
+    print("This indicates the original code automatically converts the list to a set.\n")
+except AssertionError as e:
+    print("AssertionError raised (expected if we had the fix).", e)
+except Exception as e:
+    print("An unexpected error occurred:", e)
\ No newline at end of file
