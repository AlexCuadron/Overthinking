diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..ff77fcdb92
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,13 @@
+from sympy import Symbol, symbols, MatrixSymbol, Sum, assume, Q, ask, refine, Identity, assuming
+\
+n = Symbol('n', integer=True, positive=True)\
+i, j = symbols('i j', integer=True)\
+M = MatrixSymbol('M', n, n)\
+\
+with assuming(Q.orthogonal(M)):\
+    e = refine((M.T * M).doit())\
+\
+print(e, e[0, 0], e[0, 1])\
+print(\"Is diagonal?\", ask(Q.diagonal(e)), \"All integer elements?\", ask(Q.integer_elements(e)))\
+print(\"Sum of diagonal elements\", Sum(e[i, i], (i, 0, n-1)).doit())\
+print(\"Sum of all elements\", Sum(Sum(e[i,j], (i, 0, n-1)), (j, 0, n-1)).doit())\
diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py
index 79f3035f92..bd212b0deb 100644
--- a/sympy/matrices/expressions/matmul.py
+++ b/sympy/matrices/expressions/matmul.py
@@ -275,7 +275,7 @@ def refine_MatMul(expr, assumptions):

     last = exprargs[0]
     for arg in exprargs[1:]:
-        if arg == last.T and ask(Q.orthogonal(arg), assumptions):
+        if arg == last.T and ask(Q.orthogonal(last), assumptions):
             last = Identity(arg.shape[0])
         elif arg == last.conjugate() and ask(Q.unitary(arg), assumptions):
             last = Identity(arg.shape[0])
