diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 23dd9e930..8a11c9211 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -390,7 +390,11 @@ def isproperty(obj: Any) -> bool:
         if isinstance(obj, cached_property):
             return True

-    return isinstance(obj, property)
+    if isinstance(obj, property):
+        return True
+    if isinstance(obj, classmethod) and isinstance(getattr(obj, '__func__', None), property):
+        return True
+    return False


 def isgenericalias(obj: Any) -> bool:
diff --git a/test_repro/repro.py b/test_repro/repro.py
new file mode 100644
index 000000000..8d8bb173c
--- /dev/null
+++ b/test_repro/repro.py
@@ -0,0 +1 @@
+#!/usr/bin/env python3\n\nimport subprocess\nimport os\nimport sys\n\nCONTENT_INDEX = r"""\nTesting classmethod + property doc\n===================================\n\n.. automodule:: test_module\n   :members:\n"""\n\nCONTENT_MODULE = r"""\nclass A:\n    @classmethod\n    @property\n    def f(cls):\n        \"\"\"Some docstring for a class property.\"\"\"\n        return \"property value\"\n"""\n\ndef main():\n    # Create the doc source structure\n    if not os.path.exists('source'):\n        os.mkdir('source')\n    with open('source/index.rst', 'w') as f:\n        f.write(CONTENT_INDEX)\n\n    with open('test_module.py', 'w') as f:\n        f.write(CONTENT_MODULE)\n\n    # Create conf.py\n    with open('source/conf.py', 'w') as f:\n        f.write("""\nproject = 'ClassmethodPropertyTest'\nextensions = ['sphinx.ext.autodoc']\nmaster_doc = 'index'\n""")\n\n    # Attempt to run sphinx-build\n    cmd = [\n        'sphinx-build',\n        '-b', 'html',\n        'source',\n        '_build'\n    ]\n\n    try:\n        subprocess.check_call(cmd)\n    except subprocess.CalledProcessError as err:\n        print('Error running sphinx-build:', err)\n        sys.exit(1)\n\n    # Check if generated doc includes the docstring for `A.f`\n    output_html = os.path.join('_build', 'index.html')\n    if not os.path.exists(output_html):\n        print('Failed to generate HTML. Check logs above for errors.')\n        sys.exit(2)\n\n    with open(output_html) as f:\n        html_content = f.read()\n\n    # We'll do a simple check for the docstring\n    if 'Some docstring for a class property.' in html_content:\n        print('All good: classmethod@property is documented!')\n    else:\n        print('Docstring not found. The issue persists.')\n        sys.exit(3)\n\nif __name__ == '__main__':\n    main()\n
\ No newline at end of file
