diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py
index 7c0c3a68c0..21c361b6a2 100644
--- a/lib/matplotlib/collections.py
+++ b/lib/matplotlib/collections.py
@@ -1426,9 +1426,22 @@ class LineCollection(Collection):
         self.stale = True

     set_verts = set_segments  # for compatibility with PolyCollection
-    set_paths = set_segments
+
+    def set_paths(self, paths):
+        segments = []
+        for p in paths:
+            segments.append(p.vertices)
+        self.set_segments(segments)
+

     def get_segments(self):
+    def set_paths(self, paths):
+        # Convert each Path to its list-of-vertices form.
+        segments = []
+        for p in paths:
+            segments.append(p.vertices)
+        self.set_segments(segments)
+
         """
         Returns
         -------
diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 3f84250b64..f55bb07670 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -778,6 +778,25 @@ class ContourSet(ContourLabeler, mcoll.Collection):

                 level0segs = [polygon0, polygon1, ...]
                 polygon0 = [[x0, y0], [x1, y1], ...]
+    def get_paths(self):
+        # Return a flat list of all Paths from each collection.
+        all_paths = []
+        for c in self.collections:
+            all_paths.extend(c.get_paths())
+        return all_paths
+
+    def set_paths(self, new_paths):
+        # Distribute new_paths among sub-collections.
+        old_paths = self.get_paths()
+        if len(old_paths) != len(new_paths):
+            raise ValueError("Number of new paths must match the existing ones.")
+        idx = 0
+        for c in self.collections:
+            cpaths = c.get_paths()
+            n = len(cpaths)
+            c.set_paths(new_paths[idx: idx + n])
+            idx += n
+

         allkinds : [level0kinds, level1kinds, ...], optional
             Optional list of all the polygon vertex kinds (code types), as
