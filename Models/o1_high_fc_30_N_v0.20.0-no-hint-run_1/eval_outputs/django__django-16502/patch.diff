diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index fef5532e58..8c1b9329cd 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -147,6 +147,14 @@ class ServerHandler(simple_server.ServerHandler):
         self.get_stdin().read()
         super().close()

+    def finish_response(self):
+        if self.environ.get('REQUEST_METHOD') == 'HEAD':
+            if not self.headers_sent:
+                self.send_headers()
+            self.finish_content()
+        else:
+            super().finish_response()
+

 class WSGIRequestHandler(simple_server.WSGIRequestHandler):
     protocol_version = "HTTP/1.1"
diff --git a/django_test/db.sqlite3 b/django_test/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django_test/django_test/__init__.py b/django_test/django_test/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django_test/django_test/asgi.py b/django_test/django_test/asgi.py
new file mode 100644
index 0000000000..866922e3a0
--- /dev/null
+++ b/django_test/django_test/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for django_test project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_test.settings")
+
+application = get_asgi_application()
diff --git a/django_test/django_test/settings.py b/django_test/django_test/settings.py
new file mode 100644
index 0000000000..a14be3f8e0
--- /dev/null
+++ b/django_test/django_test/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for django_test project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230126185448.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-r!gz%no-335*7(*=1b*#xv)x=qw=y1m7@8j#t@(r-nov2tgwp+"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "django_test.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "django_test.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/django_test/django_test/urls.py b/django_test/django_test/urls.py
new file mode 100644
index 0000000000..b7300fe12f
--- /dev/null
+++ b/django_test/django_test/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for django_test project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/django_test/django_test/wsgi.py b/django_test/django_test/wsgi.py
new file mode 100644
index 0000000000..5c7f94d858
--- /dev/null
+++ b/django_test/django_test/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for django_test project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_test.settings")
+
+application = get_wsgi_application()
diff --git a/django_test/manage.py b/django_test/manage.py
new file mode 100755
index 0000000000..e147659602
--- /dev/null
+++ b/django_test/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_test.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..08ba604173
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,48 @@
+import os
+import subprocess
+import time
+import signal
+import re
+
+def main():
+    print("Step 1: Installing Django (between 1.10 and 1.11)")
+    subprocess.run(["pip", "install", "-q", "--upgrade", "-e", "/workspace/django__django__5.0"], check=True)
+
+    if not os.path.exists("django_test"):
+        print("Step 2: Creating a new Django project 'django_test'")
+        subprocess.run(["django-admin", "startproject", "django_test"], check=True)
+    else:
+        print("Project 'django_test' already exists, skipping creation.")
+
+    print("Step 3: Launch runserver in the background")
+    os.chdir("django_test")
+
+    server_process = subprocess.Popen([
+        "python", "manage.py", "runserver", "127.0.0.1:8000"
+    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+
+    time.sleep(3)  # Give the server time to start
+
+    print("Step 4: Make a HEAD request to http://127.0.0.1:8000/")
+    curl_cmd = ["curl", "-iX", "HEAD", "http://127.0.0.1:8000/"]
+    result = subprocess.run(curl_cmd, capture_output=True, text=True)
+
+    print("Killing the server...")
+    server_process.terminate()
+    try:
+        server_process.wait(timeout=5)
+    except subprocess.TimeoutExpired:
+        server_process.kill()
+
+    print("\n--- HEAD request response ---")
+    print(result.stdout)
+    print("--- End of response ---\n")
+
+    # Check if there's a HTML body snippet (like doctype) in the HEAD response
+    if "<!DOCTYPE html>" in result.stdout:
+        print("Bug present: HEAD request returned a body.")
+    else:
+        print("Bug not present: HEAD request did NOT return a body.")
+
+if __name__ == "__main__":
+    main()
