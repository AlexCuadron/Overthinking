diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..47611441d
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,10 @@
+import pytest
+
+def test_cafd_includes_carriage_return(capfd):
+    print('Greetings from DOS', end='\r')
+    out, err = capfd.readouterr()
+    print(f'Captured out: {repr(out)}')
+    assert out.endswith('\r'), f'Expected to end with \r but got: {repr(out)}'
+
+if __name__ == '__main__':
+    raise SystemExit(pytest.main([__file__]))
\ No newline at end of file
diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py
index 3f9c60fb9..cea245bd5 100644
--- a/src/_pytest/capture.py
+++ b/src/_pytest/capture.py
@@ -155,6 +155,7 @@ def pytest_load_initial_conftests(early_config: Config):
     _colorama_workaround()
     _readline_workaround()
     pluginmanager = early_config.pluginmanager
+    # ns.capture = "fd"
     capman = CaptureManager(ns.capture)
     pluginmanager.register(capman, "capturemanager")

@@ -192,7 +193,7 @@ class EncodedFile(io.TextIOWrapper):

 class CaptureIO(io.TextIOWrapper):
     def __init__(self) -> None:
-        super().__init__(io.BytesIO(), encoding="UTF-8", newline="", write_through=True)
+        super().__init__(io.BytesIO(), encoding="UTF-8", newline='', write_through=True)

     def getvalue(self) -> str:
         assert isinstance(self.buffer, io.BytesIO)
@@ -261,7 +262,11 @@ class SysCaptureBinary:
             if name == "stdin":
                 tmpfile = DontReadFromInput()
             else:
-                tmpfile = CaptureIO() if not tee else TeeCaptureIO(self._old)
+                import io
+                if not tee:
+                    tmpfile = io.BytesIO()
+                else:
+                    tmpfile = TeeCaptureIO(self._old)
         self.tmpfile = tmpfile
         self._state = "initialized"

@@ -335,10 +340,11 @@ class SysCapture(SysCaptureBinary):
     EMPTY_BUFFER = ""  # type: ignore[assignment]

     def snap(self):
-        res = self.tmpfile.getvalue()
-        self.tmpfile.seek(0)
-        self.tmpfile.truncate()
-        return res
+        self.tmpfile.flush()
+        raw = self.tmpfile.buffer.getvalue()
+        self.tmpfile.buffer.seek(0)
+        self.tmpfile.buffer.truncate()
+        return raw.decode("utf-8", "replace")

     def writeorg(self, data):
         self._assert_state("writeorg", ("started", "suspended"))
@@ -384,10 +390,10 @@ class FDCaptureBinary:
             self.syscapture = SysCapture(targetfd)
         else:
             self.tmpfile = EncodedFile(
-                # TODO: Remove type ignore, fixed in next mypy release.
-                TemporaryFile(buffering=0),  # type: ignore[arg-type]
-                encoding="utf-8",
-                errors="replace",
+                TemporaryFile('wb', buffering=0),
+                encoding='utf-8',
+                errors='replace',
+                newline='',
                 write_through=True,
             )
             if targetfd in patchsysdict:
@@ -478,10 +484,10 @@ class FDCapture(FDCaptureBinary):
     def snap(self):
         self._assert_state("snap", ("started", "suspended"))
         self.tmpfile.seek(0)
-        res = self.tmpfile.read()
+        data_bytes = self.tmpfile.buffer.read()
         self.tmpfile.seek(0)
         self.tmpfile.truncate()
-        return res
+        return data_bytes.decode("utf-8", "replace")

     def writeorg(self, data):
         """ write to original file descriptor. """
