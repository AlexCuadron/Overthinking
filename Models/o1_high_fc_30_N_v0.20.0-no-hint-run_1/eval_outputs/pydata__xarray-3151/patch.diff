diff --git a/repro_nonmonotonic.py b/repro_nonmonotonic.py
new file mode 100644
index 00000000..bf014920
--- /dev/null
+++ b/repro_nonmonotonic.py
@@ -0,0 +1,36 @@
+import xarray as xr
+import numpy as np
+
+yCoord = ['a', 'c', 'b']
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+print('\n--- ds1 ---')
+print(ds1)
+print('\n--- ds2 ---')
+print(ds2)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print('\n--- ds3 ---')
+    print(ds3)
+except ValueError as e:
+    print('\nERROR RAISED:', e)
\ No newline at end of file
diff --git a/xarray/core/combine.py b/xarray/core/combine.py
index 37ae903b..3dd47bb2 100644
--- a/xarray/core/combine.py
+++ b/xarray/core/combine.py
@@ -503,12 +503,28 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',
         # Check the overall coordinates are monotonically increasing
         for dim in concatenated.dims:
             if dim in concatenated:
-                indexes = concatenated.indexes.get(dim)
-                if not (indexes.is_monotonic_increasing
-                        or indexes.is_monotonic_decreasing):
-                    raise ValueError("Resulting object does not have monotonic"
-                                     " global indexes along dimension {}"
-                                     .format(dim))
+                # check if coordinate is identical across all sub-datasets
+                all_identical = True
+                try:
+                    first_index = None
+                    for ds_test in datasets_with_same_vars:
+                        if dim not in ds_test.coords:
+                            continue
+                        current_index = ds_test.coords[dim].to_index()
+                        if first_index is None:
+                            first_index = current_index
+                        elif not current_index.equals(first_index):
+                            all_identical = False
+                            break
+                except:
+                    all_identical = False
+                if not all_identical:
+                    indexes = concatenated.indexes.get(dim)
+                    if not (indexes.is_monotonic_increasing
+                            or indexes.is_monotonic_decreasing):
+                        raise ValueError("Resulting object does not have monotonic"
+                                         " global indexes along dimension {}"
+                                         .format(dim))
         concatenated_grouped_by_data_vars.append(concatenated)

     return merge(concatenated_grouped_by_data_vars, compat=compat,
