diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..f01da71c52 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,11 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            try:
+                arr = converter(input_) if converter else input_
+            except ValueError:
+                return NotImplemented
+            arrays.append(arr)

         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..e0c224b11f
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,40 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+import sys
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+
+def main():
+    da1 = DuckArray(1 * u.mm)
+    x = 1 * u.m
+
+    print("Test #1: DuckArray(1 * u.mm) + (1 * u.m)")
+    print(da1 + x)
+
+    print("Test #2: (1 * u.mm) + DuckArray(1 * u.mm)")
+    print((1 * u.mm) + da1)
+
+    print("Test #3: (1 * u.m) + DuckArray(1 * u.mm)")
+    print((1 * u.m) + da1)
+
+if __name__ == "__main__":
+    main()
