diff --git a/reproduce_where_attr_issue.py b/reproduce_where_attr_issue.py
new file mode 100644
index 00000000..a69bbb50
--- /dev/null
+++ b/reproduce_where_attr_issue.py
@@ -0,0 +1,18 @@
+import numpy as np
+import xarray as xr
+
+print('\n--- Reproduce where-attributes issue ---\n')
+
+data = xr.DataArray(
+    np.ones([10,10], dtype=np.int8),
+    dims=["x","y"],
+    name="original_data"
+)
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+
+print("Original Data Attributes:", data.attrs)
+
+# Apply xr.where
+data2 = xr.where(data == 1, 5, 0)
+print("\nWhere output Data Attributes:", data2.attrs)
diff --git a/reproduce_where_attr_issue_modified.py b/reproduce_where_attr_issue_modified.py
new file mode 100644
index 00000000..681adc64
--- /dev/null
+++ b/reproduce_where_attr_issue_modified.py
@@ -0,0 +1,26 @@
+import numpy as np
+import xarray as xr
+
+print('\n--- Reproduce where-attributes issue (modified approach) ---\n')
+
+# Create a DataArray with some attributes
+data = xr.DataArray(
+    np.ones([10, 10], dtype=np.int8),
+    dims=["x","y"],
+    name="original_data"
+)
+data.attrs["attr_1"] = "test1"
+data.attrs["attr_2"] = "test2"
+print("Original Data Attributes:", data.attrs)
+
+# Instead of "data == 1" (which creates a brand new DataArray with no attrs),
+# create a boolean DataArray while preserving attributes.
+# One simple way is to copy the array and transform its values:
+cond = data.copy()            # replicate the array
+cond.data = (cond.data == 1)  # do the comparison in-place
+
+print("\nCondition's Attributes (after copy & in-place eq):", cond.attrs)
+
+# Now use xr.where with cond, providing 5 or 0.
+data2 = xr.where(cond, 5, 0)
+print("\nWhere output Data Attributes:", data2.attrs)
diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 9fe93c88..b001a158 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1809,7 +1809,7 @@ def where(cond, x, y):
         equivalent methods
     """
     # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    out = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
@@ -1818,6 +1818,20 @@ def where(cond, x, y):
         dataset_join="exact",
         dask="allowed",
     )
+    # preserve attributes from whichever of cond, x, or y is a DataArray
+    # prioritize x > y > cond if multiple have attributes.
+    attrs_to_copy = None
+    if hasattr(x, 'attrs') and x.attrs:
+        attrs_to_copy = x.attrs
+    elif hasattr(y, 'attrs') and y.attrs:
+        attrs_to_copy = y.attrs
+    elif hasattr(cond, 'attrs') and cond.attrs:
+        attrs_to_copy = cond.attrs
+
+    if attrs_to_copy is not None and hasattr(out, 'attrs'):
+        out.attrs = dict(attrs_to_copy)
+
+    return out


 def polyval(coord, coeffs, degree_dim="degree"):
diff --git a/xarray/core/ops.py b/xarray/core/ops.py
index 8265035a..3e37cfa2 100644
--- a/xarray/core/ops.py
+++ b/xarray/core/ops.py
@@ -173,7 +173,7 @@ def where_method(self, cond, other=dtypes.NA):

     # alignment for three arguments is complicated, so don't support it yet
     join = "inner" if other is dtypes.NA else "exact"
-    return apply_ufunc(
+    out = apply_ufunc(
         duck_array_ops.where_method,
         self,
         cond,
@@ -183,6 +183,9 @@ def where_method(self, cond, other=dtypes.NA):
         dask="allowed",
         keep_attrs=True,
     )
+    if hasattr(out, "attrs") and hasattr(self, "attrs"):
+        out.attrs = dict(self.attrs)
+    return out


 def _call_possibly_missing_method(arg, name, args, kwargs):
