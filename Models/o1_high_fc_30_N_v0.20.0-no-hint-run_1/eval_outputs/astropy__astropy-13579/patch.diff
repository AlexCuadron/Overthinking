diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
index d7605b078c..a7148c5e09 100644
--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py
@@ -153,7 +153,47 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
             raise ValueError("Cannot slice WCS: the resulting WCS should have "
                              "at least one pixel and one world dimension.")

-    @lazyproperty
+        # Store reference world values for any integer-sliced pixel dimensions.
+        self._frozen_world_values = [None] * self._wcs.world_n_dim
+        pixel_ref = [0]*self._wcs.pixel_n_dim
+        for ipix_dim in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix_dim], numbers.Integral):
+                pixel_ref[ipix_dim] = self._slices_pixel[ipix_dim]
+
+        ref_world = self._wcs.pixel_to_world_values(*pixel_ref)
+        if self._wcs.world_n_dim == 1:
+            ref_world = (ref_world,)
+
+        # For any dimension not in _world_keep, freeze it at the reference world value.
+        for iworld_dim in range(self._wcs.world_n_dim):
+            if iworld_dim not in self._world_keep:
+                self._frozen_world_values[iworld_dim] = ref_world[iworld_dim]
+
+
+    # @lazyproperty
+'''
+        # Store the world coordinate values for any integer-sliced pixel dimensions.
+        # This ensures that world_to_pixel can properly fix those dropped dimensions.
+        self._frozen_world_values = [None] * self._wcs.world_n_dim
+
+        # Build a pixel array using 0 for slice(None) dims and the integer slice value for integer-sliced dims.
+        pixel_array = [0]*self._wcs.pixel_n_dim
+        for ipix_dim in range(self._wcs.pixel_n_dim):
+            if isinstance(self._slices_pixel[ipix_dim], numbers.Integral):
+                pixel_array[ipix_dim] = self._slices_pixel[ipix_dim]
+
+        # Compute the world coords for that reference pixel.
+        ref_w = self._wcs.pixel_to_world_values(*pixel_array)
+
+        # If world_n_dim == 1, pixel_to_world_values returns a scalar, so wrap it in a tuple.
+        if self._wcs.world_n_dim == 1:
+            ref_w = (ref_w,)
+
+        # For any world dimension that was dropped, fix its world value.
+        for iworld_dim in range(self._wcs.world_n_dim):
+            if iworld_dim not in self._world_keep:
+                self._frozen_world_values[iworld_dim] = ref_w[iworld_dim]
+
     def dropped_world_dimensions(self):
         """
         Information describing the dropped world dimensions.
@@ -251,7 +291,7 @@ class SlicedLowLevelWCS(BaseWCSWrapper):
                 iworld_curr += 1
                 world_arrays_new.append(world_arrays[iworld_curr])
             else:
-                world_arrays_new.append(1.)
+                world_arrays_new.append(self._frozen_world_values[iworld])

         world_arrays_new = np.broadcast_arrays(*world_arrays_new)
         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..0eb5afa0d2
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,65 @@
+import numpy as np
+import astropy.wcs
+from astropy.coordinates import SkyCoord
+import astropy.units as u
+from astropy.wcs.wcsapi import SlicedLowLevelWCS, HighLevelWCSWrapper
+import astropy.wcs.utils
+
+# Reproduction script for the issue described in the PR
+
+nx = 100
+ny = 25
+nz = 2
+wcs_header = {
+    'WCSAXES': 3,
+    'CRPIX1': (nx + 1)/2,
+    'CRPIX2': (ny + 1)/2,
+    'CRPIX3': 1.0,
+    'PC1_1': 0.0,
+    'PC1_2': -1.0,
+    'PC1_3': 0.0,
+    'PC2_1': 1.0,
+    'PC2_2': 0.0,
+    'PC2_3': -1.0,
+    'CDELT1': 5,
+    'CDELT2': 5,
+    'CDELT3': 0.055,
+    'CUNIT1': 'arcsec',
+    'CUNIT2': 'arcsec',
+    'CUNIT3': 'Angstrom',
+    'CTYPE1': 'HPLN-TAN',
+    'CTYPE2': 'HPLT-TAN',
+    'CTYPE3': 'WAVE',
+    'CRVAL1': 0.0,
+    'CRVAL2': 0.0,
+    'CRVAL3': 1.05,
+}
+
+fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec,
+              frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))
+
+print("==== Full (unsliced) WCS world_to_pixel ====")
+full_pix = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)
+print("world_to_pixel(pt, 1.05 * A) =>", full_pix)
+
+print("\n==== Sliced WCS ====")
+ll_sliced_wcs = SlicedLowLevelWCS(fits_wcs, 0)
+hl_sliced_wcs = HighLevelWCSWrapper(ll_sliced_wcs)
+sliced_pix = hl_sliced_wcs.world_to_pixel(pt)
+print("With slice=0 => world_to_pixel(pt)", sliced_pix)
+
+print("\n==== Checking pixel_to_world consistency ====")
+
+px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)
+mw_full = fits_wcs.pixel_to_world(px, py, pz)
+print("Full WCS -> pixel -> world =>", mw_full)
+
+if ll_sliced_wcs.pixel_n_dim == 2:
+    # get the 2D pixel coords from the full transform
+    mw_sliced = hl_sliced_wcs.pixel_to_world(px, py)
+    print("Sliced WCS -> same pixel -> world =>", mw_sliced)
+
+print("\nDone.")
+
