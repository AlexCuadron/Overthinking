diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..96ccce72dd 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -762,7 +762,7 @@ class Field(RegisterLookupMixin):
             # such fields can't be deferred (we don't have a check for this).
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
-        if self.choices is not None:
+        if self.choices is not None and not hasattr(cls, 'get_%s_display' % self.name):
             setattr(cls, 'get_%s_display' % self.name,
                     partialmethod(cls._get_FIELD_display, field=self))

diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b01359465d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+import sys
+import django
+from django.conf import settings
+
+settings.configure(
+    INSTALLED_APPS=["__main__"],  # We'll treat this script like an app.
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:",
+        }
+    },
+    SECRET_KEY="secret",
+)
+
+# Now do Django setup
+django.setup()
+
+from django.db import models
+
+# Define a minimal model in this script
+class FooBar(models.Model):
+    foo_bar = models.CharField(max_length=20, choices=[(1, 'foo'), (2, 'bar')])
+    def __str__(self):
+        return self.get_foo_bar_display()
+    def get_foo_bar_display(self):
+        return "something"
+
+# Letâ€™s test by creating an instance in memory:
+
+if __name__ == "__main__":
+    # We'll not do migrations because we only want to see how get_foo_bar_display is handled.
+    # Just create an instance.
+    instance = FooBar(foo_bar=1)
+    print("The __str__ of the instance is:", str(instance))
+    # Specifically print the get_foo_bar_display as well
+    print("The get_foo_bar_display() of the instance is:", instance.get_foo_bar_display())
