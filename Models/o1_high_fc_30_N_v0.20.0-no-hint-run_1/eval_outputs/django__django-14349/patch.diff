diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..8aa72d5d9e 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,11 +101,24 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
-        # Check if the scheme is valid.
-        scheme = value.split('://')[0].lower()
-        if scheme not in self.schemes:
+        try:
+            parted = urlsplit(value)
+        except ValueError:
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+        parted2 = parted._replace(scheme=value.split(':',1)[0])
+        parted_reconstructed2 = urlunsplit(parted2)
+        if parted_reconstructed2 != value:
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+
+        if '\n' in value or '\r' in value or '\t' in value:
             raise ValidationError(self.message, code=self.code, params={'value': value})

+        scheme = parted2.scheme.lower()
+        if scheme not in [s.lower() for s in self.schemes]:
+            raise ValidationError(self.message, code=self.code, params={'value': value})
+
+        # Then check full URL
+
         # Then check full URL
         try:
             super().__call__(value)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7eb2c5cda1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,5 @@
+import subprocess, sys
+
+cmd = [sys.executable, 'tests/runtests.py', 'validators']
+result = subprocess.run(cmd)
+sys.exit(result.returncode)
