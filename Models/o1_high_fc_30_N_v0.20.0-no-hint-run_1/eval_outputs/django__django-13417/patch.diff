diff --git a/__init__.py b/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..5d0e87b57c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1224,10 +1224,11 @@ class QuerySet:
             return True
         if self.query.extra_order_by or self.query.order_by:
             return True
-        elif self.query.default_ordering and self.query.get_meta().ordering:
+        if self.query.default_ordering and self.query.get_meta().ordering:
+            if getattr(self.query, 'group_by', None):
+                return False
             return True
-        else:
-            return False
+        return False

     @property
     def db(self):
diff --git a/foo_app/__init__.py b/foo_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/foo_app/apps.py b/foo_app/apps.py
new file mode 100644
index 0000000000..a505d3c6b4
--- /dev/null
+++ b/foo_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class FooAppConfig(AppConfig):
+    name = 'foo_app'
diff --git a/foo_app/models.py b/foo_app/models.py
new file mode 100644
index 0000000000..46c3a9e41f
--- /dev/null
+++ b/foo_app/models.py
@@ -0,0 +1,9 @@
+import uuid
+from django.db import models
+
+class Foo(models.Model):
+    uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=255)
+
+    class Meta:
+        ordering = ["name"]
\ No newline at end of file
diff --git a/scripts/reproduce_issue.py b/scripts/reproduce_issue.py
new file mode 100644
index 0000000000..c34c3baadb
--- /dev/null
+++ b/scripts/reproduce_issue.py
@@ -0,0 +1,56 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Count
+from django.core.management import call_command
+import uuid
+
+import sys
+sys.path.insert(0, '/workspace/django__django__3.2')
+
+DB_NAME = ":memory:"
+
+def setup_django():
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=["foo_app.apps.FooAppConfig"],
+            DATABASES={
+                "default": {
+                    "ENGINE": "django.db.backends.sqlite3",
+                    "NAME": DB_NAME,
+                }
+            },
+            SECRET_KEY="some-secret-key",
+        )
+    django.setup()
+
+setup_django()
+
+
+# Django requires this to detect the app.
+class foo_app:
+    name = "foo_app"
+    label = "foo_app"
+
+if __name__ == "__main__":
+    setup_django()
+
+    # Run migrations
+
+from foo_app.models import Foo
+
+call_command("migrate", run_syncdb=True, interactive=False, verbosity=0)
+
+# Clear any existing data, create test data.
+Foo.objects.all().delete()
+Foo.objects.create(name="test1")
+Foo.objects.create(name="test2")
+
+qs = Foo.objects.all()
+print("qs query =>", str(qs.query))
+print("qs.ordered =>", qs.ordered)
+
+qs2 = Foo.objects.annotate(Count("pk")).all()
+print("qs2 query =>", str(qs2.query))
+print("qs2.ordered =>", qs2.ordered)
