diff --git a/example.svg b/example.svg
new file mode 100644
index 0000000000..6f265ddbe3
Binary files /dev/null and b/example.svg differ
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..b12c337500 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1453,6 +1453,9 @@ or callable, default: value of *xycoords*
         if not self.get_visible() or not self._check_xy(renderer):
             return
         self.update_positions(renderer)
+        renderer.open_group('annotationbbox', gid=self.get_gid())
+
+
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
                 self.arrow_patch.figure = self.figure
@@ -1460,6 +1463,7 @@ or callable, default: value of *xycoords*
         self.patch.draw(renderer)
         self.offsetbox.draw(renderer)
         self.stale = False
+        renderer.close_group('annotationbbox')


 class DraggableBase:
diff --git a/reproduce_annotationbbox_gid_issue.py b/reproduce_annotationbbox_gid_issue.py
new file mode 100644
index 0000000000..9295385080
--- /dev/null
+++ b/reproduce_annotationbbox_gid_issue.py
@@ -0,0 +1,56 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)
+
+"""
+Reproduction script for AnnotationBbox GID issue.
+
+Creates an AnnotationBbox with a custom GID and saves an SVG.
+We expect the SVG to contain gid="My_label" in the relevant group
+once the fix is applied.
+
+Usage:
+    python reproduce_annotationbbox_gid_issue.py
+"""
+
+def main():
+    fig, ax = plt.subplots()
+
+    # We'll just create a dummy image in memory for demonstration.
+    # Or you can read from an actual PNG, e.g. 'plt.imread("undraw_flowers_vx06.png")'
+    import numpy as np
+    arr_img = np.random.rand(10, 10, 3)  # placeholder image
+
+    xy = [0.3, 0.55]
+
+    imagebox = OffsetImage(arr_img, zoom=0.1)
+    imagebox.image.axes = ax
+
+    ab = AnnotationBbox(
+        imagebox,
+        xy,
+        xybox=(120., -80.),
+        xycoords='data',
+        boxcoords="offset points",
+        pad=0.5,
+        arrowprops=dict(
+            arrowstyle="->",
+            connectionstyle="angle,angleA=0,angleB=90,rad=3"
+        )
+    )
+    ab.set_gid('My_label')
+    ax.add_artist(ab)
+
+    print(f"GID set to: {ab.get_gid()}")
+
+    svg_filename = "example.svg"
+    fig.savefig(svg_filename, format="svg")
+    print(f"Saved {svg_filename}.")
+
+    # We'll show up to 2000 chars from the SVG.
+    with open(svg_filename, 'r') as f:
+        content = f.read()
+        print("SVG snippet:")
+        print(content[:2000])
+
+if __name__ == "__main__":
+    main()
