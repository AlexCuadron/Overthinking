diff --git a/django/db/models/base.py b/django/db/models/base.py
index 3ce711f3f1..ccb1ce3ba2 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -736,6 +736,11 @@ class Model(metaclass=ModelBase):
         elif not force_insert and deferred_fields and using == self._state.db:
             field_names = set()
             for field in self._meta.concrete_fields:
+        # Expand valid_fields to include <fk_name>__pk for direct foreign/one-to-one references
+        for field in opts.fields:
+            if field.is_relation and not (field.auto_created and not field.concrete):
+                valid_fields.add(field.name + '__pk')
+
                 if not field.primary_key and not hasattr(field, 'through'):
                     field_names.add(field.attname)
             loaded_fields = field_names.difference(deferred_fields)
@@ -1722,22 +1727,43 @@ class Model(metaclass=ModelBase):
                             )
                         )

-        # Skip ordering on pk. This is always a valid order_by field
-        # but is an alias and therefore won't be found by opts.get_field.
-        fields = {f for f in fields if f != 'pk'}
+        # Skip ordering on pk or <related>__pk. These are always valid order_by fields
+        # but are aliases and therefore won't be found by opts.get_field.
+        fields = {f for f in fields if f != 'pk' and not f.endswith('__pk')}

         # Check for invalid or nonexistent fields in ordering.
         invalid_fields = []

         # Any field name that is not present in field_names does not exist.
         # Also, ordering by m2m fields is not allowed.
+        valid_fields.update(
+            f.name + '__pk'
+            for f in opts.fields
+            if f.is_relation and not (f.auto_created and not f.concrete)
+        )
         opts = cls._meta
+        valid_fields.update(
+            f.name + '__pk'
+            for f in chain(opts.fields, opts.related_objects)
+            if f.is_relation and not (f.auto_created and not f.concrete)
+        )
+
         valid_fields = set(chain.from_iterable(
             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
             for f in chain(opts.fields, opts.related_objects)
         ))

+        valid_fields.update(
+            f.name + '__pk'
+            for f in chain(opts.fields, opts.related_objects)
+            if f.is_relation and not (f.auto_created and not f.concrete)
+        )
         invalid_fields.extend(fields - valid_fields)
+        valid_fields.update(
+            f.name + '__pk'
+            for f in chain(opts.fields, opts.related_objects)
+            if f.is_relation and not (f.auto_created and not f.concrete)
+        )

         for invalid_field in invalid_fields:
             errors.append(
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..14bcce65d4
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,28 @@
+import django
+from django.conf import settings
+from django.db import models
+
+settings.configure(
+    INSTALLED_APPS=["__main__"],
+    DATABASES={
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3",
+            "NAME": ":memory:",
+        }
+    },
+)
+
+django.setup()
+
+class Option(models.Model):
+    name = models.CharField(max_length=50)
+
+class SomeModel(models.Model):
+    option = models.ForeignKey(Option, on_delete=models.CASCADE)
+
+    class Meta:
+        ordering = ["option__pk"]
+
+if __name__ == "__main__":
+    from django.core.management import call_command
+    call_command("check")
\ No newline at end of file
