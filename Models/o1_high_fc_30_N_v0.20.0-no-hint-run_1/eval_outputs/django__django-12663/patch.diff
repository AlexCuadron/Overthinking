diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..c593b2bd42 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1768,6 +1768,8 @@ class IntegerField(Field):
         value = super().get_prep_value(value)
         if value is None:
             return None
+        if hasattr(value, '_wrapped'):
+            value = value._wrapped
         try:
             return int(value)
         except (TypeError, ValueError) as e:
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..658d390f50
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,127 @@
+
+import os
+import django
+from django.conf import settings
+
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+# Minimal Django settings to reproduce
+# Minimal Django settings to reproduce
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.admin',
+        'django.contrib.staticfiles'
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+        }
+    },
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+)
+
+django.setup()
+
+from django.contrib.auth.models import User
+from django.db import models
+from django.db.models import OuterRef, Subquery
+from django.utils.functional import SimpleLazyObject
+
+class A(models.Model):
+    pass
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+
+# Migrate
+from django.core.management import call_command
+call_command('makemigrations', 'contenttypes', 'auth')
+call_command('makemigrations')
+call_command('migrate', '--run-syncdb')
+
+try:
+    owner_user = (
+        B.objects.filter(a=OuterRef('pk'))
+        .annotate(owner_user=Subquery(C.objects.values('owner')))
+        .values('owner_user')
+    )
+    user = SimpleLazyObject(lambda: User.objects.create_user('testuser'))
+    A.objects.annotate(owner_user=Subquery(owner_user)).filter(owner_user=user)
+    print('Script completed - if no error, we are good!')
+except Exception as e:
+    print('Error raised:', e)
+    raise
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.admin',
+        'django.contrib.staticfiles'
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+        }
+    },
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+)
+
+django.setup()
+
+from django.contrib.auth.models import User
+from django.db import models
+from django.db.models import OuterRef, Subquery
+from django.utils.functional import SimpleLazyObject
+
+class A(models.Model):
+    pass
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+
+# Migrate
+from django.core.management import call_command
+call_command('makemigrations', 'contenttypes', 'auth')
+call_command('makemigrations')
+call_command('migrate', '--run-syncdb')
+
+try:
+    owner_user = (
+        B.objects.filter(a=OuterRef('pk'))
+        .annotate(owner_user=Subquery(C.objects.values('owner')))
+        .values('owner_user')
+    )
+    user = SimpleLazyObject(lambda: User.objects.create_user('testuser'))
+    A.objects.annotate(owner_user=Subquery(owner_user)).filter(owner_user=user)
+    print('Script completed - if no error, we are good!')
+except Exception as e:
+    print('Error raised:', e)
+    raise
