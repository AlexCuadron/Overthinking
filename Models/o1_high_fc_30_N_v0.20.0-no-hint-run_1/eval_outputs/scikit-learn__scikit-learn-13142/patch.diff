diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..e1b69233d 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -222,6 +222,7 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         n_init = self.n_init if do_init else 1

         max_lower_bound = -np.infty
+        best_log_resp = None
         self.converged_ = False

         random_state = check_random_state(self.random_state)
@@ -256,12 +257,10 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 max_lower_bound = lower_bound
                 best_params = self._get_parameters()
                 best_n_iter = n_iter
+                best_log_resp = log_resp.copy()

-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
+        self._set_parameters(best_params)
+        log_resp = best_log_resp
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -269,10 +268,9 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                           'or check for degenerate data.'
                           % (init + 1), ConvergenceWarning)

-        self._set_parameters(best_params)
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
-
+        _, log_resp = self._e_step(X)
         return log_resp.argmax(axis=1)

     def _e_step(self, X):
