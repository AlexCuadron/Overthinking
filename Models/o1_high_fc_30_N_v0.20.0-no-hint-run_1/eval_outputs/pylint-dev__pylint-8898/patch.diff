diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py
index 514bdcd81..64a8010f2 100644
--- a/pylint/config/config_initialization.py
+++ b/pylint/config/config_initialization.py
@@ -111,17 +111,18 @@ def _config_initialization(
         )

     # TODO 3.1: Change this to emit unknown-option-value
-    for exc_name in linter.config.overgeneral_exceptions:
-        if "." not in exc_name:
-            warnings.warn_explicit(
-                f"'{exc_name}' is not a proper value for the 'overgeneral-exceptions' option. "
-                f"Use fully qualified name (maybe 'builtins.{exc_name}' ?) instead. "
-                "This will cease to be checked at runtime in 3.1.0.",
-                category=UserWarning,
-                filename="pylint: Command line or configuration file",
-                lineno=1,
-                module="pylint",
-            )
+    if hasattr(linter.config, "overgeneral_exceptions"):
+        for exc_name in linter.config.overgeneral_exceptions:
+            if "." not in exc_name:
+                warnings.warn_explicit(
+                    f"'{exc_name}' is not a proper value for the 'overgeneral-exceptions' option. "
+                    f"Use fully qualified name (maybe 'builtins.{exc_name}' ?) instead. "
+                    "This will cease to be checked at runtime in 3.1.0.",
+                    category=UserWarning,
+                    filename="pylint: Command line or configuration file",
+                    lineno=1,
+                    module="pylint",
+                )

     linter._emit_stashed_messages()

diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py
index fa7f7b92f..4bc7bd0c8 100644
--- a/pylint/utils/utils.py
+++ b/pylint/utils/utils.py
@@ -210,26 +210,17 @@ def register_plugins(linter: PyLinter, directory: str) -> None:


 def _splitstrip(string: str, sep: str = ",") -> list[str]:
-    """Return a list of stripped string by splitting the string given as
-    argument on `sep` (',' by default), empty strings are discarded.
+    """Return a list of stripped strings by splitting on "sep" (',' by default),
+    but extends the logic to handle quoted segments if the string is enclosed in
+    double quotes.

-    >>> _splitstrip('a, b, c   ,  4,,')
-    ['a', 'b', 'c', '4']
-    >>> _splitstrip('a')
-    ['a']
-    >>> _splitstrip('a,\nb,\nc,')
-    ['a', 'b', 'c']
-
-    :type string: str or unicode
-    :param string: a csv line
-
-    :type sep: str or unicode
-    :param sep: field separator, default to the comma (',')
-
-    :rtype: str or unicode
-    :return: the unquoted string (or the input string if it wasn't quoted)
+    Commas within quoted sections will no longer split the input.
+    Empty strings are discarded.
     """
-    return [word.strip() for word in string.split(sep) if word.strip()]
+    import csv
+    reader = csv.reader([string], delimiter=sep, quotechar='"')
+    tokens = next(reader)
+    return [t.strip() for t in tokens if t.strip()]


 def _unquote(string: str) -> str:
diff --git a/pylint_test.ini b/pylint_test.ini
new file mode 100644
index 000000000..d19cc5519
--- /dev/null
+++ b/pylint_test.ini
@@ -0,0 +1,2 @@
+[BASIC]
+bad-names-rgxs = "(foo{1,3})"
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..1fba304bf
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,25 @@
+import subprocess
+import sys
+
+CONFIG_CONTENT = """[BASIC]\nbad-names-rgxs = "(foo{1,3})"\n"""
+
+CODE_CONTENT = """def foo():\n    pass\n"""
+
+def main():
+    # Create an ini file to reproduce.
+    with open("pylint_test.ini", "w") as f:
+        f.write(CONFIG_CONTENT)
+
+    # Create a minimal Python file.
+    with open("test_foo.py", "w") as f:
+        f.write(CODE_CONTENT)
+
+    # Attempt to run pylint with the config.
+    cmd = [sys.executable, "-m", "pylint", "test_foo.py", "--rcfile=pylint_test.ini"]
+    proc = subprocess.run(cmd, capture_output=True, text=True)
+    print("STDOUT:\n", proc.stdout)
+    print("STDERR:\n", proc.stderr)
+    print("RETURN CODE:", proc.returncode)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_foo.py b/test_foo.py
new file mode 100644
index 000000000..9332a2735
--- /dev/null
+++ b/test_foo.py
@@ -0,0 +1,2 @@
+def foo():
+    pass
