diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..4ce870329
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,24 @@
+import subprocess, os, sys
+
+print("Removing old build directory...")
+subprocess.run(["rm", "-rf", "build"], check=True, cwd="/workspace/sphinx-doc__sphinx__7.2")
+
+print("Creating fresh build directory...")
+os.mkdir("/workspace/sphinx-doc__sphinx__7.2/build")
+
+print("Changing directory to 'doc'...")
+os.chdir("/workspace/sphinx-doc__sphinx__7.2/doc")
+
+print("Running sphinx-build from 'doc' to '../build'...")
+sphinx_proc = subprocess.run(["sphinx-build", "-b", "html", ".", "../build"], check=False)
+
+os.chdir("/workspace/sphinx-doc__sphinx__7.2")
+
+print("Checking if REPLACE_ME is present in the built HTML...")
+proc_grep = subprocess.run("grep -Rq REPLACE_ME build/*.html", shell=True)
+if proc_grep.returncode == 0:
+    print("BAD: Found REPLACE_ME in built HTML")
+    sys.exit(1)
+else:
+    print("GOOD: No REPLACE_ME found")
+    sys.exit(0)
diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py
index 19f7c0a8d..c21a678c9 100644
--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -369,13 +369,25 @@ class Include(BaseInclude, SphinxDirective):
     """

     def run(self) -> list[Node]:
-        if self.arguments[0].startswith('<') and \
-           self.arguments[0].endswith('>'):
+        if self.arguments[0].startswith('<') and self.arguments[0].endswith('>'):
             # docutils "standard" includes, do not do path processing
             return super().run()
-        rel_filename, filename = self.env.relfn2path(self.arguments[0])
-        self.arguments[0] = filename
-        self.env.note_included(filename)
+
+        env = self.env
+        rel_filename, filename = env.relfn2path(self.arguments[0])
+        docname = env.path2doc(filename) or filename
+        with open(filename, encoding='utf-8') as f:
+            content = f.read()
+        arg = [content]
+        env.events.emit('source-read', docname, arg)
+
+        import tempfile
+        tmp = tempfile.NamedTemporaryFile('w', delete=False, encoding='utf-8')
+        tmp.write(arg[0])
+        tmp.close()
+
+        self.arguments[0] = tmp.name
+        env.note_included(filename)
         return super().run()
