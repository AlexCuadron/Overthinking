diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..ec5f0be6aa 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -26,11 +26,14 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+                self.serialize_result(obj, to_field_name)
                 for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
+    def serialize_result(self, obj, to_field_name):
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+

     def get_paginator(self, *args, **kwargs):
         """Use the ModelAdmin's paginator."""
diff --git a/reproduce_autocomplete_issue.py b/reproduce_autocomplete_issue.py
new file mode 100644
index 0000000000..a4f7454d64
--- /dev/null
+++ b/reproduce_autocomplete_issue.py
@@ -0,0 +1,16 @@
+import sys
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+
+# This script replicates the challenge of wanting custom fields in the autocomplete response.
+# Currently, to add an extra field, we must override the entire AutocompleteJsonView.get method.
+# We'll attempt to do so here and note the burden.
+
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def get(self, request, *args, **kwargs):
+        # Try to add an extra field in the JSON response.
+        # Without the upcoming refactor, we have to duplicate logic from the original get.
+        return super().get(request, *args, **kwargs)
+
+if __name__ == '__main__':
+    print("Reproduce script executed.")
+    print("(This doesn't produce a direct error, but demonstrates the difficulty in customizing the JSON response.")
\ No newline at end of file
