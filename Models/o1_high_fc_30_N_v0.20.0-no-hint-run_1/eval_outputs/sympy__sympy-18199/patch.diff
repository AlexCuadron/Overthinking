diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..b937f8545d
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,15 @@
+import sys
+# We'll test nthroot_mod for the case: nthroot_mod(17*17, 5, 17)
+# which should yield x=0 as a valid root mod 17.
+
+from sympy.ntheory.residue_ntheory import nthroot_mod
+
+def test_nthroot_mod_zero_root():
+    a = 17*17  # which is 289
+    n = 5
+    p = 17
+    roots = nthroot_mod(a, n, p, all_roots=True)
+    print(f"nthroot_mod({a}, {n}, {p}, all_roots=True) => {roots}")
+
+if __name__ == "__main__":
+    test_nthroot_mod_zero_root()
diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py
index 9a3052d4c3..7f5e3e0d70 100644
--- a/sympy/ntheory/residue_ntheory.py
+++ b/sympy/ntheory/residue_ntheory.py
@@ -773,6 +773,11 @@ def nthroot_mod(a, n, p, all_roots=False):
     # see Hackman "Elementary Number Theory" (2009), page 76
     if not is_nthpow_residue(a, n, p):
         return None
+    if a % p == 0:
+        if all_roots:
+            return [0]
+        return 0
+
     if not isprime(p):
         raise NotImplementedError("Not implemented for composite p")
