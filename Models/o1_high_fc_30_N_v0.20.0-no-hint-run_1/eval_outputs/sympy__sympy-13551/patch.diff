diff --git a/new_reproduce_issue.py b/new_reproduce_issue.py
new file mode 100644
index 0000000000..ee96d3d6b4
--- /dev/null
+++ b/new_reproduce_issue.py
@@ -0,0 +1,17 @@
+from sympy import Product, Symbol, simplify, Pow
+from sympy.abc import n, k
+
+# Reproduce the error described in the PR
+# The product for n=2 should be (2 + 2^0) * (2 + 2^{-1}) = 15/2.
+# The old code incorrectly gave 9/2. After our fix it should remain
+# as a product but evaluate numerically to 15/2.
+
+if __name__ == "__main__":
+    p = Product(n + 1/Pow(2, k), (k, 0, n-1))
+    p_eval = p.doit()
+    print("Product expression:", p)
+    print("Evaluated with doit():", p_eval)
+    substituted = p_eval.subs(n, 2)
+    print("Substituted n=2 =>", substituted)
+    print("Numeric value =>", substituted.evalf())
+    print("Simplified =>", simplify(substituted))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..71899d0af6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+from sympy import Product, Symbol, simplify, Pow
+from sympy.abc import n, k
+
+# Reproduce the error described in the PR
+# The product for n=2 should be (2 + 2^0) * (2 + 2^{-1}) = 15/2.
+# But there's a reported bug that yields 9/2.
+
+if __name__ == "__main__":
+    p = Product(n + 1/Pow(2, k), (k, 0, n-1))
+    p_eval = p.doit()
+    print("Product expression:", p)
+    print("Evaluated with doit():", p_eval)
+    print("Substituted n = 2 =>", p_eval.subs(n, 2))
+    print("Simplified =>", simplify(p_eval))
diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py
index 66aafde2d6..bfe0885f45 100644
--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -275,18 +275,7 @@ def _eval_product(self, term, limits):
             return poly.LC()**(n - a + 1) * A * B

         elif term.is_Add:
-            p, q = term.as_numer_denom()
-            q = self._eval_product(q, (k, a, n))
-            if q.is_Number:
-
-                # There is expression, which couldn't change by
-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).
-                # We have to catch this case.
-
-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])
-            else:
-                p = self._eval_product(p, (k, a, n))
-            return p / q
+            return None

         elif term.is_Mul:
             exclude, include = [], []
