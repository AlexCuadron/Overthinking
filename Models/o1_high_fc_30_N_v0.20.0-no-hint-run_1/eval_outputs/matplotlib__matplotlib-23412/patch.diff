diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249589..4b68d2393d 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -586,10 +586,8 @@ class Patch(artist.Artist):
         # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        # Patch no longer ignores the dashoffset.
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
diff --git a/reproduce_bug_offset.py b/reproduce_bug_offset.py
new file mode 100644
index 0000000000..b598f864d3
--- /dev/null
+++ b/reproduce_bug_offset.py
@@ -0,0 +1,39 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+plt.figure(figsize=(6,6))
+ax = plt.gca()
+
+# Draw two rectangles with different dash offsets.
+# The red rectangle (offset=0) is drawn on top of the blue one (offset=10).
+ax.add_patch(
+    mpl.patches.Rectangle(
+        (0.5, 0.5),
+        1,
+        1,
+        alpha=0.5,
+        edgecolor='r',
+        linewidth=4,
+        ls=(0, (10,10)),
+        label='Offset = 0'
+    )
+)
+
+ax.add_patch(
+    mpl.patches.Rectangle(
+        (0.5, 0.5),
+        1,
+        1,
+        alpha=0.0,
+        edgecolor='b',
+        linewidth=4,
+        ls=(10, (10,10)),
+        label='Offset = 10'
+    )
+)
+
+ax.legend()
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.title('Patch offset dash test')
+plt.show()
