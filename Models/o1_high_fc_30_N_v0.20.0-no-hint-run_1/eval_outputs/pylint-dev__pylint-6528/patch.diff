diff --git a/.a/foo.py b/.a/foo.py
new file mode 100644
index 000000000..b199df542
--- /dev/null
+++ b/.a/foo.py
@@ -0,0 +1 @@
+import re
diff --git a/bar.py b/bar.py
new file mode 100644
index 000000000..b199df542
--- /dev/null
+++ b/bar.py
@@ -0,0 +1 @@
+import re
diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py
index b20cd873c..12a8e7dd3 100644
--- a/pylint/lint/expand_modules.py
+++ b/pylint/lint/expand_modules.py
@@ -60,14 +60,16 @@ def expand_modules(
     path = sys.path.copy()

     for something in files_or_modules:
-        basename = os.path.basename(something)
+        normed = os.path.normpath(something)
+        basename = os.path.basename(normed)
+        parts = normed.split(os.sep)
         if (
-            basename in ignore_list
-            or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)
-            or _is_in_ignore_list_re(something, ignore_list_paths_re)
+            any(part in ignore_list for part in parts)
+            or _is_in_ignore_list_re(basename, ignore_list_re)
+            or _is_in_ignore_list_re(normed, ignore_list_paths_re)
         ):
             continue
-        module_path = get_python_path(something)
+        module_path = get_python_path(normed)
         additional_search_path = [".", module_path] + path
         if os.path.exists(something):
             # this is a file or a directory
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..3d06ca184
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,27 @@
+import os
+import subprocess
+import sys
+
+# Prepare test environment
+os.makedirs('.a', exist_ok=True)
+with open('.a/foo.py', 'w', encoding='utf-8') as f:
+    f.write("import re\n")
+
+with open('bar.py', 'w', encoding='utf-8') as f:
+    f.write("import re\n")
+
+commands = [
+    ["pylint", "--recursive=y", "."],
+    ["pylint", "--recursive=y", "--ignore=.a", "."],
+    ["pylint", "--recursive=y", "--ignore-paths=.a", "."],
+    ["pylint", "--recursive=y", "--ignore-patterns=^\\.a", "."]
+]
+
+for cmd in commands:
+    print("\nRunning: ", " ".join(cmd))
+    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
+    print(proc.stdout)
+    if proc.returncode not in (0, 32):
+        print(f"[WARNING] Command exited with status {proc.returncode}")
+
+print("Done.")
\ No newline at end of file
