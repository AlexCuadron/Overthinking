diff --git a/script_repr_test.py b/script_repr_test.py
new file mode 100644
index 000000000..bc8dd21f9
--- /dev/null
+++ b/script_repr_test.py
@@ -0,0 +1,4 @@
+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
+
+print('RepeatedKFold repr:', repr(RepeatedKFold()))
+print('RepeatedStratifiedKFold repr:', repr(RepeatedStratifiedKFold()))
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index c49a3ce6a..2f3b2417d 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -1217,6 +1217,13 @@ class RepeatedKFold(_RepeatedSplits):
             KFold, n_repeats, random_state, n_splits=n_splits)


+    def __repr__(self):
+        # Use classic .format() for broad Py compatibility
+        return "RepeatedKFold(n_splits={}, n_repeats={}, random_state={})".format(
+            self.cvargs['n_splits'], self.n_repeats, self.random_state
+        )
+
+
 class RepeatedStratifiedKFold(_RepeatedSplits):
     """Repeated Stratified K-Fold cross validator.

@@ -1227,6 +1234,11 @@ class RepeatedStratifiedKFold(_RepeatedSplits):

     Parameters
     ----------
+    def __repr__(self):
+        # Use classic .format() for broad Py compatibility
+        return "RepeatedStratifiedKFold(n_splits={}, n_repeats={}, random_state={})".format(
+            self.cvargs['n_splits'], self.n_repeats, self.random_state
+        )
     n_splits : int, default=5
         Number of folds. Must be at least 2.

@@ -1250,10 +1262,18 @@ class RepeatedStratifiedKFold(_RepeatedSplits):
     ...     X_train, X_test = X[train_index], X[test_index]
     ...     y_train, y_test = y[train_index], y[test_index]
     ...
+    def __repr__(self):
+        # Use classic .format() for broad Py compatibility
+        return "RepeatedStratifiedKFold(n_splits={}, n_repeats={}, random_state={})".format(
+            self.cvargs['n_splits'], self.n_repeats, self.random_state
+        )
     TRAIN: [1 2] TEST: [0 3]
     TRAIN: [0 3] TEST: [1 2]
     TRAIN: [1 3] TEST: [0 2]
     TRAIN: [0 2] TEST: [1 3]
+    def __repr__(self):
+        return f"RepeatedStratifiedKFold(n_splits={{self.cvargs['n_splits']}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
+

     Notes
     -----
