diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index aa2fe0883b..080d3b4478 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -95,8 +95,24 @@ class MigrationExecutor:
         Django first needs to create all project states before a migration is
         (un)applied and in a second step run all the database operations.
         """
-        # The django_migrations table must be present to record applied
-        # migrations.
+        # Skip running migrations entirely if the router disallows the 'migrations' app.
+        if not router.allow_migrate(
+            self.connection.alias,
+            self.recorder.Migration._meta.app_label,
+            model_name=self.recorder.Migration._meta.model_name
+        ):
+            return
+        # The django_migrations table must be present to record applied migrations.
+        # Filter out migrations disallowed by the router.
+        plan = [
+            (migration, backward)
+            for (migration, backward) in plan
+            if router.allow_migrate(
+                self.connection.alias,
+                migration.app_label,
+                model_name=migration.name.lower()
+            )
+        ]
         self.recorder.ensure_schema()

         if plan is None:
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..69200f1e12 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -1,5 +1,6 @@
 from django.apps.registry import Apps
 from django.db import DatabaseError, models
+from django.db.utils import router
 from django.utils.functional import classproperty
 from django.utils.timezone import now

@@ -58,39 +59,38 @@ class MigrationRecorder:

     def ensure_schema(self):
         """Ensure the table exists and has the correct schema."""
-        # If the table's there, that's fine - we've never changed its schema
-        # in the codebase.
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label, model_name=self.Migration._meta.model_name):
+            return
         if self.has_table():
             return
-        # Make the table
         try:
             with self.connection.schema_editor() as editor:
                 editor.create_model(self.Migration)
         except DatabaseError as exc:
             raise MigrationSchemaMissing("Unable to create the django_migrations table (%s)" % exc)

+
     def applied_migrations(self):
-        """
-        Return a dict mapping (app_name, migration_name) to Migration instances
-        for all applied migrations.
-        """
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label, model_name=self.Migration._meta.model_name):
+            return {}
         if self.has_table():
             return {(migration.app, migration.name): migration for migration in self.migration_qs}
         else:
-            # If the django_migrations table doesn't exist, then no migrations
-            # are applied.
             return {}

     def record_applied(self, app, name):
-        """Record that a migration was applied."""
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label, model_name=self.Migration._meta.model_name):
+            return
         self.ensure_schema()
         self.migration_qs.create(app=app, name=name)

     def record_unapplied(self, app, name):
-        """Record that a migration was unapplied."""
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label, model_name=self.Migration._meta.model_name):
+            return
         self.ensure_schema()
         self.migration_qs.filter(app=app, name=name).delete()

     def flush(self):
-        """Delete all migration records. Useful for testing migrations."""
+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label, model_name=self.Migration._meta.model_name):
+            return
         self.migration_qs.all().delete()
