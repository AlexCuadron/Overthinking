diff --git a/django/db/models/query.py b/django/db/models/query.py
index b48d0df9c0..0b157020ad 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -211,6 +211,12 @@ class QuerySet:
     @query.setter
     def query(self, value):
         self._query = value
+        # Fix for preserving .values() or .values_list() behavior after unpickling
+        # If the unpickled query indicates a values/annotate style query, return dicts instead of model instances.
+        if any((getattr(value, 'values_select', []), getattr(value, 'annotation_select', []), getattr(value, 'extra_select', []))):
+            self._iterable_class = ValuesIterable
+        else:
+            self._iterable_class = ModelIterable

     def as_manager(cls):
         # Address the circular dependency between `Queryset` and `Manager`.
diff --git a/mytestapp/__init__.py b/mytestapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/mytestapp/migrations/0001_initial.py b/mytestapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..d67bc0c2ab
--- /dev/null
+++ b/mytestapp/migrations/0001_initial.py
@@ -0,0 +1,23 @@
+# Generated by Django 3.2 on 2025-01-14 00:38
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Toy',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=16)),
+                ('material', models.CharField(max_length=16)),
+                ('price', models.PositiveIntegerField()),
+            ],
+        ),
+    ]
diff --git a/mytestapp/migrations/__init__.py b/mytestapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/mytestapp/models.py b/mytestapp/models.py
new file mode 100644
index 0000000000..14cf8e04d7
--- /dev/null
+++ b/mytestapp/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class Toy(models.Model):
+    name = models.CharField(max_length=16)
+    material = models.CharField(max_length=16)
+    price = models.PositiveIntegerField()
+
+    class Meta:
+        app_label = 'mytestapp'
\ No newline at end of file
diff --git a/repro_pickle_issue.py b/repro_pickle_issue.py
new file mode 100644
index 0000000000..e1da198175
--- /dev/null
+++ b/repro_pickle_issue.py
@@ -0,0 +1,58 @@
+import django
+import os
+import sys
+import pickle
+
+from django.conf import settings
+from django.db import models
+from django.db.models import Sum
+
+import django
+import os
+import sys
+import pickle
+
+from django.conf import settings
+from django.core.management import call_command
+from django.db import models
+from django.db.models import Sum
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=['mytestapp'],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:'
+                }
+            },
+
+        )
+    django.setup()
+
+    import sys
+import os
+sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
+
+call_command('makemigrations', 'mytestapp', interactive=False, verbosity=0)
+call_command('migrate', 'mytestapp', interactive=False, verbosity=0)
+
+from mytestapp.models import Toy
+Toy.objects.create(name='foo', price=10, material='wood')
+    Toy.objects.create(name='bar', price=20, material='plastic')
+    Toy.objects.create(name='baz', price=100, material='wood')
+
+    prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+    print("prices:", prices)
+    print("type(prices[0]):", type(prices[0]))
+
+    # Recreate a new queryset from the pickled query
+    prices2 = Toy.objects.all()
+    prices2.query = pickle.loads(pickle.dumps(prices.query))
+
+    print("type(prices2[0]):", type(prices2[0]))
+    print("prices2:", prices2)
+
+if __name__ == '__main__':
+    main()
diff --git a/repro_pickle_issue2.py b/repro_pickle_issue2.py
new file mode 100644
index 0000000000..eeec59cb34
--- /dev/null
+++ b/repro_pickle_issue2.py
@@ -0,0 +1,43 @@
+import os
+import sys
+import django
+import pickle
+
+from django.conf import settings
+from django.core.management import call_command
+from django.db.models import Sum
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=['mytestapp'],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:'
+                }
+            },
+        )
+    django.setup()
+    call_command('makemigrations', 'mytestapp', interactive=False, verbosity=0)
+    call_command('migrate', 'mytestapp', interactive=False, verbosity=0)
+
+    from mytestapp.models import Toy
+
+    Toy.objects.create(name='foo', price=10, material='wood')
+    Toy.objects.create(name='bar', price=20, material='plastic')
+    Toy.objects.create(name='baz', price=100, material='wood')
+
+    prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+    print('prices:', prices)
+    print('type(prices[0]):', type(prices[0]))
+
+    # Recreate a new queryset from the pickled query
+    prices2 = Toy.objects.all()
+    prices2.query = pickle.loads(pickle.dumps(prices.query))
+
+    print('type(prices2[0]):', type(prices2[0]))
+    print('prices2:', prices2)
+
+if __name__ == '__main__':
+    main()
