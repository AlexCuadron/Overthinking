diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..16b5db8e60 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -104,7 +104,7 @@ class UserCreationForm(forms.ModelForm):
     )

     class Meta:
-        model = User
+        model = get_user_model()
         fields = ("username",)
         field_classes = {"username": UsernameField}

@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):
         user.set_password(self.cleaned_data["password1"])
         if commit:
             user.save()
+            self.save_m2m()
         return user


diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/apps.py b/myapp/apps.py
new file mode 100644
index 0000000000..cb703e8b7e
--- /dev/null
+++ b/myapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class MyappConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'myapp'
diff --git a/myapp/migrations/0001_initial.py b/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..1d79823eaa
--- /dev/null
+++ b/myapp/migrations/0001_initial.py
@@ -0,0 +1,148 @@
+# Generated by Django 4.2.dev20221128084752 on 2025-01-14 01:55
+
+import django.contrib.auth.models
+import django.contrib.auth.validators
+from django.db import migrations, models
+import django.utils.timezone
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("auth", "0012_alter_user_first_name_max_length"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Category",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="CustomUser",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("password", models.CharField(max_length=128, verbose_name="password")),
+                (
+                    "last_login",
+                    models.DateTimeField(
+                        blank=True, null=True, verbose_name="last login"
+                    ),
+                ),
+                (
+                    "is_superuser",
+                    models.BooleanField(
+                        default=False,
+                        help_text="Designates that this user has all permissions without explicitly assigning them.",
+                        verbose_name="superuser status",
+                    ),
+                ),
+                (
+                    "username",
+                    models.CharField(
+                        error_messages={
+                            "unique": "A user with that username already exists."
+                        },
+                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
+                        max_length=150,
+                        unique=True,
+                        validators=[
+                            django.contrib.auth.validators.UnicodeUsernameValidator()
+                        ],
+                        verbose_name="username",
+                    ),
+                ),
+                (
+                    "first_name",
+                    models.CharField(
+                        blank=True, max_length=150, verbose_name="first name"
+                    ),
+                ),
+                (
+                    "last_name",
+                    models.CharField(
+                        blank=True, max_length=150, verbose_name="last name"
+                    ),
+                ),
+                (
+                    "email",
+                    models.EmailField(
+                        blank=True, max_length=254, verbose_name="email address"
+                    ),
+                ),
+                (
+                    "is_staff",
+                    models.BooleanField(
+                        default=False,
+                        help_text="Designates whether the user can log into this admin site.",
+                        verbose_name="staff status",
+                    ),
+                ),
+                (
+                    "is_active",
+                    models.BooleanField(
+                        default=True,
+                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
+                        verbose_name="active",
+                    ),
+                ),
+                (
+                    "date_joined",
+                    models.DateTimeField(
+                        default=django.utils.timezone.now, verbose_name="date joined"
+                    ),
+                ),
+                ("categories", models.ManyToManyField(blank=True, to="myapp.category")),
+                (
+                    "groups",
+                    models.ManyToManyField(
+                        blank=True,
+                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
+                        related_name="user_set",
+                        related_query_name="user",
+                        to="auth.group",
+                        verbose_name="groups",
+                    ),
+                ),
+                (
+                    "user_permissions",
+                    models.ManyToManyField(
+                        blank=True,
+                        help_text="Specific permissions for this user.",
+                        related_name="user_set",
+                        related_query_name="user",
+                        to="auth.permission",
+                        verbose_name="user permissions",
+                    ),
+                ),
+            ],
+            options={
+                "verbose_name": "user",
+                "verbose_name_plural": "users",
+                "abstract": False,
+            },
+            managers=[
+                ("objects", django.contrib.auth.models.UserManager()),
+            ],
+        ),
+    ]
diff --git a/myapp/migrations/__init__.py b/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..e564f3a6bc
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,11 @@
+from django.db import models
+from django.contrib.auth.models import AbstractUser
+
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
+
+class CustomUser(AbstractUser):
+    categories = models.ManyToManyField(Category, blank=True)
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..b5215fba1b
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,62 @@
+import os
+import django
+from django.conf import settings
+
+# Configure a minimal Django settings for testing.
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'myapp.apps.MyappConfig',
+        # We'll define our app inline and give it an "app_label" below.
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE=[],
+    # We declare a custom user below, in the same file, so let's reference it:
+    AUTH_USER_MODEL='myapp.CustomUser',
+    SECRET_KEY='testsecretkey',
+)
+
+django.setup()
+
+from django.db import models
+from django.core.management import call_command
+from django.contrib.auth.forms import UserCreationForm
+from django.contrib.auth.models import AbstractUser
+
+# Make and apply migrations in memory.
+call_command('makemigrations', 'myapp', verbosity=1)
+call_command('migrate', verbosity=1)
+
+# Create categories and try using UserCreationForm to save them.
+from myapp.models import Category, CustomUser
+
+
+cat1 = Category.objects.create(name='Category 1')
+cat2 = Category.objects.create(name='Category 2')
+
+form_data = {
+    'username': 'testuser',
+    'password1': 'ComplexP@ssw0rd',
+    'password2': 'ComplexP@ssw0rd',
+    'categories': [cat1.pk, cat2.pk],
+}
+
+form = UserCreationForm(data=form_data)
+
+if form.is_valid():
+    user = form.save()
+    saved_categories = list(user.categories.all())
+    print("Categories saved for user:", [c.name for c in saved_categories])
+    if len(saved_categories) < 2:
+        print("BUG: Not all ManyToMany categories got saved!")
+    else:
+        print("Success: All ManyToMany categories were saved.")
+else:
+    print("Form errors:", form.errors)
