diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..17c123302
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,26 @@
+import subprocess
+import sys
+
+# This script attempts to reproduce the original error by invoking the pastebin feature.
+# We'll run pytest with --pastebin=all on a trivial test file that should produce output.
+# Currently, "lexer=python3" can cause a 400 HTTP error for certain output.
+
+TEST_FILE_CONTENT = """\
+def test_example():
+    assert False, 'Forcing a test failure to produce output for pastebin!'
+"""
+
+test_file_path = "temp_test_pastebin.py"
+
+with open(test_file_path, "w") as f:
+    f.write(TEST_FILE_CONTENT)
+
+try:
+    subprocess.check_call([
+        sys.executable, "-m", "pytest", "--pastebin=all", test_file_path
+    ])
+except subprocess.CalledProcessError as e:
+    print("We got a CalledProcessError (this may be the 400 error if the code is in the out).")
+    sys.exit(e.returncode)
+finally:
+    pass
diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py
index 41576a615..672da66a3 100644
--- a/src/_pytest/pastebin.py
+++ b/src/_pytest/pastebin.py
@@ -79,7 +79,7 @@ def create_new_paste(contents):

     params = {
         "code": contents,
-        "lexer": "python3" if sys.version_info[0] >= 3 else "python",
+        "lexer": "text",
         "expiry": "1week",
     }
     url = "https://bpaste.net"
@@ -88,7 +88,7 @@ def create_new_paste(contents):
     if m:
         return "%s/show/%s" % (url, m.group(1))
     else:
-        return "bad response: " + response
+        return "bad response: " + response.decode("utf-8")


 def pytest_terminal_summary(terminalreporter):
diff --git a/temp_test_pastebin.py b/temp_test_pastebin.py
new file mode 100644
index 000000000..b56085248
--- /dev/null
+++ b/temp_test_pastebin.py
@@ -0,0 +1,2 @@
+def test_example():
+    assert False, 'Forcing a test failure to produce output for pastebin!'
