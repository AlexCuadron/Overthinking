diff --git a/pylint/lint/run.py b/pylint/lint/run.py
index a7e5d5574..932334cf1 100644
--- a/pylint/lint/run.py
+++ b/pylint/lint/run.py
@@ -51,13 +51,13 @@ def _query_cpu() -> int | None:
     ):
         with open("/sys/fs/cgroup/cpu/cpu.cfs_period_us", encoding="utf-8") as file:
             cpu_period = int(file.read().rstrip())
-        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.
-        avail_cpu = int(cpu_quota / cpu_period)
+        # Divide quota by period and fallback to 1 if it ends up being 0
+        avail_cpu = max(int(cpu_quota / cpu_period), 1)
     elif Path("/sys/fs/cgroup/cpu/cpu.shares").is_file():
         with open("/sys/fs/cgroup/cpu/cpu.shares", encoding="utf-8") as file:
             cpu_shares = int(file.read().rstrip())
         # For AWS, gives correct value * 1024.
-        avail_cpu = int(cpu_shares / 1024)
+        avail_cpu = max(int(cpu_shares / 1024), 1)
     return avail_cpu


diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..261ea7c35
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,18 @@
+import subprocess
+import sys
+
+# This script attempts to reproduce the issue described in the PR.
+# It runs pylint with --jobs=0, which should cause a crash if the
+# calculated CPU count is 0.
+# In a typical local or container environment, this might not fail
+# unless cgroup files return an effectively 0 CPU.
+
+if __name__ == "__main__":
+    cmd = ["python3", "-m", "pylint", "--jobs=0", "--exit-zero", "pylint/lint/run.py"]
+    print(f"Running: {' '.join(cmd)}")
+    try:
+        subprocess.run(cmd, check=True)
+        print("Pylint ran successfully. If this was run within a Kubernetes Pod with certain cgroup files, it might have crashed.")
+    except subprocess.CalledProcessError as e:
+        print("Pylint crashed (as expected in some environments).")
+        sys.exit(e.returncode)
