diff --git a/after_fix.png b/after_fix.png
new file mode 100644
index 0000000000..7b140b8a3e
Binary files /dev/null and b/after_fix.png differ
diff --git a/before_fix.png b/before_fix.png
new file mode 100644
index 0000000000..7b140b8a3e
Binary files /dev/null and b/before_fix.png differ
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index d4922fc517..4918931096 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -1456,7 +1456,8 @@ class _AnnotationBase:
                  xycoords='data',
                  annotation_clip=None):

-        self.xy = xy
+        # Make a copy so that changes to the original array do not affect the annotation.
+        self.xy = (xy[0], xy[1])
         self.xycoords = xycoords
         self.set_annotation_clip(annotation_clip)

diff --git a/test_annot_bug.py b/test_annot_bug.py
new file mode 100644
index 0000000000..aa969e79fe
--- /dev/null
+++ b/test_annot_bug.py
@@ -0,0 +1,25 @@
+import matplotlib
+matplotlib.use('Agg')  # so we can run this headless, saving output to a file
+import matplotlib.pyplot as plt
+import numpy as np
+
+fig = plt.figure("test")
+
+ax = fig.add_axes([0.13, 0.15, .8, .8])
+ax.set_xlim(-5, 5)
+ax.set_ylim(-3, 3)
+
+xy_0 = np.array((-4, 1))
+xy_f = np.array((-1, 1))
+# this annotation is messed by later changing the array passed as xy kwarg
+ann1 = ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))
+xy_0[1] = 3  # <--this updates the arrow position
+
+xy_0 = np.array((1, 1))
+xy_f = np.array((4, 1))
+# using a copy of the array helps spotting where the problem is
+ann2 = ax.annotate('', xy=xy_0.copy(), xytext=xy_f, arrowprops=dict(arrowstyle='<->'))
+xy_0[1] = 3
+
+fig.savefig('after_fix.png')
+print('Test script executed and saved figure to after_fix.png')
\ No newline at end of file
