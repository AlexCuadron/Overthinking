diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py
index 266cf229cc..7f14123ce2 100644
--- a/astropy/io/ascii/html.py
+++ b/astropy/io/ascii/html.py
@@ -319,17 +319,17 @@ class HTML(core.BaseReader):

     max_ndim = 2  # HTML supports writing 2-d columns with shape (n, m)

-    def __init__(self, htmldict={}):
-        """
-        Initialize classes for HTML reading and writing.
-        """
+    def __init__(self, htmldict=None, formats=None):
+        if htmldict is None:
+            htmldict = {}
         super().__init__()
         self.html = deepcopy(htmldict)
-        if 'multicol' not in htmldict:
+        if 'multicol' not in self.html:
             self.html['multicol'] = True
-        if 'table_id' not in htmldict:
+        if 'table_id' not in self.html:
             self.html['table_id'] = 1
         self.inputter.html = self.html
+        self.formats = formats if formats else {}

     def read(self, table):
         """
@@ -355,6 +355,15 @@ class HTML(core.BaseReader):

         self.data._set_fill_values(cols)

+        if self.formats:
+            for colname, colformat in self.formats.items():
+                if colname in table.colnames:
+                    if callable(colformat):
+                        table[colname].formatter = colformat
+                    else:
+                        table[colname].format = colformat
+                # End debug snippet
+
         lines = []

         # Set HTML escaping to False for any column in the raw_html_cols input
@@ -429,9 +438,13 @@ class HTML(core.BaseReader):
                                 for i in range(span):
                                     # Split up multicolumns into separate columns
                                     new_col = Column([el[i] for el in col])
+                                    if col.info.formatter is not None:
+                                        new_col.info.formatter = col.info.formatter
+                                    if col.info.format is not None:
+                                        new_col.info.format = col.info.format

                                     new_col_iter_str_vals = self.fill_values(
-                                        col, new_col.info.iter_str_vals())
+                                        new_col, new_col.info.iter_str_vals())
                                     col_str_iters.append(new_col_iter_str_vals)
                                     new_cols_escaped.append(col_escaped)
                                     new_cols.append(new_col)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..25ed415319
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+from astropy.table import Table
+from io import StringIO
+
+# This script reproduces the HTML formatting bug described in the PR.
+# We expect the output for column 'a' to be formatted with 2 decimal places.
+
+if __name__ == "__main__":
+    t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))
+    tc = t.copy()
+
+    with StringIO() as sp:
+        tc.write(sp, format="html", formats={"a": lambda x: f"{{x:.2e}}"})
+        output = sp.getvalue()
+        print(output)
+
+    # Expected: table cells for column 'a' should show 1.24e-24 and 3.23e-15, not the full float representation.
\ No newline at end of file
diff --git a/test_format_callable.py b/test_format_callable.py
new file mode 100644
index 0000000000..161acc223d
--- /dev/null
+++ b/test_format_callable.py
@@ -0,0 +1,11 @@
+import astropy
+from astropy.table import Column
+
+def test_callable_format():
+    col = Column([1.23875234858e-24, 3.2348748432e-15], name='a')
+    col.info.format = lambda x: f"{x:.2e}"
+    return list(col.info.iter_str_vals())
+
+if __name__ == "__main__":
+    vals = test_callable_format()
+    print(vals)
\ No newline at end of file
