diff --git a/doc_demo/_build/text/.doctrees/environment.pickle b/doc_demo/_build/text/.doctrees/environment.pickle
new file mode 100644
index 000000000..2784d3c5f
Binary files /dev/null and b/doc_demo/_build/text/.doctrees/environment.pickle differ
diff --git a/doc_demo/_build/text/.doctrees/index.doctree b/doc_demo/_build/text/.doctrees/index.doctree
new file mode 100644
index 000000000..ec0dd3bcd
Binary files /dev/null and b/doc_demo/_build/text/.doctrees/index.doctree differ
diff --git a/doc_demo/_build/text/index.txt b/doc_demo/_build/text/index.txt
new file mode 100644
index 000000000..e69de29bb
diff --git a/doc_demo/conf.py b/doc_demo/conf.py
new file mode 100644
index 000000000..869c4b164
--- /dev/null
+++ b/doc_demo/conf.py
@@ -0,0 +1,3 @@
+project = "ReproduceEmptyAll"
+extensions = ["sphinx.ext.autodoc"]
+master_doc = "index"
diff --git a/doc_demo/example.py b/doc_demo/example.py
new file mode 100644
index 000000000..7f15e9f8c
--- /dev/null
+++ b/doc_demo/example.py
@@ -0,0 +1,11 @@
+
+__all__ = []
+
+def foo():
+    "docstring"
+
+def bar():
+    "docstring"
+
+def baz():
+    "docstring"
diff --git a/doc_demo/index.rst b/doc_demo/index.rst
new file mode 100644
index 000000000..740c3c182
--- /dev/null
+++ b/doc_demo/index.rst
@@ -0,0 +1,2 @@
+.. automodule:: example
+   :members:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..95443d34a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,68 @@
+import os
+import subprocess
+import sys
+
+DOC_DIR = os.path.join(os.path.dirname(__file__), 'doc_demo')
+
+INDEX_RST = '''\
+.. automodule:: example
+   :members:
+'''
+
+CONF_PY = '''\
+project = "ReproduceEmptyAll"\nextensions = [\"sphinx.ext.autodoc\"]\nmaster_doc = "index"\n'''
+
+EXAMPLE_PY = '''\n__all__ = []\n\ndef foo():\n    \"docstring\"\n\ndef bar():\n    \"docstring\"\n\ndef baz():\n    \"docstring\"\n'''
+
+def main():
+    # create doc_demo directory
+    if not os.path.exists(DOC_DIR):
+        os.makedirs(DOC_DIR)
+
+    # create index.rst
+    with open(os.path.join(DOC_DIR, 'index.rst'), 'w') as f:
+        f.write(INDEX_RST)
+
+    # create conf.py
+    with open(os.path.join(DOC_DIR, 'conf.py'), 'w') as f:
+        f.write(CONF_PY)
+
+    # create example.py
+    with open(os.path.join(DOC_DIR, 'example.py'), 'w') as f:
+        f.write(EXAMPLE_PY)
+
+    # run sphinx-build
+    build_dir = os.path.join(DOC_DIR, '_build')
+    if not os.path.exists(build_dir):
+        os.makedirs(build_dir)
+
+    cmd = [
+        'sphinx-build',
+        '-b', 'text',  # build plaintext docs
+        DOC_DIR,
+        os.path.join(build_dir, 'text')
+    ]
+
+    print("Running: ", " ".join(cmd))
+    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    if proc.returncode != 0:
+        print("sphinx-build failed:")
+        print(proc.stdout.decode())
+        print(proc.stderr.decode())
+        sys.exit(1)
+
+    # check the output
+    output_file = os.path.join(build_dir, 'text', 'index.txt')
+    with open(output_file, 'r') as f:
+        content = f.read()
+
+    # if __all__ is empty, we expect foo, bar, baz to NOT appear
+    if any(name in content for name in ['foo', 'bar', 'baz']):
+        print("TEST FAILED: __all__ = [] but foo, bar, baz STILL appear in docs.")
+        sys.exit(1)
+    else:
+        print("TEST PASSED: With __all__=[], no members appear.")
+
+if __name__ == "__main__":
+    main()
+
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..e835a2703 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1074,15 +1074,19 @@ class ModuleDocumenter(Documenter):
     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
         members = self.get_module_members()
         if want_all:
-            if not self.__all__:
+            if self.__all__ is None:
                 # for implicit module members, check __module__ to avoid
                 # documenting imported objects
                 return True, list(members.values())
+            elif len(self.__all__) == 0:
+                # skip everything if __all__ is empty
+                for member in members.values():
+                    member.skipped = True
+                return False, list(members.values())
             else:
                 for member in members.values():
                     if member.__name__ not in self.__all__:
                         member.skipped = True
-
                 return False, list(members.values())
         else:
             memberlist = self.options.members or []
