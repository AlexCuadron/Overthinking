diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..b124ea1a2
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,21 @@
+import numpy as np
+from sklearn.datasets import make_regression
+from sklearn.linear_model import HuberRegressor
+
+# Random data
+X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)
+X_bool = (X > 0)
+X_bool_as_float = np.asarray(X_bool, dtype=float)
+
+print(">> Fitting with float type:")
+HuberRegressor().fit(X, y)
+print("Float data fit OK\n")
+
+print(">> Fitting with boolean type:")
+print("(This should fail if the bug is present)")
+HuberRegressor().fit(X_bool, y)
+print("Boolean data fit OK\n")
+
+print(">> Fitting with boolean cast to float type:")
+HuberRegressor().fit(X_bool_as_float, y)
+print("Bool cast float fit OK")
\ No newline at end of file
diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py
index 65c686400..1e01e1b5f 100644
--- a/sklearn/linear_model/huber.py
+++ b/sklearn/linear_model/huber.py
@@ -251,7 +251,7 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):
         self : object
         """
         X, y = check_X_y(
-            X, y, copy=False, accept_sparse=['csr'], y_numeric=True)
+            X, y, copy=False, accept_sparse=['csr'], dtype=np.float64, y_numeric=True)
         if sample_weight is not None:
             sample_weight = np.array(sample_weight)
             check_consistent_length(y, sample_weight)
