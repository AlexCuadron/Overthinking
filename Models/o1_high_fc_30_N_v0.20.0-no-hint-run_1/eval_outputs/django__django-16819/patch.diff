diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..c3a6655fe6 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -862,6 +862,16 @@ class AddIndex(IndexOperation):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())


+    def reduce(self, operation, app_label):
+        # If we see a RemoveIndex with the same model and index name, remove both.
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            return []
+        return super().reduce(operation, app_label)
+
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""

diff --git a/my_repro.py b/my_repro.py
new file mode 100644
index 0000000000..b4f94cff64
--- /dev/null
+++ b/my_repro.py
@@ -0,0 +1,27 @@
+import sys
+
+from django.db.migrations.operations.models import AddIndex, RemoveIndex
+from django.db.migrations.optimizer import MigrationOptimizer
+from django.db.models import Index
+
+# A small script to reproduce the "AddIndex/RemoveIndex" migration optimization issue.
+
+def main():
+    print("Reproducing the issue with AddIndex/RemoveIndex...")
+    operations = [
+        AddIndex("MyModel", Index(fields=["field"], name="my_index")),
+        RemoveIndex("MyModel", "my_index"),
+    ]
+    print("Original operations:", operations)
+
+    optimizer = MigrationOptimizer()
+    optimized_ops = optimizer.optimize(operations, app_label="my_app")
+    print("Optimized operations:", optimized_ops)
+
+    if len(optimized_ops) == 0:
+        print("Index add/remove are successfully reduced!")
+    else:
+        print("Add/Remove Index not reduced properly, issue remains.")
+
+if __name__ == "__main__":
+    main()
