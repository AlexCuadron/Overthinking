diff --git a/test_dim_method_bug.py b/test_dim_method_bug.py
new file mode 100644
index 00000000..6c56842e
--- /dev/null
+++ b/test_dim_method_bug.py
@@ -0,0 +1,9 @@
+import numpy as np
+from xarray import DataArray
+
+empty = np.zeros((2,2))
+D1 = DataArray(empty, dims=['dim1', 'dim2'],   coords={'dim1':['x', 'y'], 'dim2':['a', 'b']})
+D2 = DataArray(empty, dims=['dim1', 'method'], coords={'dim1':['x', 'y'], 'method':['a', 'b']})
+
+print(D1.loc[dict(dim1='x', dim2='a')])
+print(D2.loc[dict(dim1='x', method='a')])
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 32b24ef1..704f5d58 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1118,7 +1118,7 @@ class DataArray(AbstractArray, DataWithCoords):
     def sel(
         self,
         indexers: Mapping[Hashable, Any] = None,
-        method: str = None,
+        sel_method: str = None,
         tolerance=None,
         drop: bool = False,
         **indexers_kwargs: Any,
@@ -1199,7 +1199,7 @@ class DataArray(AbstractArray, DataWithCoords):
         ds = self._to_temp_dataset().sel(
             indexers=indexers,
             drop=drop,
-            method=method,
+            method=sel_method,
             tolerance=tolerance,
             **indexers_kwargs,
         )
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index dbac288c..563ea31b 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -2161,7 +2161,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
     def sel(
         self,
         indexers: Mapping[Hashable, Any] = None,
-        method: str = None,
+        sel_method: str = None,
         tolerance: Number = None,
         drop: bool = False,
         **indexers_kwargs: Any,
@@ -2229,7 +2229,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
         """
         indexers = either_dict_or_kwargs(indexers, indexers_kwargs, "sel")
         pos_indexers, new_indexes = remap_label_indexers(
-            self, indexers=indexers, method=method, tolerance=tolerance
+            self, indexers=indexers, method=sel_method, tolerance=tolerance
         )
         result = self.isel(indexers=pos_indexers, drop=drop)
         return result._overwrite_indexes(new_indexes)
diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index 843feb04..1ae83104 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -105,7 +105,7 @@ def get_indexer_nd(index, labels, method=None, tolerance=None):
     return indexer


-def convert_label_indexer(index, label, index_name="", method=None, tolerance=None):
+def convert_label_indexer(index, label, index_name="", sel_method=None, tolerance=None):
     """Given a pandas.Index and labels (e.g., from __getitem__) for one
     dimension, return an indexer suitable for indexing an ndarray along that
     dimension. If `index` is a pandas.MultiIndex and depending on `label`,
@@ -240,7 +240,7 @@ def get_dim_indexers(data_obj, indexers):
     return dim_indexers


-def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):
+def remap_label_indexers(data_obj, indexers, sel_method=None, tolerance=None):
     """Given an xarray data object and label based indexers, return a mapping
     of equivalent location based indexers. Also return a mapping of updated
     pandas index objects (in case of multi-index level drop).
@@ -257,7 +257,7 @@ def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):
             index = data_obj.indexes[dim]
         except KeyError:
             # no index for this dimension: reuse the provided labels
-            if method is not None or tolerance is not None:
+            if sel_method is not None or tolerance is not None:
                 raise ValueError(
                     "cannot supply ``method`` or ``tolerance`` "
                     "when the indexed dimension does not have "
