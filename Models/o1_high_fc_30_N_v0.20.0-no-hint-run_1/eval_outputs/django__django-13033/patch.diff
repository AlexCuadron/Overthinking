diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..b149287511 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -727,7 +727,7 @@ class SQLCompiler:
         # If we get to this point and the field is a relation to another model,
         # append the default ordering for that model unless it is the pk
         # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk' and field.remote_field.model != opts.model:
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..9d73b420ab
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,71 @@
+import os
+import django
+from django.conf import settings
+
+# Configure settings for an in-memory database.
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='testkey',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        '__main__',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=[],
+    MIGRATION_MODULES={
+        '__main__': None,
+    }
+)
+
+django.setup()
+
+from django.db import models
+from django.db.models import F
+
+class OneModel(models.Model):
+    class Meta:
+        ordering = ('-id',)
+        app_label = '__main__'
+
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey('self', on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+# Create the schema using schema_editor directly
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(OneModel)
+    schema_editor.create_model(TwoModel)
+
+# Populate some sample data.
+root_obj = OneModel.objects.create(oneval=1)
+child_obj = OneModel.objects.create(oneval=2, root=root_obj)
+TwoModel.objects.create(record=root_obj, twoval=1)
+TwoModel.objects.create(record=child_obj, twoval=2)
+
+print("\n=== Checking order_by('record__root_id') ===")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2]).order_by('record__root_id')
+print(qs.query)
+
+print("\n=== Checking order_by('record__root') ===")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2]).order_by('record__root')
+print(qs.query)
+
+print("\n=== Checking order_by('-record__root_id') ===")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2]).order_by('-record__root_id')
+print(qs.query)
+
+print("\n=== Checking order_by('-record__root') ===")
+qs = TwoModel.objects.filter(record__oneval__in=[1,2]).order_by('-record__root')
+print(qs.query)
