diff --git a/django/core/validators.py b/django/core/validators.py
index 84b4f31ec7..106c20e68a 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -48,7 +48,7 @@ class RegexValidator:
         regex_matches = self.regex.search(str(value))
         invalid_input = regex_matches if self.inverse_match else not regex_matches
         if invalid_input:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})

     def __eq__(self, other):
         return (
@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):

     def __call__(self, value):
         if not isinstance(value, str):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})

         # Then check full URL
         try:
@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):
                 try:
                     scheme, netloc, path, query, fragment = urlsplit(value)
                 except ValueError:  # for example, "Invalid IPv6 URL"
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})
                 try:
                     netloc = punycode(netloc)  # IDN -> ACE
                 except UnicodeError:  # invalid domain part
@@ -132,14 +132,14 @@ class URLValidator(RegexValidator):
                 try:
                     validate_ipv6_address(potential_ip)
                 except ValidationError:
-                    raise ValidationError(self.message, code=self.code)
+                    raise ValidationError(self.message, code=self.code, params={'value': value})

         # The maximum length of a full host name is 253 characters per RFC 1034
         # section 3.1. It's defined to be 255 bytes or less, but this includes
         # one byte for the length of the name and one byte for the trailing dot
         # that's used to indicate absolute names in DNS.
         if len(urlsplit(value).netloc) > 253:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})


 integer_validator = RegexValidator(
@@ -208,12 +208,12 @@ class EmailValidator:

     def __call__(self, value):
         if not value or '@' not in value:
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})

         user_part, domain_part = value.rsplit('@', 1)

         if not self.user_regex.match(user_part):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})

         if (domain_part not in self.domain_allowlist and
                 not self.validate_domain_part(domain_part)):
@@ -225,7 +225,7 @@ class EmailValidator:
             else:
                 if self.validate_domain_part(domain_part):
                     return
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})

     def validate_domain_part(self, domain_part):
         if self.domain_regex.match(domain_part):
@@ -550,7 +550,7 @@ class ProhibitNullCharactersValidator:

     def __call__(self, value):
         if '\x00' in str(value):
-            raise ValidationError(self.message, code=self.code)
+            raise ValidationError(self.message, code=self.code, params={'value': value})

     def __eq__(self, other):
         return (
diff --git a/test_validator.py b/test_validator.py
new file mode 100644
index 0000000000..e75031a452
--- /dev/null
+++ b/test_validator.py
@@ -0,0 +1,24 @@
+from django.core.validators import EmailValidator, URLValidator
+from django.core.exceptions import ValidationError
+
+# We'll attempt to use a custom message that references %(value)s
+# If the validators do not pass the value in ValidationError, this will fail with KeyError: 'value'
+
+def test_email():
+    validator = EmailValidator(message="'%(value)s' is not a valid email address.")
+    try:
+        validator("this-is-not-an-email")
+    except ValidationError as e:
+        print("EMAIL:", e)
+
+
+def test_url():
+    validator = URLValidator(message="'%(value)s' is not a valid URL.")
+    try:
+        validator("htp://this is not valid")
+    except ValidationError as e:
+        print("URL:", e)
+
+if __name__ == "__main__":
+    test_email()
+    test_url()
\ No newline at end of file
