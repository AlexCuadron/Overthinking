diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 0b39536f5b..e648880ef0 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -105,7 +105,7 @@ class Command(BaseCommand):
                     # At least one model must be migrated to the database.
                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
                     for app_label in consistency_check_labels
-                    for model in apps.get_models(app_label)
+                    for model in apps.get_app_config(app_label).get_models()
             )):
                 loader.check_consistent_history(connection)

diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..c7d348ae00
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,33 @@
+import os, sys
+
+# Ensure local django modules are found first.
+sys.path.insert(0, '/workspace/django__django__1.11')
+
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS = [
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES = {
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        DATABASE_ROUTERS = ['router.MyRouter'],
+        SECRET_KEY='dummy_secret_key',
+    )
+
+django.setup()
+
+try:
+    call_command('makemigrations')
+except Exception as e:
+    print('ERROR RAISED:', e)
+    # Reraise so that the script returns a non-zero exit.
+    raise
\ No newline at end of file
diff --git a/router.py b/router.py
new file mode 100644
index 0000000000..db72d8d71d
--- /dev/null
+++ b/router.py
@@ -0,0 +1,10 @@
+class MyRouter:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        from django.apps import apps
+        model = apps.get_model(app_label, model_name)
+        if model is None:
+            raise Exception("No model found for app_label={}, model_name={}".format(app_label, model_name))
+        # This check will fail if we got the wrong app_label.
+        if model._meta.app_label != app_label:
+            raise Exception("Mismatch: model._meta.app_label = {} but got app_label={}".format(model._meta.app_label, app_label))
+        return True
