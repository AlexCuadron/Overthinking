diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 3effab65a8..5fee251570 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -1,5 +1,6 @@
 import signal

+import os
 from django.db.backends.base.client import BaseDatabaseClient


@@ -51,6 +52,9 @@ class DatabaseClient(BaseDatabaseClient):
             env['PGSSLKEY'] = str(sslkey)
         if passfile:
             env['PGPASSFILE'] = str(passfile)
+        if not env:
+            env = None
+
         return args, env

     def runshell(self, parameters):
diff --git a/repro_issue.py b/repro_issue.py
new file mode 100644
index 0000000000..a052b969ea
--- /dev/null
+++ b/repro_issue.py
@@ -0,0 +1,22 @@
+import os
+from django.db.backends.postgresql.client import DatabaseClient
+
+def main():
+    # Set some environment variable to see if it’s inherited by the client
+    os.environ['MYVAR'] = 'HelloWorld'
+
+    # Minimal settings: only database name
+    settings_dict = {
+        'NAME': 'testdb',
+    }
+    # Attempt to build the args/env
+    args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, [])
+
+    # We’ll show what the client’s environment dict is
+    print('Client environment dict:', env)
+
+    # In reality, if env is empty dict, Django will pass empty environment
+    # to subprocess, ignoring MYVAR. That’s the reported bug.
+
+if __name__ == "__main__":
+    main()
