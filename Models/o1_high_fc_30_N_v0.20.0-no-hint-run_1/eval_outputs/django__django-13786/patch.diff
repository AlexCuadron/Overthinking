diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index dddf7c679c..3ccb170e1e 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -137,11 +137,16 @@ class CreateModel(ModelOperation):
                 ),
             ]
         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
+            new_options = dict(self.options)
+            for key in list(new_options.keys()):
+                if key not in operation.options:
+                    del new_options[key]
+            new_options.update(operation.options)
             return [
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, **operation.options},
+                    options=new_options,
                     bases=self.bases,
                     managers=self.managers,
                 ),
diff --git a/scripts/reproduce_issue.py b/scripts/reproduce_issue.py
new file mode 100644
index 0000000000..6a3e687c8b
--- /dev/null
+++ b/scripts/reproduce_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python3
+
+import sys
+
+# Minimal script to reproduce the issue described in the PR.
+# It demonstrates that when an AlterModelOptions(name='TestModel', options={})
+# is squashed into the corresponding CreateModel operation, the options are
+# not cleared in the final CreateModel.
+
+from django.db.migrations.operations.models import CreateModel, AlterModelOptions
+from django.db import models
+
+if __name__ == "__main__":
+    create_op = CreateModel(
+        name='TestModel',
+        fields=[('id', models.AutoField(primary_key=True))],
+        options={'my_custom_option': True}
+    )
+    alter_op = AlterModelOptions(name='TestModel', options={})
+
+    # This simulates squashing the migrations: reduce() merges eligible operations.
+    merged_ops = create_op.reduce(alter_op, 'my_app')
+
+    print("Merged operations:")
+    if not merged_ops:
+        print("No operations returned.")
+        sys.exit(1)
+
+    for i, op in enumerate(merged_ops, start=1):
+        if hasattr(op, 'options'):
+            print(f"Operation {i} options: {op.options}")
+        else:
+            print(f"Operation {i} has no 'options' attribute.")
