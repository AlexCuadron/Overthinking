diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..1c00e64e8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+import subprocess
+import sys
+
+def main():
+    cmd = ["pytest", "testing/test_skipping.py", "-v", "-rs", "--runxfail"]
+    completed = subprocess.run(cmd)
+    print("Return code:", completed.returncode)
+    sys.exit(completed.returncode)
+
+if __name__ == "__main__":
+    main()
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 7bd975e5a..e9da833d4 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -47,18 +47,15 @@ def pytest_addoption(parser: Parser) -> None:


 def pytest_configure(config: Config) -> None:
+
     if config.option.runxfail:
-        # yay a hack
         import pytest
-
         old = pytest.xfail
-        config._cleanup.append(lambda: setattr(pytest, "xfail", old))
-
+        config._cleanup.append(lambda: setattr(pytest, 'xfail', old))
         def nop(*args, **kwargs):
             pass
-
-        nop.Exception = xfail.Exception  # type: ignore[attr-defined] # noqa: F821
-        setattr(pytest, "xfail", nop)
+        nop.Exception = xfail.Exception
+        setattr(pytest, 'xfail', nop)

     config.addinivalue_line(
         "markers",
@@ -270,8 +267,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
         else:
             rep.longrepr = "Unexpected success"
         rep.outcome = "failed"
-    elif item.config.option.runxfail:
-        pass  # don't interfere
+
     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
         assert call.excinfo.value.msg is not None
         rep.wasxfail = "reason: " + call.excinfo.value.msg
@@ -291,15 +287,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
             else:
                 rep.outcome = "passed"
                 rep.wasxfail = xfailed.reason
-    elif (
-        item._store.get(skipped_by_mark_key, True)
-        and rep.skipped
-        and type(rep.longrepr) is tuple
-    ):
-        # skipped by mark.skipif; change the location of the failure
-        # to point to the item definition, otherwise it will display
-        # the location of where the skip exception was raised within pytest
-        _, _, reason = rep.longrepr
+    elif item._store.get(skipped_by_mark_key, False) and rep.skipped:
+        if isinstance(rep.longrepr, tuple):
+            _, _, reason = rep.longrepr
+        else:
+            reason = str(rep.longrepr)
         filename, line = item.reportinfo()[:2]
         assert line is not None
         rep.longrepr = str(filename), line + 1, reason
