diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..4e4882ed9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,20 @@
+
+import sklearn.datasets
+import sklearn.model_selection
+import sklearn.ensemble
+
+X, y = sklearn.datasets.load_iris(return_X_y=True)
+
+rs = sklearn.model_selection.GridSearchCV(
+    estimator=sklearn.ensemble.RandomForestClassifier(),
+    param_grid={'n_estimators': [2, 3, 4, 5]}
+)
+rs.fit(X, y)
+
+print('mean_fit_time:', rs.cv_results_['mean_fit_time'])
+print('mean_score_time:', rs.cv_results_['mean_score_time'])
+
+try:
+    print('refit_time_:', rs.refit_time_)
+except AttributeError:
+    print('No refit_time_ attribute found')
diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py
index 99d6096af..2442a80e7 100644
--- a/sklearn/model_selection/_search.py
+++ b/sklearn/model_selection/_search.py
@@ -18,6 +18,7 @@ from functools import partial, reduce
 from itertools import product
 import operator
 import warnings
+import time

 import numpy as np
 from scipy.stats import rankdata
@@ -764,12 +765,14 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,
                 self.best_index_]

         if self.refit:
+            refit_start_time = time.time()
             self.best_estimator_ = clone(base_estimator).set_params(
                 **self.best_params_)
             if y is not None:
                 self.best_estimator_.fit(X, y, **fit_params)
             else:
                 self.best_estimator_.fit(X, **fit_params)
+            self.refit_time_ = time.time() - refit_start_time

         # Store the only scorer not as a dict for single metric evaluation
         self.scorer_ = scorers if self.multimetric_ else scorers['score']
