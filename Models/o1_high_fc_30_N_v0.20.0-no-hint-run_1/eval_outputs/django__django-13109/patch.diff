diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index d517d7269b..f12c0bd10a 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):
             return

         using = router.db_for_read(self.remote_field.model, instance=model_instance)
-        qs = self.remote_field.model._default_manager.using(using).filter(
+        qs = self.remote_field.model._base_manager.using(using).filter(
             **{self.remote_field.field_name: value}
         )
         qs = qs.complex_filter(self.get_limit_choices_to())
@@ -984,7 +984,7 @@ class ForeignKey(ForeignObject):
                              (self.name, self.remote_field.model))
         return super().formfield(**{
             'form_class': forms.ModelChoiceField,
-            'queryset': self.remote_field.model._default_manager.using(using),
+            'queryset': self.remote_field.model._base_manager.using(using),
             'to_field_name': self.remote_field.field_name,
             **kwargs,
             'blank': self.blank,
diff --git a/reproapp/__init__.py b/reproapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproapp/apps.py b/reproapp/apps.py
new file mode 100644
index 0000000000..25cecb7889
--- /dev/null
+++ b/reproapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class ReproappConfig(AppConfig):
+    name = 'reproapp'
\ No newline at end of file
diff --git a/reproapp/migrations/0001_initial.py b/reproapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..7ec13b5d51
--- /dev/null
+++ b/reproapp/migrations/0001_initial.py
@@ -0,0 +1,30 @@
+# Generated by Django 3.2 on 2025-01-13 23:43
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+                ('archived', models.BooleanField(default=False)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FavoriteArticle',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reproapp.article')),
+            ],
+        ),
+    ]
diff --git a/reproapp/migrations/__init__.py b/reproapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproapp/models.py b/reproapp/models.py
new file mode 100644
index 0000000000..d344940efc
--- /dev/null
+++ b/reproapp/models.py
@@ -0,0 +1,13 @@
+from django.db import models
+
+class ArticleManager(models.Manager):
+    def get_queryset(self):
+        return super().get_queryset().filter(archived=False)
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    archived = models.BooleanField(default=False)
+    objects = ArticleManager()
+
+class FavoriteArticle(models.Model):
+    article = models.ForeignKey(Article, on_delete=models.CASCADE)
diff --git a/scripts/reproduce_fk_validate_issue.py b/scripts/reproduce_fk_validate_issue.py
new file mode 100644
index 0000000000..65bac64ba0
--- /dev/null
+++ b/scripts/reproduce_fk_validate_issue.py
@@ -0,0 +1,86 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django import forms
+
+# We'll programmatically configure a minimal Django settings.
+# We'll use an in-memory sqlite DB so we can reproduce the issue.
+
+import sys
+sys.path.insert(0, '/workspace/django__django__3.2')
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test',
+    ALLOWED_HOSTS=['*'],
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'reproapp.apps.ReproappConfig',  # We can define our models in this main module.
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=[],
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [
+                    'django.template.context_processors.debug',
+                    'django.template.context_processors.request',
+                ]
+            },
+        }
+    ]
+)
+
+# Initialize Django
+django.setup()
+
+# Define models:
+from django.apps import apps
+Article = apps.get_model('reproapp', 'Article')
+FavoriteArticle = apps.get_model('reproapp', 'FavoriteArticle')
+
+# Define form:
+class FavoriteArticleForm(forms.ModelForm):
+    class Meta:
+        model = FavoriteArticle
+        fields = '__all__'
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        # We want to allow archived articles, so we override the queryset
+        self.fields['article'].queryset = Article._base_manager.all()
+
+# Let's create the DB tables.
+from django.core.management import call_command
+call_command('makemigrations', 'reproapp', verbosity=0)
+call_command('migrate', run_syncdb=True, verbosity=0)
+
+# Create some data:
+Article.objects.create(title='Active Article #1', archived=False)
+archived_article = Article.objects.create(title='Archived Article', archived=True)
+
+# The form tries to allow archived articles via _base_manager, but the ForeignKey
+# validation uses _default_manager in Django 3.2, meaning it won't find them.
+
+form = FavoriteArticleForm(data={
+    'article': archived_article.pk,
+})
+
+valid = form.is_valid()
+print('Is form valid?', valid)
+print('Errors:', form.errors)
+
+# If the underlying ForeignKey.validate() uses _default_manager, then the form will not be valid,
+# and you'll see an error that the article with this ID does not exist.
+
+# We'll exit with code 0, but we can check if the form is invalid. If it's invalid, it indicates
+# that the bug was reproduced. Once we fix the code, the form should be valid.
\ No newline at end of file
