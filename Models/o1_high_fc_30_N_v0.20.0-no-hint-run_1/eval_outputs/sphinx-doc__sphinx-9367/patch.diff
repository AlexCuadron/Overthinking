diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..8c7b12ba3
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,13 @@
+import sys
+from sphinx.pycode.ast import parse, unparse
+
+def main():
+    code = '(1,)'
+    node = parse(code, mode='eval')
+    # node.body is the AST expression within the parse tree
+    text = unparse(node.body)
+    print('Unparsed result:', text)
+
+if __name__ == '__main__':
+    main()
+
diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py
index f541ec0a9..607547f74 100644
--- a/sphinx/pycode/ast.py
+++ b/sphinx/pycode/ast.py
@@ -213,7 +213,9 @@ class _UnparseVisitor(ast.NodeVisitor):
         return "%s %s" % (self.visit(node.op), self.visit(node.operand))

     def visit_Tuple(self, node: ast.Tuple) -> str:
-        if node.elts:
+        if len(node.elts) == 1:
+            return "(" + self.visit(node.elts[0]) + ",)"
+        elif node.elts:
             return "(" + ", ".join(self.visit(e) for e in node.elts) + ")"
         else:
             return "()"
diff --git a/test_edgecases.py b/test_edgecases.py
new file mode 100644
index 000000000..e6faab044
--- /dev/null
+++ b/test_edgecases.py
@@ -0,0 +1,17 @@
+import sys
+from sphinx.pycode.ast import parse, unparse
+
+def test_tuple(code):
+    node = parse(code, mode='eval')
+    text = unparse(node.body)
+    print(f'Input: {code} => Output: {text}')
+
+def main():
+    test_tuple('()')
+    test_tuple('(1,)')
+    test_tuple('(1,2)')
+    test_tuple('((1,),)')
+
+if __name__ == '__main__':
+    main()
+
