diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..5e600c47ed 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -137,6 +137,11 @@ class Combinable:
         return self._combine(other, self.POW, True)

     def __rand__(self, other):
+        from django.db.models import Q
+        if isinstance(other, Q):
+            if self.conditional:
+                return other & Q(self)
+            raise TypeError(self)
         raise NotImplementedError(
             "Use .bitand() and .bitor() for bitwise logical operations."
         )
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..c6a3e11c08 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,7 +41,11 @@ class Q(tree.Node):

     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            from django.db.models.expressions import Expression
+            if isinstance(other, Expression) and getattr(other, 'conditional', False):
+                other = Q(other)
+            else:
+                raise TypeError(other)

         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
@@ -85,7 +89,7 @@ class Q(tree.Node):
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
         args, kwargs = (), {}
-        if len(self.children) == 1 and not isinstance(self.children[0], Q):
+        if len(self.children) == 1 and not isinstance(self.children[0], Q) and isinstance(self.children[0], (tuple, list)) and len(self.children[0]) == 2:
             child = self.children[0]
             kwargs = {child[0]: child[1]}
         else:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..06fd732a09
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+import sys
+from django.db.models import Q
+from django.db.models.expressions import Exists
+
+if __name__ == "__main__":
+    print("Testing Q() & Exists(None)")
+    try:
+        result = Q() & Exists(None)
+        print("No TypeError! The result is:", result)
+    except TypeError as e:
+        print("Got a TypeError as expected!", e)
+        sys.exit(1)
+    else:
+        sys.exit(0)
