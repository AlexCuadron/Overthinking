diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index f82c20c2f1..9fd77b5d41 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+        else:
             try:
                 field = obj.model._meta.get_field(item)
             except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
+                try:
+                    field = getattr(obj.model, item)
+                except AttributeError:
                     return [
                         checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
+                            "The value of '%s' refers to '%s', which is not a callable, "
+                            "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                                label, item, obj.__class__.__name__,
+                                obj.model._meta.app_label, obj.model._meta.object_name,
+                            ),
                             obj=obj.__class__,
-                            id='admin.E109',
+                            id='admin.E108',
                         )
                     ]
-                return []
-        else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []

     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..a1f11b3736
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,76 @@
+import sys
+import django
+from django.core import checks
+from django.conf import settings
+
+try:
+    import subprocess
+    subprocess.check_call(['pip', 'install', 'django-positions'])
+except Exception as e:
+    print("Failed to install django-positions:", e)
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.admin',
+        'django.contrib.messages',
+        '__main__',  # We define our model in this __main__ module.
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ]
+        }
+    }],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    SECRET_KEY='dummykey',
+)
+
+django.setup()
+
+from django.db import models
+try:
+    from position.fields import PositionField
+except ImportError:
+    class PositionField:
+        # Mock the behavior of the position field which triggers the bug
+        # Specifically it might throw an exception if used on the class.
+        def __get__(self, instance, owner=None):
+            if instance is None:
+                raise AttributeError("PositionField cannot be accessed from the class.")
+            return 0
+
+from django.contrib import admin
+
+class Thing(models.Model):
+    number = models.IntegerField(default=0)
+    order = PositionField()
+
+    class Meta:
+        app_label = '__main__'
+
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ['number', 'order']
+
+admin.site.register(Thing, ThingAdmin)
+
+if __name__ == "__main__":
+    errors = checks.run_checks()
+    if errors:
+        print("Errors found:")
+        for e in errors:
+            print(e)
+        sys.exit(1)
+    else:
+        print("No errors found.")
diff --git a/reproduce_error_with_debug.py b/reproduce_error_with_debug.py
new file mode 100644
index 0000000000..d1094b56a2
--- /dev/null
+++ b/reproduce_error_with_debug.py
@@ -0,0 +1,88 @@
+import sys
+import django
+from django.core import checks
+from django.conf import settings
+
+try:
+    import subprocess
+    subprocess.check_call(['pip', 'install', 'django-positions'])
+except Exception as e:
+    print("Failed to install django-positions:", e)
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.admin',
+        'django.contrib.messages',
+        '__main__',  # We define our model in this __main__ module.
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ]
+        }
+    }],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    SECRET_KEY='dummykey',
+)
+
+django.setup()
+
+import django
+from django.core.management import call_command
+
+try:
+    call_command('makemigrations', '--check')
+    call_command('migrate', '--run-syncdb', '--no-input')
+except Exception as e:
+    print("Migration error:", e)
+
+from django.db import models
+try:
+    from position.fields import PositionField
+except ImportError:
+    # fallback mock
+    class PositionField(models.IntegerField):
+        def __get__(self, instance, owner=None):
+            if instance is None:
+                raise AttributeError("PositionField cannot be accessed from the class.")
+            return super().__get__(instance, owner)
+
+from django.contrib import admin
+
+class Thing(models.Model):
+    number = models.IntegerField(default=0)
+    order = PositionField()
+
+    class Meta:
+        app_label = '__main__'
+
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ['number', 'order']
+
+admin.site.register(Thing, ThingAdmin)
+
+print('DEBUG: Fields on Thing:')
+for f in Thing._meta.get_fields():
+    print('  ', f.name, f)
+
+if __name__ == "__main__":
+    errors = checks.run_checks()
+    if errors:
+        print("Errors found:")
+        for e in errors:
+            print(e)
+        sys.exit(1)
+    else:
+        print("No errors found.")
