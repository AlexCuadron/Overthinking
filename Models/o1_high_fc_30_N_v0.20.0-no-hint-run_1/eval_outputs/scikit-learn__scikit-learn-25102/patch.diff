diff --git a/scripts/repro_error.py b/scripts/repro_error.py
new file mode 100644
index 000000000..9c2dd92b4
--- /dev/null
+++ b/scripts/repro_error.py
@@ -0,0 +1,20 @@
+import numpy as np
+import pandas as pd
+from sklearn.datasets import load_iris
+from sklearn.feature_selection import SelectKBest, chi2
+
+if __name__ == "__main__":
+    X, y = load_iris(return_X_y=True, as_frame=True)
+    X = X.astype(
+        {
+            "petal width (cm)": np.float16,
+            "petal length (cm)": np.float16,
+        }
+    )
+    X["cat"] = y.astype("category")
+
+    selector = SelectKBest(chi2, k=2)
+    selector.set_output(transform="pandas")
+    X_out = selector.fit_transform(X, y)
+    print("Output dtypes:")
+    print(X_out.dtypes)
diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..ad04b9dfd 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.

@@ -57,6 +58,8 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap

     return pd.DataFrame(data_to_wrap, index=index, columns=columns)
@@ -126,11 +129,20 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
     if output_config["dense"] == "default" or not _auto_wrap_is_configured(estimator):
         return data_to_wrap

-    # dense_config == "pandas"
+    subset_dtypes = None
+    if hasattr(original_input, "dtypes"):
+        new_cols = estimator.get_feature_names_out()
+        old_dtypes = original_input.dtypes
+        subset_dtypes = {}
+        for c in new_cols:
+            if c in old_dtypes.index:
+                subset_dtypes[c] = old_dtypes[c]
+
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=subset_dtypes,
     )


@@ -209,6 +221,7 @@ class _SetOutputMixin:

     @available_if(_auto_wrap_is_configured)
     def set_output(self, *, transform=None):
+
         """Set output container.

         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
