diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..84eceb7f11 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,10 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            return type(value)(*[
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ])
         return value

     def solve_lookup_type(self, lookup):
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..3aab99e444
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,40 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from collections import namedtuple
+
+
+def main():
+    settings.configure(
+        INSTALLED_APPS=[__name__],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='test',
+    )
+    django.setup()
+
+    class MyModel(models.Model):
+        value = models.IntegerField()
+
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(MyModel)
+
+    MyModel.objects.create(value=5)
+
+    RangeNT = namedtuple('RangeNT', ['near', 'far'])
+    x = RangeNT(near=1, far=10)
+
+    # Attempt to filter using __range.
+    # This caused an error in Django 3.0 for namedtuples.
+    results = list(MyModel.objects.filter(value__range=x))
+    print("Queried rows:", results)
+    print("Success: No error occurred!")
+
+if __name__ == "__main__":
+    main()
