diff --git a/bug_repro.py b/bug_repro.py
new file mode 100644
index 0000000000..48b4318ec3
--- /dev/null
+++ b/bug_repro.py
@@ -0,0 +1,17 @@
+import sympy
+from sympy import Eq, S, rf, nsolve, Float
+from sympy.utilities.lambdify import lambdify
+import inspect
+
+print("Running bug reproduction script...")
+x = sympy.Symbol('x', real=True)
+eqn = Eq(rf(18, x), 77 + S(1)/3)
+f_mpmath = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')
+source = inspect.getsource(f_mpmath)
+print("\nFunction source is:\n" + source)
+x0 = nsolve(eqn, Float('1.5', 64), prec=64)
+res = rf(18, x0).evalf(64)
+print("\nResult of rf(18,x0).evalf(64) is:", res)
+res_expected = (77 + S(1)/3)
+diff = res - res_expected
+print("Difference with exact is:", diff)
diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index d06901425d..7f7af010e9 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -331,6 +331,13 @@ def _print_Float(self, e):
         args = str(tuple(map(int, e._mpf_)))
         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)

+    def _print_Rational(self, e):
+        # Ensure that rationals get printed using mpmath.mpf for both numerator and denominator.
+        return '{}({})/{}({})'.format(
+            self._module_format('mpmath.mpf'), self._print(e.p),
+            self._module_format('mpmath.mpf'), self._print(e.q)
+        )
+

     def _print_uppergamma(self, e):
         return "{0}({1}, {2}, {3})".format(
