diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..ca718e609a 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='errorlist nonform')
         empty_forms_count = 0

         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,7 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(e.error_list, error_class='errorlist nonform')

     def clean(self):
         """
diff --git a/docs/topics/forms/index.txt b/docs/topics/forms/index.txt
index e55b6d7bf2..00d1f53cb1 100644
--- a/docs/topics/forms/index.txt
+++ b/docs/topics/forms/index.txt
@@ -617,6 +617,9 @@ errors. For example, ``{{ form.non_field_errors }}`` would look like:
     </ul>

 See :doc:`/ref/forms/api` for more on errors, styling, and working with form
+
+In a FormSet, non_form_errors() will also produce an ErrorList with a "nonform" CSS class, allowing developers to handle those messages distinctly from "nonfield" errors.
+
 attributes in templates.

 Looping over the form's fields
diff --git a/reproduce_nonform_error_bug.py b/reproduce_nonform_error_bug.py
new file mode 100644
index 0000000000..ae52048824
--- /dev/null
+++ b/reproduce_nonform_error_bug.py
@@ -0,0 +1,35 @@
+import sys
+import django
+from django.conf import settings
+settings.configure(
+    SECRET_KEY='not_very_secret_key',
+    USE_I18N=False,
+    USE_L10N=False,
+    USE_TZ=False,
+)
+django.setup()
+
+from django import forms
+from django.forms import formsets
+
+class MyForm(forms.Form):
+    name = forms.CharField(required=False)
+
+class MyBaseFormSet(formsets.BaseFormSet):
+    def clean(self):
+        super().clean()
+        # Force a non-form error
+        raise forms.ValidationError("Non-form error for testing")
+
+if __name__ == "__main__":
+    formset_class = formsets.formset_factory(MyForm, formset=MyBaseFormSet, extra=1)
+    data = {
+        'form-TOTAL_FORMS': '1',
+        'form-INITIAL_FORMS': '0',
+        'form-MIN_NUM_FORMS': '0',
+        'form-MAX_NUM_FORMS': '1',
+        'form-0-name': 'test'
+    }
+    fs = formset_class(data=data)
+    print("Is formset valid?", fs.is_valid())
+    print("non_form_errors():", fs.non_form_errors())
