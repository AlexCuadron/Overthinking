diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py
index b9227d8d7a..31085185a7 100644
--- a/sympy/printing/lambdarepr.py
+++ b/sympy/printing/lambdarepr.py
@@ -70,6 +70,13 @@ def _print_Pow(self, expr, **kwargs):
         return super(PythonCodePrinter, self)._print_Pow(expr, **kwargs)


+    def _print_Tuple(self, expr):
+        # Ensure single-element tuple has the trailing comma
+        if len(expr) == 1:
+            return f"({self._print(expr.args[0])},)"
+        else:
+            return "(" + ", ".join(self._print(a) for a in expr.args) + ")"
+
 # numexpr works by altering the string passed to numexpr.evaluate
 # rather than by populating a namespace.  Thus a special printer...
 class NumExprPrinter(LambdaPrinter):
diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index 1877c3f92a..5a643fda64 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -391,6 +391,14 @@ def _hprint_Pow(self, expr, rational=False, sqrt='math.sqrt'):


 class ArrayPrinter:
+    def _print_tuple(self, expr):
+        """Override for Python built-in tuples."""
+        # If single element, ensure a trailing comma.
+        if len(expr) == 1:
+            return f"({self._print(expr[0])},)"
+        else:
+            return "(" + ", ".join(self._print(a) for a in expr) + ")"
+

     def _arrayify(self, indexed):
         from sympy.tensor.array.expressions.conv_indexed_to_array import convert_indexed_to_array
@@ -538,6 +546,13 @@ def _print_Not(self, expr):

     def _print_Indexed(self, expr):
         base = expr.args[0]
+    def _print_Tuple(self, expr):
+        # For single-element tuples, add trailing comma
+        if len(expr) == 1:
+            return f"({self._print(expr.args[0])},)"
+        else:
+            return "(" + ", ".join(self._print(a) for a in expr.args) + ")"
+
         index = expr.args[1:]
         return "{}[{}]".format(str(base), ", ".join([self._print(ind) for ind in index]))
