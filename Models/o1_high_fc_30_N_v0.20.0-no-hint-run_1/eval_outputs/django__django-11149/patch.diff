diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..92501edb7e 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2113,29 +2113,38 @@ class InlineModelAdmin(BaseModelAdmin):

     def has_add_permission(self, request, obj):
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # For auto-created intermediate models, require 'change' permission on the related model
+            opts = self.opts
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            from django.contrib.auth import get_permission_codename
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_add_permission(request)

     def has_change_permission(self, request, obj=None):
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # For auto-created intermediate models, require 'change' permission on the related model
+            opts = self.opts
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            from django.contrib.auth import get_permission_codename
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_change_permission(request)

     def has_delete_permission(self, request, obj=None):
         if self.opts.auto_created:
-            # We're checking the rights to an auto-created intermediate model,
-            # which doesn't have its own individual permissions. The user needs
-            # to have the view permission for the related model in order to
-            # be able to do anything with the intermediate model.
-            return self.has_view_permission(request, obj)
+            # For auto-created intermediate models, require 'change' permission on the related model
+            opts = self.opts
+            for field in opts.fields:
+                if field.remote_field and field.remote_field.model != self.parent_model:
+                    opts = field.remote_field.model._meta
+                    break
+            from django.contrib.auth import get_permission_codename
+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))
         return super().has_delete_permission(request, obj)

     def has_view_permission(self, request, obj=None):
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..9e16480ff6
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,12 @@
+import subprocess
+import sys
+import os
+
+def main():
+    # Just call Djangoâ€™s test runner for admin_inlines.
+    # In principle this should demonstrate the behavior described
+    # in the PR (user with ONLY view-permissions can still modify an auto-created M2M inline).
+    subprocess.run([sys.executable, "tests/runtests.py", "admin_inlines"], check=False)
+
+if __name__ == "__main__":
+    main()
