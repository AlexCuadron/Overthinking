diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 33cc636b22..5036335bec 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -748,7 +748,7 @@ class Query(BaseExpression):
                     cur_model = source.related_model
                 else:
                     cur_model = source.remote_field.model
-                opts = cur_model._meta
+                opts = cur_model._meta.concrete_model._meta
                 # Even if we're "just passing through" this model, we must add
                 # both the current model's pk and the related reference field
                 # (if it's not a reverse relation) to the things we select.
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..a70645b4a0
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,62 @@
+# Generated by Django 4.2.dev20220702144524 on 2025-01-14 01:39
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="CustomModel",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=16)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="ProxyCustomModel",
+            fields=[],
+            options={
+                "proxy": True,
+                "indexes": [],
+                "constraints": [],
+            },
+            bases=("__main__.custommodel",),
+        ),
+        migrations.CreateModel(
+            name="AnotherModel",
+            fields=[
+                (
+                    "id",
+                    models.AutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "custom",
+                    models.ForeignKey(
+                        blank=True,
+                        null=True,
+                        on_delete=django.db.models.deletion.SET_NULL,
+                        to="__main__.proxycustommodel",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d3470f099a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,60 @@
+import sys
+import os
+
+# Make sure the local Django (the one in django__django__4.2) is used first.
+sys.path.insert(0, os.path.abspath("/workspace/django__django__4.2"))
+
+import django
+from django.conf import settings
+from django.db import models
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            SECRET_KEY='test',
+            INSTALLED_APPS=['__main__'],
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+        )
+    django.setup()
+
+    class CustomModel(models.Model):
+        name = models.CharField(max_length=16)
+
+    class Meta:
+        db_table = 'custom_model'
+        app_label = 'myapp'
+    class ProxyCustomModel(CustomModel):
+        class Meta:
+            proxy = True
+
+    class AnotherModel(models.Model):
+        custom = models.ForeignKey(
+            ProxyCustomModel,
+            on_delete=models.SET_NULL,
+            null=True,
+            blank=True,
+        )
+
+    class Meta:
+        db_table = 'another_model'
+        app_label = 'myapp'
+
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(CustomModel)
+        schema_editor.create_model(AnotherModel)
+
+    cm = CustomModel.objects.create(name='test')
+    pm = ProxyCustomModel.objects.get(pk=cm.pk)
+    AnotherModel.objects.create(custom=pm)
+
+    result = list(AnotherModel.objects.select_related('custom').only('custom__name').all())
+    print("Success:", result)
+
+if __name__ == "__main__":
+    main()
