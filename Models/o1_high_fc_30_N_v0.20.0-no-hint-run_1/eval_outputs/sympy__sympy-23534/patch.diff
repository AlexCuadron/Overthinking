diff --git a/reproduce_symbols_bug.py b/reproduce_symbols_bug.py
new file mode 100644
index 0000000000..ae63c2627b
--- /dev/null
+++ b/reproduce_symbols_bug.py
@@ -0,0 +1,5 @@
+import sys
+import sympy as smp
+
+q, u = smp.symbols(('q:2','u:2'), cls=smp.Function)
+print("Type of q[0]:", type(q[0]))
diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py
index f4a555c13f..2867e33dbf 100644
--- a/sympy/core/symbol.py
+++ b/sympy/core/symbol.py
@@ -583,6 +583,13 @@ def matches(self, expr, repl_dict=None, old=False):
 _range = _re.compile('([0-9]*:[0-9]+|[a-zA-Z]?:[a-zA-Z])')


+def _parse_prefix(s):
+    i = len(s)
+    while i > 0 and s[i-1].isdigit():
+        i -= 1
+    return s[:i], s[i:]
+
+
 def symbols(names, *, cls=Symbol, **args) -> Any:
     r"""
     Transform strings into instances of :class:`Symbol` class.
@@ -720,6 +727,8 @@ def literal(s):
             return s

         names = names.strip()
+        while names.startswith('(') and names.endswith(')') and len(names) > 2:
+            names = names[1:-1].strip()
         as_seq = names.endswith(',')
         if as_seq:
             names = names[:-1].rstrip()
@@ -731,12 +740,35 @@ def literal(s):
         if not all(n for n in names):
             raise ValueError('missing symbol between commas')
         # split on spaces
+def _strip_extra_parens(name: str) -> str:
+    # Repeatedly strip matching parentheses around the entire string
+    # as long as that does not empty the string.
+    s = name.strip()
+    while s.startswith("(") and s.endswith(")") and len(s) > 2:
+        s_inner = s[1:-1].strip()
+        # optional: check if the parentheses are balanced inside
+        # but for simplicity just remove the outermost pair
+        s = s_inner
+    return s
+
         for i in range(len(names) - 1, -1, -1):
             names[i: i + 1] = names[i].split()
+        for i in range(len(names)):
+            names[i] = _strip_extra_parens(names[i])
+

         seq = args.pop('seq', as_seq)

-        for name in names:
+        # strip a possible extra outer parentheses from each splitted name
+        stripped_names = []
+        for nm in names:
+            s = nm.strip()
+            while s.startswith('(') and s.endswith(')') and len(s) > 2:
+                s_inner = s[1:-1].strip()
+                s = s_inner
+            stripped_names.append(s)
+
+        for name in stripped_names:
             if not name:
                 raise ValueError('missing symbol')
