diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..5fcb06915e 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -85,13 +85,9 @@ class Q(tree.Node):
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
         args, kwargs = (), {}
-        if len(self.children) == 1 and not isinstance(self.children[0], Q):
-            child = self.children[0]
-            kwargs = {child[0]: child[1]}
-        else:
-            args = tuple(self.children)
-            if self.connector != self.default:
-                kwargs = {'_connector': self.connector}
+        args = tuple(self.children)
+        if self.connector != self.default:
+            kwargs = {'_connector': self.connector}
         if self.negated:
             kwargs['_negated'] = True
         return path, args, kwargs
diff --git a/reproduce_q_error.py b/reproduce_q_error.py
new file mode 100644
index 0000000000..783c990140
--- /dev/null
+++ b/reproduce_q_error.py
@@ -0,0 +1,34 @@
+import sys
+import os
+
+# Insert the repo's directory at the front of sys.path so we import Django from here.
+sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
+
+import django
+from django.conf import settings
+
+# Minimal settings to allow using get_user_model.
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    SECRET_KEY='abc',
+)
+
+django.setup()
+
+from django.db.models import Q, Exists
+from django.contrib.auth import get_user_model
+
+try:
+    # This should raise an error before fix:
+    print(Q(Exists(get_user_model().objects.filter(username='jim'))).deconstruct())
+except Exception as e:
+    print(f"Error encountered: {e}")
\ No newline at end of file
