diff --git a/bug_repro.py b/bug_repro.py
new file mode 100644
index 0000000000..14384c71e1
--- /dev/null
+++ b/bug_repro.py
@@ -0,0 +1,61 @@
+import sys
+import os
+
+# Make sure Django from this repo is on Python's import path.
+# We'll assume this file is placed in the top-level repo directory.
+repo_path = os.path.dirname(os.path.abspath(__file__))
+sys.path.insert(0, repo_path)
+
+import django
+from django.conf import settings
+
+# Minimal settings for using Django forms.
+settings.configure(
+    INSTALLED_APPS=[],
+    SECRET_KEY='test',
+)
+
+# Setup Django
+django.setup()
+
+from django.forms import (
+    Form,
+    CharField,
+    MultiValueField,
+    MultiWidget,
+)
+
+class MF(MultiValueField):
+    widget = MultiWidget
+    def __init__(self):
+        fields = [
+            CharField(required=False),
+            CharField(required=True),
+        ]
+        widget = self.widget(widgets=[
+            f.widget
+            for f in fields
+        ], attrs={})
+        super(MF, self).__init__(
+            fields=fields,
+            widget=widget,
+            require_all_fields=False,
+            required=False,
+        )
+    def compress(self, value):
+        return []
+
+class F(Form):
+    mf = MF()
+
+f = F({
+    'mf_0': '',
+    'mf_1': '',
+})
+print("Case 1: empty subfields => is_valid should be False, actual:", f.is_valid())
+
+f2 = F({
+    'mf_0': 'xxx',
+    'mf_1': '',
+})
+print("Case 2: first subfield filled, second empty => is_valid should be False, actual:", f2.is_valid())
\ No newline at end of file
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..583b486de9 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1025,8 +1025,6 @@ class MultiValueField(Field):
             if not value or not [v for v in value if v not in self.empty_values]:
                 if self.required:
                     raise ValidationError(self.error_messages['required'], code='required')
-                else:
-                    return self.compress([])
         else:
             raise ValidationError(self.error_messages['invalid'], code='invalid')
         for i, field in enumerate(self.fields):
