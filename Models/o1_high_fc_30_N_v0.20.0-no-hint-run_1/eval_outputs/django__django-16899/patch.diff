diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index c395b0bde2..bbd0f9d76f 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -771,10 +771,11 @@ class BaseModelAdminChecks:
             except FieldDoesNotExist:
                 return [
                     checks.Error(
-                        "The value of '%s' is not a callable, an attribute of "
+                        "The value of '%s' refers to '%s', which is not a callable, an attribute of "
                         "'%s', or an attribute of '%s'."
                         % (
                             label,
+                            field_name,
                             obj.__class__.__name__,
                             obj.model._meta.label,
                         ),
diff --git a/readonly_fields_reproduce.py b/readonly_fields_reproduce.py
new file mode 100644
index 0000000000..583bb85157
--- /dev/null
+++ b/readonly_fields_reproduce.py
@@ -0,0 +1,35 @@
+import sys
+import django
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'myapp',
+    ],
+    SECRET_KEY='secretkey',
+)
+
+django.setup()
+
+from django.db import models
+from django.contrib import admin
+from django.core.management import call_command
+from django.contrib.admin import checks
+
+class MyModel(models.Model):
+    class Meta:
+        app_label = 'myapp'
+    name = models.CharField(max_length=100)
+
+@admin.register(MyModel)
+class MyModelAdmin(admin.ModelAdmin):
+    # This intentionally references a nonexistent field to reproduce the error.
+    readonly_fields = ["non_existent_field"]
+
+if __name__ == "__main__":
+    # Run the admin checks.
+    errors = checks.check_admin_app(None)
+    for e in errors:
+        print(e)
\ No newline at end of file
