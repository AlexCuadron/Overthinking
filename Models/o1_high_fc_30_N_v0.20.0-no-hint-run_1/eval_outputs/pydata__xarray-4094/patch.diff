diff --git a/test_repro.py b/test_repro.py
new file mode 100644
index 00000000..b8567032
--- /dev/null
+++ b/test_repro.py
@@ -0,0 +1,17 @@
+import xarray as xr
+import numpy as np
+
+def main():
+    arr = xr.DataArray(
+        np.arange(3),
+        coords=[("x", [0, 1, 2])],
+    )
+    data = xr.Dataset({"a": arr, "b": arr})
+    stacked = data.to_stacked_array('y', sample_dims=['x'])
+    print("stacked:", stacked)
+    # expect to fail with MergeError if single dim
+    unstacked = stacked.to_unstacked_dataset('y')
+    print("unstacked:", unstacked)
+
+if __name__ == "__main__":
+    main()
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..3924f0f3 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -22,6 +22,7 @@ import numpy as np
 import pandas as pd

 from ..plot.plot import _PlotMethods
+import xarray as xr
 from . import (
     computation,
     dtypes,
@@ -1960,11 +1961,12 @@ class DataArray(AbstractArray, DataWithCoords):

         # pull variables out of datarray
         data_dict = {}
+        ds_list = []
         for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
+            arr_k = self.sel({variable_dim: k}).squeeze(drop=True).to_dataset(name=k)
+            ds_list.append(arr_k)

-        # unstacked dataset
-        return Dataset(data_dict)
+        return xr.merge(ds_list, compat="override")

     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> "DataArray":
         """Return a new DataArray object with transposed dimensions.
