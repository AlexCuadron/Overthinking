diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..ce03b622eb 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -162,10 +162,39 @@ def structurally_equal(self, other):
             and self.colblocksizes == other.colblocksizes)

     def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
-
+        if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:
+            from sympy.matrices.immutable import ImmutableDenseMatrix
+            B1 = self.blocks
+            B2 = other.blocks
+            rows1, cols1 = self.blockshape
+            rows2, cols2 = other.blockshape
+            res = []
+            for i in range(rows1):
+                rowi = []
+                for j in range(cols2):
+                    tmp = None
+                    for k in range(cols1):
+                        part = B1[i, k]*B2[k, j]
+                        tmp = part if tmp is None else tmp + part
+                    rowi.append(tmp)
+                res.append(rowi)
+            M = ImmutableDenseMatrix(res)
+            # Replace scalar Zero objects with ZeroMatrix of correct shape
+            for i in range(M.shape[0]):
+                for j in range(M.shape[1]):
+                    if getattr(M[i, j], 'is_Zero', False):
+                        row_dim = B1[i, 0].rows
+                        col_dim = B2[0, j].cols
+                        M[i, j] = ZeroMatrix(row_dim, col_dim)
+            # Convert M (an ImmutableDenseMatrix of sub-blocks) into a list of lists
+            # so that BlockMatrix constructor sees each entry as a sub-matrix.
+            rows_list = []
+            for r in range(M.shape[0]):
+                row_blocks = []
+                for c in range(M.shape[1]):
+                    row_blocks.append(M[r, c])
+                rows_list.append(row_blocks)
+            return BlockMatrix(rows_list)
         return self * other

     def _blockadd(self, other):
