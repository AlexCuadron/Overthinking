diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py
index 23284e4a92..5946b1d8c9 100644
--- a/sympy/physics/hep/gamma_matrices.py
+++ b/sympy/physics/hep/gamma_matrices.py
@@ -694,8 +694,9 @@ def kahane_simplify(expression):

     # If `first_dum_pos` is not zero, it means that there are trailing free gamma
     # matrices in front of `expression`, so multiply by them:
-    for i in range(0, first_dum_pos):
-        [ri.insert(0, free_pos[i]) for ri in resulting_indices]
+    for i in reversed(range(0, first_dum_pos)):
+        for ri in resulting_indices:
+            ri.insert(0, free_pos[i])

     resulting_expr = S.Zero
     for i in resulting_indices:
diff --git a/test_kahane_leading_gamma_matrix_bug.py b/test_kahane_leading_gamma_matrix_bug.py
new file mode 100644
index 0000000000..785a84ead6
--- /dev/null
+++ b/test_kahane_leading_gamma_matrix_bug.py
@@ -0,0 +1,21 @@
+import sympy
+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify, LorentzIndex
+from sympy.tensor.tensor import tensor_indices
+
+def test_kahane_leading_gamma_matrix_bug():
+    mu, nu, rho, sigma = tensor_indices("mu, nu, rho, sigma", LorentzIndex)
+
+    t = G(mu)*G(-mu)*G(rho)*G(sigma)
+    r = kahane_simplify(t)
+    print('First result:', r)
+    print('Expected:', 4*G(rho)*G(sigma))
+    assert r.equals(4*G(rho)*G(sigma)), 'Assertion failed for first expression!'
+
+    t = G(rho)*G(sigma)*G(mu)*G(-mu)
+    r = kahane_simplify(t)
+    print('Second result:', r)
+    print('Expected:', 4*G(rho)*G(sigma))
+    assert r.equals(4*G(rho)*G(sigma)), 'Assertion failed for second expression!'
+
+if __name__ == "__main__":
+    test_kahane_leading_gamma_matrix_bug()
