diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..dde4de183f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -812,6 +812,9 @@ class BaseModelFormSet(BaseFormSet):
         return saved_instances

     def save_new_objects(self, commit=True):
+        if not getattr(self, 'can_create', True):
+            self.new_objects = []
+            return []
         self.new_objects = []
         for form in self.extra_forms:
             if not form.has_changed():
@@ -871,6 +874,7 @@ class BaseModelFormSet(BaseFormSet):

 def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          formset=BaseModelFormSet, extra=1, can_delete=False,
+                         can_create=True,
                          can_order=False, max_num=None, fields=None, exclude=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
@@ -896,6 +900,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
                               renderer=renderer)
     FormSet.model = model
+    FormSet.can_create = can_create
     return FormSet


diff --git a/dummyapp/__init__.py b/dummyapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/dummyapp/apps.py b/dummyapp/apps.py
new file mode 100644
index 0000000000..c0e7604943
--- /dev/null
+++ b/dummyapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class DummyappConfig(AppConfig):
+    name = 'dummyapp'
\ No newline at end of file
diff --git a/dummyapp/migrations/0001_initial.py b/dummyapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..7aa930c5d3
--- /dev/null
+++ b/dummyapp/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 4.1.dev20220127180326 on 2025-01-14 01:19
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
diff --git a/dummyapp/migrations/__init__.py b/dummyapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..97fed69545
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,91 @@
+import os
+import django
+import sys
+
+# Minimal standalone script to reproduce the creation of new objects in a ModelFormSet
+
+# We'll configure Django settings in a minimal way
+from django.conf import settings
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+import sys
+sys.path.insert(0, BASE_DIR)
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='testkey',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'dummyapp.apps.DummyappConfig',
+            # We'll define a dummy app inline.
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+import django
+django.setup()
+from django.db import models
+from django.forms.models import modelformset_factory
+from django.test import Client
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'dummyapp'
+
+# We'll do a quick migration to create the table in memory.
+from django.core.management import call_command
+
+call_command('makemigrations', 'contenttypes', verbosity=0)
+call_command('migrate', 'contenttypes', verbosity=0)
+call_command('makemigrations', 'dummyapp', verbosity=0)
+call_command('migrate', 'dummyapp', verbosity=0)
+
+call_command('migrate', 'auth', verbosity=0)
+
+call_command('makemigrations', verbosity=0)
+call_command('migrate', verbosity=0)
+
+# We'll create an object so we have something to edit.
+MyModel.objects.create(name='Original')
+
+MyFormSet = modelformset_factory(MyModel, fields=('name',), extra=1, can_create=False)
+
+# Let's simulate a POST that tries to add a new object.
+
+POST_data = {
+    'form-TOTAL_FORMS': '2',
+    'form-INITIAL_FORMS': '1',
+    'form-MIN_NUM_FORMS': '0',
+    'form-MAX_NUM_FORMS': '1000',
+
+    'form-0-id': '1',
+    'form-0-name': 'Edited Name',
+    # This is the new form data:
+    'form-1-id': '',
+    'form-1-name': 'New Object',
+}
+
+
+formset = MyFormSet(POST_data)
+if formset.is_valid():
+    # If the formset is valid, then it will save a new object.
+    # That means we were able to create a new object.
+    # For the PR requirement, we want to disallow creation of new objects.
+    # So this is the problematic scenario.
+    formset.save()
+    new_objects_count = MyModel.objects.count()
+    if new_objects_count > 1:
+        print("ERROR: A new object was created.")
+    else:
+        print("OK: No new object was created (unexpected?).")
+else:
+    print("Formset was invalid, so no new object was created.")
+
