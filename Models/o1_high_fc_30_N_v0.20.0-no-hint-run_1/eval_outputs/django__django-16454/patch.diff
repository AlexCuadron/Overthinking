diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..e541a1fee8 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -72,6 +72,27 @@ class CommandParser(ArgumentParser):
             raise CommandError("Error: %s" % message)


+    def add_subparsers(self, **kwargs):
+        subparsers_action = super().add_subparsers(**kwargs)
+        original_add_parser = subparsers_action.add_parser
+
+        def add_parser(name, **parser_kwargs):
+            sp = original_add_parser(name, **parser_kwargs)
+            def new_error_method(msg):
+                # Emulate CommandParser.error but for subparsers.
+                sp.print_usage(sys.stderr)
+                if self.called_from_command_line:
+                    sp.exit(2, f"{sp.prog}: error: {msg}\n")
+                else:
+                    raise CommandError(f"Error: {msg}")
+            # Override the error method to prevent raw traceback.
+            sp.error = new_error_method
+            return sp
+
+        subparsers_action.add_parser = add_parser
+        return subparsers_action
+
+
 def handle_default_options(options):
     """
     Include any default options that all commands should accept here
diff --git a/script_reproduce_error.py b/script_reproduce_error.py
new file mode 100644
index 0000000000..0bc7401488
--- /dev/null
+++ b/script_reproduce_error.py
@@ -0,0 +1,34 @@
+import sys
+from django.core.management.base import CommandParser, CommandError
+
+"""
+This script reproduces the issue described in the PR:
+ - We have a CommandParser.
+ - We add a required subparser.
+ - The subparser also has a required argument.
+ - If we fail to provide that required argument, in some cases we see a stacktrace instead
+   of a friendly error message.
+"""
+
+def main():
+    parser = CommandParser(
+        missing_args_message="A subcommand is required.",
+        called_from_command_line=True
+    )
+    subparsers = parser.add_subparsers(required=True, dest="subcmd")
+    create = subparsers.add_parser("create")
+    create.add_argument("name")
+
+    print("Running parse_args(['create']) with the 'name' argument omitted.")
+    try:
+        # We intentionally omit the "name" argument to reproduce the error.
+        parser.parse_args(["create"])
+    except CommandError as e:
+        print("Caught CommandError.")
+        print(" Error message:", e)
+    except SystemExit as e:
+        # If the subparser is a normal argparse parser, we can end up here.
+        print("SystemExit triggered:", e)
+
+if __name__ == "__main__":
+    main()
