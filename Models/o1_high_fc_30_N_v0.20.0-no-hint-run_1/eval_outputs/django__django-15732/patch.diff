diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..f92538b524 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -560,7 +560,9 @@ class BaseDatabaseSchemaEditor:
         meta_constraint_names = {
             constraint.name for constraint in model._meta.constraints
         }
-        meta_index_names = {constraint.name for constraint in model._meta.indexes}
+        if constraint_kwargs.get('unique'):
+            constraint_kwargs.setdefault('primary_key', False)
+        meta_index_names = {constraint.name for constraint.name in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
         constraint_names = self._constraint_names(
             model,
diff --git a/repro_project/db.sqlite3 b/repro_project/db.sqlite3
new file mode 100644
index 0000000000..3632b747d6
Binary files /dev/null and b/repro_project/db.sqlite3 differ
diff --git a/repro_project/manage.py b/repro_project/manage.py
new file mode 100755
index 0000000000..69b9bdb847
--- /dev/null
+++ b/repro_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "repro_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/repro_project/repro_project/__init__.py b/repro_project/repro_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/repro_project/repro_project/asgi.py b/repro_project/repro_project/asgi.py
new file mode 100644
index 0000000000..fa5b5a2e3a
--- /dev/null
+++ b/repro_project/repro_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for repro_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "repro_project.settings")
+
+application = get_asgi_application()
diff --git a/repro_project/repro_project/settings.py b/repro_project/repro_project/settings.py
new file mode 100644
index 0000000000..9e283a39fc
--- /dev/null
+++ b/repro_project/repro_project/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for repro_project project.
+
+Generated by 'django-admin startproject' using Django 4.2.dev20220525111328.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-yf+*ksipuia#d5zyjh1d@dfu8a*irt7mq6u(*n-ibi_j-@1al)"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'testapp',
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "repro_project.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "repro_project.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/repro_project/repro_project/urls.py b/repro_project/repro_project/urls.py
new file mode 100644
index 0000000000..0d7ce93114
--- /dev/null
+++ b/repro_project/repro_project/urls.py
@@ -0,0 +1,22 @@
+"""repro_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/repro_project/repro_project/wsgi.py b/repro_project/repro_project/wsgi.py
new file mode 100644
index 0000000000..d5c5457ea0
--- /dev/null
+++ b/repro_project/repro_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for repro_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "repro_project.settings")
+
+application = get_wsgi_application()
diff --git a/repro_project/testapp/__init__.py b/repro_project/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/repro_project/testapp/admin.py b/repro_project/testapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/repro_project/testapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/repro_project/testapp/apps.py b/repro_project/testapp/apps.py
new file mode 100644
index 0000000000..5876911b2d
--- /dev/null
+++ b/repro_project/testapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class TestappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "testapp"
diff --git a/repro_project/testapp/migrations/0001_initial.py b/repro_project/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..61cdf01c9c
--- /dev/null
+++ b/repro_project/testapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 4.2.dev20220525111328 on 2025-01-14 01:44
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="FooBar",
+            fields=[
+                ("id", models.AutoField(primary_key=True, serialize=False)),
+            ],
+            options={
+                "unique_together": {("id",)},
+            },
+        ),
+    ]
diff --git a/repro_project/testapp/migrations/0002_alter_foobar_unique_together.py b/repro_project/testapp/migrations/0002_alter_foobar_unique_together.py
new file mode 100644
index 0000000000..c3e27ebce9
--- /dev/null
+++ b/repro_project/testapp/migrations/0002_alter_foobar_unique_together.py
@@ -0,0 +1,17 @@
+# Generated by Django 4.2.dev20220525111328 on 2025-01-14 01:44
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("testapp", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.AlterUniqueTogether(
+            name="foobar",
+            unique_together=set(),
+        ),
+    ]
diff --git a/repro_project/testapp/migrations/__init__.py b/repro_project/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/repro_project/testapp/models.py b/repro_project/testapp/models.py
new file mode 100644
index 0000000000..f3a08f7e58
--- /dev/null
+++ b/repro_project/testapp/models.py
@@ -0,0 +1,4 @@
+from django.db import models
+
+class FooBar(models.Model):
+    id = models.AutoField(primary_key=True)
diff --git a/repro_project/testapp/tests.py b/repro_project/testapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/repro_project/testapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/repro_project/testapp/views.py b/repro_project/testapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/repro_project/testapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..e2ede4ed8e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,53 @@
+import os
+import subprocess
+
+def main():
+    # Remove any leftover artifacts
+    if os.path.exists('repro_project'):
+        subprocess.run(['rm', '-rf', 'repro_project'])
+    if os.path.exists('db.sqlite3'):
+        os.remove('db.sqlite3')
+
+    # 1) Create a new Django project
+    subprocess.run(['django-admin', 'startproject', 'repro_project'], check=True)
+
+    # 2) Create an app inside the project
+    os.chdir('repro_project')
+    subprocess.run(['python', 'manage.py', 'startapp', 'testapp'], check=True)
+
+    # Inject 'testapp' into INSTALLED_APPS in the project settings
+    settings_path = os.path.join('repro_project', 'settings.py')
+    with open(settings_path, 'r') as f:
+        content = f.read()
+
+    new_content = content.replace(
+        'INSTALLED_APPS = [',
+        "INSTALLED_APPS = [\n    'testapp',"
+    )
+
+    with open(settings_path, 'w') as f:
+        f.write(new_content)
+
+
+    # 3) Modify testapp/models.py to have a model with unique_together on the primary key
+    models_code = """from django.db import models\n\nclass FooBar(models.Model):\n    id = models.AutoField(primary_key=True)\n\n    class Meta:\n        unique_together = (('id',), )\n"""
+
+    with open('testapp/models.py', 'w') as f:
+        f.write(models_code)
+
+    # 4) Run makemigrations and migrate
+    subprocess.run(['python', 'manage.py', 'makemigrations', 'testapp'], check=True)
+    subprocess.run(['python', 'manage.py', 'migrate'], check=True)
+
+    # 5) Now remove the unique_together from the model and attempt to drop it.
+    models_code_no_ut = """from django.db import models\n\nclass FooBar(models.Model):\n    id = models.AutoField(primary_key=True)\n"""
+
+    with open('testapp/models.py', 'w') as f:
+        f.write(models_code_no_ut)
+
+    subprocess.run(['python', 'manage.py', 'makemigrations', 'testapp'], check=True)
+    # Attempt the final migration - historically triggers the dropping of the unique_together.
+    subprocess.run(['python', 'manage.py', 'migrate'], check=True)
+
+if __name__ == "__main__":
+    main()
