diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..f993bb9c98 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()


 def fields_for_model(model, fields=None, exclude=None, widgets=None,
diff --git a/dummyapp/__init__.py b/dummyapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/dummyapp/apps.py b/dummyapp/apps.py
new file mode 100644
index 0000000000..c0e7604943
--- /dev/null
+++ b/dummyapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class DummyappConfig(AppConfig):
+    name = 'dummyapp'
\ No newline at end of file
diff --git a/dummyapp/migrations/0001_initial.py b/dummyapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..578d591c69
--- /dev/null
+++ b/dummyapp/migrations/0001_initial.py
@@ -0,0 +1,41 @@
+# Generated by Django 3.2 on 2025-01-14 00:32
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Author',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Publisher',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('author', models.ForeignKey(limit_choices_to=models.Q(('publisher__name__icontains', 'Bart'), ('name__icontains', 'John'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='dummyapp.author')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='author',
+            name='publisher',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dummyapp.publisher'),
+        ),
+    ]
diff --git a/dummyapp/migrations/__init__.py b/dummyapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/dummyapp/models.py b/dummyapp/models.py
new file mode 100644
index 0000000000..f945d3e928
--- /dev/null
+++ b/dummyapp/models.py
@@ -0,0 +1,16 @@
+from django.db import models
+from django.db.models import Q
+
+class Publisher(models.Model):
+    name = models.CharField(max_length=100)
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE, null=True)
+
+class Book(models.Model):
+    author = models.ForeignKey(
+        Author,
+        limit_choices_to=Q(publisher__name__icontains='Bart') | Q(name__icontains='John'),
+        on_delete=models.CASCADE
+    )
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..fedf17d78f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,67 @@
+import django
+from django.conf import settings
+
+# Configure Django at import time to ensure models can be defined immediately.
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            '__main__',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+    )
+django.setup()
+
+from django.db import models
+from django.db.models import Q
+from django.forms import ModelForm
+
+class Publisher(models.Model):
+    name = models.CharField(max_length=100)
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE, null=True)
+
+class Book(models.Model):
+    # Demonstrate limit_choices_to with a join via publisher
+    author = models.ForeignKey(
+        Author,
+        limit_choices_to=Q(publisher__name__icontains='Bart') | Q(name__icontains='John'),
+        on_delete=models.CASCADE
+    )
+
+class BookForm(ModelForm):
+    class Meta:
+        model = Book
+        fields = ['author']
+
+def main():
+    from django.core.management import call_command
+    call_command('migrate', run_syncdb=True, verbosity=0)
+
+    bart_house = Publisher.objects.create(name='Bart House')
+
+    a1 = Author.objects.create(name='John Doe', publisher=bart_house)
+    a2 = Author.objects.create(name='Jane Roe', publisher=bart_house)
+
+    other_pub = Publisher.objects.create(name='Other House')
+    a3 = Author.objects.create(name='John Public', publisher=other_pub)
+
+    form = BookForm()
+    qs_list = list(form.fields['author'].queryset)
+
+    print("Authors in the form field queryset:")
+    for author in qs_list:
+        print(" -", author.name, "(Publisher:", author.publisher.name, ")")
+
+if __name__ == '__main__':
+    main()
diff --git a/reproduce2.py b/reproduce2.py
new file mode 100644
index 0000000000..dc2d2b9aa0
--- /dev/null
+++ b/reproduce2.py
@@ -0,0 +1,54 @@
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='test',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'dummyapp',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+django.setup()
+
+from django.core.management import call_command
+
+# We'll define the form here.
+from django import forms
+from dummyapp.models import Book, Publisher, Author
+
+class BookForm(forms.ModelForm):
+    class Meta:
+        model = Book
+        fields = ['author']
+
+def main():
+    call_command('makemigrations', 'dummyapp', verbosity=0)
+    call_command('migrate', run_syncdb=True, verbosity=0)
+
+    bart_house = Publisher.objects.create(name='Bart House')
+    # Create some authors that match the Q() in limit_choices_to
+    a1 = Author.objects.create(name='John Doe', publisher=bart_house)
+    a2 = Author.objects.create(name='Jane Roe', publisher=bart_house)
+
+    other_pub = Publisher.objects.create(name='Other House')
+    a3 = Author.objects.create(name='John Public', publisher=other_pub)
+
+    # Now create the form
+    form = BookForm()
+    qs_list = list(form.fields['author'].queryset)
+    print("Authors in the form field queryset:")
+    for author in qs_list:
+        print(" -", author.name, "(Publisher:", author.publisher.name, ")")
+
+if __name__ == '__main__':
+    main()
