diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 4c0e7e2a56..aeec9fae5c 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -34,7 +34,7 @@ def trim_docstring(docstring):
         return ''
     # Convert tabs to spaces and split into lines
     lines = docstring.expandtabs().splitlines()
-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())
     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
     return "\n".join(trimmed).strip()

diff --git a/scripts/repro_docutils_error.py b/scripts/repro_docutils_error.py
new file mode 100644
index 0000000000..c6bdb216aa
--- /dev/null
+++ b/scripts/repro_docutils_error.py
@@ -0,0 +1,52 @@
+import sys
+
+"""
+Reproduce docutils error in Django's admindocs when the docstring's first line is not blank.
+
+Steps:
+1. Ensure docutils is installed (pip install docutils).
+2. Run this script: python repro_docutils_error.py
+   It should show an error regarding a 'default-role' directive.
+"""
+
+import django
+from django.conf import settings
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.admindocs',
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+    ],
+    SECRET_KEY='dummy_key',
+    ROOT_URLCONF=__name__,
+)
+
+from django.urls import path
+from django.urls import include
+urlpatterns = [
+    path('admin/doc/', include('django.contrib.admindocs.urls')),
+]
+
+django.setup()
+
+from django.contrib.admindocs.utils import parse_rst
+
+# A test function whose docstring starts right away.
+def test_function():
+    """Test function docstring that starts on the first line.
+
+    Some more text here.
+    """
+    pass
+
+if __name__ == "__main__":
+    docstring = test_function.__doc__
+    try:
+        # parse_rst is used internally for rendering docstrings by admindocs.
+        result = parse_rst(docstring, default_reference_context='view', thing_being_parsed='test_function')
+        print("parse_rst succeeded. Output:\n" + result)
+    except Exception as e:
+        print("parse_rst raised an exception:\n", e)
+        sys.exit(1)
