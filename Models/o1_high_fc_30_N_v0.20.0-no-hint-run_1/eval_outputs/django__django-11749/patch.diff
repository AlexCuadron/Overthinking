diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..4212704ebe 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -129,14 +129,8 @@ def call_command(command_name, *args, **options):
             else:
                 yield opt

-    parser_actions = list(get_actions(parser))
-    # Any required arguments which are passed in via **options must be passed
-    # to parse_args().
-    parse_args += [
-        '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
-        for opt in parser_actions if opt.required and opt.dest in options
-    ]
-    defaults = parser.parse_args(args=parse_args)
+    parser_actions = list(get_actions(parser))\n\n    def is_in_required_group(action):\n        container = getattr(action, 'container', None)\n        while container is not None:\n            if getattr(container, 'required', False):\n                return True\n            container = getattr(container, 'container', None)\n        return False\n\n    # Any required arguments which are passed in via **options must be passed\n    # to parse_args().\n    parse_args += [\n        '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n        for opt in parser_actions\n        if (opt.required or is_in_required_group(opt)) and opt.dest in options\n    ]\n    defaults = parser.parse_args(args=parse_args)
+
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
     stealth_options = set(command.base_stealth_options + command.stealth_options)
diff --git a/django/core/management/commands/my_command.py b/django/core/management/commands/my_command.py
new file mode 100644
index 0000000000..b21297b9c2
--- /dev/null
+++ b/django/core/management/commands/my_command.py
@@ -0,0 +1,19 @@
+from django.core.management.base import BaseCommand
+
+class Command(BaseCommand):
+    help = "A command requiring a mutually exclusive group for shop specifications."
+
+    def add_arguments(self, parser):
+        shop_group = parser.add_mutually_exclusive_group(required=True)
+        shop_group.add_argument("--shop-id", nargs="?", type=int, default=None, dest="shop_id")
+        shop_group.add_argument("--shop", nargs="?", type=str, default=None, dest="shop_name")
+
+    def handle(self, *args, **options):
+        shop_id = options.get("shop_id")
+        shop_name = options.get("shop_name")
+        if shop_id:
+            self.stdout.write("Command run with shop_id=%s" % shop_id)
+        elif shop_name:
+            self.stdout.write("Command run with shop_name=%s" % shop_name)
+        else:
+            self.stdout.write("No shop specified.")
\ No newline at end of file
