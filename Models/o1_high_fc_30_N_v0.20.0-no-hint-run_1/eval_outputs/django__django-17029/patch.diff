diff --git a/django/apps/registry.py b/django/apps/registry.py
index 0683f3ad3c..8d89fb0455 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -377,6 +377,7 @@ class Apps:
         # the relation tree and the fields cache.
         self.get_models.cache_clear()
         if self.ready:
+            Apps.get_swappable_settings_name.cache_clear()
             # Circumvent self.get_models() to prevent that the cache is refilled.
             # This particularly prevents that an empty value is cached while cloning.
             for app_config in self.app_configs.values():
diff --git a/scripts/repro_issue.py b/scripts/repro_issue.py
new file mode 100644
index 0000000000..22723d164c
--- /dev/null
+++ b/scripts/repro_issue.py
@@ -0,0 +1,45 @@
+import sys
+import functools
+import django
+from django.conf import settings
+
+# Minimal settings.
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=["django.contrib.auth", "django.contrib.contenttypes"],
+        SECRET_KEY="dummy",
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        MIDDLEWARE=[],
+    )
+
+django.setup()
+
+from django.apps.registry import Apps
+
+# This script tries to confirm that Apps.clear_cache() does NOT currently clear
+# the cache for get_swappable_settings_name.
+# We will detect that by examining the lru_cache info before and after.
+
+def main():
+    apps = Apps(installed_apps=["django.contrib.auth", "django.contrib.contenttypes"])
+
+    # Force a cache fill by calling get_swappable_settings_name.
+    _ = apps.get_swappable_settings_name("auth.User")
+
+    info_before_clear = apps.get_swappable_settings_name.cache_info()
+    print("Cache info before clear:", info_before_clear)
+
+    # Now call clear_cache.
+    apps.clear_cache()
+
+    # See if the cache was reset.
+    info_after_clear = apps.get_swappable_settings_name.cache_info()
+    print("Cache info after clear:", info_after_clear)
+
+if __name__ == "__main__":
+    main()
