diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..232b2aa561 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -844,24 +844,28 @@ class Model(metaclass=ModelBase):
             pk_val = meta.pk.get_pk_value_on_save(self)
             setattr(self, meta.pk.attname, pk_val)
         pk_set = pk_val is not None
+        if pk_set and isinstance(pk_val, uuid.UUID):
+            pk_val = str(pk_val)
         if not pk_set and (force_update or update_fields):
             raise ValueError("Cannot force an update in save() with no primary key.")
+        if self._state.adding and pk_set and not force_insert:
+            from django.db import connections
+            pk_val_db = meta.pk.get_db_prep_value(pk_val, connection=connections[using])
+            if cls._base_manager.using(using).filter(pk=pk_val_db).exists():
+                self._state.adding = False
+                force_update = True
+                setattr(self, meta.pk.attname, pk_val_db)
         updated = False
-        # Skip an UPDATE when adding an instance and primary key has a default.
-        if (
-            not force_insert and
-            self._state.adding and
-            self._meta.pk.default and
-            self._meta.pk.default is not NOT_PROVIDED
-        ):
-            force_insert = True
+
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
         if pk_set and not force_insert:
             base_qs = cls._base_manager.using(using)
             values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
                       for f in non_pks]
             forced_update = update_fields or force_update
-            updated = self._do_update(base_qs, using, pk_val, values, update_fields,
+            from django.db import connections
+            pk_val_db = meta.pk.get_db_prep_value(pk_val, connection=connections[using])
+            updated = self._do_update(base_qs, using, pk_val_db, values, update_fields,
                                       forced_update)
             if force_update and not updated:
                 raise DatabaseError("Forced update did not affect any rows.")
diff --git a/scripts/repro_bug.py b/scripts/repro_bug.py
new file mode 100644
index 0000000000..602ff1f1f7
--- /dev/null
+++ b/scripts/repro_bug.py
@@ -0,0 +1,41 @@
+import django
+import uuid
+from django.conf import settings
+from django.db import models, connection
+
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='secret',
+    INSTALLED_APPS=['__main__'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    TIME_ZONE='UTC',
+    USE_TZ=True,
+)
+
+django.setup()
+
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Sample)
+
+Sample.objects.all().delete()
+
+s0 = Sample.objects.create()
+print('Created s0 with pk =', s0.pk)
+
+s1 = Sample(pk=s0.pk, name='Test 1')
+try:
+    s1.save()
+    print('Update done with s1')
+except Exception as e:
+    print('Encountered an error when saving s1:', e)
+
+print('All objects in DB =', list(Sample.objects.all()))
\ No newline at end of file
