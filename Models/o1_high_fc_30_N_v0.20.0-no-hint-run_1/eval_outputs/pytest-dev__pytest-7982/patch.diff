diff --git a/real_tests_dir/test_symlinked.py b/real_tests_dir/test_symlinked.py
new file mode 100644
index 000000000..8f3e11164
--- /dev/null
+++ b/real_tests_dir/test_symlinked.py
@@ -0,0 +1,2 @@
+def test_symlinked():
+    assert True
diff --git a/repro_script.py b/repro_script.py
new file mode 100644
index 000000000..729df65cc
--- /dev/null
+++ b/repro_script.py
@@ -0,0 +1,53 @@
+import os
+import subprocess
+import sys
+
+REPRO_DIR = os.path.abspath(os.path.dirname(__file__))
+TEST_DIR = os.path.join(REPRO_DIR, 'real_tests_dir')
+SYMLINK_DIR = os.path.join(REPRO_DIR, 'symlink_tests_dir')
+
+def main():
+    # Cleanup any previous run artifacts
+    if os.path.islink(SYMLINK_DIR):
+        os.unlink(SYMLINK_DIR)
+    elif os.path.exists(SYMLINK_DIR):
+        print(f"WARNING: {SYMLINK_DIR} exists and is not a symlink, remove it manually!")
+        sys.exit(1)
+    if os.path.exists(TEST_DIR):
+        subprocess.run(['rm', '-rf', TEST_DIR])
+
+    # Create a real test directory
+    os.mkdir(TEST_DIR)
+    # Add a test file
+    with open(os.path.join(TEST_DIR, 'test_symlinked.py'), 'w') as f:
+        f.write('def test_symlinked():\n')
+        f.write('    assert True\n')
+
+    # Create a symlink that points to the real test directory
+    os.symlink(TEST_DIR, SYMLINK_DIR)
+
+    # Install pytest from source in editable mode (so we pick up local changes)
+    print('Installing local pytest in editable mode...')
+    result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-e', REPRO_DIR], capture_output=True, text=True)
+    if result.returncode != 0:
+        print('Failed to install local pytest!')
+        print(result.stdout)
+        print(result.stderr)
+        sys.exit(1)
+
+    # Now run pytest in strictly the symlink folder with collect-only
+    print('Running pytest against the symlinked directory with --collect-only...')
+    cmd = [sys.executable, '-m', 'pytest', '--collect-only', SYMLINK_DIR]
+    proc = subprocess.run(cmd, capture_output=True, text=True)
+    print('RETURN CODE:', proc.returncode)
+    print('STDOUT:\n', proc.stdout)
+    print('STDERR:\n', proc.stderr)
+
+    if "collected 1 item" in proc.stdout:
+        print('SUCCESS: Symlinked tests were collected!')
+    else:
+        print('FAILURE: Symlinked test directory was not collected as expected.')
+
+if __name__ == '__main__':
+    main()
+
diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index f0bdb1481..b96cba069 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -558,7 +558,7 @@ def visit(
     entries = sorted(os.scandir(path), key=lambda entry: entry.name)
     yield from entries
     for entry in entries:
-        if entry.is_dir(follow_symlinks=False) and recurse(entry):
+        if entry.is_dir() and recurse(entry):
             yield from visit(entry.path, recurse)


diff --git a/symlink_tests_dir b/symlink_tests_dir
new file mode 120000
index 000000000..23ebdbcb6
--- /dev/null
+++ b/symlink_tests_dir
@@ -0,0 +1 @@
+/workspace/pytest-dev__pytest__6.2/real_tests_dir
\ No newline at end of file
