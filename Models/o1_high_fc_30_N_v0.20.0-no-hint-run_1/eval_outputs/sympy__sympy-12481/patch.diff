diff --git a/replicate_issue.py b/replicate_issue.py
new file mode 100644
index 0000000000..73ca1ea295
--- /dev/null
+++ b/replicate_issue.py
@@ -0,0 +1,9 @@
+from sympy.combinatorics.permutations import Permutation
+
+# This script attempts to create a Permutation from non-disjoint cycles.
+# Expected behavior: we want Permutation([[0,1],[0,1]]) to yield the identity permutation rather than raise ValueError.
+
+print('Creating Permutation([[0,1],[0,1]])...')
+p = Permutation([[0,1],[0,1]])
+print('Successfully created:', p)
+print('Applying p to [0,1] =>', [i^p for i in range(2)])
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..4854a07853 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -896,10 +896,7 @@ def __new__(cls, *args, **kwargs):

         temp = flatten(args)
         if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
+            if not is_cycle:
                 raise ValueError('there were repeated elements.')
         temp = set(temp)
