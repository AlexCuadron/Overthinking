diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index 36048601af..c90757f675 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -79,7 +79,7 @@ class Serializer(base.Serializer):
                     return self._value_from_field(value, value._meta.pk)

                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).only("pk").iterator()
+                    return getattr(obj, field.name).iterator()

             m2m_iter = getattr(obj, "_prefetched_objects_cache", {}).get(
                 field.name,
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..4a601e8773
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,67 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'test_app',  # Use this module as an app so we can define models here.
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[],
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+        SECRET_KEY='secret'
+    )
+
+from django.db import models
+from django.db.models import Manager
+
+django.setup()
+
+class TestTagManager(Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        qs = qs.select_related("master")
+        return qs
+
+class TestTagMaster(models.Model):
+    name = models.CharField(max_length=120)
+    class Meta:
+        app_label = 'test_app'
+
+class TestTag(models.Model):
+    default = Manager() # workaround: define a default manager with no select_related
+    objects = TestTagManager()
+    name = models.CharField(max_length=120)
+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)
+
+class Test(models.Model):
+    name = models.CharField(max_length=120)
+    tags = models.ManyToManyField(TestTag, blank=True)
+
+from django.core.management import call_command
+from django.core import serializers
+
+if __name__ == '__main__':
+    # Run migrations normally
+    call_command('makemigrations', interactive=False, verbosity=0)
+    call_command('migrate', interactive=False, verbosity=0)
+
+    # Create test data
+    tag_master = TestTagMaster.objects.create(name="master")
+    tag = TestTag.objects.create(name="tag", master=tag_master)
+    test = Test.objects.create(name="test")
+    test.tags.add(tag)
+    test.save()
+
+    # Serialize the data (this should raise the FieldError in the current setup)
+    data = serializers.serialize("json", [test])
+    print(data)
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..ae6f331d8b
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
\ No newline at end of file
