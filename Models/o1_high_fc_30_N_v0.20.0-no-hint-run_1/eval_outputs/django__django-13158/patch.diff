diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..7d20003ddd 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -920,6 +920,11 @@ class QuerySet:
         """Return an empty QuerySet."""
         clone = self._chain()
         clone.query.set_empty()
+        if clone.query.combinator:
+            clone.query.combinator = None
+            clone.query.combinator_all = False
+            clone.query.combined_queries = ()
+
         return clone

     ##################################################################
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/migrations/0001_initial.py b/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..d7273a5157
--- /dev/null
+++ b/myapp/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.2 on 2025-01-14 00:41
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Publication',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('publications', models.ManyToManyField(blank=True, to='myapp.Publication')),
+            ],
+        ),
+    ]
diff --git a/myapp/migrations/__init__.py b/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..36fea95bb1
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Publication(models.Model):
+    name = models.CharField(max_length=255, blank=True, null=True)
+
+class Article(models.Model):
+    publications = models.ManyToManyField(Publication, blank=True)
\ No newline at end of file
diff --git a/reproduce_union_bug.py b/reproduce_union_bug.py
new file mode 100644
index 0000000000..e975edb219
--- /dev/null
+++ b/reproduce_union_bug.py
@@ -0,0 +1,76 @@
+import os
+import django
+from django.conf import settings
+
+# Step 1: Provide minimal Django settings.
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+settings.configure(
+    SECRET_KEY='dummy',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+        'django.contrib.sessions',
+        'myapp',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': os.path.join(BASE_DIR, 'test_union_bug.sqlite3'),
+        }
+    },
+    MIDDLEWARE=[],
+)
+
+django.setup()
+
+from django.db import models
+from django import forms
+
+from myapp.models import Publication, Article
+# Define the form as in the PR description
+class ArticleForm(forms.ModelForm):
+    # Use union() in the queryset:
+    publications = forms.ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2).union(Publication.objects.filter(id__gt=5)),
+        required=False,
+    )
+
+    class Meta:
+        model = Article
+        fields = ['publications']
+
+# A small helper to run migrations.
+
+def prepare_db():
+    from django.core.management import call_command
+    call_command('makemigrations', 'contenttypes', 'auth', 'sessions', '--noinput')
+    call_command('makemigrations', 'myapp', '--noinput')
+    call_command('migrate', '--run-syncdb', '--noinput')
+
+
+def main():
+    print("Preparing test database...")
+    prepare_db()
+    print("Creating test data...")
+    # Create different IDs for testing.
+    Publication.objects.create(id=1, name='Pub #1')
+    Publication.objects.create(id=2, name='Pub #2')
+    Publication.objects.create(id=3, name='Pub #3')
+    Publication.objects.create(id=6, name='Pub #6')
+
+    # Now create a form with empty data.
+    print("Testing form submission with empty data...")
+    form = ArticleForm(data={})
+    if form.is_valid():
+        article = form.save()
+        article_pubs = article.publications.all()
+        # If the bug is present, we expect ALL publications to appear.
+        # If the bug is fixed, we should see 0 publications.
+        print("Publications after saving:", list(article_pubs.values_list('id', flat=True)))
+    else:
+        print("Form errors:", form.errors)
+
+if __name__ == '__main__':
+    main()
diff --git a/test_union_bug.sqlite3 b/test_union_bug.sqlite3
new file mode 100644
index 0000000000..64a7e7fc88
Binary files /dev/null and b/test_union_bug.sqlite3 differ
