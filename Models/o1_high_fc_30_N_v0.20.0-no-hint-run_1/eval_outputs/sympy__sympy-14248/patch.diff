diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..9f4db71b24
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,7 @@
+from sympy import *
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+expr = A - A*B - B
+print('STR: ', expr)
+pprint(expr)
+print('LATEX:', latex(expr))
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..a6b9577f4e 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1477,9 +1477,28 @@ def _print_Adjoint(self, expr):
             return r"%s^\dagger" % self._print(mat)

     def _print_MatAdd(self, expr):
-        terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
-        return tex
+        if self.order in ('old', 'none'):
+            terms = list(expr.args)
+        else:
+            terms = self._as_ordered_terms(expr)
+        result = []
+        for i, term in enumerate(terms):
+            t_str = self._print(term)
+            if i == 0:
+                if t_str.startswith('-'):
+                    t_str = t_str[1:]
+                    result.append('- ' + t_str)
+                else:
+                    result.append(t_str)
+            else:
+                if t_str.startswith('-'):
+                    t_str = t_str[1:]
+                    result.append('- ' + t_str)
+                else:
+                    result.append('+ ' + t_str)
+        return ' '.join(result)
+
+

     def _print_MatMul(self, expr):
         from sympy import Add, MatAdd, HadamardProduct
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..4451ceb3d8 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -312,8 +312,27 @@ def _print_HadamardProduct(self, expr):
             for arg in expr.args])

     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        if self.order == 'none':
+            terms = list(expr.args)
+        else:
+            terms = self._as_ordered_terms(expr)
+        PREC = precedence(expr)
+        l = []
+        for term in terms:
+            t = self._print(term)
+            if t.startswith('-'):
+                sign = '-'
+                t = t[1:]
+            else:
+                sign = '+'
+            if precedence(term) < PREC:
+                l.extend([sign, '(%s)' % t])
+            else:
+                l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ''
+        return sign + ' '.join(l)

     def _print_NaN(self, expr):
         return 'nan'
