diff --git a/repro.py b/repro.py
new file mode 100644
index 000000000..39c454ff4
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,8 @@
+import numpy as np
+from sklearn.experimental import enable_hist_gradient_boosting
+from sklearn.ensemble import HistGradientBoostingClassifier
+
+X = np.random.randn(100, 10)
+y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)
+gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)
+gbrt.fit(X, y)
diff --git a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
index ad6a5a8ca..644aef378 100644
--- a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
+++ b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
@@ -426,11 +426,15 @@ class BaseHistGradientBoosting(BaseEstimator, ABC):

         Scores are computed on validation data or on training data.
         """
+        if hasattr(self, 'classes_'):
+            y_small_train = self.classes_[y_small_train.astype(int)]
         self.train_score_.append(
             self.scorer_(self, X_binned_small_train, y_small_train)
         )

         if self._use_validation_data:
+            if hasattr(self, 'classes_'):
+                y_val = self.classes_[y_val.astype(int)]
             self.validation_score_.append(
                 self.scorer_(self, X_binned_val, y_val)
             )
@@ -438,6 +442,7 @@ class BaseHistGradientBoosting(BaseEstimator, ABC):
         else:
             return self._should_stop(self.train_score_)

+
     def _check_early_stopping_loss(self,
                                    raw_predictions,
                                    y_train,
