diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059ee..693eee36a7 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ class DecimalField(Field):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (decimal.InvalidOperation, TypeError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/reproduce_decimal_issue.py b/reproduce_decimal_issue.py
new file mode 100644
index 0000000000..7d71a85662
--- /dev/null
+++ b/reproduce_decimal_issue.py
@@ -0,0 +1,34 @@
+import decimal
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='dummy',
+        INSTALLED_APPS=[],
+        USE_I18N=False,
+        USE_L10N=False,
+        USE_TZ=False
+    )
+
+django.setup()
+
+from django.core import exceptions
+from django.db.models.fields import DecimalField
+
+# A small script to reproduce passing a dict to a DecimalField, which should currently raise a TypeError
+# Instead, we want it to raise a ValidationError.
+
+def test_dict_value():
+    field = DecimalField(max_digits=5, decimal_places=2)
+    value = {'a': 123}
+    print("Testing DecimalField.to_python() with:", value)
+    try:
+        result = field.to_python(value)
+        print("Result:", result)
+    except Exception as e:
+        print(f"Exception raised: {type(e).__name__}: {e}")
+
+if __name__ == '__main__':
+    test_dict_value()
