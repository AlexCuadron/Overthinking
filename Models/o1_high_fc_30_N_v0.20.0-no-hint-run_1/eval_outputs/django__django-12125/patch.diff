diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..a4de88688a 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -90,13 +90,36 @@ class DeconstructableSerializer(BaseSerializer):

     @staticmethod
     def _serialize_path(path):
-        module, name = path.rsplit(".", 1)
-        if module == "django.db.models":
-            imports = {"from django.db import models"}
-            name = "models.%s" % name
+        import importlib
+        splitted = path.split('.')
+        found = False
+        for i in reversed(range(1, len(splitted)+1)):
+            maybe_module = '.'.join(splitted[:i])
+            try:
+                importlib.import_module(maybe_module)
+                found = True
+                break
+            except ImportError:
+                pass
+        if found:
+            if maybe_module == 'django.db.models':
+                imports = {'from django.db import models'}
+                remainder = splitted[i:]
+                if remainder:
+                    name = 'models.' + '.'.join(remainder)
+                else:
+                    name = 'models'
+            else:
+                imports = {f"import {maybe_module}"}
+                name = path
         else:
-            imports = {"import %s" % module}
-            name = path
+            module, local_name = path.rsplit('.', 1)
+            if module == 'django.db.models':
+                imports = {'from django.db import models'}
+                name = f"models.{local_name}"
+            else:
+                imports = {f"import {module}"}
+                name = path
         return name, imports

     def serialize(self):
@@ -269,7 +292,7 @@ class TypeSerializer(BaseSerializer):
             if module == builtins.__name__:
                 return self.value.__name__, set()
             else:
-                return "%s.%s" % (module, self.value.__name__), {"import %s" % module}
+                return "%s.%s" % (module, self.value.__qualname__), {"import %s" % module}


 class UUIDSerializer(BaseSerializer):
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/migrations/0001_initial.py b/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..54156ce73f
--- /dev/null
+++ b/myapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.1 on 2025-01-13 17:27
+
+from django.db import migrations, models
+import myapp.models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='A',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field', myapp.models.Outer.Inner(max_length=20)),
+            ],
+        ),
+    ]
diff --git a/myapp/migrations/__init__.py b/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..277f3eb218
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..9a428ae14f
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,50 @@
+import os
+import django
+from django.core.management import call_command
+
+# We'll create a minimal Django settings file and a small app within this repo.
+# Then we will run makemigrations to reproduce the bug described.
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+SETTINGS_PATH = os.path.join(BASE_DIR, 'test_settings.py')
+APP_DIR = os.path.join(BASE_DIR, 'myapp')
+MODELS_PATH = os.path.join(APP_DIR, 'models.py')
+MIGRATIONS_DIR = os.path.join(APP_DIR, 'migrations')
+
+os.makedirs(APP_DIR, exist_ok=True)
+os.makedirs(MIGRATIONS_DIR, exist_ok=True)
+
+# Create test_settings.py
+with open(SETTINGS_PATH, 'w') as f:
+    f.write('''SECRET_KEY = "test_key"
+INSTALLED_APPS = ["myapp"]
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": ":memory:",
+    }
+}
+
+# Minimally disable some check for migrations.
+USE_TZ = False
+''')
+
+# Create models.py with an inner class that extends models.CharField
+models_code = '''from django.db import models
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+'''
+
+with open(MODELS_PATH, 'w') as f:
+    f.write(models_code)
+
+# Run makemigrations
+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'
+django.setup()
+
+call_command('makemigrations', 'myapp')
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..f7b6eaf561
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,11 @@
+SECRET_KEY = "test_key"
+INSTALLED_APPS = ["myapp"]
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": ":memory:",
+    }
+}
+
+# Minimally disable some check for migrations.
+USE_TZ = False
