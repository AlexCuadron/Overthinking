diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..69d77148e5 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -522,6 +522,8 @@ class NDArithmeticMixin:
             return deepcopy(operand.mask)
         elif operand is None:
             return deepcopy(self.mask)
+        elif operand.mask is None:
+            return deepcopy(self.mask)
         else:
             # Now lets calculate the resulting mask (operation enforces copy)
             return handle_mask(self.mask, operand.mask, **kwds)
diff --git a/test_mask_bug.py b/test_mask_bug.py
new file mode 100644
index 0000000000..a18b78675f
--- /dev/null
+++ b/test_mask_bug.py
@@ -0,0 +1,26 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0],
+                  [1, 0, 1],
+                  [0, 1, 0]])
+mask = np.array([[0, 1, 64],
+                 [8, 0, 1],
+                 [2, 1, 0]])
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("# multiply no mask by constant (no mask * no mask)")
+print(nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask)  # returns nothing, no mask
+
+print("# multiply no mask by itself (no mask * no mask)")
+print(nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)  # returns nothing, no mask
+
+print("# multiply mask by constant (mask * no mask)")
+print(nref_mask.multiply(1., handle_mask=np.bitwise_or).mask)
+
+print("# multiply mask by itself (mask * mask)")
+print(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask)
+
+print("# multiply mask by no mask (mask * no mask)")
+print(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)
