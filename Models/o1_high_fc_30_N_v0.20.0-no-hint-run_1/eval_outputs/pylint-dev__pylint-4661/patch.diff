diff --git a/doc/faq.rst b/doc/faq.rst
index c817855f8..c580f141f 100644
--- a/doc/faq.rst
+++ b/doc/faq.rst
@@ -73,16 +73,16 @@ or if "directory" is in the python path.

 "pylint /whatever/directory/mymodule.py" will work if either:

-       - "/whatever/directory" is in the python path
+        - "/whatever/directory" is in the python path

-       - your cwd is "/whatever/directory"
+        - your cwd is "/whatever/directory"

-       - "directory" is a python package and "/whatever" is in the python
+        - "directory" is a python package and "/whatever" is in the python
           path

         - "directory" is an implicit namespace package and is in the python path.

-       - "directory" is a python package and your cwd is "/whatever" and so
+        - "directory" is a python package and your cwd is "/whatever" and so
           on...

 3.2 Where is the persistent data stored to compare between successive runs?
@@ -93,10 +93,10 @@ localized using the following rules:

 * value of the PYLINTHOME environment variable if set

-* ".pylint.d" subdirectory of the user's home directory if it is found
-       (not always findable on Windows platforms)
+* If "XDG_DATA_HOME" is set, we use $XDG_DATA_HOME/pylint
+        (not always findable on Windows platforms)

-* ".pylint.d" directory in the current directory
+* Otherwise, we use $HOME/.local/share/pylint

 3.3 How do I find the option name (for pylintrc) corresponding to a specific command line option?
 --------------------------------------------------------------------------------------------------------
@@ -107,7 +107,7 @@ the rc file

 For example::

-       pylint --disable=bare-except,invalid-name --class-rgx='[A-Z][a-z]+' --generate-rcfile
+        pylint --disable=bare-except,invalid-name --class-rgx='[A-Z][a-z]+' --generate-rcfile

 3.4 I'd rather not run Pylint from the command line. Can I integrate it with my editor?
 ---------------------------------------------------------------------------------------
@@ -132,8 +132,8 @@ Yes, you can disable or enable (globally disabled) messages at the
 module level by adding the corresponding option in a comment at the
 top of the file: ::

-       # pylint: disable=wildcard-import, method-hidden
-       # pylint: enable=too-many-lines
+        # pylint: disable=wildcard-import, method-hidden
+        # pylint: enable=too-many-lines

 4.3 How can I tell Pylint to never check a given module?
 --------------------------------------------------------
diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 84774d0e3..31e3c9bf6 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -60,10 +60,10 @@ if "PYLINTHOME" in os.environ:
     PYLINT_HOME = os.environ["PYLINTHOME"]
     if USER_HOME == "~":
         USER_HOME = os.path.dirname(PYLINT_HOME)
-elif USER_HOME == "~":
-    PYLINT_HOME = ".pylint.d"
+elif "XDG_DATA_HOME" in os.environ:
+    PYLINT_HOME = os.path.join(os.environ["XDG_DATA_HOME"], "pylint")
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    PYLINT_HOME = os.path.join(USER_HOME, ".local", "share", "pylint")


 def _get_pdata_path(base_name, recurs):
diff --git a/reproduce_xdg_issue.py b/reproduce_xdg_issue.py
new file mode 100644
index 000000000..075e5983d
--- /dev/null
+++ b/reproduce_xdg_issue.py
@@ -0,0 +1,48 @@
+import os
+import subprocess
+import sys
+
+here = os.path.abspath(os.path.dirname(__file__))
+
+def main():
+    # We'll run pylint on one of the Python files in the repo
+    target_file = os.path.join(here, 'pylint', '__main__.py')
+
+    # Clear any pre-existing directories
+    if os.path.exists(os.path.join(os.path.expanduser('~'), '.pylint.d')):
+        print('Cleaning up existing ~/.pylint.d directory...')
+        import shutil
+        shutil.rmtree(os.path.join(os.path.expanduser('~'), '.pylint.d'))
+
+    if 'XDG_DATA_HOME' in os.environ:
+        data_home = os.environ['XDG_DATA_HOME']
+        pylint_data_dir = os.path.join(data_home, 'pylint')
+        if os.path.exists(pylint_data_dir):
+            print('Cleaning up existing XDG_DATA_HOME/pylint directory...')
+            import shutil
+            shutil.rmtree(pylint_data_dir)
+
+    # We'll run pylint in a subprocess to see where it stores its data
+    print('Running pylint on', target_file)
+    try:
+        subprocess.run([sys.executable, '-m', 'pylint', target_file], check=False)
+    except Exception as e:
+        print('Error running pylint:', e)
+
+    # Now let's see if .pylint.d got created in HOME or the alternate location
+    homedir_pylint_d = os.path.join(os.path.expanduser('~'), '.pylint.d')
+    if os.path.exists(homedir_pylint_d):
+        print('~/.pylint.d was created, indicating that the old behavior is still present.')
+    else:
+        print('No ~/.pylint.d was created!')
+
+    if 'XDG_DATA_HOME' in os.environ:
+        data_home = os.environ['XDG_DATA_HOME']
+        pylint_data_dir = os.path.join(data_home, 'pylint')
+        if os.path.exists(pylint_data_dir):
+            print('Persistent data was found in:', pylint_data_dir)
+        else:
+            print('No persistent data was found in:', pylint_data_dir)
+
+if __name__ == '__main__':
+    main()
