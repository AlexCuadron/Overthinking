diff --git a/django/core/validators.py b/django/core/validators.py
index 92394a7eae..226f997c1d 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -94,7 +94,7 @@ class URLValidator(RegexValidator):

     regex = _lazy_re_compile(
         r'^(?:[a-z0-9\.\-\+]*)://'  # scheme is validated separately
-        r'(?:\S+(?::\S*)?@)?'  # user:pass authentication
+        r'(?:[^:/@\s]+(?::[^:/@\s]+)?@)?'  # user:pass authentication
         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'
         r'(?::\d{2,5})?'  # port
         r'(?:[/?#][^\s]*)?'  # resource path
diff --git a/reproduce_url_bug.py b/reproduce_url_bug.py
new file mode 100644
index 0000000000..83aca9f299
--- /dev/null
+++ b/reproduce_url_bug.py
@@ -0,0 +1,24 @@
+import sys
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+# This script is meant to demonstrate the current behavior of the URLValidator.
+# According to RFC 1738, certain characters like ':', '@', or '/' inside
+# the username and password fields must be encoded. Currently, Django's URLValidator
+# may incorrectly accept these characters unencoded. The PR description has an example:
+#   http://foo/bar@example.com
+# which should NOT pass validation.
+
+
+def test_invalid_url():
+    val = URLValidator()
+    test_url = "http://foo/bar@example.com"
+    try:
+        val(test_url)
+        print("ERROR: Validator incorrectly accepted an invalid URL: {}".format(test_url))
+    except ValidationError:
+        print("SUCCESS: Validator correctly rejected invalid URL: {}".format(test_url))
+
+if __name__ == "__main__":
+    print("Running reproduction script...\n")
+    test_invalid_url()
