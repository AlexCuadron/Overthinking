diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..1595d7ea62 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -229,11 +229,12 @@ class HttpResponseBase:
         # Handle string types -- we can't rely on force_bytes here because:
         # - Python attempts str conversion first
         # - when self._charset != 'utf-8' it re-encodes the content
+        if isinstance(value, memoryview):
+            return value.tobytes()
         if isinstance(value, bytes):
             return bytes(value)
         if isinstance(value, str):
             return bytes(value.encode(self.charset))
-        # Handle non-string types.
         return str(value).encode(self.charset)

     # These methods partially implement the file-like object interface.
diff --git a/test_memoryview.py b/test_memoryview.py
new file mode 100644
index 0000000000..1caeef6b59
--- /dev/null
+++ b/test_memoryview.py
@@ -0,0 +1,16 @@
+from django.conf import settings
+settings.configure()
+
+from django.http import HttpResponse
+
+print("Testing how HttpResponse handles memoryview object...")
+
+response = HttpResponse(memoryview(b"My Content"))
+print("response.content:", response.content)
+
+# We expect b'My Content' as the final result.
+expected = b"My Content"
+if response.content != expected:
+    raise ValueError(f"Expected {expected}, but got {response.content}")
+else:
+    print("Pass: Memoryview is handled correctly!")
