diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..6944a39c33
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,5 @@
+from sympy import S
+
+print('S(0.0) == S.false =>', S(0.0) == S.false)
+print('S.false == S(0.0) =>', S.false == S(0.0))
+
diff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py
index fbcba1f8d4..a7b6b92e2f 100644
--- a/sympy/logic/boolalg.py
+++ b/sympy/logic/boolalg.py
@@ -393,6 +393,17 @@ class when they evaluate to false.
     def __bool__(self):
         return False

+    def __eq__(self, other):
+        # Make the comparison symmetric with the numeric side:
+        # we want S(false) == S(0.0) to return True, just like S(0.0) == S(false) does.
+        # If other is numeric and zero, treat it as equal to this BooleanFalse.
+        if self is other:
+            return True
+        from sympy.core.numbers import Number
+        if isinstance(other, Number) and other.is_zero:
+            return True
+        return False
+
     def __hash__(self):
         return hash(False)
