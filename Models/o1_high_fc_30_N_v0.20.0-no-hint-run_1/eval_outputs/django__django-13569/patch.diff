diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 04e430a42e..2516f5bf87 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -129,6 +129,8 @@ class SQLCompiler:
             # Skip References to the select clause, as all expressions in the
             # select clause are already part of the group by.
             if not is_ref:
+                if hasattr(expr, 'expression') and isinstance(expr.expression, Random):
+                    continue
                 expressions.extend(expr.get_group_by_cols())
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
diff --git a/reproduce_random_error.py b/reproduce_random_error.py
new file mode 100644
index 0000000000..5189136cee
--- /dev/null
+++ b/reproduce_random_error.py
@@ -0,0 +1,34 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Count
+
+def main():
+    settings.configure(
+        INSTALLED_APPS=["testapp"],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        SECRET_KEY="test",
+    )
+    django.setup()
+
+    from testapp.models import Thing, Related
+
+    from django.core.management import call_command
+    call_command("makemigrations", interactive=False, verbosity=0)
+    call_command("migrate", run_syncdb=True, verbosity=0)
+
+    t = Thing.objects.create()
+    [Related.objects.create(thing=t) for _ in range(2)]
+
+    print("order_by('rc'):", list(Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')))
+    print("order_by('related'):", list(Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')))
+    print("order_by('?'):", list(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')))
+
+if __name__ == "__main__":
+    main()
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..7100945a3b
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'testapp'
\ No newline at end of file
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..9ef0abf554
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.2 on 2025-01-14 00:49
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Thing',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Related',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('thing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testapp.thing')),
+            ],
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..b79911168d
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Thing(models.Model):
+    pass
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
