diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index aaab1730b7..4626321922 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -5,7 +5,7 @@ import operator
 from functools import reduce

 from django.core.exceptions import EmptyResultSet, FullResultSet
-from django.db.models.expressions import Case, When
+from django.db.models.expressions import Case, When, Value
 from django.db.models.lookups import Exact
 from django.utils import tree
 from django.utils.functional import cached_property
@@ -129,14 +129,16 @@ class WhereNode(tree.Node):
             # Convert if the database doesn't support XOR:
             #   a XOR b XOR c XOR ...
             # to:
-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1
-            lhs = self.__class__(self.children, OR)
+            #   sum(a,b,c,...) % 2 == 1 (i.e. an odd number of arguments is true)
+            from django.db.models import IntegerField
+            from django.db.models.functions import Mod
             rhs_sum = reduce(
                 operator.add,
-                (Case(When(c, then=1), default=0) for c in self.children),
+                (Case(When(c, then=1), default=0, output_field=IntegerField()) for c in self.children),
             )
-            rhs = Exact(1, rhs_sum)
-            return self.__class__([lhs, rhs], AND, self.negated).as_sql(
+            rhs_mod_2 = Mod(rhs_sum, 2, output_field=IntegerField())
+            rhs = Exact(1, rhs_mod_2)
+            return self.__class__([rhs], AND, self.negated).as_sql(
                 compiler, connection
             )

diff --git a/xor_repro.py b/xor_repro.py
new file mode 100644
index 0000000000..c4dd9c3a4a
--- /dev/null
+++ b/xor_repro.py
@@ -0,0 +1,40 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.db.models import Q
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'xor_test_app.apps.XorTestAppConfig',
+    ],
+    SECRET_KEY='test',
+)
+
+django.setup()
+
+from xor_test_app.models import Client
+
+# This will force fallback logic (pretending XOR not supported)
+from django.db import connection
+connection.features.supports_logical_xor = False
+
+# Migrate so we can create the table
+from django.core.management import call_command
+call_command('makemigrations', 'xor_test_app', verbosity=0)
+call_command('migrate', verbosity=0)
+
+# Insert a record
+Client.objects.create(id=37, name='test')
+
+print('Count Q(id=37):', Client.objects.filter(Q(id=37)).count(), '(should be 1)')
+print('Count Q(id=37)^Q(id=37):', Client.objects.filter(Q(id=37) ^ Q(id=37)).count(), '(should be 0)')
+print('Count Q(id=37)^Q(id=37)^Q(id=37):', Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37)).count(), '(expected 1)')
+print('Count Q(id=37)^Q(id=37)^Q(id=37)^Q(id=37):', Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count(), '(expected 0)')
+print('Count Q(id=37)^Q(id=37)^Q(id=37)^Q(id=37)^Q(id=37):', Client.objects.filter(Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37) ^ Q(id=37)).count(), '(expected 1)')
diff --git a/xor_test_app/__init__.py b/xor_test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/xor_test_app/apps.py b/xor_test_app/apps.py
new file mode 100644
index 0000000000..73bd008c88
--- /dev/null
+++ b/xor_test_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class XorTestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'xor_test_app'
diff --git a/xor_test_app/migrations/0001_initial.py b/xor_test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..3576bac145
--- /dev/null
+++ b/xor_test_app/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 5.0.dev20230608071750 on 2025-01-14 02:15
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Client",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=100)),
+            ],
+        ),
+    ]
diff --git a/xor_test_app/migrations/__init__.py b/xor_test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/xor_test_app/models.py b/xor_test_app/models.py
new file mode 100644
index 0000000000..b4703fefe9
--- /dev/null
+++ b/xor_test_app/models.py
@@ -0,0 +1,4 @@
+from django.db import models
+
+class Client(models.Model):
+    name = models.CharField(max_length=100)
\ No newline at end of file
