diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..481fa48806 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -44,6 +44,22 @@ class BoundField:
         """
         id_ = self.field.widget.attrs.get('id') or self.auto_id
         attrs = {'id': id_} if id_ else {}
+    def value(self):
+        return self.form._field_data_value(self.field, self.html_name)
+
+    def _did_change(self):
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                return True
+        return self.field.has_changed(initial_value, self.value())
         attrs = self.build_widget_attrs(attrs)
         return [
             BoundWidget(self.field.widget, widget, self.form.renderer)
@@ -213,6 +229,14 @@ class BoundField:
     def initial(self):
         data = self.form.get_initial_for_field(self.field, self.name)
         # If this is an auto-generated default date, nix the microseconds for
+        if callable(data):
+            data = data()
+        from django.core.exceptions import ValidationError
+        try:
+            data = self.field.to_python(data)
+        except ValidationError:
+            pass
+
         # standardized handling. See #22502.
         if (isinstance(data, (datetime.datetime, datetime.time)) and
                 not self.field.widget.supports_microseconds):
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..c41494a992 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -388,10 +388,11 @@ class BaseForm:

     def _clean_fields(self):
         for name, field in self.fields.items():
-            if field.disabled:
-                value = self.get_initial_for_field(field, name)
+            bf = self[name]
+            if bf.field.disabled:
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.value()
             try:
                 if isinstance(field, FileField):
                     initial = self.get_initial_for_field(field, name)
@@ -436,27 +437,7 @@ class BaseForm:

     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name in self.fields if self[name]._did_change()]

     @property
     def media(self):
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..d72257db9a
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,31 @@
+import django
+import sys
+from django import forms
+from django.conf import settings
+
+# Configure Django (only needed if certain parts of Django are used that
+# require settings). We'll do minimal config.
+settings.configure()
+django.setup()
+
+class MyForm(forms.Form):
+    # This replicates the scenario: a field with a callable initial.
+    # We want to see if _clean_fields() returns a different value from BoundField.initial.
+    my_field = forms.DateTimeField(initial=lambda: '2020-01-01 12:00', disabled=False)
+
+if __name__ == "__main__":
+    # Provide form data that exactly matches the callable initial.
+    form_data = {'my_field': '2020-01-01 12:00'}
+    f = MyForm(data=form_data)
+    f.is_valid()  # triggers _clean_fields()
+
+    bf_initial = f['my_field'].initial
+    cleaned_data_val = f.cleaned_data.get('my_field')
+
+    print("BoundField initial:", bf_initial)
+    print("cleaned_data['my_field']:", cleaned_data_val)
+
+    if cleaned_data_val != bf_initial:
+        print("BUG: _clean_fields() value doesn't match BoundField.initial")
+    else:
+        print("No Bug: values match.")
