diff --git a/reproduce_partitions_error.py b/reproduce_partitions_error.py
new file mode 100644
index 0000000000..c0b0aacde8
--- /dev/null
+++ b/reproduce_partitions_error.py
@@ -0,0 +1,17 @@
+import sys
+from sympy.utilities.iterables import partitions
+
+def check_partitions(n=6, k=2):
+    print(f"Checking partitions for n={n}, k={k}...")
+    part_list = list(partitions(n, k=k))
+    print("Partitions returned:")
+    for idx, p in enumerate(part_list):
+        print(f"[{idx}]", p)
+    print("\nChecking if any dictionaries are the same instance...")
+    for i, p in enumerate(part_list):
+        for j in range(i+1, len(part_list)):
+            if p is part_list[j]:
+                print(f"WARNING: dictionaries at indices {i} and {j} are the same object!")
+
+if __name__ == "__main__":
+    check_partitions(6, 2)
diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index dd36dea304..3e46d5bf16 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):
         keys.append(r)
     room = m - q - bool(r)
     if size:
-        yield sum(ms.values()), ms
+        yield sum(ms.values()), ms.copy()
     else:
-        yield ms
+        yield ms.copy()

     while keys != [1]:
         # Reuse any 1's.
@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):
             break
         room -= need
         if size:
-            yield sum(ms.values()), ms
+            yield sum(ms.values()), ms.copy()
         else:
-            yield ms
+            yield ms.copy()


 def ordered_partitions(n, m=None, sort=True):
