diff --git a/django/db/models/query.py b/django/db/models/query.py
index 1544beb613..8bf05621d1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -932,6 +932,10 @@ class QuerySet:
         clone.query.clear_ordering(True)
         clone.query.clear_limits()
         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)
+        for subq in clone.query.combined_queries:
+            subq.clear_ordering(True)
+            subq.clear_limits()
+
         clone.query.combinator = combinator
         clone.query.combinator_all = all
         return clone
diff --git a/test_union.py b/test_union.py
new file mode 100644
index 0000000000..46b8118bba
--- /dev/null
+++ b/test_union.py
@@ -0,0 +1,49 @@
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['testapp'],
+    )
+
+django.setup()
+
+from django.db import connection, models
+from django.db.models import Q
+
+from testapp.models import Dimension
+
+def setup_db():
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Dimension)
+    Dimension.objects.create(id=10, name='boeksoort', order=1)
+    Dimension.objects.create(id=11, name='grootboek', order=2)
+    Dimension.objects.create(id=12, name='kenteken', order=3)
+    Dimension.objects.create(id=13, name='activa', order=4)
+    Dimension.objects.create(id=14, name='foo', order=5)
+    Dimension.objects.create(id=15, name='bar', order=6)
+    Dimension.objects.create(id=16, name='baz', order=7)
+    Dimension.objects.create(id=17, name='qux', order=8)
+    Dimension.objects.create(id=18, name='quux', order=9)
+
+def test_union_breaks():
+    print('All IDs:', list(Dimension.objects.values_list('id', flat=True)))
+    qs = (
+        Dimension.objects.filter(pk__in=[10, 11])
+        .union(Dimension.objects.filter(pk__in=[16, 17]).order_by('order'))
+    )
+    print('Union QS:', list(qs))
+    ordered_pks = list(qs.order_by().values_list('pk', flat=True))
+    print('Ordered PKs:', ordered_pks)
+    reeval = list(qs)
+    print('Re-evaluated QS:', reeval)
+
+if __name__ == '__main__':
+    setup_db()
+    test_union_breaks()
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..dc24defcca
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestappConfig(AppConfig):
+    name = 'testapp'
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..ff1bf9bbc2
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+
+class Dimension(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    order = models.IntegerField(default=0)
+
+    class Meta:
+        app_label = 'testapp'
\ No newline at end of file
