diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..47966dfb2e 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -214,6 +214,10 @@ class Collector:
         if collect_related:
             if keep_parents:
                 parents = set(model._meta.get_parent_list())
+            from collections import defaultdict
+            from django.db.models import Q
+
+            combined_fields = []
             for related in get_candidate_relations_to_delete(model._meta):
                 # Preserve parent reverse relationships if keep_parents=True.
                 if keep_parents and related.model in parents:
@@ -221,28 +225,37 @@ class Collector:
                 field = related.field
                 if field.remote_field.on_delete == DO_NOTHING:
                     continue
-                batches = self.get_del_batches(new_objs, field)
-                for batch in batches:
-                    sub_objs = self.related_objects(related, batch)
-                    if self.can_fast_delete(sub_objs, from_field=field):
+                combined_fields.append(related)
+
+            by_model_ondelete = defaultdict(list)
+            for r in combined_fields:
+                by_model_ondelete[(r.related_model, r.field.remote_field.on_delete)].append(r)
+
+            for (rel_model, ondelete_fn), rels in by_model_ondelete.items():
+                for batch in self.get_del_batches(new_objs, rels[0].field):
+                    combined_q = Q()
+                    for r in rels:
+                        combined_q |= Q(**{"%s__in" % r.field.name: batch})
+                    sub_objs = rel_model._base_manager.using(self.using).filter(combined_q)
+                    if self.can_fast_delete(sub_objs, from_field=rels[0].field):
                         self.fast_deletes.append(sub_objs)
                     else:
-                        related_model = related.related_model
-                        # Non-referenced fields can be deferred if no signal
-                        # receivers are connected for the related model as
-                        # they'll never be exposed to the user. Skip field
-                        # deferring when some relationships are select_related
-                        # as interactions between both features are hard to
-                        # get right. This should only happen in the rare
-                        # cases where .related_objects is overridden anyway.
-                        if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):
-                            referenced_fields = set(chain.from_iterable(
-                                (rf.attname for rf in rel.field.foreign_related_fields)
-                                for rel in get_candidate_relations_to_delete(related_model._meta)
-                            ))
-                            sub_objs = sub_objs.only(*tuple(referenced_fields))
-                        if sub_objs:
-                            field.remote_field.on_delete(self, field, sub_objs, self.using)
+                        for r in rels:
+                            batches_fb = self.get_del_batches(new_objs, r.field)
+                            for bf in batches_fb:
+                                sub_objs_fb = self.related_objects(r, bf)
+                                if self.can_fast_delete(sub_objs_fb, from_field=r.field):
+                                    self.fast_deletes.append(sub_objs_fb)
+                                else:
+                                    related_model = r.related_model
+                                    if not (sub_objs_fb.query.select_related or self._has_signal_listeners(related_model)):
+                                        referenced_fields = set(chain.from_iterable(
+                                            (rf.attname for rf in rel.field.foreign_related_fields)
+                                            for rel in get_candidate_relations_to_delete(related_model._meta)
+                                        ))
+                                        sub_objs_fb = sub_objs_fb.only(*tuple(referenced_fields))
+                                    if sub_objs_fb:
+                                        r.field.remote_field.on_delete(self, r.field, sub_objs_fb, self.using)
             for field in model._meta.private_fields:
                 if hasattr(field, 'bulk_related_objects'):
                     # It's something like generic foreign key.
