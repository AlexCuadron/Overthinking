diff --git a/bug_repro.py b/bug_repro.py
new file mode 100644
index 0000000000..09a6647380
--- /dev/null
+++ b/bug_repro.py
@@ -0,0 +1,37 @@
+from sympy import Abs, Symbol, Rational, imageset, ConditionSet, S, asin, Lambda, Interval, Contains, Integers
+
+from sympy.solvers.solveset import solveset
+
+x = Symbol('x', real=True)
+y = Symbol('y', real=True)
+
+print("Solveset of Abs(x) - y, then substitute y=1/3:")
+res = solveset(Abs(x) - y, x, domain=S.Reals)
+print(res)
+print(res.subs(y, Rational(1, 3)))
+
+# Construct an ImageSet for 2*n*pi + asin(y)
+expr = imageset(Lambda(Symbol('n', real=True), 2*Symbol('n', real=True)*S.Pi + asin(y)), Integers)
+
+cs = ConditionSet(x, Contains(y, Interval(-1, 1)), expr)
+print("\nConditionSet with imageset:")
+print(cs)
+
+print("\nAfter substituting y=1/3:")
+print(cs.subs(y, Rational(1, 3)))
+
+print(res)
+print(res.subs(y, Rational(1, 3)))
+
+# Construct an ImageSet for 2*n*pi + asin(y)
+expr = imageset(
+    Lambda(Symbol('n', real=True), 2*Symbol('n', real=True)*S.Pi + asin(y)),
+    Integers
+)
+
+cs = ConditionSet(x, Contains(y, Interval(-1, 1)), expr)
+print("\nConditionSet with imageset:")
+print(cs)
+
+print("\nAfter substituting y=1/3:")
+print(cs.subs(y, Rational(1, 3)))
diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py
index 118eda6f77..c8c70929d9 100644
--- a/sympy/sets/conditionset.py
+++ b/sympy/sets/conditionset.py
@@ -243,7 +243,7 @@ def _eval_subs(self, old, new):
         cond = self.condition.subs(old, new)
         base = self.base_set.subs(old, new)
         if cond is S.true:
-            return ConditionSet(new, Contains(new, base), base)
+            return base
         return self.func(self.sym, cond, base)

     def dummy_eq(self, other, symbol=None):
