diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..bcc64a8d33 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        name_str = self.value.name
+        imports = {"import %s" % module}
+        return f"{module}.{enum_class.__name__}['{name_str}']", imports


 class FloatSerializer(BaseSimpleSerializer):
diff --git a/myproj/__init__.py b/myproj/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproj/apps.py b/myproj/apps.py
new file mode 100644
index 0000000000..092cecd46c
--- /dev/null
+++ b/myproj/apps.py
@@ -0,0 +1,3 @@
+from django.apps import AppConfig
+class MyprojConfig(AppConfig):
+    name = "myproj"
diff --git a/myproj/migrations/0001_initial.py b/myproj/migrations/0001_initial.py
new file mode 100644
index 0000000000..2ba8f008a3
--- /dev/null
+++ b/myproj/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.1 on 2025-01-13 17:16
+
+from django.db import migrations, models
+import myproj.models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Item',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.CharField(default=myproj.models.Status['GOOD'], max_length=128)),
+            ],
+        ),
+    ]
diff --git a/myproj/migrations/__init__.py b/myproj/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproj/models.py b/myproj/models.py
new file mode 100644
index 0000000000..e9a9f7e0a4
--- /dev/null
+++ b/myproj/models.py
@@ -0,0 +1,10 @@
+from django.db import models
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+class Status(Enum):
+    GOOD = _("Good")
+    BAD = _("Bad")
+    def __str__(self):
+        return self.name
+class Item(models.Model):
+    status = models.CharField(default=Status.GOOD, max_length=128)
diff --git a/myproj/settings.py b/myproj/settings.py
new file mode 100644
index 0000000000..d4dceb7dbc
--- /dev/null
+++ b/myproj/settings.py
@@ -0,0 +1,5 @@
+SECRET_KEY = "secret"
+INSTALLED_APPS = ["django.contrib.contenttypes", "django.contrib.auth", "myproj"]
+DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}}
+MIDDLEWARE = []
+ROOT_URLCONF = "myproj.urls"
diff --git a/myproj/urls.py b/myproj/urls.py
new file mode 100644
index 0000000000..637600f58a
--- /dev/null
+++ b/myproj/urls.py
@@ -0,0 +1 @@
+urlpatterns = []
diff --git a/scripts/reproduce_enum_issue.py b/scripts/reproduce_enum_issue.py
new file mode 100644
index 0000000000..2af35b276d
--- /dev/null
+++ b/scripts/reproduce_enum_issue.py
@@ -0,0 +1,67 @@
+import os
+import shutil
+
+def main():
+    # remove any leftover data from previous runs
+    if os.path.exists('myproj'):
+        shutil.rmtree('myproj')
+
+    # create a minimal django project
+    os.mkdir('myproj')
+    with open('myproj/__init__.py', 'w') as f:
+        pass
+
+    # minimal settings for this project
+    with open('myproj/settings.py', 'w') as f:
+        f.write('SECRET_KEY = "secret"\n')
+        f.write('INSTALLED_APPS = ["django.contrib.contenttypes", "django.contrib.auth", "myproj"]\n')
+        f.write('DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}}\n')
+        f.write('MIDDLEWARE = []\n')
+        f.write('ROOT_URLCONF = "myproj.urls"\n')
+
+    with open('myproj/urls.py', 'w') as f:
+        f.write('urlpatterns = []\n')
+
+    # create a model using an Enum
+    with open('myproj/models.py', 'w') as f:
+        f.write('from django.db import models\n')
+        f.write('from enum import Enum\n')
+        f.write('from django.utils.translation import gettext_lazy as _\n')
+        f.write('class Status(Enum):\n')
+        f.write('    GOOD = _(\"Good\")\n')
+        f.write('    BAD = _(\"Bad\")\n')
+        f.write('    def __str__(self):\n')
+        f.write('        return self.name\n')
+        f.write('class Item(models.Model):\n')
+        f.write('    status = models.CharField(default=Status.GOOD, max_length=128)\n')
+
+    # create an AppConfig
+    with open('myproj/apps.py', 'w') as f:
+        f.write('from django.apps import AppConfig\n')
+        f.write('class MyprojConfig(AppConfig):\n')
+        f.write('    name = "myproj"\n')
+
+    # set environment to use these settings
+    import sys
+    sys.path.insert(0, os.getcwd())
+    os.environ["DJANGO_SETTINGS_MODULE"] = "myproj.settings"
+
+    import django
+    django.setup()
+    from django.core.management import call_command
+
+    # make the migrations
+    call_command('makemigrations', 'myproj')
+
+    # read the resulting migration file
+    migration_file_path = os.path.join('myproj','migrations','0001_initial.py')
+    if os.path.exists(migration_file_path):
+        with open(migration_file_path, 'r') as f:
+            content = f.read()
+        print("\n============= Generated Migration =============")
+        print(content)
+    else:
+        print("\nNo migration file was generated.")
+
+if __name__ == "__main__":
+    main()
