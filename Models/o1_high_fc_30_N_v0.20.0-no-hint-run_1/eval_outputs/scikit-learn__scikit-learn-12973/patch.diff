diff --git a/bug_repro.py b/bug_repro.py
new file mode 100644
index 000000000..5a2be79ca
--- /dev/null
+++ b/bug_repro.py
@@ -0,0 +1,21 @@
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+if __name__ == "__main__":
+    # Generate random data
+    X = np.random.rand(10, 5)
+    y = np.random.rand(10)
+
+    print("Memory address of X before fitting:", id(X))
+
+    # Create an instance with copy_X=False
+    model = LassoLarsIC(copy_X=False)
+    # Fit the model without overriding copy_X
+    model.fit(X, y)
+
+    print("Memory address of X after fitting:", id(X))
+
+    if id(X) == id(X):
+        print("If copy_X is truly False, the memory address for X should remain the same.")
+    else:
+        print("If copy_X was overwritten internally, the memory address of X might be changed.")
diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..2af503617 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True

-    def fit(self, X, y, copy_X=True):
+    def fit(self, X, y, copy_X=None):
         """Fit the model using X, y as training data.

         Parameters
@@ -1490,7 +1490,8 @@ class LassoLarsIC(LassoLars):
         y : array-like, shape (n_samples,)
             target values. Will be cast to X's dtype if necessary

-        copy_X : boolean, optional, default True
+        copy_X : boolean or None, optional, default None
+            If None, uses the copy_X parameter set during initialization.
             If ``True``, X will be copied; else, it may be overwritten.

         Returns
@@ -1498,6 +1499,8 @@ class LassoLarsIC(LassoLars):
         self : object
             returns an instance of self.
         """
+        if copy_X is None:
+            copy_X = self.copy_X
         X, y = check_X_y(X, y, y_numeric=True)

         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(
