diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 5e3c7cab82..cbf4fd8296 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -533,6 +533,7 @@ _connector_combinations = [
             Combinable.SUB,
             Combinable.MUL,
             Combinable.DIV,
+            Combinable.MOD,
         )
     },
     # Bitwise operators.
diff --git a/django/db/models/functions/mixins.py b/django/db/models/functions/mixins.py
index caf20e131d..3f0abe11ff 100644
--- a/django/db/models/functions/mixins.py
+++ b/django/db/models/functions/mixins.py
@@ -15,7 +15,7 @@ class FixDecimalInputMixin:
         clone.set_source_expressions(
             [
                 Cast(expression, output_field)
-                if isinstance(expression.output_field, FloatField)
+                if isinstance(expression.output_field, (FloatField, IntegerField))
                 else expression
                 for expression in self.get_source_expressions()
             ]
diff --git a/models_app/__init__.py b/models_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/models_app/models.py b/models_app/models.py
new file mode 100644
index 0000000000..93f0b1ab66
--- /dev/null
+++ b/models_app/models.py
@@ -0,0 +1,6 @@
+from django.db import models
+from decimal import Decimal
+
+class Foo(models.Model):
+    decimal_field = models.DecimalField(max_digits=5, decimal_places=2)
+    int_field = models.IntegerField()
\ No newline at end of file
diff --git a/reproduce_mod_bug.py b/reproduce_mod_bug.py
new file mode 100644
index 0000000000..c7d99399ac
--- /dev/null
+++ b/reproduce_mod_bug.py
@@ -0,0 +1,30 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from decimal import Decimal
+
+db = {
+    'ENGINE': 'django.db.backends.sqlite3',
+    'NAME': ':memory:',
+}
+settings.configure(
+    SECRET_KEY='test',
+    DATABASES={'default': db},
+    INSTALLED_APPS=['models_app'],
+)
+django.setup()
+
+from models_app.models import Foo
+from decimal import Decimal
+
+if __name__ == '__main__':
+    from django.core.management import call_command
+    call_command('migrate', run_syncdb=True, verbosity=0)
+
+    Foo.objects.create(decimal_field=Decimal('10.00'), int_field=3)
+
+from django.db.models import F
+result_instance = Foo.objects.annotate(mod_result=F('decimal_field') % F('int_field')).first()
+print('Mod result:', result_instance.mod_result, type(result_instance.mod_result))
+
