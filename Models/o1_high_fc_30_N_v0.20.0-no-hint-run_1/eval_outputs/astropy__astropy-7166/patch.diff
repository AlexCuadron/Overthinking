diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..741c26c86c 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,15 +528,26 @@ class InheritDocstrings(type):
                 not key.startswith('_'))

         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
-
+            if is_public_member(key):
+                # if it's a function with no doc, inherit from base
+                if inspect.isfunction(val) and val.__doc__ is None:
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None and super_method.__doc__:
+                            val.__doc__ = super_method.__doc__
+                elif isinstance(val, property) and val.__doc__ is None:
+                elif isinstance(val, property) and val.__doc__ is None:
+                    # Minimal fix to inherit docstrings for properties.
+                    for base in cls.__mro__[1:]:
+                        super_prop = getattr(base, key, None)
+                        if isinstance(super_prop, property) and super_prop.__doc__:
+                            dct[key] = property(val.fget, val.fset, val.fdel, super_prop.__doc__)
+                            break
+                    for base in cls.__mro__[1:]:
+                        super_prop = getattr(base, key, None)
+                        if isinstance(super_prop, property) and super_prop.__doc__:
+                            dct[key] = property(val.fget, val.fset, val.fdel, super_prop.__doc__)
+                            break
         super().__init__(name, bases, dct)


diff --git a/reproduce_property_inherit.py b/reproduce_property_inherit.py
new file mode 100644
index 0000000000..64acd30c28
--- /dev/null
+++ b/reproduce_property_inherit.py
@@ -0,0 +1,17 @@
+
+from astropy.utils.misc import InheritDocstrings
+
+class BaseWithProperty(metaclass=InheritDocstrings):
+    @property
+    def prop(self):
+        """Docstring for property in the Base class"""
+        return 42
+
+class DerivedWithProperty(BaseWithProperty):
+    @property
+    def prop(self):
+        # No docstring here deliberately
+        return 99
+
+if __name__ == "__main__":
+    print("DerivedWithProperty.prop.__doc__:", DerivedWithProperty.prop.__doc__)
\ No newline at end of file
diff --git a/reproduce_property_inherit_fixed.py b/reproduce_property_inherit_fixed.py
new file mode 100644
index 0000000000..ae213c933f
--- /dev/null
+++ b/reproduce_property_inherit_fixed.py
@@ -0,0 +1,26 @@
+import sys
+import os
+# add local astropy to sys.path
+here = os.path.dirname(__file__)
+# note that the astropy code is located in /workspace/astropy__astropy__1.3/astropy
+# so we insert /workspace/astropy__astropy__1.3 into sys.path
+parent = os.path.abspath(here)
+if parent not in sys.path:
+    sys.path.insert(0, parent)
+
+from astropy.utils.misc import InheritDocstrings
+
+class BaseWithProperty(metaclass=InheritDocstrings):
+    @property
+    def prop(self):
+        """Docstring for property in the Base class"""
+        return 42
+
+class DerivedWithProperty(BaseWithProperty):
+    @property
+    def prop(self):
+        # No docstring here deliberately
+        return 99
+
+if __name__ == "__main__":
+    print("DerivedWithProperty.prop.__doc__:", DerivedWithProperty.prop.__doc__)
\ No newline at end of file
