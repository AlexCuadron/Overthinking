diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb33329f..99a55b9e58 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -56,6 +56,8 @@ class ReadOnlyPasswordHashField(forms.Field):

     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
+
         super().__init__(*args, **kwargs)

     def bound_data(self, data, initial):
@@ -163,11 +165,10 @@ class UserChangeForm(forms.ModelForm):
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related('content_type')

-    def clean_password(self):
-        # Regardless of what the user provides, return the initial value.
-        # This is done here, rather than on the field, because the
-        # field does not have access to the initial value
-        return self.initial.get('password')
+        if 'date_joined' in self.fields:
+            self.fields['date_joined'].required = False
+
+


 class AuthenticationForm(forms.Form):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..840bf40b7c
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,39 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+def main():
+    if not settings.configured:
+        settings.configure(
+            INSTALLED_APPS=[
+                'django.contrib.auth',
+                'django.contrib.contenttypes',
+            ],
+            SECRET_KEY='test',
+            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        )
+    django.setup()
+    call_command('migrate', interactive=False, verbosity=0)
+
+    from django.contrib.auth.models import User
+    from django.contrib.auth.forms import UserChangeForm
+
+    user = User.objects.create_user(username='testuser', password='secret')
+    form = UserChangeForm(
+        instance=user,
+        data={
+            'username': 'testuser2',
+            'password': 'newsecret'
+        }
+    )
+
+    if form.is_valid():
+        user2 = form.save()
+        print('Form is valid. Saved user password is now:', user2.password)
+    else:
+        print('Form is invalid:', form.errors)
+
+if __name__ == '__main__':
+    main()
+
