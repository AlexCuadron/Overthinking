diff --git a/current_working_dir b/current_working_dir
new file mode 100644
index 0000000000..1262b3ef01
--- /dev/null
+++ b/current_working_dir
@@ -0,0 +1,31 @@
+import matplotlib.pyplot as plt
+from matplotlib.widgets import SpanSelector
+import os
+
+current_working_dir = os.getcwd()
+file_path = os.path.join("/workspace/matplotlib__matplotlib__3.4", current_working_dir)
+
+# Create the file if it doesn't exist
+if not os.path.exists(file_path):
+    open(file_path, 'a').close()
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+ax.set_xlim(10, 20)  # Explicitly set axis limits
+ax.set_xticks([10, 20])  # Only show the relevant ticks
+
+def onselect(e):
+    print(f"Span selected: {e.x0} to {e.x1}")
+
+# Fix axis limits to remain unchanged
+ax.callbacks.connect('xlim_changed', lambda Limits: ax.set_xlim(*Limits))
+ax.callbacks.connect('ylim_changed', lambda Limits: ax.set_ylim(*Limits))
+
+# Turn off interactive mode to prevent Matplotlib from adjusting limits automatically
+plt.ioff()
+
+# Add a dummy line to force a redraw
+ax.plot([10, 20], [10, 20])
+
+ss = SpanSelector(ax, onselect, "horizontal", interactive=False)
+plt.show()
\ No newline at end of file
diff --git a/matplotlib.py b/matplotlib.py
new file mode 100644
index 0000000000..868548411a
--- /dev/null
+++ b/matplotlib.py
@@ -0,0 +1,11 @@
+import matplotlib.pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.set_xlim(10, 20)
+ax.set_ylim(10, 20)
+ax.plot([10, 20], [10, 20])
+def onselect(e):
+    print(f"Span selected: {e.x0} to {e.x1}")
+ss = SpanSelector(ax, onselect, "horizontal", interactive=True)
+plt.show()
\ No newline at end of file
