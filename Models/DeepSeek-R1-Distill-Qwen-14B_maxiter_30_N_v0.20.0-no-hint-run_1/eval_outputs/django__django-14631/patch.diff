diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..0651d1f81d 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -387,6 +387,400 @@ class BaseForm:
         self._post_clean()

     def _clean_fields(self):
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = bound_field.value
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+        except ValidationError as e:
+            self.add_error(name, e)
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        if field.disabled:
+            value = self.get_initial_for_field(field, name)
+        else:
+            value = self._field_data_value(field, self.add_prefix(name))
+        try:
+            if isinstance(field, FileField):
+                initial = self.get_initial_for_field(field, name)
+                value = field.clean(value, initial)
+            else:
+                value = field.clean(value)
+            self.cleaned_data[name] = value
+    for name, field in self.fields.items():
+        bound_field = field.get_bound_field(self, name)
+        value = bound_field.value
+        # Clean the value using the field's clean method
+        cleaned_value = field.clean(value)
+        cleaned_data[name] = cleaned_value
         for name, field in self.fields.items():
             if field.disabled:
                 value = self.get_initial_for_field(field, name)
