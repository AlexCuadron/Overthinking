diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..9f73f767ab 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -168,6 +168,131 @@ def floatformat(text, arg=-1):
     except (ValueError, OverflowError, InvalidOperation):
         return input_val

+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
+    if precision == 0:
+        quantized = value.to_integral_value()
+        return str(quantized.normalize())
+    if precision < 0:
+        raise ValueError("precision must be >= 0")
     if not m and p < 0:
         return mark_safe(
             formats.number_format(
