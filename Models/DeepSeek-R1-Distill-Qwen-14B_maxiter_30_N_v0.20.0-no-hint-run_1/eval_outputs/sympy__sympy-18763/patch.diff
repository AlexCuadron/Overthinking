diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index b1e85ead5f..7a669aafbe 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -21,6 +21,177 @@ class Expr(Basic, EvalfMixin):
     used only for argument storage and expression manipulation, i.e.
     pattern matching, substitutions, etc).

+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
     See Also
     ========

diff --git a/test_subs.py b/test_subs.py
new file mode 100644
index 0000000000..990202891e
--- /dev/null
+++ b/test_subs.py
@@ -0,0 +1,5 @@
+from sympy import Subs
+from sympy.abc import x, y
+
+expr = 3 * Subs(-x + y, (x,), (1,))
+print(expr)
\ No newline at end of file
