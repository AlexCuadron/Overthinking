+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/core/expr.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_subs.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 70381f282f2d9d039da860e391fe51649df2779d
Merge: 30440b0a13 6cd5423b80
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Fri Dec 20 22:59:54 2019 +0000

    Merge pull request #18084 from oscarbenjamin/pr_lambdify_fix
    
    Fix lambdify tests

+ git diff 70381f282f2d9d039da860e391fe51649df2779d
diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index b1e85ead5f..7a669aafbe 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -21,6 +21,177 @@ class Expr(Basic, EvalfMixin):
     used only for argument storage and expression manipulation, i.e.
     pattern matching, substitutions, etc).
 
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+
+    def _latex(self, printer):
+        return printer._print("\\left(" + self + "\\right)")
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
+    See Also
+    ========
+    sympy.core.basic.Basic
+    """
+    is_scalar = True  # self derivative is 1
+
+    @property
+    def _diff_wrt(self):
+        """Return True if one can differentiate with respect to this
+        object, else False.
+
+        Subclasses such as Symbol, Function and Derivative return True
+        to enable derivatives wrt them. The implementation in Derivative
+        handles the differentiation with respect to a variable.
+
+        If this property is not defined, it will return False.
+        """
+        return False
+    """
+    Base class for algebraic expressions.
+
+    Everything that requires arithmetic operations to be defined
+    should subclass this class, instead of Basic (which should be
+    used only for argument storage and expression manipulation, i.e.
+    pattern matching, substitutions, etc).
+
     See Also
     ========
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.5.1) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.5.1
    Uninstalling sympy-1.5.1:
      Successfully uninstalled sympy-1.5.1
  DEPRECATION: Legacy editable install of sympy==1.5.1 from file:///testbed (setup.py develop) is deprecated. pip 25.1 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 70381f282f2d9d039da860e391fe51649df2779d sympy/printing/tests/test_latex.py
Updated 0 paths from d8c7327b0d
+ git apply -v -
Checking patch sympy/printing/tests/test_latex.py...
Applied patch sympy/printing/tests/test_latex.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/printing/tests/test_latex.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.21-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        23004996
hash randomization: on (PYTHONHASHSEED=3580674997)

sympy/printing/tests/test_latex.py[147] 
test_printmethod E
test_latex_basic E
test_latex_builtins ok
test_latex_SingularityFunction E
test_latex_cycle ok
test_latex_permutation ok
test_latex_Float E
test_latex_vector_expressions E
test_latex_symbols E
test_latex_symbols_failing f
test_latex_functions E
test_function_subclass_different_name E
test_hyper_printing E
test_latex_bessel E
test_latex_fresnel E
test_latex_brackets E
test_latex_indexed E
test_latex_derivatives E
test_latex_subs E
test_latex_integrals E
test_latex_sets E
test_latex_SetExpr E
test_latex_Range E
test_latex_sequences E
test_latex_FourierSeries E
test_latex_FormalPowerSeries E
test_latex_intervals E
test_latex_AccumuBounds E
test_latex_emptyset ok
test_latex_universalset ok
test_latex_commutator E
test_latex_union E
test_latex_intersection E
test_latex_symmetric_difference E
test_latex_Complement ok
test_latex_productset E
test_set_operators_parenthesis E
test_latex_Complexes ok
test_latex_Naturals ok
test_latex_Naturals0 ok
test_latex_Integers ok
test_latex_ImageSet E
test_latex_ConditionSet E
test_latex_ComplexRegion E
test_latex_Contains E
test_latex_sum E
test_latex_product E
test_latex_limits E
test_latex_log E
test_issue_3568 E
test_latex E
test_latex_dict E
test_latex_list E
test_latex_rational E
test_latex_inverse E
test_latex_DiracDelta E
test_latex_Heaviside E
test_latex_KroneckerDelta E
test_latex_LeviCivita E
test_mode E
test_latex_mathieu E
test_latex_Piecewise E
test_latex_Matrix E
test_latex_matrix_with_functions E
test_latex_NDimArray E
test_latex_mul_symbol E
test_latex_issue_4381 E
test_latex_issue_4576 E
test_latex_pow_fraction E
test_noncommutative E
test_latex_order E
test_latex_Lambda E
test_latex_PolyElement E
test_latex_FracElement E
test_latex_Poly E
test_latex_Poly_order E
test_latex_ComplexRootOf E
test_latex_RootSum E
test_settings ok
test_latex_numbers E
test_latex_euler E
test_lamda E
test_custom_symbol_names E
test_matAdd E
test_matMul E
test_latex_MatrixSlice E
test_latex_RandomDomain E
test_PrettyPoly E
test_integral_transforms E
test_PolynomialRingBase E
test_categories E
test_Modules E
test_QuotientRing E
test_Tr E
test_Adjoint E
test_Transpose E
test_Hadamard E
test_ElementwiseApplyFunction E
test_ZeroMatrix E
test_OneMatrix E
test_Identity E
test_boolean_args_order E
test_imaginary ok
test_builtins_without_args ok
test_latex_greek_functions E
test_translate ok
test_other_symbols E
test_modifiers E
test_greek_symbols E
test_fancyset_symbols ok
test_builtin_without_args_mismatched_names f
test_builtin_no_args ok
test_issue_6853 E
test_Mul E
test_Pow E
test_issue_7180 E
test_issue_8409 E
test_issue_8470 E
test_issue_7117 E
test_issue_15439 E
test_issue_2934 E
test_issue_10489 E
test_issue_12886 E
test_issue_13559 E
test_issue_13651 E
test_latex_UnevaluatedExpr E
test_MatrixElement_printing E
test_MatrixSymbol_printing E
test_KroneckerProduct_printing E
test_Quaternion_latex_printing E
test_TensorProduct_printing E
test_WedgeProduct_printing E
test_issue_14041 E
test_issue_9216 E
test_latex_printer_tensor E
test_multiline_latex E
test_issue_15353 E
test_trace E
test_print_basic E
test_MatrixSymbol_bold E
test_imaginary_unit E
test_text_re_im E
test_DiffGeomMethods E
test_unit_printing E
test_issue_17092 E
test_latex_decimal_separator E
test_issue_17857 ok                                                       [FAIL]


________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_printmethod ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 65, in test_printmethod
    assert latex(R(x)) == "foo(x)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/printing/tests/test_latex.py", line 64, in _latex
    return "foo(%s)" % printer._print(self.args[0])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_basic ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 74, in test_latex_basic
    assert latex(1 + x) == "x + 1"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
______ sympy/printing/tests/test_latex.py:test_latex_SingularityFunction _______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 171, in test_latex_SingularityFunction
    assert latex(SingularityFunction(x, 4, 5)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "SingularityFunction") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_Float ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 203, in test_latex_Float
    assert latex(Float(1.0e100)) == r"1.0 \cdot 10^{100}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Float") to str
________________________________________________________________________________
_______ sympy/printing/tests/test_latex.py:test_latex_vector_expressions _______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 212, in test_latex_vector_expressions
    assert latex(Cross(A.i, A.j*A.x*3+A.k)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
  File "/testbed/sympy/core/decorators.py", line 129, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/vector/basisdependent.py", line 23, in __radd__
    return self._add_func(other, self)
  File "/testbed/sympy/vector/vector.py", line 389, in __new__
    obj = BasisDependentAdd.__new__(cls, *args, **options)
  File "/testbed/sympy/vector/basisdependent.py", line 192, in __new__
    raise TypeError(str(arg) +
TypeError: \left( cannot be interpreted correctly
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_symbols _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 261, in test_latex_symbols
    assert latex(tau) == r"\tau"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_functions ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 296, in test_latex_functions
    assert latex(exp(x)) == "e^{x}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "exp") to str
________________________________________________________________________________
___ sympy/printing/tests/test_latex.py:test_function_subclass_different_name ___
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 551, in test_function_subclass_different_name
    assert latex(mygamma(x)) == r"\operatorname{mygamma}{\left(x \right)}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "mygamma") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_hyper_printing ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 558, in test_hyper_printing
    assert latex(meijerg(Tuple(pi, pi, x), Tuple(1),
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "meijerg") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_bessel _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 577, in test_latex_bessel
    assert latex(besselj(n, z**2)**k) == r'J^{k}_{n}\left(z^{2}\right)'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_fresnel _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 593, in test_latex_fresnel
    assert latex(fresnels(z)) == r'S\left(z\right)'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "fresnels") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_brackets ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 600, in test_latex_brackets
    assert latex((-1)**x) == r"\left(-1\right)^{x}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_indexed _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 606, in test_latex_indexed
    symbol_latex = latex(Psi_symbol * conjugate(Psi_symbol))
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_derivatives ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 621, in test_latex_derivatives
    assert latex(diff(x**3, x, evaluate=False)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Derivative") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_subs ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 676, in test_latex_subs
    assert latex(Subs(x*y, (
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Subs") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_integrals ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 682, in test_latex_integrals
    assert latex(Integral(log(x), x)) == r"\int \log{\left(x \right)}\, dx"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Integral") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_sets ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 713, in test_latex_sets
    assert latex(s([x*y, x**2])) == r"\left\{x^{2}, x y\right\}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1895, in _print_set
    items = ", ".join(map(self._print, items))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_SetExpr _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 728, in test_latex_SetExpr
    assert latex(se) == r"SetExpr\left(\left[1, 3\right]\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/sets/setexpr.py", line 27, in _latex
    return r"SetExpr\left({0}\right)".format(printer._print(self.set))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2011, in _print_Interval
    (left, self._print(i.start), self._print(i.end), right)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "One") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_Range ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 732, in test_latex_Range
    assert latex(Range(1, 51)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1923, in _print_Range
    r", ".join(self._print(el) for el in printset) +
  File "/testbed/sympy/printing/latex.py", line 1923, in <genexpr>
    r", ".join(self._print(el) for el in printset) +
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "One") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_sequences ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 755, in test_latex_sequences
    assert latex(s1) == latex_str
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1988, in _print_SeqFormula
    r", ".join(self._print(el) for el in printset) +
  File "/testbed/sympy/printing/latex.py", line 1988, in <genexpr>
    r", ".join(self._print(el) for el in printset) +
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Zero") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_latex_FourierSeries __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 810, in test_latex_FourierSeries
    assert latex(fourier_series(x, (x, -pi, pi))) == latex_str
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "FourierSeries") to str
________________________________________________________________________________
_______ sympy/printing/tests/test_latex.py:test_latex_FormalPowerSeries ________
Traceback (most recent call last):
  File "/testbed/sympy/core/sympify.py", line 385, in sympify
    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)
  File "/testbed/sympy/parsing/sympy_parser.py", line 1003, in parse_expr
    code = stringify_expr(s, local_dict, global_dict, transformations)
  File "/testbed/sympy/parsing/sympy_parser.py", line 887, in stringify_expr
    for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/tokenize.py", line 521, in _tokenize
    raise TokenError("EOF in multi-line statement", (lnum, 0))
tokenize.TokenError: ('EOF in multi-line statement', (2, 0))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 815, in test_latex_FormalPowerSeries
    assert latex(fps(log(1 + x))) == latex_str
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
  File "/testbed/sympy/series/formal.py", line 1415, in __radd__
    return self.__add__(other)
  File "/testbed/sympy/series/formal.py", line 1377, in __add__
    other = sympify(other)
  File "/testbed/sympy/core/sympify.py", line 387, in sympify
    raise SympifyError('could not parse %r' % a, exc)
sympy.core.sympify.SympifyError: Sympify of expression 'could not parse '\\left('' failed, because of exception being raised:
TokenError: ('EOF in multi-line statement', (2, 0))
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_intervals ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 820, in test_latex_intervals
    assert latex(Interval(0, 0)) == r"\left\{0\right\}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1888, in _print_FiniteSet
    return self._print_set(items)
  File "/testbed/sympy/printing/latex.py", line 1895, in _print_set
    items = ", ".join(map(self._print, items))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Zero") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_AccumuBounds __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 830, in test_latex_AccumuBounds
    assert latex(AccumBounds(0, 1)) == r"\left\langle 0, 1\right\rangle"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "AccumulationBounds") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_commutator ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 848, in test_latex_commutator
    assert latex(comm.doit()) == r"- (A B - B A)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_union ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 852, in test_latex_union
    assert latex(Union(Interval(0, 1), Interval(2, 3))) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2019, in _print_Union
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 2019, in <listcomp>
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2011, in _print_Interval
    (left, self._print(i.start), self._print(i.end), right)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Zero") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_intersection __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 859, in test_latex_intersection
    assert latex(Intersection(Interval(0, 1), Interval(x, y))) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2029, in _print_Intersection
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 2029, in <listcomp>
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2011, in _print_Interval
    (left, self._print(i.start), self._print(i.end), right)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Zero") to str
________________________________________________________________________________
______ sympy/printing/tests/test_latex.py:test_latex_symmetric_difference ______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 864, in test_latex_symmetric_difference
    assert latex(SymmetricDifference(Interval(2, 5), Interval(4, 7),
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2034, in _print_SymmetricDifference
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 2034, in <listcomp>
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2011, in _print_Interval
    (left, self._print(i.start), self._print(i.end), right)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Integer") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_productset ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 878, in test_latex_productset
    assert latex(line**2) == r"%s^{2}" % latex(line)
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2040, in _print_ProductSet
    return self.parenthesize(p.sets[0], prec) + "^{%d}" % len(p.sets)
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2011, in _print_Interval
    (left, self._print(i.start), self._print(i.end), right)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Zero") to str
________________________________________________________________________________
______ sympy/printing/tests/test_latex.py:test_set_operators_parenthesis _______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 903, in test_set_operators_parenthesis
    assert latex(Intersection(A, U2, evaluate=False)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2029, in _print_Intersection
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 2029, in <listcomp>
    args_str = [self.parenthesize(i, prec) for i in u.args]
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1888, in _print_FiniteSet
    return self._print_set(items)
  File "/testbed/sympy/printing/latex.py", line 1895, in _print_set
    items = ", ".join(map(self._print, items))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_ImageSet ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1021, in test_latex_ImageSet
    assert latex(ImageSet(Lambda(x, x**2), S.Naturals)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2069, in _print_ImageSet
    xinys = r" , ".join(r"%s \in %s" % xy for xy in xys)
  File "/testbed/sympy/printing/latex.py", line 2069, in <genexpr>
    xinys = r" , ".join(r"%s \in %s" % xy for xy in xys)
  File "/testbed/sympy/printing/latex.py", line 2068, in <genexpr>
    xys = ((self._print(x), self._print(y)) for x, y in zip(sig, s.base_sets))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_ConditionSet __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1036, in test_latex_ConditionSet
    assert latex(ConditionSet(x, Eq(x**2, 1), S.Reals)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2073, in _print_ConditionSet
    vars_print = ', '.join([self._print(var) for var in Tuple(s.sym)])
  File "/testbed/sympy/printing/latex.py", line 2073, in <listcomp>
    vars_print = ', '.join([self._print(var) for var in Tuple(s.sym)])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_latex_ComplexRegion __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1043, in test_latex_ComplexRegion
    assert latex(ComplexRegion(Interval(3, 5)*Interval(4, 6))) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2085, in _print_ComplexRegion
    vars_print = ', '.join([self._print(var) for var in s.variables])
  File "/testbed/sympy/printing/latex.py", line 2085, in <listcomp>
    vars_print = ', '.join([self._print(var) for var in s.variables])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Dummy") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_Contains ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1052, in test_latex_Contains
    assert latex(Contains(x, S.Naturals)) == r"x \in \mathbb{N}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2092, in _print_Contains
    return r"%s \in %s" % tuple(self._print(a) for a in e.args)
  File "/testbed/sympy/printing/latex.py", line 2092, in <genexpr>
    return r"%s \in %s" % tuple(self._print(a) for a in e.args)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_sum _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1056, in test_latex_sum
    assert latex(Sum(x*y**2, (x, -2, 2), (y, -5, 5))) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Sum") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_product _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1068, in test_latex_product
    assert latex(Product(x*y**2, (x, -2, 2), (y, -5, 5))) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Product") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_limits _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1080, in test_latex_limits
    assert latex(Limit(x, x, oo)) == r"\lim_{x \to \infty} x"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Limit") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_log _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1097, in test_latex_log
    assert latex(log(x)) == r"\log{\left(x \right)}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "log") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_3568 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1112, in test_issue_3568
    assert latex(y) in [r'\beta + x', r'x + \beta']
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
________________ sympy/printing/tests/test_latex.py:test_latex _________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1120, in test_latex
    assert latex((2*tau)**Rational(7, 2)) == "8 \\sqrt{2} \\tau^{\\frac{7}{2}}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_dict ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1130, in test_latex_dict
    assert latex(d) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1825, in _print_dict
    items.append("%s : %s" % (self._print(key), self._print(val)))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "One") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_list ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1139, in test_latex_list
    assert latex(ll) == r'\left[ \omega_{1}, \  a, \  \alpha\right]'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1814, in _print_list
    r", \  ".join([self._print(i) for i in expr])
  File "/testbed/sympy/printing/latex.py", line 1814, in <listcomp>
    r", \  ".join([self._print(i) for i in expr])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_rational ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1144, in test_latex_rational
    assert latex(-Rational(1, 2)) == "- \\frac{1}{2}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Rational") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_inverse _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1155, in test_latex_inverse
    assert latex(1/x) == "\\frac{1}{x}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_DiracDelta ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1160, in test_latex_DiracDelta
    assert latex(DiracDelta(x)) == r"\delta\left(x\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "DiracDelta") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_Heaviside ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1170, in test_latex_Heaviside
    assert latex(Heaviside(x)) == r"\theta\left(x\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Heaviside") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_latex_KroneckerDelta _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1175, in test_latex_KroneckerDelta
    assert latex(KroneckerDelta(x, y)) == r"\delta_{x y}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "KroneckerDelta") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_LeviCivita ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1184, in test_latex_LeviCivita
    assert latex(LeviCivita(x, y, z)) == r"\varepsilon_{x y z}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "LeviCivita") to str
________________________________________________________________________________
_________________ sympy/printing/tests/test_latex.py:test_mode _________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1194, in test_mode
    assert latex(expr) == 'x + y'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_mathieu _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1205, in test_latex_mathieu
    assert latex(mathieuc(x, y, z)) == r"C\left(x, y, z\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "mathieuc") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_Piecewise ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1216, in test_latex_Piecewise
    assert latex(p) == "\\begin{cases} x & \\text{for}\\: x < 1 \\\\x^{2} &" \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Piecewise") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_Matrix _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1237, in test_latex_Matrix
    assert latex(M) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1512, in _print_MatrixBase
    lines.append(" & ".join([self._print(i) for i in expr[line, :]]))
  File "/testbed/sympy/printing/latex.py", line 1512, in <listcomp>
    lines.append(" & ".join([self._print(i) for i in expr[line, :]]))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
_____ sympy/printing/tests/test_latex.py:test_latex_matrix_with_functions ______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1269, in test_latex_matrix_with_functions
    assert latex(M) == expected
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1512, in _print_MatrixBase
    lines.append(" & ".join([self._print(i) for i in expr[line, :]]))
  File "/testbed/sympy/printing/latex.py", line 1512, in <listcomp>
    lines.append(" & ".join([self._print(i) for i in expr[line, :]]))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "sin") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_NDimArray ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1280, in test_latex_NDimArray
    assert latex(M) == "x"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1661, in _print_NDimArray
    return self._print(expr[()])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_mul_symbol ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1319, in test_latex_mul_symbol
    assert latex(4*4**x, mul_symbol='times') == "4 \\times 4^{x}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_issue_4381 ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1330, in test_latex_issue_4381
    assert latex(y) == r'4 \cdot 4^{\log{\left(2 \right)}}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_issue_4576 ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1335, in test_latex_issue_4576
    assert latex(Symbol("beta_13_2")) == r"\beta_{13 2}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_pow_fraction __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1360, in test_latex_pow_fraction
    assert 'e^{-x}' in latex(exp(-x)/2).replace(' ', '')  # Remove Whitespace
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_noncommutative ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1373, in test_noncommutative
    assert latex(A*B*C**-1) == "A B C^{-1}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_order ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1381, in test_latex_order
    assert latex(expr, order='lex') == "x^{3} + x^{2} y + 3 x y^{3} + y^{4}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_Lambda _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1388, in test_latex_Lambda
    assert latex(Lambda(x, x + 1)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Lambda") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_PolyElement ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1399, in test_latex_PolyElement
    assert latex(x - 1) == r"x - 1"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2217, in _print_PolyElement
    return poly.str(self, PRECEDENCE, "{%s}^{%d}", mul_symbol)
  File "/testbed/sympy/polys/rings.py", line 812, in str
    symbol = printer.parenthesize(symbols[i], prec_atom, strict=True)
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_FracElement ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1422, in test_latex_FracElement
    assert latex(x - 1) == r"x - 1"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2221, in _print_FracElement
    return self._print(frac.numer)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2217, in _print_PolyElement
    return poly.str(self, PRECEDENCE, "{%s}^{%d}", mul_symbol)
  File "/testbed/sympy/polys/rings.py", line 812, in str
    symbol = printer.parenthesize(symbols[i], prec_atom, strict=True)
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_latex_Poly ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1445, in test_latex_Poly
    assert latex(Poly(x**2 + 2 * x, x)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Poly") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_latex_Poly_order ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1454, in test_latex_Poly_order
    assert latex(Poly([a, 1, b, 2, c, 3], x)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Poly") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_latex_ComplexRootOf __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1467, in test_latex_ComplexRootOf
    assert latex(rootof(x**5 + x + 3, 0)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "ComplexRootOf") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_RootSum _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1472, in test_latex_RootSum
    assert latex(RootSum(x**5 + x + 3, sin)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "RootSum") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_latex_numbers _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1481, in test_latex_numbers
    assert latex(catalan(n)) == r"C_{n}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "catalan") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_latex_euler ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1506, in test_latex_euler
    assert latex(euler(n)) == r"E_{n}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "euler") to str
________________________________________________________________________________
________________ sympy/printing/tests/test_latex.py:test_lamda _________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1512, in test_lamda
    assert latex(Symbol('lamda')) == r"\lambda"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_custom_symbol_names __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1519, in test_custom_symbol_names
    assert latex(x) == "x"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
________________ sympy/printing/tests/test_latex.py:test_matAdd ________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1532, in test_matAdd
    assert l._print(C - 2*B) in ['- 2 B + C', 'C -2 B']
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "MatAdd") to str
________________________________________________________________________________
________________ sympy/printing/tests/test_latex.py:test_matMul ________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1545, in test_matMul
    assert lp._print_MatMul(2*A) == '2 A'
  File "/testbed/sympy/printing/latex.py", line 1598, in _print_MatMul
    return ' '.join(map(parens, args))
  File "/testbed/sympy/printing/latex.py", line 1582, in <lambda>
    parens = lambda x: self.parenthesize(x, precedence_traditional(expr),
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Integer") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_MatrixSlice ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1558, in test_latex_MatrixSlice
    assert latex(MatrixSymbol('X', 10, 10)[:5, 1:9:2]) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "MatrixSlice") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_latex_RandomDomain __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1569, in test_latex_RandomDomain
    assert latex(where(X > 0)) == r"\text{Domain: }0 < x_{1} \wedge x_{1} < \infty"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1877, in _print_RandomDomain
    return '\\text{Domain: }' + self._print(d.as_boolean())
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 976, in _print_And
    return self._print_LogOp(args, r"\wedge")
  File "/testbed/sympy/printing/latex.py", line 964, in _print_LogOp
    tex = r"%s" % self._print(arg)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "StrictLessThan") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_PrettyPoly ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1588, in test_PrettyPoly
    assert latex(F.convert(x/(x + y))) == latex(x/(x + y))
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2223, in _print_FracElement
    numer = self._print(frac.numer)
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2217, in _print_PolyElement
    return poly.str(self, PRECEDENCE, "{%s}^{%d}", mul_symbol)
  File "/testbed/sympy/polys/rings.py", line 812, in str
    symbol = printer.parenthesize(symbols[i], prec_atom, strict=True)
  File "/testbed/sympy/printing/latex.py", line 207, in parenthesize
    return self._print(item)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_integral_transforms __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1599, in test_integral_transforms
    assert latex(MellinTransform(f(x), x, k)) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "MellinTransform") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_PolynomialRingBase __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1627, in test_PolynomialRingBase
    assert latex(QQ.old_poly_ring(x, y)) == r"\mathbb{Q}\left[x, y\right]"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2127, in _print_PolynomialRingBase
    symbols = ", ".join(map(self._print, expr.symbols))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_categories ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1647, in test_categories
    assert latex(A1) == "A_{1}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Object") to str
________________________________________________________________________________
_______________ sympy/printing/tests/test_latex.py:test_Modules ________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1698, in test_Modules
    assert latex(F) == r"{\mathbb{Q}\left[x, y\right]}^{2}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2356, in _print_FreeModule
    return '{{{}}}^{{{}}}'.format(self._print(M.ring), self._print(M.rank))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2127, in _print_PolynomialRingBase
    symbols = ", ".join(map(self._print, expr.symbols))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_QuotientRing _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1727, in test_QuotientRing
    assert latex(R) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2381, in _print_QuotientRing
    return r"\frac{{{}}}{{{}}}".format(self._print(R.ring),
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2127, in _print_PolynomialRingBase
    symbols = ", ".join(map(self._print, expr.symbols))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
__________________ sympy/printing/tests/test_latex.py:test_Tr __________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1736, in test_Tr
    assert latex(t) == r'\operatorname{tr}\left(A B\right)'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Tr") to str
________________________________________________________________________________
_______________ sympy/printing/tests/test_latex.py:test_Adjoint ________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1743, in test_Adjoint
    assert latex(Adjoint(X)) == r'X^{\dagger}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Adjoint") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_Transpose _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1761, in test_Transpose
    assert latex(Transpose(X)) == r'X^{T}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Transpose") to str
________________________________________________________________________________
_______________ sympy/printing/tests/test_latex.py:test_Hadamard _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1779, in test_Hadamard
    assert latex(HadamardProduct(X, Y*Y)) == r'X \circ Y^{2}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "HadamardProduct") to str
________________________________________________________________________________
_______ sympy/printing/tests/test_latex.py:test_ElementwiseApplyFunction _______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1802, in test_ElementwiseApplyFunction
    assert latex(expr) == r"{\sin}_{\circ}\left({X^{T} X}\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "ElementwiseApplyFunction") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_ZeroMatrix ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1809, in test_ZeroMatrix
    assert latex(ZeroMatrix(1, 1), mat_symbol_style='plain') == r"\mathbb{0}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "ZeroMatrix") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_OneMatrix _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1815, in test_OneMatrix
    assert latex(OneMatrix(3, 4), mat_symbol_style='plain') == r"\mathbb{1}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "OneMatrix") to str
________________________________________________________________________________
_______________ sympy/printing/tests/test_latex.py:test_Identity _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1821, in test_Identity
    assert latex(Identity(1), mat_symbol_style='plain') == r"\mathbb{I}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Identity") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_boolean_args_order __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1829, in test_boolean_args_order
    assert latex(expr) == 'a \\wedge b \\wedge c \\wedge d \\wedge e \\wedge f'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 976, in _print_And
    return self._print_LogOp(args, r"\wedge")
  File "/testbed/sympy/printing/latex.py", line 964, in _print_LogOp
    tex = r"%s" % self._print(arg)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
________ sympy/printing/tests/test_latex.py:test_latex_greek_functions _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1862, in test_latex_greek_functions
    assert latex(s(x)) == r'A{\left(x \right)}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Alpha") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_other_symbols _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1900, in test_other_symbols
    assert latex(symbols(s)) == "\\"+s
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_modifiers _______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1906, in test_modifiers
    assert latex(symbols("xMathring")) == r"\mathring{x}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_greek_symbols _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 1960, in test_greek_symbols
    assert latex(Symbol('alpha'))   == r'\alpha'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_6853 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2044, in test_issue_6853
    assert latex(p(x)) == r"\Pi{\left(x \right)}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pi") to str
________________________________________________________________________________
_________________ sympy/printing/tests/test_latex.py:test_Mul __________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2049, in test_Mul
    assert latex(e) == r'- 2 \left(x + 1\right)'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
_________________ sympy/printing/tests/test_latex.py:test_Pow __________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2066, in test_Pow
    assert latex(e) == r'2^{2}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_7180 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2073, in test_issue_7180
    assert latex(Equivalent(x, y)) == r"x \Leftrightarrow y"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 991, in _print_Equivalent
    return self._print_LogOp(args, altchar or r"\Leftrightarrow")
  File "/testbed/sympy/printing/latex.py", line 964, in _print_LogOp
    tex = r"%s" % self._print(arg)
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_8409 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2078, in test_issue_8409
    assert latex(S.Half**n) == r"\left(\frac{1}{2}\right)^{n}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_8470 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2083, in test_issue_8470
    e = parse_expr("-B*A", evaluate=False)
  File "/testbed/sympy/parsing/sympy_parser.py", line 1006, in parse_expr
    code = compile(evaluateFalse(code), '<string>', 'eval')
ValueError: Name node can't be used with 'False' constant
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_7117 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2091, in test_issue_7117
    assert latex(q) == r"2 \left(x + 1 = 2 x\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_15439 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2101, in test_issue_15439
    assert latex((x * y).subs(y, -y)) == r"x \left(- y\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "MatMul") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_2934 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2107, in test_issue_2934
    assert latex(Symbol(r'\frac{a_1}{b_1}')) == '\\frac{a_1}{b_1}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_10489 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2113, in test_issue_10489
    assert latex(s) == latexSymbolWithBrace
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_12886 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2119, in test_issue_12886
    assert latex(m__1**2 + l__1**2) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_13559 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2125, in test_issue_13559
    expr = parse_expr('5/1', evaluate=False)
  File "/testbed/sympy/parsing/sympy_parser.py", line 1006, in parse_expr
    code = compile(evaluateFalse(code), '<string>', 'eval')
ValueError: Name node can't be used with 'False' constant
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_13651 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2131, in test_issue_13651
    assert latex(expr) == r"c - \left(a + b\right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
________ sympy/printing/tests/test_latex.py:test_latex_UnevaluatedExpr _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2137, in test_latex_UnevaluatedExpr
    assert latex(he) == latex(1/x) == r"\frac{1}{x}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "UnevaluatedExpr") to str
________________________________________________________________________________
________ sympy/printing/tests/test_latex.py:test_MatrixElement_printing ________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2149, in test_MatrixElement_printing
    assert latex(A[0, 0]) == r"A_{0, 0}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "MatrixElement") to str
________________________________________________________________________________
________ sympy/printing/tests/test_latex.py:test_MatrixSymbol_printing _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2168, in test_MatrixSymbol_printing
    assert latex(-A) == r"- A"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "MatMul") to str
________________________________________________________________________________
______ sympy/printing/tests/test_latex.py:test_KroneckerProduct_printing _______
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2176, in test_KroneckerProduct_printing
    assert latex(KroneckerProduct(A, B)) == r'A \otimes B'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "KroneckerProduct") to str
________________________________________________________________________________
______ sympy/printing/tests/test_latex.py:test_Quaternion_latex_printing _______
Traceback (most recent call last):
  File "/testbed/sympy/core/sympify.py", line 385, in sympify
    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)
  File "/testbed/sympy/parsing/sympy_parser.py", line 1003, in parse_expr
    code = stringify_expr(s, local_dict, global_dict, transformations)
  File "/testbed/sympy/parsing/sympy_parser.py", line 887, in stringify_expr
    for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/tokenize.py", line 521, in _tokenize
    raise TokenError("EOF in multi-line statement", (lnum, 0))
tokenize.TokenError: ('EOF in multi-line statement', (2, 0))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2181, in test_Quaternion_latex_printing
    assert latex(q) == "x + y i + z j + t k"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
  File "/testbed/sympy/algebras/quaternion.py", line 180, in __radd__
    return self.add(other)
  File "/testbed/sympy/algebras/quaternion.py", line 253, in add
    q2 = sympify(other)
  File "/testbed/sympy/core/sympify.py", line 387, in sympify
    raise SympifyError('could not parse %r' % a, exc)
sympy.core.sympify.SympifyError: Sympify of expression 'could not parse '\\left('' failed, because of exception being raised:
TokenError: ('EOF in multi-line statement', (2, 0))
________________________________________________________________________________
________ sympy/printing/tests/test_latex.py:test_TensorProduct_printing ________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2192, in test_TensorProduct_printing
    assert latex(TensorProduct(A, B)) == r"A \otimes B"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "TensorProduct") to str
________________________________________________________________________________
________ sympy/printing/tests/test_latex.py:test_WedgeProduct_printing _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2199, in test_WedgeProduct_printing
    assert latex(wp) == r"\operatorname{d}x \wedge \operatorname{d}y"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "WedgeProduct") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_14041 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2209, in test_issue_14041
    assert latex(L*(phid + thetad)**2*A_frame.x) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/physics/vector/vector.py", line 236, in _latex
    arg_str = VectorLatexPrinter().doprint(ar[i][0][j])
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_issue_9216 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2219, in test_issue_9216
    assert latex(expr_1) == r"1^{-1}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Pow") to str
________________________________________________________________________________
_________ sympy/printing/tests/test_latex.py:test_latex_printer_tensor _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2240, in test_latex_printer_tensor
    assert latex(i) == "{}^{i}"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1774, in _print_TensorIndex
    self._print(expr.args[0])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_multiline_latex ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2317, in test_multiline_latex
    assert multiline_latex(f, expr, environment="eqnarray") == expected
  File "/testbed/sympy/printing/latex.py", line 2836, in multiline_latex
    result += r'{:s} {:s}{:s} {:s} {:s}'.format(l.doprint(lhs),
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_15353 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2365, in test_issue_15353
    assert latex(sol) == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 2073, in _print_ConditionSet
    vars_print = ', '.join([self._print(var) for var in Tuple(s.sym)])
  File "/testbed/sympy/printing/latex.py", line 2073, in <listcomp>
    vars_print = ', '.join([self._print(var) for var in Tuple(s.sym)])
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1806, in _print_Tuple
    return self._print_tuple(expr)
  File "/testbed/sympy/printing/latex.py", line 1793, in _print_tuple
    r", \  ".join([self._print(i) for i in expr])
  File "/testbed/sympy/printing/latex.py", line 1793, in <listcomp>
    r", \  ".join([self._print(i) for i in expr])
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Symbol") to str
________________________________________________________________________________
________________ sympy/printing/tests/test_latex.py:test_trace _________________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2375, in test_trace
    assert latex(trace(A)) == r"\operatorname{tr}\left(A \right)"
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Trace") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_print_basic ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2399, in test_print_basic
    assert latex(unimplemented_expr(x)) == r'UnimplementedExpr\left(x\right)'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "UnimplementedExpr") to str
________________________________________________________________________________
__________ sympy/printing/tests/test_latex.py:test_MatrixSymbol_bold ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2410, in test_MatrixSymbol_bold
    assert latex(trace(A), mat_symbol_style='bold') == \
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Trace") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_imaginary_unit ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2430, in test_imaginary_unit
    assert latex(1 + I) == '1 + i'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Add") to str
________________________________________________________________________________
______________ sympy/printing/tests/test_latex.py:test_text_re_im ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2439, in test_text_re_im
    assert latex(im(x), gothic_re_im=True) ==  r'\Im{\left(x\right)}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "im") to str
________________________________________________________________________________
___________ sympy/printing/tests/test_latex.py:test_DiffGeomMethods ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2455, in test_DiffGeomMethods
    assert latex(b) ==  r'\mathbf{rect_{0}}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "BaseScalarField") to str
________________________________________________________________________________
____________ sympy/printing/tests/test_latex.py:test_unit_printing _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2464, in test_unit_printing
    assert latex(5*meter) == r'5 \text{m}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Mul") to str
________________________________________________________________________________
_____________ sympy/printing/tests/test_latex.py:test_issue_17092 ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2471, in test_issue_17092
    assert latex(Derivative(x_star, x_star,2)) == r'\frac{d^{2}}{d \left(x^{*}\right)^{2}} x^{*}'
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "Derivative") to str
________________________________________________________________________________
_______ sympy/printing/tests/test_latex.py:test_latex_decimal_separator ________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_latex.py", line 2482, in test_latex_decimal_separator
    assert(latex(FiniteSet(1, 2.3, 4.5), decimal_separator='comma') == r'\left\{1; 2{,}3; 4{,}5\right\}')
  File "/testbed/sympy/printing/latex.py", line 2707, in latex
    return LatexPrinter(settings).doprint(expr)
  File "/testbed/sympy/printing/latex.py", line 222, in doprint
    tex = Printer.doprint(self, expr)
  File "/testbed/sympy/printing/printer.py", line 249, in doprint
    return self._str(self._print(expr))
  File "/testbed/sympy/printing/printer.py", line 287, in _print
    return getattr(self, printmethod)(expr, **kwargs)
  File "/testbed/sympy/printing/latex.py", line 1888, in _print_FiniteSet
    return self._print_set(items)
  File "/testbed/sympy/printing/latex.py", line 1893, in _print_set
    items = "; ".join(map(self._print, items))
  File "/testbed/sympy/printing/printer.py", line 266, in _print
    return getattr(expr, self.printmethod)(self, **kwargs)
  File "/testbed/sympy/core/expr.py", line 160, in _latex
    return printer._print("\\left(" + self + "\\right)")
TypeError: can only concatenate str (not "One") to str

 tests finished: 17 passed, 2 expected to fail, 128 exceptions, in 3.21 seconds 
DO *NOT* COMMIT!
+ git checkout 70381f282f2d9d039da860e391fe51649df2779d sympy/printing/tests/test_latex.py
Updated 1 path from d8c7327b0d
