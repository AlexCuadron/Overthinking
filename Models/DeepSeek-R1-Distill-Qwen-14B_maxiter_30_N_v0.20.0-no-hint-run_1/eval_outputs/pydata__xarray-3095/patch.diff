diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index b00dad96..24e86c1c 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -430,6 +430,571 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
         self._initialized = True

     def _set_init_vars_and_dims(self, data_vars, coords, compat):
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in data_vars.items()
+    }
+    coords = {
+        k: (v if isinstance(v, Variable) else v.variable)
+        for k, v in coords.items()
+    }
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
+    # Handle compatibility if needed
+    if compat == 'broadcast_equals':
+        # Additional compatibility handling if required
+        pass
+    """Set the initial variables and dimensions for the dataset."""
+    # Handle the case where coords might not be a dict
+    if not isinstance(coords, dict):
+        coords = {}
+    # Ensure we're working with variables, not DataArrays
+    data_vars = {k: (v if isinstance(v, Variable) else v.variable) for k, v in data_vars.items()}
+    coords = {k: (v if isinstance(v, Variable) else v.variable) for k, v in coords.items()}
+    # Set variables and coords
+    self._variables = OrderedDict({**data_vars, **coords})
+    # Set coord names
+    self._coord_names = set(coords.keys())
+    # Calculate dimensions
+    self._dims = calculate_dimensions(self._variables)
         """Set the initial value of Dataset variables and dimensions
         """
         both_data_and_coords = [k for k in data_vars if k in coords]
