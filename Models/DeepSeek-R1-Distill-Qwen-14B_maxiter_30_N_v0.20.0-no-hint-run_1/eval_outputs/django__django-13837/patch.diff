diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..27e1149e4d 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -212,38 +212,14 @@ def sys_path_directories():

 def get_child_arguments():
     """
-    Return the executable. This contains a workaround for Windows if the
-    executable is reported to not have the .exe extension which can cause bugs
-    on reloading.
+    Return the arguments to pass to a child process, ensuring that
+    the child process is not a module (to prevent issues with
+    module reloading).
     """
-    import django.__main__
-    django_main_path = Path(django.__main__.__file__)
-    py_script = Path(sys.argv[0])
-
-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
-    if py_script == django_main_path:
-        # The server was started with `python -m django runserver`.
-        args += ['-m', 'django']
-        args += sys.argv[1:]
-    elif not py_script.exists():
-        # sys.argv[0] may not exist for several reasons on Windows.
-        # It may exist with a .exe extension or have a -script.py suffix.
-        exe_entrypoint = py_script.with_suffix('.exe')
-        if exe_entrypoint.exists():
-            # Should be executed directly, ignoring sys.executable.
-            # TODO: Remove str() when dropping support for PY37.
-            # args parameter accepts path-like on Windows from Python 3.8.
-            return [str(exe_entrypoint), *sys.argv[1:]]
-        script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)
-        if script_entrypoint.exists():
-            # Should be executed as usual.
-            # TODO: Remove str() when dropping support for PY37.
-            # args parameter accepts path-like on Windows from Python 3.8.
-            return [*args, str(script_entrypoint), *sys.argv[1:]]
-        raise RuntimeError('Script %s does not exist.' % py_script)
-    else:
-        args += sys.argv
-    return args
+    # If we're running as a module, the __file__ attribute won't be set
+    if getattr(sys.modules['__main__'], '__spec__', None) and sys.modules['__main__'].__spec__.parent:
+        return []
+    return [sys.argv[0]] + sys.argv[1:]


 def trigger_reload(filename):
