diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..637ab61eeb 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -9,6 +9,225 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     """
     Get a number (as a number or string), and return it as a string,
     using formats defined as arguments:
+    If the number is too small to be represented with the given decimal positions,
+    it will be formatted as zero with the specified number of decimal places.
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None:
+        if isinstance(number, Decimal):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+        elif isinstance(number, (int, float)):
+            if abs(number) <= 10 ** (-decimal_pos):
+                return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None and isinstance(number, Decimal):
+        if abs(number) < 10 ** (-decimal_pos - 1):
+            return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')
+    """
+    # Handle the case where the number is too small for the given decimal positions
+    if decimal_pos is not None and isinstance(number, Decimal):
+        if abs(number) < 10 ** (-decimal_pos - 1):
+            return '0' + (decimal_sep + '0' * decimal_pos if decimal_pos else '')

     * decimal_sep: Decimal separator symbol (for example ".")
     * decimal_pos: Number of decimal positions
