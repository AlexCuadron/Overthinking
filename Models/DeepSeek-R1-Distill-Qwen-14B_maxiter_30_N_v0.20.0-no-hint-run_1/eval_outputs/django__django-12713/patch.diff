diff --git a/django/forms/models.py b/django/forms/models.py
index 0f6608a4bc..4934e69a01 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -204,6 +204,62 @@ class ModelFormOptions:
         self.error_messages = getattr(options, 'error_messages', None)
         self.field_classes = getattr(options, 'field_classes', None)

+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+
+    def formfield_for_manytomany(self, db_field, form_field, widget=None, **kwargs):
+        if isinstance(form_field, ManyToManyField):
+            if widget is not None:
+                return ManyToManyField(widget=widget, **kwargs)
+            return form_field
+        return super().formfield_for_manytomany(db_field, form_field, **kwargs)
+

 class ModelFormMetaclass(DeclarativeFieldsMetaclass):
     def __new__(mcs, name, bases, attrs):
