diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..6cc11dd2c 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -18,6 +18,7 @@ The semantics are:
 import ast
 import enum
 import re
+import sys
 import types
 from typing import Callable
 from typing import Iterator
@@ -46,6 +47,7 @@ class TokenType(enum.Enum):
     AND = "and"
     NOT = "not"
     IDENT = "identifier"
+    CONST = "constant"
     EOF = "end of input"


@@ -90,10 +92,21 @@ class Scanner:
                 yield Token(TokenType.RPAREN, ")", pos)
                 pos += 1
             else:
-                match = re.match(r"(:?\w|:|\+|-|\.|\[|\])+", input[pos:])
+                match = re.match(r"[\w:+\-.\[\]]+", input[pos:])
                 if match:
                     value = match.group(0)
                     if value == "or":
+if value in ("or", "and", "not"):
+    token_type = {
+        "or": TokenType.OR,
+        "and": TokenType.AND,
+        "not": TokenType.NOT,
+    }[value]
+    yield Token(token_type, value, pos)
+elif value in ("True", "False", "None"):
+    yield Token(TokenType.CONST, value, pos)
+else:
+    yield Token(TokenType.IDENT, value, pos)
                         yield Token(TokenType.OR, value, pos)
                     elif value == "and":
                         yield Token(TokenType.AND, value, pos)
@@ -159,10 +172,16 @@ def not_expr(s: Scanner) -> ast.expr:
         ret = expr(s)
         s.accept(TokenType.RPAREN, reject=True)
         return ret
-    ident = s.accept(TokenType.IDENT)
-    if ident:
-        return ast.Name(ident.value, ast.Load())
-    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+    token = s.accept(TokenType.IDENT) or s.accept(TokenType.CONST)
+    if token:
+        if token.type == TokenType.IDENT:
+            return ast.Name(token.value, ast.Load())
+        elif token.type == TokenType.CONST:
+            if sys.version_info >= (3, 9):
+                return ast.Constant(value=token.value)
+            else:
+                return ast.NameConstant(value=token.value)
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT, TokenType.CONST))


 class MatcherAdapter(Mapping[str, bool]):
