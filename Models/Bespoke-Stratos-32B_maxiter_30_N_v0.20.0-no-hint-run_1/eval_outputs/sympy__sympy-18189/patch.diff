diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..42f1f0e77c 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -212,7 +212,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     try:
         # if we know that factoring should not be attempted, skip
         # the factoring step
-        v, c, t = classify_diop(eq)
+        v, c, t = classify_diop(eq, syms=syms)

         # check for permute sign
         if permute:
@@ -473,14 +473,17 @@ def diop_solve(eq, param=symbols("t", integer=True)):
             'No solver has been written for %s.' % eq_type)


-def classify_diop(eq, _dict=True):
+def classify_diop(eq, syms=None, _dict=True):
     # docstring supplied externally
     try:
-        var = list(eq.free_symbols)
+        if syms is not None:
+            var = list(syms)
+        else:
+            var = list(eq.free_symbols)
+            var.sort(key=default_sort_key)
         assert var
     except (AttributeError, AssertionError):
         raise ValueError('equation should have 1 or more free symbols')
-    var.sort(key=default_sort_key)
     eq = eq.expand(force=True)
     coeff = eq.as_coefficients_dict()
     if not all(_is_int(c) for c in coeff.values()):
