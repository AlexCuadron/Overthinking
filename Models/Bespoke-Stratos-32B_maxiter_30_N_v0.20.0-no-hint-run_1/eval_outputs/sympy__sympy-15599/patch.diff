diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index eae25630cc..cbc4575201 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -123,9 +123,14 @@ def doit(p, q):
             for arg in p.args:
                 both_l[isinstance(arg, cls)].append(arg)

-            if mod_l and all(inner.args[1] == q for inner in mod_l):
+was = non_mod_l[:]
+        non_mod_l = [cls(x, q) for x in non_mod_l]
+        changed = was != non_mod_l
+            was = non_mod_l[:]
+            non_mod_l = [cls(x, q) for x in non_mod_l]
+            changed = was != non_mod_l
+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):
                 # finding distributive term
-                non_mod_l = [cls(x, q) for x in non_mod_l]
                 mod = []
                 non_mod = []
                 for j in non_mod_l:
diff --git a/test_mod.py b/test_mod.py
new file mode 100644
index 0000000000..bb0264928f
--- /dev/null
+++ b/test_mod.py
@@ -0,0 +1,5 @@
+from sympy import symbols, Mod
+
+i = symbols('i', integer=True)
+expr = Mod(3*i, 2)
+print(expr)
\ No newline at end of file
