diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 9300a2cce..e9b727436 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1708,6 +1708,37 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
         if not ret:
             return ret

+        # Get the qualified name of the method
+        qualname = getattr(self.object, '__qualname__', None)
+        if qualname:
+            # Split the qualified name to get the class name
+            parts = qualname.rsplit('.', 1)
+            if len(parts) == 2:
+                cls_name = parts[0]
+                # Check if the class name matches the parent's name
+                if cls_name != self.parent.__name__:
+                    return False
+
+        # Try to get the method from the class to ensure it's part of the class
+        try:
+            cls = self.parent
+            method = inspect.getattr_static(cls, self.object_name)
+            if method is not self.object:
+                # The method in the class is different from the imported object
+                # This could happen if the method is decorated
+                # So, we need to check if the decorated method is the same as the one in the class
+                if method is not self.object:
+                    # The method is decorated, but we need to ensure it's part of the class
+                    # Perhaps check if the method's __qualname__ matches the class's name
+                    qualname = getattr(self.object, '__qualname__', None)
+                    if qualname and qualname.startswith(cls.__name__ + '.'):
+                        pass
+                    else:
+                        return False
+        except AttributeError:
+            # The method is not part of the class
+            return False
+
         # to distinguish classmethod/staticmethod
         obj = self.parent.__dict__.get(self.object_name)
         if obj is None:
