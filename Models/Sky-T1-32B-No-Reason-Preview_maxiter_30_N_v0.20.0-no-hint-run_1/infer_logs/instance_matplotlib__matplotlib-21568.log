2025-01-17 15:53:52,491 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_a7s97kd0cl4xuee2_1nhip1b65cn5t1ze
2025-01-17 15:53:52,499 - INFO - [runtime 2c325f37-7ac2-476f-8aab-923ff8054768-a331e74b348a9311] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_a7s97kd0cl4xuee2_1nhip1b65cn5t1ze
2025-01-17 15:53:53,423 - INFO - [runtime 2c325f37-7ac2-476f-8aab-923ff8054768-a331e74b348a9311] Container started: openhands-runtime-2c325f37-7ac2-476f-8aab-923ff8054768-a331e74b348a9311. VSCode URL: None
2025-01-17 15:53:53,424 - INFO - [runtime 2c325f37-7ac2-476f-8aab-923ff8054768-a331e74b348a9311] Waiting for client to become ready at http://localhost:37210...
2025-01-17 15:54:19,491 - INFO - [runtime 2c325f37-7ac2-476f-8aab-923ff8054768-a331e74b348a9311] Runtime is ready.
2025-01-17 15:54:20,125 - INFO - ------------------------------
2025-01-17 15:54:20,126 - INFO - BEGIN Runtime Initialization Fn
2025-01-17 15:54:20,126 - INFO - ------------------------------
2025-01-17 15:54:20,126 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=matplotlib__matplotlib-21568' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-17 15:54:20,752 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:20,752 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-17 15:54:21,377 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:21,378 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-17 15:54:22,003 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:22,010 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-17 15:54:22,634 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=matplotlib__matplotlib-21568
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:22,634 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-17 15:54:23,257 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:23,257 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-17 15:54:27,408 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: matplotlib__matplotlib__3.4
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:27,408 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.4
2025-01-17 15:54:28,034 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:28,034 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-17 15:54:29,163 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at f0632c0fc7 Merge pull request #21558 from anntzer/sp
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:29,163 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-17 15:54:29,789 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:29,789 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-17 15:54:30,413 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "e3688bbfb32b",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 15:54:30,413 - INFO - ------------------------------
2025-01-17 15:54:30,413 - INFO - END Runtime Initialization Fn
2025-01-17 15:54:30,413 - INFO - ------------------------------
2025-01-17 15:54:30,415 - INFO - Function calling not enabled for model hosted_vllm/NovaSky-AI/Sky-T1-32B-Preview. Mocking function calling via prompting.
2025-01-17 15:54:30,418 - INFO - [runtime 2c325f37-7ac2-476f-8aab-923ff8054768-a331e74b348a9311] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-17 15:54:30,435 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-17 15:54:30,436 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-17 15:55:59,022 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-17 15:57:11,331 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-17 15:58:14,761 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-17 15:59:30,899 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-17 16:00:30,687 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-17 16:01:48,808 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-17 16:02:55,509 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-17 16:04:08,030 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-17 16:32:14,131 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_a7s97kd0cl4xuee2_1nhip1b65cn5t1ze
2025-01-17 16:32:14,148 - INFO - [runtime 8c4c213d-ea5d-4b67-8717-98da7dd35e89-27beb9c11cbe6bf5] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_a7s97kd0cl4xuee2_1nhip1b65cn5t1ze
2025-01-17 16:32:15,906 - INFO - [runtime 8c4c213d-ea5d-4b67-8717-98da7dd35e89-27beb9c11cbe6bf5] Container started: openhands-runtime-8c4c213d-ea5d-4b67-8717-98da7dd35e89-27beb9c11cbe6bf5. VSCode URL: None
2025-01-17 16:32:15,906 - INFO - [runtime 8c4c213d-ea5d-4b67-8717-98da7dd35e89-27beb9c11cbe6bf5] Waiting for client to become ready at http://localhost:39381...
2025-01-17 16:32:54,054 - INFO - [runtime 8c4c213d-ea5d-4b67-8717-98da7dd35e89-27beb9c11cbe6bf5] Runtime is ready.
2025-01-17 16:32:54,703 - INFO - ------------------------------
2025-01-17 16:32:54,703 - INFO - BEGIN Runtime Initialization Fn
2025-01-17 16:32:54,703 - INFO - ------------------------------
2025-01-17 16:32:54,703 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=matplotlib__matplotlib-21568' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-17 16:32:55,330 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:32:55,331 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-17 16:32:55,956 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:32:55,956 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-17 16:32:56,587 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:32:56,597 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-17 16:32:57,221 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=matplotlib__matplotlib-21568
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:32:57,221 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-17 16:32:57,845 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:32:57,845 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-17 16:33:10,737 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: matplotlib__matplotlib__3.4
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:33:10,737 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.4
2025-01-17 16:33:11,374 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:33:11,374 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-17 16:33:13,617 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
Updating files: 100% (4339/4339), done.
HEAD is now at f0632c0fc7 Merge pull request #21558 from anntzer/sp
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:33:13,617 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-17 16:33:14,270 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:33:14,286 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-17 16:33:14,932 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 16:33:14,932 - INFO - ------------------------------
2025-01-17 16:33:14,932 - INFO - END Runtime Initialization Fn
2025-01-17 16:33:14,933 - INFO - ------------------------------
2025-01-17 16:33:14,935 - INFO - Function calling not enabled for model hosted_vllm/NovaSky-AI/Sky-T1-32B-Preview. Mocking function calling via prompting.
2025-01-17 16:33:14,944 - INFO - [runtime 8c4c213d-ea5d-4b67-8717-98da7dd35e89-27beb9c11cbe6bf5] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-17 16:33:14,979 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-17 16:33:14,980 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-17 16:33:41,058 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-17 16:33:51,569 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-17 16:34:06,222 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-17 16:34:26,486 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-17 16:35:14,328 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-17 16:35:51,240 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-17 16:36:26,340 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-17 16:37:01,955 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-17 16:37:41,706 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-17 16:38:21,465 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-17 16:39:12,598 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-17 16:39:52,424 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-17 16:41:52,493 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-17 16:42:54,039 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-17 16:43:52,284 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-17 16:45:05,477 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-17 16:45:58,846 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-17 16:46:58,774 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-17 16:48:00,607 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-17 16:49:20,983 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-17 16:50:35,278 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-17 16:51:43,808 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-17 16:54:05,221 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-17 16:55:33,804 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-17 16:57:23,463 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-17 16:58:48,808 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-17 17:00:23,346 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-17 17:02:00,992 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-17 17:03:10,528 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-17 17:04:19,624 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-17 17:04:19,625 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-17 17:04:19,632 - WARNING - Stopping agent due to traffic control
2025-01-17 17:04:19,632 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-17 17:04:19,720 - INFO - ------------------------------
2025-01-17 17:04:19,721 - INFO - BEGIN Runtime Completion Fn
2025-01-17 17:04:19,721 - INFO - ------------------------------
2025-01-17 17:04:19,724 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.4
2025-01-17 17:04:20,352 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 17:04:20,353 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-17 17:04:20,978 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 17:04:20,978 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-17 17:04:21,603 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 17:04:21,603 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached f0632c0fc7339f68e992ed63ae4cfac76cd41aad
2025-01-17 17:04:22,863 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "9d3976e28f62",
  "working_dir": "/workspace/matplotlib__matplotlib__3.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "[Previous command outputs are truncated. Showing the last 10502 lines of the output below.]\n",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
[Previous command outputs are truncated. Showing the last 10502 lines of the output below.]
+                                                       bool has_curves)
 {
     typedef agg::conv_transform<typename PathGenerator::path_iterator> transformed_path_t;
     typedef PathNanRemover<transformed_path_t> nan_removed_t;
@@ -966,7 +969,11 @@ inline void RendererAgg::_draw_path_collection_generic(GCAgg &gc,
             double xo = offsets(i % Noffsets, 0);
             double yo = offsets(i % Noffsets, 1);
             offset_trans.transform(&xo, &yo);
-            trans *= agg::trans_affine_translation(xo, yo);
+            if (offset_position == OFFSET_POSITION_DATA) {
+                trans = agg::trans_affine_translation(xo, yo) * trans;
+            } else {
+                trans *= agg::trans_affine_translation(xo, yo);
+            }
         }

         // These transformations must be done post-offsets
@@ -992,17 +999,17 @@ inline void RendererAgg::_draw_path_collection_generic(GCAgg &gc,
             }
         }

-        bool do_clip = !face.first && !gc.has_hatchpath();
+        bool do_clip = !face.first && !gc.has_hatchpath() && !has_curves;

         if (check_snap) {
             gc.isaa = antialiaseds(i % Naa);

             transformed_path_t tpath(path, trans);
-            nan_removed_t nan_removed(tpath, true, has_codes);
+            nan_removed_t nan_removed(tpath, true, has_curves);
             clipped_t clipped(nan_removed, do_clip, width, height);
             snapped_t snapped(
                 clipped, gc.snap_mode, path.total_vertices(), points_to_pixels(gc.linewidth));
-            if (has_codes) {
+            if (has_curves) {
                 snapped_curve_t curve(snapped);
                 _draw_path(curve, has_clippath, face, gc);
             } else {
@@ -1012,9 +1019,9 @@ inline void RendererAgg::_draw_path_collection_generic(GCAgg &gc,
             gc.isaa = antialiaseds(i % Naa);

             transformed_path_t tpath(path, trans);
-            nan_removed_t nan_removed(tpath, true, has_codes);
+            nan_removed_t nan_removed(tpath, true, has_curves);
             clipped_t clipped(nan_removed, do_clip, width, height);
-            if (has_codes) {
+            if (has_curves) {
                 curve_t curve(clipped);
                 _draw_path(curve, has_clippath, face, gc);
             } else {
@@ -1040,7 +1047,8 @@ inline void RendererAgg::draw_path_collection(GCAgg &gc,
                                               ColorArray &edgecolors,
                                               LineWidthArray &linewidths,
                                               DashesVector &linestyles,
-                                              AntialiasedArray &antialiaseds)
+                                              AntialiasedArray &antialiaseds,
+                                              e_offset_position offset_position)
 {
     _draw_path_collection_generic(gc,
                                   master_transform,
@@ -1056,6 +1064,7 @@ inline void RendererAgg::draw_path_collection(GCAgg &gc,
                                   linewidths,
                                   linestyles,
                                   antialiaseds,
+                                  offset_position,
                                   true,
                                   true);
 }
@@ -1166,6 +1175,7 @@ inline void RendererAgg::draw_quad_mesh(GCAgg &gc,
                                   linewidths,
                                   linestyles,
                                   antialiaseds,
+                                  OFFSET_POSITION_FIGURE,
                                   true, // check_snap
                                   false);
 }
diff --git a/src/_backend_agg_basic_types.h b/src/_backend_agg_basic_types.h
index 3ee86312ef..9f65253d9f 100644
--- a/src/_backend_agg_basic_types.h
+++ b/src/_backend_agg_basic_types.h
@@ -69,6 +69,11 @@ class Dashes

 typedef std::vector<Dashes> DashesVector;

+enum e_offset_position {
+    OFFSET_POSITION_FIGURE,
+    OFFSET_POSITION_DATA
+};
+
 class GCAgg
 {
   public:
diff --git a/src/_backend_agg_wrapper.cpp b/src/_backend_agg_wrapper.cpp
index e9c923471f..49a271b96b 100644
--- a/src/_backend_agg_wrapper.cpp
+++ b/src/_backend_agg_wrapper.cpp
@@ -320,7 +320,7 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
 {
     GCAgg gc;
     agg::trans_affine master_transform;
-    py::PathGenerator paths;
+    PyObject *pathobj;
     numpy::array_view<const double, 3> transforms;
     numpy::array_view<const double, 2> offsets;
     agg::trans_affine offset_trans;
@@ -330,16 +330,15 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
     DashesVector dashes;
     numpy::array_view<const uint8_t, 1> antialiaseds;
     PyObject *ignored;
-    PyObject *offset_position; // offset position is no longer used
+    e_offset_position offset_position;

     if (!PyArg_ParseTuple(args,
-                          "O&O&O&O&O&O&O&O&O&O&O&OO:draw_path_collection",
+                          "O&O&OO&O&O&O&O&O&O&O&OO&:draw_path_collection",
                           &convert_gcagg,
                           &gc,
                           &convert_trans_affine,
                           &master_transform,
-                          &convert_pathgen,
-                          &paths,
+                          &pathobj,
                           &convert_transforms,
                           &transforms,
                           &convert_points,
@@ -357,22 +356,33 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
                           &antialiaseds.converter,
                           &antialiaseds,
                           &ignored,
+                          &convert_offset_position,
                           &offset_position)) {
         return NULL;
     }

-    CALL_CPP("draw_path_collection",
-             (self->x->draw_path_collection(gc,
-                                            master_transform,
-                                            paths,
-                                            transforms,
-                                            offsets,
-                                            offset_trans,
-                                            facecolors,
-                                            edgecolors,
-                                            linewidths,
-                                            dashes,
-                                            antialiaseds)));
+    try
+    {
+        py::PathGenerator path(pathobj);
+
+        CALL_CPP("draw_path_collection",
+                 (self->x->draw_path_collection(gc,
+                                                master_transform,
+                                                path,
+                                                transforms,
+                                                offsets,
+                                                offset_trans,
+                                                facecolors,
+                                                edgecolors,
+                                                linewidths,
+                                                dashes,
+                                                antialiaseds,
+                                                offset_position)));
+    }
+    catch (const py::exception &)
+    {
+        return NULL;
+    }

     Py_RETURN_NONE;
 }
@@ -638,7 +648,17 @@ static PyTypeObject *PyRendererAgg_init_type(PyObject *m, PyTypeObject *type)
     return type;
 }

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "_backend_agg" };
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "_backend_agg",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -646,21 +666,19 @@ PyMODINIT_FUNC PyInit__backend_agg(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
         return NULL;
     }

+    import_array();
+
     if (!PyRendererAgg_init_type(m, &PyRendererAggType)) {
-        Py_DECREF(m);
         return NULL;
     }

     if (!PyBufferRegion_init_type(m, &PyBufferRegionType)) {
-        Py_DECREF(m);
         return NULL;
     }

diff --git a/src/_c_internal_utils.c b/src/_c_internal_utils.c
index db20d49bc9..4a61fe5b6e 100644
--- a/src/_c_internal_utils.c
+++ b/src/_c_internal_utils.c
@@ -68,13 +68,7 @@ mpl_GetCurrentProcessExplicitAppUserModelID(PyObject* module)
     wchar_t* appid = NULL;
     HRESULT hr = GetCurrentProcessExplicitAppUserModelID(&appid);
     if (FAILED(hr)) {
-#if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x07030600
-        /* Remove when we require PyPy 7.3.6 */
-        PyErr_SetFromWindowsErr(hr);
-        return NULL;
-#else
         return PyErr_SetFromWindowsErr(hr);
-#endif
     }
     PyObject* py_appid = PyUnicode_FromWideChar(appid, -1);
     CoTaskMemFree(appid);
@@ -95,13 +89,7 @@ mpl_SetCurrentProcessExplicitAppUserModelID(PyObject* module, PyObject* arg)
     HRESULT hr = SetCurrentProcessExplicitAppUserModelID(appid);
     PyMem_Free(appid);
     if (FAILED(hr)) {
-#if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x07030600
-        /* Remove when we require PyPy 7.3.6 */
-        PyErr_SetFromWindowsErr(hr);
-        return NULL;
-#else
         return PyErr_SetFromWindowsErr(hr);
-#endif
     }
     Py_RETURN_NONE;
 #else
@@ -136,47 +124,6 @@ mpl_SetForegroundWindow(PyObject* module, PyObject *arg)
 #endif
 }

-static PyObject*
-mpl_SetProcessDpiAwareness_max(PyObject* module)
-{
-#ifdef _WIN32
-#ifdef _DPI_AWARENESS_CONTEXTS_
-    // These functions and options were added in later Windows 10 updates, so
-    // must be loaded dynamically.
-    typedef BOOL (WINAPI *IsValidDpiAwarenessContext_t)(DPI_AWARENESS_CONTEXT);
-    typedef BOOL (WINAPI *SetProcessDpiAwarenessContext_t)(DPI_AWARENESS_CONTEXT);
-
-    HMODULE user32 = LoadLibrary("user32.dll");
-    IsValidDpiAwarenessContext_t IsValidDpiAwarenessContextPtr =
-        (IsValidDpiAwarenessContext_t)GetProcAddress(
-            user32, "IsValidDpiAwarenessContext");
-    SetProcessDpiAwarenessContext_t SetProcessDpiAwarenessContextPtr =
-        (SetProcessDpiAwarenessContext_t)GetProcAddress(
-            user32, "SetProcessDpiAwarenessContext");
-    if (IsValidDpiAwarenessContextPtr != NULL && SetProcessDpiAwarenessContextPtr != NULL) {
-        if (IsValidDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2)) {
-            // Added in Creators Update of Windows 10.
-            SetProcessDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);
-        } else if (IsValidDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE)) {
-            // Added in Windows 10.
-            SetProcessDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE);
-        } else if (IsValidDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_SYSTEM_AWARE)) {
-            // Added in Windows 10.
-            SetProcessDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_SYSTEM_AWARE);
-        }
-    } else {
-        // Added in Windows Vista.
-        SetProcessDPIAware();
-    }
-    FreeLibrary(user32);
-#else
-    // Added in Windows Vista.
-    SetProcessDPIAware();
-#endif
-#endif
-    Py_RETURN_NONE;
-}
-
 static PyMethodDef functions[] = {
     {"display_is_valid", (PyCFunction)mpl_display_is_valid, METH_NOARGS,
      "display_is_valid()\n--\n\n"
@@ -204,15 +151,9 @@ static PyMethodDef functions[] = {
      "Win32_SetForegroundWindow(hwnd, /)\n--\n\n"
      "Wrapper for Windows' SetForegroundWindow.  On non-Windows platforms, \n"
      "a no-op."},
-    {"Win32_SetProcessDpiAwareness_max",
-     (PyCFunction)mpl_SetProcessDpiAwareness_max, METH_NOARGS,
-     "Win32_SetProcessDpiAwareness_max()\n--\n\n"
-     "Set Windows' process DPI awareness to best option available.\n"
-     "On non-Windows platforms, does nothing."},
     {NULL, NULL}};  // sentinel.
 static PyModuleDef util_module = {
-    PyModuleDef_HEAD_INIT, "_c_internal_utils", NULL, 0, functions
-};
+    PyModuleDef_HEAD_INIT, "_c_internal_utils", "", 0, functions, NULL, NULL, NULL, NULL};

 #pragma GCC visibility push(default)
 PyMODINIT_FUNC PyInit__c_internal_utils(void)
diff --git a/src/_contour.cpp b/src/_contour.cpp
index 663d0e93bd..ac655d73de 100644
--- a/src/_contour.cpp
+++ b/src/_contour.cpp
@@ -11,6 +11,11 @@
 #include <algorithm>


+// 'kind' codes.
+#define MOVETO 1
+#define LINETO 2
+#define CLOSEPOLY 79
+
 // Point indices from current quad index.
 #define POINT_SW (quad)
 #define POINT_SE (quad+1)
@@ -376,52 +381,24 @@ QuadContourGenerator::~QuadContourGenerator()
     delete [] _cache;
 }

-void QuadContourGenerator::append_contour_line_to_vertices_and_codes(
+void QuadContourGenerator::append_contour_line_to_vertices(
     ContourLine& contour_line,
-    PyObject* vertices_list,
-    PyObject* codes_list) const
+    PyObject* vertices_list) const
 {
-    // Convert ContourLine to Python equivalent, and clear it for reuse.
-    // This function is called once for each line generated in create_contour().
-    // A line is either a closed line loop (in which case the last point is
-    // identical to the first) or an open line strip.  Two NumPy arrays are
-    // created for each line:
-    //   vertices is a double array of shape (npoints, 2) containing the (x, y)
-    //     coordinates of the points in the line
-    //   codes is a uint8 array of shape (npoints,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are appended to the Python lists vertices_list and codes_list
-    // respectively for return to the Python calling function.
-
     assert(vertices_list != 0 && "Null python vertices_list");
-    assert(codes_list != 0 && "Null python codes_list");
-
-    npy_intp npoints = static_cast<npy_intp>(contour_line.size());
-
-    npy_intp vertices_dims[2] = {npoints, 2};
-    numpy::array_view<double, 2> vertices(vertices_dims);
-    double* vertices_ptr = vertices.data();
-
-    npy_intp codes_dims[1] = {npoints};
-    numpy::array_view<unsigned char, 1> codes(codes_dims);
-    unsigned char* codes_ptr = codes.data();

+    // Convert ContourLine to python equivalent, and clear it.
+    npy_intp dims[2] = {static_cast<npy_intp>(contour_line.size()), 2};
+    numpy::array_view<double, 2> line(dims);
+    npy_intp i = 0;
     for (ContourLine::const_iterator point = contour_line.begin();
-         point != contour_line.end(); ++point) {
-        *vertices_ptr++ = point->x;
-        *vertices_ptr++ = point->y;
-        *codes_ptr++ = (point == contour_line.begin() ? MOVETO : LINETO);
+         point != contour_line.end(); ++point, ++i) {
+        line(i, 0) = point->x;
+        line(i, 1) = point->y;
     }
-
-    // Closed line loop has identical first and last (x, y) points.
-    if (contour_line.size() > 1 && contour_line.front() == contour_line.back())
-        *(codes_ptr-1) = CLOSEPOLY;
-
-    if (PyList_Append(vertices_list, vertices.pyobj_steal()) ||
-        PyList_Append(codes_list, codes.pyobj_steal())) {
+    if (PyList_Append(vertices_list, line.pyobj_steal())) {
         Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Unable to add contour line to vertices and codes lists");
+        throw std::runtime_error("Unable to add contour line to vertices_list");
     }

     contour_line.clear();
@@ -432,18 +409,6 @@ void QuadContourGenerator::append_contour_to_vertices_and_codes(
     PyObject* vertices_list,
     PyObject* codes_list) const
 {
-    // Convert Contour to Python equivalent, and clear it for reuse.
-    // This function is called once for each polygon generated in
-    // create_filled_contour().  A polygon consists of an outer line loop
-    // (called the parent) and zero or more inner line loops or holes (called
-    // the children).  Two NumPy arrays are created for each polygon:
-    //   vertices is a double array of shape (npoints, 2) containing the (x, y)
-    //     coordinates of the points in the polygon (parent plus children)
-    //   codes is a uint8 array of shape (npoints,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are appended to the Python lists vertices_list and codes_list
-    // respectively for return to the Python calling function.
-
     assert(vertices_list != 0 && "Null python vertices_list");
     assert(codes_list != 0 && "Null python codes_list");

@@ -547,12 +512,6 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
     if (vertices_list == 0)
         throw std::runtime_error("Failed to create Python list");

-    PyObject* codes_list = PyList_New(0);
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
-        throw std::runtime_error("Failed to create Python list");
-    }
-
     // Lines that start and end on boundaries.
     long ichunk, jchunk, istart, iend, jstart, jend;
     for (long ijchunk = 0; ijchunk < _chunk_count; ++ijchunk) {
@@ -564,33 +523,33 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
                 if (EXISTS_NONE(quad) || VISITED(quad,1)) continue;

                 if (BOUNDARY_S(quad) && Z_SW >= 1 && Z_SE < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_S, level)) continue;
+                    start_line(vertices_list, quad, Edge_S, level)) continue;

                 if (BOUNDARY_W(quad) && Z_NW >= 1 && Z_SW < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_W, level)) continue;
+                    start_line(vertices_list, quad, Edge_W, level)) continue;

                 if (BOUNDARY_N(quad) && Z_NE >= 1 && Z_NW < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_N, level)) continue;
+                    start_line(vertices_list, quad, Edge_N, level)) continue;

                 if (BOUNDARY_E(quad) && Z_SE >= 1 && Z_NE < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_E, level)) continue;
+                    start_line(vertices_list, quad, Edge_E, level)) continue;

                 if (_corner_mask) {
                     // Equates to NE boundary.
                     if (EXISTS_SW_CORNER(quad) && Z_SE >= 1 && Z_NW < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_NE, level)) continue;
+                        start_line(vertices_list, quad, Edge_NE, level)) continue;

                     // Equates to NW boundary.
                     if (EXISTS_SE_CORNER(quad) && Z_NE >= 1 && Z_SW < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_NW, level)) continue;
+                        start_line(vertices_list, quad, Edge_NW, level)) continue;

                     // Equates to SE boundary.
                     if (EXISTS_NW_CORNER(quad) && Z_SW >= 1 && Z_NE < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_SE, level)) continue;
+                        start_line(vertices_list, quad, Edge_SE, level)) continue;

                     // Equates to SW boundary.
                     if (EXISTS_NE_CORNER(quad) && Z_NW >= 1 && Z_SE < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_SW, level)) continue;
+                        start_line(vertices_list, quad, Edge_SW, level)) continue;
                 }
             }
         }
@@ -622,9 +581,7 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
                                 !ignore_first, &start_quad_edge, 1, false);
                 if (ignore_first && !contour_line.empty())
                     contour_line.push_back(contour_line.front());
-
-                append_contour_line_to_vertices_and_codes(
-                    contour_line, vertices_list, codes_list);
+                append_contour_line_to_vertices(contour_line, vertices_list);

                 // Repeat if saddle point but not visited.
                 if (SADDLE(quad,1) && !VISITED(quad,1))
@@ -633,18 +590,7 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
         }
     }

-    PyObject* tuple = PyTuple_New(2);
-    if (tuple == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Failed to create Python tuple");
-    }
-
-    // No error checking here as filling in a brand new pre-allocated tuple.
-    PyTuple_SET_ITEM(tuple, 0, vertices_list);
-    PyTuple_SET_ITEM(tuple, 1, codes_list);
-
-    return tuple;
+    return vertices_list;
 }

 PyObject* QuadContourGenerator::create_filled_contour(const double& lower_level,
@@ -654,13 +600,13 @@ PyObject* QuadContourGenerator::create_filled_contour(const double& lower_level,

     Contour contour;

-    PyObject* vertices_list = PyList_New(0);
-    if (vertices_list == 0)
+    PyObject* vertices = PyList_New(0);
+    if (vertices == 0)
         throw std::runtime_error("Failed to create Python list");

-    PyObject* codes_list = PyList_New(0);
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
+    PyObject* codes = PyList_New(0);
+    if (codes == 0) {
+        Py_XDECREF(vertices);
         throw std::runtime_error("Failed to create Python list");
     }

@@ -691,19 +637,19 @@ PyObject* QuadContourGenerator::create_filled_contour(const double& lower_level,
         }

         // Create python objects to return for this chunk.
-        append_contour_to_vertices_and_codes(contour, vertices_list, codes_list);
+        append_contour_to_vertices_and_codes(contour, vertices, codes);
     }

     PyObject* tuple = PyTuple_New(2);
     if (tuple == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
+        Py_XDECREF(vertices);
+        Py_XDECREF(codes);
         throw std::runtime_error("Failed to create Python tuple");
     }

     // No error checking here as filling in a brand new pre-allocated tuple.
-    PyTuple_SET_ITEM(tuple, 0, vertices_list);
-    PyTuple_SET_ITEM(tuple, 1, codes_list);
+    PyTuple_SET_ITEM(tuple, 0, vertices);
+    PyTuple_SET_ITEM(tuple, 1, codes);

     return tuple;
 }
@@ -1794,8 +1740,7 @@ ContourLine* QuadContourGenerator::start_filled(
 }

 bool QuadContourGenerator::start_line(
-    PyObject* vertices_list, PyObject* codes_list, long quad, Edge edge,
-    const double& level)
+    PyObject* vertices_list, long quad, Edge edge, const double& level)
 {
     assert(vertices_list != 0 && "Null python vertices list");
     assert(is_edge_a_boundary(QuadEdge(quad, edge)) &&
@@ -1804,10 +1749,7 @@ bool QuadContourGenerator::start_line(
     QuadEdge quad_edge(quad, edge);
     ContourLine contour_line(false);
     follow_interior(contour_line, quad_edge, 1, level, true, 0, 1, false);
-
-    append_contour_line_to_vertices_and_codes(
-        contour_line, vertices_list, codes_list);
-
+    append_contour_line_to_vertices(contour_line, vertices_list);
     return VISITED(quad,1);
 }

diff --git a/src/_contour.h b/src/_contour.h
index 6f1931db0e..6232b3abd2 100644
--- a/src/_contour.h
+++ b/src/_contour.h
@@ -318,13 +318,12 @@ private:
         Hole
     } HoleOrNot;

-    // Append a C++ ContourLine to the end of two python lists.  Used for line
+    // Append a C++ ContourLine to the end of a python list.  Used for line
     // contours where each ContourLine is converted to a separate numpy array
     // of (x,y) points.
     // Clears the ContourLine too.
-    void append_contour_line_to_vertices_and_codes(ContourLine& contour_line,
-                                                   PyObject* vertices_list,
-                                                   PyObject* codes_list) const;
+    void append_contour_line_to_vertices(ContourLine& contour_line,
+                                         PyObject* vertices_list) const;

     // Append a C++ Contour to the end of two python lists.  Used for filled
     // contours where each non-hole ContourLine and its child holes are
@@ -489,14 +488,12 @@ private:
     // Start and complete a line contour that both starts and end on a
     // boundary, traversing the interior of the domain.
     //   vertices_list: Python list that the ContourLine should be appended to.
-    //   codes_list: Python list that the kind codes should be appended to.
     //   quad: index of quad to start ContourLine in.
     //   edge: boundary edge to start ContourLine from.
     //   level: contour z-value.
     // Returns true if the start quad does not need to be visited again, i.e.
     // VISITED(quad,1).
     bool start_line(PyObject* vertices_list,
-                    PyObject* codes_list,
                     long quad,
                     Edge edge,
                     const double& level);
diff --git a/src/_contour_wrapper.cpp b/src/_contour_wrapper.cpp
index ccbccc6158..da891eb700 100644
--- a/src/_contour_wrapper.cpp
+++ b/src/_contour_wrapper.cpp
@@ -152,7 +152,17 @@ static PyTypeObject* PyQuadContourGenerator_init_type(PyObject* m, PyTypeObject*

 /* Module */

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "_contour" };
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "_contour",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -160,8 +170,6 @@ PyMODINIT_FUNC PyInit__contour(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -169,10 +177,11 @@ PyMODINIT_FUNC PyInit__contour(void)
     }

     if (!PyQuadContourGenerator_init_type(m, &PyQuadContourGeneratorType)) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/src/_image.cpp b/src/_image.cpp
new file mode 100644
index 0000000000..28e509a4a4
--- /dev/null
+++ b/src/_image.cpp
@@ -0,0 +1,118 @@
+/* -*- mode: c++; c-basic-offset: 4 -*- */
+
+#define NO_IMPORT_ARRAY
+
+#include <math.h>
+
+// utilities for irregular grids
+void _bin_indices_middle(
+    unsigned int *irows, int nrows, const float *ys1, unsigned long ny, float dy, float y_min)
+{
+    int i, j, j_last;
+    unsigned int *rowstart = irows;
+    const float *ys2 = ys1 + 1;
+    const float *yl = ys1 + ny;
+    float yo = y_min + dy / 2.0f;
+    float ym = 0.5f * (*ys1 + *ys2);
+    // y/rows
+    j = 0;
+    j_last = j;
+    for (i = 0; i < nrows; i++, yo += dy, rowstart++) {
+        while (ys2 != yl && yo > ym) {
+            ys1 = ys2;
+            ys2 = ys1 + 1;
+            ym = 0.5f * (*ys1 + *ys2);
+            j++;
+        }
+        *rowstart = j - j_last;
+        j_last = j;
+    }
+}
+
+void _bin_indices_middle_linear(float *arows,
+                                unsigned int *irows,
+                                int nrows,
+                                const float *y,
+                                unsigned long ny,
+                                float dy,
+                                float y_min)
+{
+    int i;
+    int ii = 0;
+    int iilast = (int)ny - 1;
+    float sc = 1 / dy;
+    int iy0 = (int)floor(sc * (y[ii] - y_min));
+    int iy1 = (int)floor(sc * (y[ii + 1] - y_min));
+    float invgap = 1.0f / (iy1 - iy0);
+    for (i = 0; i < nrows && i <= iy0; i++) {
+        irows[i] = 0;
+        arows[i] = 1.0;
+    }
+    for (; i < nrows; i++) {
+        while (i > iy1 && ii < iilast) {
+            ii++;
+            iy0 = iy1;
+            iy1 = (int)floor(sc * (y[ii + 1] - y_min));
+            invgap = 1.0f / (iy1 - iy0);
+        }
+        if (i >= iy0 && i <= iy1) {
+            irows[i] = ii;
+            arows[i] = (iy1 - i) * invgap;
+        } else
+            break;
+    }
+    for (; i < nrows; i++) {
+        irows[i] = iilast - 1;
+        arows[i] = 0.0;
+    }
+}
+
+void _bin_indices(int *irows, int nrows, const double *y, unsigned long ny, double sc, double offs)
+{
+    int i;
+    if (sc * (y[ny - 1] - y[0]) > 0) {
+        int ii = 0;
+        int iilast = (int)ny - 1;
+        int iy0 = (int)floor(sc * (y[ii] - offs));
+        int iy1 = (int)floor(sc * (y[ii + 1] - offs));
+        for (i = 0; i < nrows && i < iy0; i++) {
+            irows[i] = -1;
+        }
+        for (; i < nrows; i++) {
+            while (i > iy1 && ii < iilast) {
+                ii++;
+                iy0 = iy1;
+                iy1 = (int)floor(sc * (y[ii + 1] - offs));
+            }
+            if (i >= iy0 && i <= iy1)
+                irows[i] = ii;
+            else
+                break;
+        }
+        for (; i < nrows; i++) {
+            irows[i] = -1;
+        }
+    } else {
+        int iilast = (int)ny - 1;
+        int ii = iilast;
+        int iy0 = (int)floor(sc * (y[ii] - offs));
+        int iy1 = (int)floor(sc * (y[ii - 1] - offs));
+        for (i = 0; i < nrows && i < iy0; i++) {
+            irows[i] = -1;
+        }
+        for (; i < nrows; i++) {
+            while (i > iy1 && ii > 1) {
+                ii--;
+                iy0 = iy1;
+                iy1 = (int)floor(sc * (y[ii - 1] - offs));
+            }
+            if (i >= iy0 && i <= iy1)
+                irows[i] = ii - 1;
+            else
+                break;
+        }
+        for (; i < nrows; i++) {
+            irows[i] = -1;
+        }
+    }
+}
diff --git a/src/_image.h b/src/_image.h
new file mode 100644
index 0000000000..37a080fff1
--- /dev/null
+++ b/src/_image.h
@@ -0,0 +1,198 @@
+/* -*- mode: c++; c-basic-offset: 4 -*- */
+
+/* image.h
+ *
+ */
+
+#ifndef MPL_IMAGE_H
+#define MPL_IMAGE_H
+
+#include <vector>
+
+
+// utilities for irregular grids
+void _bin_indices_middle(
+    unsigned int *irows, int nrows, const float *ys1, unsigned long ny, float dy, float y_min);
+void _bin_indices_middle_linear(float *arows,
+                                unsigned int *irows,
+                                int nrows,
+                                const float *y,
+                                unsigned long ny,
+                                float dy,
+                                float y_min);
+void _bin_indices(int *irows, int nrows, const double *y, unsigned long ny, double sc, double offs);
+
+template <class CoordinateArray, class ColorArray, class OutputArray>
+void pcolor(CoordinateArray &x,
+            CoordinateArray &y,
+            ColorArray &d,
+            unsigned int rows,
+            unsigned int cols,
+            float bounds[4],
+            int interpolation,
+            OutputArray &out)
+{
+    if (rows >= 32768 || cols >= 32768) {
+        throw std::runtime_error("rows and cols must both be less than 32768");
+    }
+
+    float x_min = bounds[0];
+    float x_max = bounds[1];
+    float y_min = bounds[2];
+    float y_max = bounds[3];
+    float width = x_max - x_min;
+    float height = y_max - y_min;
+    float dx = width / ((float)cols);
+    float dy = height / ((float)rows);
+
+    // Check we have something to output to
+    if (rows == 0 || cols == 0) {
+        throw std::runtime_error("Cannot scale to zero size");
+    }
+
+    if (d.dim(2) != 4) {
+        throw std::runtime_error("data must be in RGBA format");
+    }
+
+    // Check dimensions match
+    unsigned long nx = x.dim(0);
+    unsigned long ny = y.dim(0);
+    if (nx != (unsigned long)d.dim(1) || ny != (unsigned long)d.dim(0)) {
+        throw std::runtime_error("data and axis dimensions do not match");
+    }
+
+    // Allocate memory for pointer arrays
+    std::vector<unsigned int> rowstarts(rows);
+    std::vector<unsigned int> colstarts(cols);
+
+    // Calculate the pointer arrays to map input x to output x
+    unsigned int i, j;
+    unsigned int *colstart = &colstarts[0];
+    unsigned int *rowstart = &rowstarts[0];
+    const float *xs1 = x.data();
+    const float *ys1 = y.data();
+
+    // Copy data to output buffer
+    const unsigned char *start;
+    const unsigned char *inposition;
+    size_t inrowsize = nx * 4;
+    size_t rowsize = cols * 4;
+    unsigned char *position = (unsigned char *)out.data();
+    unsigned char *oldposition = NULL;
+    start = d.data();
+
+    if (interpolation == NEAREST) {
+        _bin_indices_middle(colstart, cols, xs1, nx, dx, x_min);
+        _bin_indices_middle(rowstart, rows, ys1, ny, dy, y_min);
+        for (i = 0; i < rows; i++, rowstart++) {
+            if (i > 0 && *rowstart == 0) {
+                memcpy(position, oldposition, rowsize * sizeof(unsigned char));
+                oldposition = position;
+                position += rowsize;
+            } else {
+                oldposition = position;
+                start += *rowstart * inrowsize;
+                inposition = start;
+                for (j = 0, colstart = &colstarts[0]; j < cols; j++, position += 4, colstart++) {
+                    inposition += *colstart * 4;
+                    memcpy(position, inposition, 4 * sizeof(unsigned char));
+                }
+            }
+        }
+    } else if (interpolation == BILINEAR) {
+        std::vector<float> acols(cols);
+        std::vector<float> arows(rows);
+
+        _bin_indices_middle_linear(&acols[0], colstart, cols, xs1, nx, dx, x_min);
+        _bin_indices_middle_linear(&arows[0], rowstart, rows, ys1, ny, dy, y_min);
+        double a00, a01, a10, a11, alpha, beta;
+
+        // Copy data to output buffer
+        for (i = 0; i < rows; i++) {
+            for (j = 0; j < cols; j++) {
+                alpha = arows[i];
+                beta = acols[j];
+
+                a00 = alpha * beta;
+                a01 = alpha * (1.0 - beta);
+                a10 = (1.0 - alpha) * beta;
+                a11 = 1.0 - a00 - a01 - a10;
+
+                for (size_t k = 0; k < 4; ++k) {
+                    position[k] =
+                        d(rowstart[i], colstart[j], k) * a00 +
+                        d(rowstart[i], colstart[j] + 1, k) * a01 +
+                        d(rowstart[i] + 1, colstart[j], k) * a10 +
+                        d(rowstart[i] + 1, colstart[j] + 1, k) * a11;
+                }
+                position += 4;
+            }
+        }
+    }
+}
+
+template <class CoordinateArray, class ColorArray, class Color, class OutputArray>
+void pcolor2(CoordinateArray &x,
+             CoordinateArray &y,
+             ColorArray &d,
+             unsigned int rows,
+             unsigned int cols,
+             float bounds[4],
+             Color &bg,
+             OutputArray &out)
+{
+    double x_left = bounds[0];
+    double x_right = bounds[1];
+    double y_bot = bounds[2];
+    double y_top = bounds[3];
+
+    // Check we have something to output to
+    if (rows == 0 || cols == 0) {
+        throw std::runtime_error("rows or cols is zero; there are no pixels");
+    }
+
+    if (d.dim(2) != 4) {
+        throw std::runtime_error("data must be in RGBA format");
+    }
+
+    // Check dimensions match
+    unsigned long nx = x.dim(0);
+    unsigned long ny = y.dim(0);
+    if (nx != (unsigned long)d.dim(1) + 1 || ny != (unsigned long)d.dim(0) + 1) {
+        throw std::runtime_error("data and axis bin boundary dimensions are incompatible");
+    }
+
+    if (bg.dim(0) != 4) {
+        throw std::runtime_error("bg must be in RGBA format");
+    }
+
+    std::vector<int> irows(rows);
+    std::vector<int> jcols(cols);
+
+    // Calculate the pointer arrays to map input x to output x
+    size_t i, j;
+    const double *x0 = x.data();
+    const double *y0 = y.data();
+    double sx = cols / (x_right - x_left);
+    double sy = rows / (y_top - y_bot);
+    _bin_indices(&jcols[0], cols, x0, nx, sx, x_left);
+    _bin_indices(&irows[0], rows, y0, ny, sy, y_bot);
+
+    // Copy data to output buffer
+    unsigned char *position = (unsigned char *)out.data();
+
+    for (i = 0; i < rows; i++) {
+        for (j = 0; j < cols; j++) {
+            if (irows[i] == -1 || jcols[j] == -1) {
+                memcpy(position, (const unsigned char *)bg.data(), 4 * sizeof(unsigned char));
+            } else {
+                for (size_t k = 0; k < 4; ++k) {
+                    position[k] = d(irows[i], jcols[j], k);
+                }
+            }
+            position += 4;
+        }
+    }
+}
+
+#endif
diff --git a/src/_image_resample.h b/src/_image_resample.h
index 99cedd9b2c..a508afa33e 100644
--- a/src/_image_resample.h
+++ b/src/_image_resample.h
@@ -25,7 +25,7 @@

 //----------------------------------------------------------------------------
 // Anti-Grain Geometry - Version 2.4
-// Copyright (C) 2002-2005 Maxim Shemanarev (http://antigrain.com/)
+// Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)
 //
 // Permission to copy, use, modify, sell and distribute this software
 // is granted provided this copyright notice appears in all copies.
@@ -35,7 +35,7 @@
 //----------------------------------------------------------------------------
 // Contact: mcseem@antigrain.com
 //          mcseemagg@yahoo.com
-//          http://antigrain.com/
+//          http://www.antigrain.com
 //----------------------------------------------------------------------------
 //
 // Adaptation for high precision colors has been sponsored by
diff --git a/src/_image_wrapper.cpp b/src/_image_wrapper.cpp
index f53c88acf2..73d093aa3b 100644
--- a/src/_image_wrapper.cpp
+++ b/src/_image_wrapper.cpp
@@ -1,5 +1,6 @@
 #include "mplutils.h"
 #include "_image_resample.h"
+#include "_image.h"
 #include "numpy_cpp.h"
 #include "py_converters.h"

@@ -289,13 +290,111 @@ image_resample(PyObject *self, PyObject* args, PyObject *kwargs)
     return NULL;
 }

+
+const char *image_pcolor__doc__ =
+    "pcolor(x, y, data, rows, cols, bounds)\n"
+    "\n"
+    "Generate a pseudo-color image from data on a non-uniform grid using\n"
+    "nearest neighbour or linear interpolation.\n"
+    "bounds = (x_min, x_max, y_min, y_max)\n"
+    "interpolation = NEAREST or BILINEAR \n";
+
+static PyObject *image_pcolor(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    numpy::array_view<const float, 1> x;
+    numpy::array_view<const float, 1> y;
+    numpy::array_view<const agg::int8u, 3> d;
+    npy_intp rows, cols;
+    float bounds[4];
+    int interpolation;
+
+    if (!PyArg_ParseTuple(args,
+                          "O&O&O&nn(ffff)i:pcolor",
+                          &x.converter,
+                          &x,
+                          &y.converter,
+                          &y,
+                          &d.converter_contiguous,
+                          &d,
+                          &rows,
+                          &cols,
+                          &bounds[0],
+                          &bounds[1],
+                          &bounds[2],
+                          &bounds[3],
+                          &interpolation)) {
+        return NULL;
+    }
+
+    npy_intp dim[3] = {rows, cols, 4};
+    numpy::array_view<const agg::int8u, 3> output(dim);
+
+    CALL_CPP("pcolor", (pcolor(x, y, d, rows, cols, bounds, interpolation, output)));
+
+    return output.pyobj();
+}
+
+const char *image_pcolor2__doc__ =
+    "pcolor2(x, y, data, rows, cols, bounds, bg)\n"
+    "\n"
+    "Generate a pseudo-color image from data on a non-uniform grid\n"
+    "specified by its cell boundaries.\n"
+    "bounds = (x_left, x_right, y_bot, y_top)\n"
+    "bg = ndarray of 4 uint8 representing background rgba\n";
+
+static PyObject *image_pcolor2(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    numpy::array_view<const double, 1> x;
+    numpy::array_view<const double, 1> y;
+    numpy::array_view<const agg::int8u, 3> d;
+    npy_intp rows, cols;
+    float bounds[4];
+    numpy::array_view<const agg::int8u, 1> bg;
+
+    if (!PyArg_ParseTuple(args,
+                          "O&O&O&nn(ffff)O&:pcolor2",
+                          &x.converter_contiguous,
+                          &x,
+                          &y.converter_contiguous,
+                          &y,
+                          &d.converter_contiguous,
+                          &d,
+                          &rows,
+                          &cols,
+                          &bounds[0],
+                          &bounds[1],
+                          &bounds[2],
+                          &bounds[3],
+                          &bg.converter,
+                          &bg)) {
+        return NULL;
+    }
+
+    npy_intp dim[3] = {rows, cols, 4};
+    numpy::array_view<const agg::int8u, 3> output(dim);
+
+    CALL_CPP("pcolor2", (pcolor2(x, y, d, rows, cols, bounds, bg, output)));
+
+    return output.pyobj();
+}
+
 static PyMethodDef module_functions[] = {
     {"resample", (PyCFunction)image_resample, METH_VARARGS|METH_KEYWORDS, image_resample__doc__},
+    {"pcolor", (PyCFunction)image_pcolor, METH_VARARGS, image_pcolor__doc__},
+    {"pcolor2", (PyCFunction)image_pcolor2, METH_VARARGS, image_pcolor2__doc__},
     {NULL}
 };

 static struct PyModuleDef moduledef = {
-    PyModuleDef_HEAD_INIT, "_image", NULL, 0, module_functions,
+    PyModuleDef_HEAD_INIT,
+    "_image",
+    NULL,
+    0,
+    module_functions,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };

 #pragma GCC visibility push(default)
@@ -304,8 +403,6 @@ PyMODINIT_FUNC PyInit__image(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -330,10 +427,11 @@ PyMODINIT_FUNC PyInit__image(void)
         PyModule_AddIntConstant(m, "LANCZOS", LANCZOS) ||
         PyModule_AddIntConstant(m, "BLACKMAN", BLACKMAN) ||
         PyModule_AddIntConstant(m, "_n_interpolation", _n_interpolation)) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/src/_macosx.m b/src/_macosx.m
index 9eeeab46eb..190157811e 100755
--- a/src/_macosx.m
+++ b/src/_macosx.m
@@ -237,8 +237,6 @@ static int wait_for_stdin(void)
 }
 - (void)dealloc;
 - (void)drawRect:(NSRect)rect;
-- (void)updateDevicePixelRatio:(double)scale;
-- (void)windowDidChangeBackingProperties:(NSNotification*)notification;
 - (void)windowDidResize:(NSNotification*)notification;
 - (View*)initWithFrame:(NSRect)rect;
 - (void)setCanvas: (PyObject*)newCanvas;
@@ -708,7 +706,6 @@ FigureManager_init(FigureManager *self, PyObject *args, PyObject *kwds)
     [window setDelegate: view];
     [window makeFirstResponder: view];
     [[window contentView] addSubview: view];
-    [view updateDevicePixelRatio: [window backingScaleFactor]];

     return 0;
 }
@@ -804,9 +801,6 @@ FigureManager_resize(FigureManager* self, PyObject *args, PyObject *kwds)
     Window* window = self->window;
     if(window)
     {
-        CGFloat device_pixel_ratio = [window backingScaleFactor];
-        width /= device_pixel_ratio;
-        height /= device_pixel_ratio;
         // 36 comes from hard-coded size of toolbar later in code
         [window setContentSize: NSMakeSize(width, height + 36.)];
     }
@@ -1379,15 +1373,13 @@ set_cursor(PyObject* unused, PyObject* args)
 {
     int i;
     if(!PyArg_ParseTuple(args, "i", &i)) return NULL;
-    switch (i) {
+    switch (i)
+    { case 0: [[NSCursor pointingHandCursor] set]; break;
       case 1: [[NSCursor arrowCursor] set]; break;
-      case 2: [[NSCursor pointingHandCursor] set]; break;
-      case 3: [[NSCursor crosshairCursor] set]; break;
-      case 4: [[NSCursor openHandCursor] set]; break;
+      case 2: [[NSCursor crosshairCursor] set]; break;
+      case 3: [[NSCursor openHandCursor] set]; break;
       /* OSX handles busy state itself so no need to set a cursor here */
-      case 5: break;
-      case 6: [[NSCursor resizeLeftRightCursor] set]; break;
-      case 7: [[NSCursor resizeUpDownCursor] set]; break;
+      case 4: break;
       default: return NULL;
     }
     Py_RETURN_NONE;
@@ -1660,6 +1652,15 @@ static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)

     CGContextRef cr = [[NSGraphicsContext currentContext] CGContext];

+    double new_device_scale = _get_device_scale(cr);
+
+    if (device_scale != new_device_scale) {
+        device_scale = new_device_scale;
+        if (!PyObject_CallMethod(canvas, "_set_device_scale", "d", device_scale, NULL)) {
+            PyErr_Print();
+            goto exit;
+        }
+    }
     if (!(renderer = PyObject_CallMethod(canvas, "_draw", "", NULL))
         || !(renderer_buffer = PyObject_GetAttrString(renderer, "_renderer"))) {
         PyErr_Print();
@@ -1680,33 +1681,6 @@ static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)
     PyGILState_Release(gstate);
 }

-- (void)updateDevicePixelRatio:(double)scale
-{
-    PyObject* change = NULL;
-    PyGILState_STATE gstate = PyGILState_Ensure();
-
-    device_scale = scale;
-    if (!(change = PyObject_CallMethod(canvas, "_set_device_pixel_ratio", "d", device_scale, NULL))) {
-        PyErr_Print();
-        goto exit;
-    }
-    if (PyObject_IsTrue(change)) {
-        [self setNeedsDisplay: YES];
-    }
-
-  exit:
-    Py_XDECREF(change);
-
-    PyGILState_Release(gstate);
-}
-
-- (void)windowDidChangeBackingProperties:(NSNotification *)notification
-{
-    Window* window = [notification object];
-
-    [self updateDevicePixelRatio: [window backingScaleFactor]];
-}
-
 - (void)windowDidResize: (NSNotification*)notification
 {
     int width, height;
@@ -1909,12 +1883,127 @@ static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)
     PyGILState_Release(gstate);
 }

-- (void)rightMouseDown:(NSEvent *)event { [self mouseDown: event]; }
-- (void)rightMouseUp:(NSEvent *)event { [self mouseUp: event]; }
-- (void)rightMouseDragged:(NSEvent *)event { [self mouseDragged: event]; }
-- (void)otherMouseDown:(NSEvent *)event { [self mouseDown: event]; }
-- (void)otherMouseUp:(NSEvent *)event { [self mouseUp: event]; }
-- (void)otherMouseDragged:(NSEvent *)event { [self mouseDragged: event]; }
+- (void)rightMouseDown:(NSEvent *)event
+{
+    int x, y;
+    int num = 3;
+    int dblclick = 0;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    if ([event clickCount] == 2) {
+      dblclick = 1;
+    }
+    result = PyObject_CallMethod(canvas, "button_press_event", "iiii", x, y, num, dblclick);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)rightMouseUp:(NSEvent *)event
+{
+    int x, y;
+    int num = 3;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    result = PyObject_CallMethod(canvas, "button_release_event", "iii", x, y, num);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)rightMouseDragged:(NSEvent *)event
+{
+    int x, y;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    PyGILState_STATE gstate = PyGILState_Ensure();
+    PyObject* result = PyObject_CallMethod(canvas, "motion_notify_event", "ii", x, y);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)otherMouseDown:(NSEvent *)event
+{
+    int x, y;
+    int num = 2;
+    int dblclick = 0;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    if ([event clickCount] == 2) {
+      dblclick = 1;
+    }
+    result = PyObject_CallMethod(canvas, "button_press_event", "iiii", x, y, num, dblclick);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)otherMouseUp:(NSEvent *)event
+{
+    int x, y;
+    int num = 2;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    result = PyObject_CallMethod(canvas, "button_release_event", "iii", x, y, num);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)otherMouseDragged:(NSEvent *)event
+{
+    int x, y;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    PyGILState_STATE gstate = PyGILState_Ensure();
+    PyObject* result = PyObject_CallMethod(canvas, "motion_notify_event", "ii", x, y);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}

 - (void)setRubberband:(NSRect)rect
 {
@@ -2319,7 +2408,15 @@ static struct PyMethodDef methods[] = {
 };

 static struct PyModuleDef moduledef = {
-    PyModuleDef_HEAD_INIT, "_macosx", "Mac OS X native backend", -1, methods
+    PyModuleDef_HEAD_INIT,
+    "_macosx",
+    "Mac OS X native backend",
+    -1,
+    methods,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };

 #pragma GCC visibility push(default)
diff --git a/src/_path.h b/src/_path.h
index f4c8fd036d..16a981f0e3 100644
--- a/src/_path.h
+++ b/src/_path.h
@@ -259,7 +259,7 @@ inline void points_in_path(PointArray &points,
     }

     transformed_path_t trans_path(path, trans);
-    no_nans_t no_nans_path(trans_path, true, path.has_codes());
+    no_nans_t no_nans_path(trans_path, true, path.has_curves());
     curve_t curved_path(no_nans_path);
     if (r != 0.0) {
         contour_t contoured_path(curved_path);
@@ -305,7 +305,7 @@ void points_on_path(PointArray &points,
     }

     transformed_path_t trans_path(path, trans);
-    no_nans_t nan_removed_path(trans_path, true, path.has_codes());
+    no_nans_t nan_removed_path(trans_path, true, path.has_curves());
     curve_t curved_path(nan_removed_path);
     stroke_t stroked_path(curved_path);
     stroked_path.width(r * 2.0);
@@ -378,7 +378,7 @@ void update_path_extents(PathIterator &path, agg::trans_affine &trans, extent_li
     unsigned code;

     transformed_path_t tpath(path, trans);
-    nan_removed_t nan_removed(tpath, true, path.has_codes());
+    nan_removed_t nan_removed(tpath, true, path.has_curves());

     nan_removed.rewind(0);

@@ -447,6 +447,7 @@ void point_in_path_collection(double x,
                               OffsetArray &offsets,
                               agg::trans_affine &offset_trans,
                               bool filled,
+                              e_offset_position offset_position,
                               std::vector<int> &result)
 {
     size_t Npaths = paths.size();
@@ -482,7 +483,11 @@ void point_in_path_collection(double x,
             double xo = offsets(i % Noffsets, 0);
             double yo = offsets(i % Noffsets, 1);
             offset_trans.transform(&xo, &yo);
-            trans *= agg::trans_affine_translation(xo, yo);
+            if (offset_position == OFFSET_POSITION_DATA) {
+                trans = agg::trans_affine_translation(xo, yo) * trans;
+            } else {
+                trans *= agg::trans_affine_translation(xo, yo);
+            }
         }

         if (filled) {
@@ -512,7 +517,7 @@ bool path_in_path(PathIterator1 &a,
     }

     transformed_path_t b_path_trans(b, btrans);
-    no_nans_t b_no_nans(b_path_trans, true, b.has_codes());
+    no_nans_t b_no_nans(b_path_trans, true, b.has_curves());
     curve_t b_curved(b_no_nans);

     double x, y;
@@ -529,7 +534,7 @@ bool path_in_path(PathIterator1 &a,
 /** The clip_path_to_rect code here is a clean-room implementation of
     the Sutherland-Hodgman clipping algorithm described here:

-  https://en.wikipedia.org/wiki/Sutherland-Hodgman_clipping_algorithm
+  http://en.wikipedia.org/wiki/Sutherland-Hodgman_clipping_algorithm
 */

 namespace clip_to_rect_filters
@@ -884,8 +889,8 @@ bool path_intersects_path(PathIterator1 &p1, PathIterator2 &p2)
         return false;
     }

-    no_nans_t n1(p1, true, p1.has_codes());
-    no_nans_t n2(p2, true, p2.has_codes());
+    no_nans_t n1(p1, true, p1.has_curves());
+    no_nans_t n2(p2, true, p2.has_curves());

     curve_t c1(n1);
     curve_t c2(n2);
@@ -949,7 +954,7 @@ bool path_intersects_rectangle(PathIterator &path,
         return false;
     }

-    no_nans_t no_nans(path, true, path.has_codes());
+    no_nans_t no_nans(path, true, path.has_curves());
     curve_t curve(no_nans);

     double cx = (rect_x1 + rect_x2) * 0.5, cy = (rect_y1 + rect_y2) * 0.5;
@@ -998,8 +1003,8 @@ void convert_path_to_polygons(PathIterator &path,
     bool simplify = path.should_simplify();

     transformed_path_t tpath(path, trans);
-    nan_removal_t nan_removed(tpath, true, path.has_codes());
-    clipped_t clipped(nan_removed, do_clip, width, height);
+    nan_removal_t nan_removed(tpath, true, path.has_curves());
+    clipped_t clipped(nan_removed, do_clip && !path.has_curves(), width, height);
     simplify_t simplified(clipped, simplify, path.simplify_threshold());
     curve_t curve(simplified);

@@ -1063,8 +1068,8 @@ void cleanup_path(PathIterator &path,
     typedef Sketch<curve_t> sketch_t;

     transformed_path_t tpath(path, trans);
-    nan_removal_t nan_removed(tpath, remove_nans, path.has_codes());
-    clipped_t clipped(nan_removed, do_clip, rect);
+    nan_removal_t nan_removed(tpath, remove_nans, path.has_curves());
+    clipped_t clipped(nan_removed, do_clip && !path.has_curves(), rect);
     snapped_t snapped(clipped, snap_mode, path.total_vertices(), stroke_width);
     simplify_t simplified(snapped, do_simplify, path.simplify_threshold());

@@ -1147,14 +1152,15 @@ bool __convert_to_string(PathIterator &path,
     double last_x = 0.0;
     double last_y = 0.0;

+    const int sizes[] = { 1, 1, 2, 3 };
     int size = 0;
     unsigned code;

     while ((code = path.vertex(&x[0], &y[0])) != agg::path_cmd_stop) {
-        if (code == CLOSEPOLY) {
+        if (code == 0x4f) {
             buffer += codes[4];
         } else if (code < 5) {
-            size = NUM_VERTICES[code];
+            size = sizes[code - 1];

             for (int i = 1; i < size; ++i) {
                 unsigned subcode = path.vertex(&x[i], &y[i]);
@@ -1222,8 +1228,8 @@ bool convert_to_string(PathIterator &path,
     bool do_clip = (clip_rect.x1 < clip_rect.x2 && clip_rect.y1 < clip_rect.y2);

     transformed_path_t tpath(path, trans);
-    nan_removal_t nan_removed(tpath, true, path.has_codes());
-    clipped_t clipped(nan_removed, do_clip, clip_rect);
+    nan_removal_t nan_removed(tpath, true, path.has_curves());
+    clipped_t clipped(nan_removed, do_clip && !path.has_curves(), clip_rect);
     simplify_t simplified(clipped, simplify, path.simplify_threshold());

     buffersize = path.total_vertices() * (precision + 5) * 4;
diff --git a/src/_path_wrapper.cpp b/src/_path_wrapper.cpp
index 6911059d0d..2b58aec0cf 100644
--- a/src/_path_wrapper.cpp
+++ b/src/_path_wrapper.cpp
@@ -269,18 +269,17 @@ const char *Py_get_path_collection_extents__doc__ =
 static PyObject *Py_get_path_collection_extents(PyObject *self, PyObject *args, PyObject *kwds)
 {
     agg::trans_affine master_transform;
-    py::PathGenerator paths;
+    PyObject *pathsobj;
     numpy::array_view<const double, 3> transforms;
     numpy::array_view<const double, 2> offsets;
     agg::trans_affine offset_trans;
     extent_limits e;

     if (!PyArg_ParseTuple(args,
-                          "O&O&O&O&O&:get_path_collection_extents",
+                          "O&OO&O&O&:get_path_collection_extents",
                           &convert_trans_affine,
                           &master_transform,
-                          &convert_pathgen,
-                          &paths,
+                          &pathsobj,
                           &convert_transforms,
                           &transforms,
                           &convert_points,
@@ -290,9 +289,18 @@ static PyObject *Py_get_path_collection_extents(PyObject *self, PyObject *args,
         return NULL;
     }

-    CALL_CPP("get_path_collection_extents",
-             (get_path_collection_extents(
-                 master_transform, paths, transforms, offsets, offset_trans, e)));
+    try
+    {
+        py::PathGenerator paths(pathsobj);
+
+        CALL_CPP("get_path_collection_extents",
+                 (get_path_collection_extents(
+                     master_transform, paths, transforms, offsets, offset_trans, e)));
+    }
+    catch (const py::exception &)
+    {
+        return NULL;
+    }

     npy_intp dims[] = { 2, 2 };
     numpy::array_view<double, 2> extents(dims);
@@ -319,23 +327,22 @@ static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args, PyO
 {
     double x, y, radius;
     agg::trans_affine master_transform;
-    py::PathGenerator paths;
+    PyObject *pathsobj;
     numpy::array_view<const double, 3> transforms;
     numpy::array_view<const double, 2> offsets;
     agg::trans_affine offset_trans;
     bool filled;
-    PyObject *offset_position; // no longer used
+    e_offset_position offset_position;
     std::vector<int> result;

     if (!PyArg_ParseTuple(args,
-                          "dddO&O&O&O&O&O&O:point_in_path_collection",
+                          "dddO&OO&O&O&O&O&:point_in_path_collection",
                           &x,
                           &y,
                           &radius,
                           &convert_trans_affine,
                           &master_transform,
-                          &convert_pathgen,
-                          &paths,
+                          &pathsobj,
                           &convert_transforms,
                           &transforms,
                           &convert_points,
@@ -344,21 +351,32 @@ static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args, PyO
                           &offset_trans,
                           &convert_bool,
                           &filled,
+                          &convert_offset_position,
                           &offset_position)) {
         return NULL;
     }

-    CALL_CPP("point_in_path_collection",
-             (point_in_path_collection(x,
-                                       y,
-                                       radius,
-                                       master_transform,
-                                       paths,
-                                       transforms,
-                                       offsets,
-                                       offset_trans,
-                                       filled,
-                                       result)));
+    try
+    {
+        py::PathGenerator paths(pathsobj);
+
+        CALL_CPP("point_in_path_collection",
+                 (point_in_path_collection(x,
+                                           y,
+                                           radius,
+                                           master_transform,
+                                           paths,
+                                           transforms,
+                                           offsets,
+                                           offset_trans,
+                                           filled,
+                                           offset_position,
+                                           result)));
+    }
+    catch (const py::exception &)
+    {
+        return NULL;
+    }

     npy_intp dims[] = {(npy_intp)result.size() };
     numpy::array_view<int, 1> pyresult(dims);
@@ -892,15 +910,31 @@ static PyMethodDef module_functions[] = {
 };

 static struct PyModuleDef moduledef = {
-    PyModuleDef_HEAD_INIT, "_path", NULL, 0, module_functions
+    PyModuleDef_HEAD_INIT,
+    "_path",
+    NULL,
+    0,
+    module_functions,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };

 #pragma GCC visibility push(default)

 PyMODINIT_FUNC PyInit__path(void)
 {
+    PyObject *m;
+    m = PyModule_Create(&moduledef);
+
+    if (m == NULL) {
+        return NULL;
+    }
+
     import_array();
-    return PyModule_Create(&moduledef);
+
+    return m;
 }

 #pragma GCC visibility pop
diff --git a/src/_tkagg.cpp b/src/_tkagg.cpp
index 7f72ed2ea6..5f058d14e0 100644
--- a/src/_tkagg.cpp
+++ b/src/_tkagg.cpp
@@ -27,9 +27,7 @@
 #endif

 #ifdef WIN32_DLL
-#include <string>
 #include <windows.h>
-#include <commctrl.h>
 #define PSAPI_VERSION 1
 #include <psapi.h>  // Must be linked with 'psapi' library
 #define dlsym GetProcAddress
@@ -50,12 +48,7 @@ static int convert_voidptr(PyObject *obj, void *p)
 // Global vars for Tk functions.  We load these symbols from the tkinter
 // extension module or loaded Tk libraries at run-time.
 static Tk_FindPhoto_t TK_FIND_PHOTO;
-static Tk_PhotoPutBlock_t TK_PHOTO_PUT_BLOCK;
-#ifdef WIN32_DLL
-// Global vars for Tcl functions.  We load these symbols from the tkinter
-// extension module or loaded Tcl libraries at run-time.
-static Tcl_SetVar_t TCL_SETVAR;
-#endif
+static Tk_PhotoPutBlock_NoComposite_t TK_PHOTO_PUT_BLOCK_NO_COMPOSITE;

 static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
 {
@@ -63,16 +56,13 @@ static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
     char const *photo_name;
     int height, width;
     unsigned char *data_ptr;
-    int comp_rule;
-    int put_retval;
     int o0, o1, o2, o3;
     int x1, x2, y1, y2;
     Tk_PhotoHandle photo;
     Tk_PhotoImageBlock block;
-    if (!PyArg_ParseTuple(args, "O&s(iiO&)i(iiii)(iiii):blit",
+    if (!PyArg_ParseTuple(args, "O&s(iiO&)(iiii)(iiii):blit",
                           convert_voidptr, &interp, &photo_name,
                           &height, &width, convert_voidptr, &data_ptr,
-                          &comp_rule,
                           &o0, &o1, &o2, &o3,
                           &x1, &x2, &y1, &y2)) {
         goto exit;
@@ -85,12 +75,7 @@ static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
         PyErr_SetString(PyExc_ValueError, "Attempting to draw out of bounds");
         goto exit;
     }
-    if (comp_rule != TK_PHOTO_COMPOSITE_OVERLAY && comp_rule != TK_PHOTO_COMPOSITE_SET) {
-        PyErr_SetString(PyExc_ValueError, "Invalid comp_rule argument");
-        goto exit;
-    }

-    Py_BEGIN_ALLOW_THREADS
     block.pixelPtr = data_ptr + 4 * ((height - y2) * width + x1);
     block.width = x2 - x1;
     block.height = y2 - y1;
@@ -100,13 +85,8 @@ static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
     block.offset[1] = o1;
     block.offset[2] = o2;
     block.offset[3] = o3;
-    put_retval = TK_PHOTO_PUT_BLOCK(
-        interp, photo, &block, x1, height - y2, x2 - x1, y2 - y1, comp_rule);
-    Py_END_ALLOW_THREADS
-    if (put_retval == TCL_ERROR) {
-        return PyErr_NoMemory();
-    }
-
+    TK_PHOTO_PUT_BLOCK_NO_COMPOSITE(
+        photo, &block, x1, height - y2, x2 - x1, y2 - y1);
 exit:
     if (PyErr_Occurred()) {
         return NULL;
@@ -115,163 +95,48 @@ exit:
     }
 }

-#ifdef WIN32_DLL
-LRESULT CALLBACK
-DpiSubclassProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam,
-                UINT_PTR uIdSubclass, DWORD_PTR dwRefData)
-{
-    switch (uMsg) {
-    case WM_DPICHANGED:
-        // This function is a subclassed window procedure, and so is run during
-        // the Tcl/Tk event loop. Unfortunately, Tkinter has a *second* lock on
-        // Tcl threading that is not exposed publicly, but is currently taken
-        // while we're in the window procedure. So while we can take the GIL to
-        // call Python code, we must not also call *any* Tk code from Python.
-        // So stay with Tcl calls in C only.
-        {
-            // This variable naming must match the name used in
-            // lib/matplotlib/backends/_backend_tk.py:FigureManagerTk.
-            std::string var_name("window_dpi");
-            var_name += std::to_string((unsigned long long)hwnd);
-
-            // X is high word, Y is low word, but they are always equal.
-            std::string dpi = std::to_string(LOWORD(wParam));
-
-            Tcl_Interp* interp = (Tcl_Interp*)dwRefData;
-            TCL_SETVAR(interp, var_name.c_str(), dpi.c_str(), 0);
-        }
-        return 0;
-    case WM_NCDESTROY:
-        RemoveWindowSubclass(hwnd, DpiSubclassProc, uIdSubclass);
-        break;
-    }
-
-    return DefSubclassProc(hwnd, uMsg, wParam, lParam);
-}
-#endif
-
-static PyObject*
-mpl_tk_enable_dpi_awareness(PyObject* self, PyObject*const* args,
-                            Py_ssize_t nargs)
-{
-    if (nargs != 2) {
-        return PyErr_Format(PyExc_TypeError,
-                            "enable_dpi_awareness() takes 2 positional "
-                            "arguments but %zd were given",
-                            nargs);
-    }
-
-#ifdef WIN32_DLL
-    HWND frame_handle = NULL;
-    Tcl_Interp *interp = NULL;
-
-    if (!convert_voidptr(args[0], &frame_handle)) {
-        return NULL;
-    }
-    if (!convert_voidptr(args[1], &interp)) {
-        return NULL;
-    }
-
-#ifdef _DPI_AWARENESS_CONTEXTS_
-    HMODULE user32 = LoadLibrary("user32.dll");
-
-    typedef DPI_AWARENESS_CONTEXT (WINAPI *GetWindowDpiAwarenessContext_t)(HWND);
-    GetWindowDpiAwarenessContext_t GetWindowDpiAwarenessContextPtr =
-        (GetWindowDpiAwarenessContext_t)GetProcAddress(
-            user32, "GetWindowDpiAwarenessContext");
-    if (GetWindowDpiAwarenessContextPtr == NULL) {
-        FreeLibrary(user32);
-        Py_RETURN_FALSE;
-    }
-
-    typedef BOOL (WINAPI *AreDpiAwarenessContextsEqual_t)(DPI_AWARENESS_CONTEXT,
-                                                          DPI_AWARENESS_CONTEXT);
-    AreDpiAwarenessContextsEqual_t AreDpiAwarenessContextsEqualPtr =
-        (AreDpiAwarenessContextsEqual_t)GetProcAddress(
-            user32, "AreDpiAwarenessContextsEqual");
-    if (AreDpiAwarenessContextsEqualPtr == NULL) {
-        FreeLibrary(user32);
-        Py_RETURN_FALSE;
-    }
-
-    DPI_AWARENESS_CONTEXT ctx = GetWindowDpiAwarenessContextPtr(frame_handle);
-    bool per_monitor = (
-        AreDpiAwarenessContextsEqualPtr(
-            ctx, DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2) ||
-        AreDpiAwarenessContextsEqualPtr(
-            ctx, DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE));
-
-    if (per_monitor) {
-        // Per monitor aware means we need to handle WM_DPICHANGED by wrapping
-        // the Window Procedure, and the Python side needs to trace the Tk
-        // window_dpi variable stored on interp.
-        SetWindowSubclass(frame_handle, DpiSubclassProc, 0, (DWORD_PTR)interp);
-    }
-    FreeLibrary(user32);
-    return PyBool_FromLong(per_monitor);
-#endif
-#endif
-
-    Py_RETURN_NONE;
-}
-
 static PyMethodDef functions[] = {
     { "blit", (PyCFunction)mpl_tk_blit, METH_VARARGS },
-    { "enable_dpi_awareness", (PyCFunction)mpl_tk_enable_dpi_awareness,
-      METH_FASTCALL },
     { NULL, NULL } /* sentinel */
 };

-// Functions to fill global Tcl/Tk function pointers by dynamic loading.
+// Functions to fill global Tk function pointers by dynamic loading

 template <class T>
 int load_tk(T lib)
 {
-    // Try to fill Tk global vars with function pointers. Return the number of
+    // Try to fill Tk global vars with function pointers.  Return the number of
     // functions found.
     return
         !!(TK_FIND_PHOTO =
             (Tk_FindPhoto_t)dlsym(lib, "Tk_FindPhoto")) +
-        !!(TK_PHOTO_PUT_BLOCK =
-            (Tk_PhotoPutBlock_t)dlsym(lib, "Tk_PhotoPutBlock"));
+        !!(TK_PHOTO_PUT_BLOCK_NO_COMPOSITE =
+            (Tk_PhotoPutBlock_NoComposite_t)dlsym(lib, "Tk_PhotoPutBlock_NoComposite"));
 }

 #ifdef WIN32_DLL

-template <class T>
-int load_tcl(T lib)
-{
-    // Try to fill Tcl global vars with function pointers. Return the number of
-    // functions found.
-    return
-        !!(TCL_SETVAR = (Tcl_SetVar_t)dlsym(lib, "Tcl_SetVar"));
-}
-
-/* On Windows, we can't load the tkinter module to get the Tcl/Tk symbols,
- * because Windows does not load symbols into the library name-space of
- * importing modules. So, knowing that tkinter has already been imported by
- * Python, we scan all modules in the running process for the Tcl/Tk function
- * names.
+/*
+ * On Windows, we can't load the tkinter module to get the Tk symbols, because
+ * Windows does not load symbols into the library name-space of importing
+ * modules. So, knowing that tkinter has already been imported by Python, we
+ * scan all modules in the running process for the Tk function names.
  */

 void load_tkinter_funcs(void)
 {
-    // Load Tcl/Tk functions by searching all modules in current process.
+    // Load Tk functions by searching all modules in current process.
     HMODULE hMods[1024];
     HANDLE hProcess;
     DWORD cbNeeded;
     unsigned int i;
-    bool tcl_ok = false, tk_ok = false;
     // Returns pseudo-handle that does not need to be closed
     hProcess = GetCurrentProcess();
-    // Iterate through modules in this process looking for Tcl/Tk names.
+    // Iterate through modules in this process looking for Tk names.
     if (EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded)) {
         for (i = 0; i < (cbNeeded / sizeof(HMODULE)); i++) {
-            if (!tcl_ok) {
-                tcl_ok = load_tcl(hMods[i]);
-            }
-            if (!tk_ok) {
-                tk_ok = load_tk(hMods[i]);
+            if (load_tk(hMods[i])) {
+                return;
             }
         }
     }
@@ -336,7 +201,7 @@ exit:
 #endif // end not Windows

 static PyModuleDef _tkagg_module = {
-    PyModuleDef_HEAD_INIT, "_tkagg", NULL, -1, functions
+    PyModuleDef_HEAD_INIT, "_tkagg", "", -1, functions, NULL, NULL, NULL, NULL
 };

 #pragma GCC visibility push(default)
@@ -346,16 +211,11 @@ PyMODINIT_FUNC PyInit__tkagg(void)
     load_tkinter_funcs();
     if (PyErr_Occurred()) {
         return NULL;
-#ifdef WIN32_DLL
-    } else if (!TCL_SETVAR) {
-        PyErr_SetString(PyExc_RuntimeError, "Failed to load Tcl_SetVar");
-        return NULL;
-#endif
     } else if (!TK_FIND_PHOTO) {
         PyErr_SetString(PyExc_RuntimeError, "Failed to load Tk_FindPhoto");
         return NULL;
-    } else if (!TK_PHOTO_PUT_BLOCK) {
-        PyErr_SetString(PyExc_RuntimeError, "Failed to load Tk_PhotoPutBlock");
+    } else if (!TK_PHOTO_PUT_BLOCK_NO_COMPOSITE) {
+        PyErr_SetString(PyExc_RuntimeError, "Failed to load Tk_PhotoPutBlock_NoComposite");
         return NULL;
     }
     return PyModule_Create(&_tkagg_module);
diff --git a/src/_tkmini.h b/src/_tkmini.h
index be7c13fa14..d99b732919 100644
--- a/src/_tkmini.h
+++ b/src/_tkmini.h
@@ -86,25 +86,14 @@ typedef struct Tk_PhotoImageBlock
     int offset[4];
 } Tk_PhotoImageBlock;

-#define TK_PHOTO_COMPOSITE_OVERLAY     0  // apply transparency rules pixel-wise
-#define TK_PHOTO_COMPOSITE_SET         1  // set image buffer directly
-#define TCL_OK     0
-#define TCL_ERROR  1
-
 /* Typedefs derived from function signatures in Tk header */
 /* Tk_FindPhoto typedef */
 typedef Tk_PhotoHandle (*Tk_FindPhoto_t) (Tcl_Interp *interp, const char
         *imageName);
-/* Tk_PhotoPutBLock typedef */
-typedef int (*Tk_PhotoPutBlock_t) (Tcl_Interp *interp, Tk_PhotoHandle handle,
+/* Tk_PhotoPutBLock_NoComposite typedef */
+typedef void (*Tk_PhotoPutBlock_NoComposite_t) (Tk_PhotoHandle handle,
         Tk_PhotoImageBlock *blockPtr, int x, int y,
-        int width, int height, int compRule);
-
-#ifdef WIN32_DLL
-/* Typedefs derived from function signatures in Tcl header */
-typedef const char *(*Tcl_SetVar_t)(Tcl_Interp *interp, const char *varName,
-                                    const char *newValue, int flags);
-#endif
+        int width, int height);

 #ifdef __cplusplus
 }
diff --git a/src/_ttconv.cpp b/src/_ttconv.cpp
index b88edbd288..2fadb9bfa5 100644
--- a/src/_ttconv.cpp
+++ b/src/_ttconv.cpp
@@ -150,6 +150,81 @@ static PyObject *convert_ttf_to_ps(PyObject *self, PyObject *args, PyObject *kwd
     return Py_None;
 }

+class PythonDictionaryCallback : public TTDictionaryCallback
+{
+    PyObject *_dict;
+
+  public:
+    PythonDictionaryCallback(PyObject *dict)
+    {
+        _dict = dict;
+    }
+
+    virtual void add_pair(const char *a, const char *b)
+    {
+        assert(a != NULL);
+        assert(b != NULL);
+        PyObject *value = PyBytes_FromString(b);
+        if (!value) {
+            throw py::exception();
+        }
+        if (PyDict_SetItemString(_dict, a, value)) {
+            Py_DECREF(value);
+            throw py::exception();
+        }
+        Py_DECREF(value);
+    }
+};
+
+static PyObject *py_get_pdf_charprocs(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    const char *filename;
+    std::vector<int> glyph_ids;
+    PyObject *result;
+
+    static const char *kwlist[] = { "filename", "glyph_ids", NULL };
+    if (!PyArg_ParseTupleAndKeywords(args,
+                                     kwds,
+                                     "y|O&:get_pdf_charprocs",
+                                     (char **)kwlist,
+                                     &filename,
+                                     pyiterable_to_vector_int,
+                                     &glyph_ids)) {
+        return NULL;
+    }
+
+    result = PyDict_New();
+    if (!result) {
+        return NULL;
+    }
+
+    PythonDictionaryCallback dict(result);
+
+    try
+    {
+        ::get_pdf_charprocs(filename, glyph_ids, dict);
+    }
+    catch (TTException &e)
+    {
+        Py_DECREF(result);
+        PyErr_SetString(PyExc_RuntimeError, e.getMessage());
+        return NULL;
+    }
+    catch (const py::exception &)
+    {
+        Py_DECREF(result);
+        return NULL;
+    }
+    catch (...)
+    {
+        Py_DECREF(result);
+        PyErr_SetString(PyExc_RuntimeError, "Unknown C++ exception");
+        return NULL;
+    }
+
+    return result;
+}
+
 static PyMethodDef ttconv_methods[] =
 {
     {
@@ -164,12 +239,26 @@ static PyMethodDef ttconv_methods[] =
         "font data will be written to.\n"
         "fonttype may be either 3 or 42.  Type 3 is a \"raw Postscript\" font. "
         "Type 42 is an embedded Truetype font.  Glyph subsetting is not supported "
-        "for Type 42 fonts within this module (needs to be done externally).\n"
+        "for Type 42 fonts.\n"
         "glyph_ids (optional) is a list of glyph ids (integers) to keep when "
         "subsetting to a Type 3 font.  If glyph_ids is not provided or is None, "
         "then all glyphs will be included.  If any of the glyphs specified are "
         "composite glyphs, then the component glyphs will also be included."
     },
+    {
+        "get_pdf_charprocs", (PyCFunction)py_get_pdf_charprocs, METH_VARARGS | METH_KEYWORDS,
+        "get_pdf_charprocs(filename, glyph_ids)\n"
+        "\n"
+        "Given a Truetype font file, returns a dictionary containing the PDF Type 3\n"
+        "representation of its paths.  Useful for subsetting a Truetype font inside\n"
+        "of a PDF file.\n"
+        "\n"
+        "filename is the path to a TTF font file.\n"
+        "glyph_ids is a list of the numeric glyph ids to include.\n"
+        "The return value is a dictionary where the keys are glyph names and\n"
+        "the values are the stream content needed to render that glyph.  This\n"
+        "is useful to generate the CharProcs dictionary in a PDF Type 3 font.\n"
+    },
     {0, 0, 0, 0}  /* Sentinel */
 };

@@ -184,6 +273,7 @@ static PyModuleDef ttconv_module = {
     module_docstring,
     -1,
     ttconv_methods,
+    NULL, NULL, NULL, NULL
 };

 #pragma GCC visibility push(default)
@@ -191,7 +281,11 @@ static PyModuleDef ttconv_module = {
 PyMODINIT_FUNC
 PyInit__ttconv(void)
 {
-    return PyModule_Create(&ttconv_module);
+    PyObject* m;
+
+    m = PyModule_Create(&ttconv_module);
+
+    return m;
 }

 #pragma GCC visibility pop
diff --git a/src/checkdep_freetype2.c b/src/checkdep_freetype2.c
index 8d9d8ca24a..d0e8fd34fb 100644
--- a/src/checkdep_freetype2.c
+++ b/src/checkdep_freetype2.c
@@ -1,7 +1,7 @@
 #ifdef __has_include
   #if !__has_include(<ft2build.h>)
     #error "FreeType version 2.3 or higher is required. \
-You may unset the system_freetype entry in mplsetup.cfg to let Matplotlib download it."
+You may unset the system_freetype entry in setup.cfg to let Matplotlib download it."
   #endif
 #endif

@@ -15,5 +15,5 @@ You may unset the system_freetype entry in mplsetup.cfg to let Matplotlib downlo
   XSTR(FREETYPE_MAJOR) "." XSTR(FREETYPE_MINOR) "." XSTR(FREETYPE_PATCH) ".")
 #if FREETYPE_MAJOR << 16 + FREETYPE_MINOR << 8 + FREETYPE_PATCH < 0x020300
   #error "FreeType version 2.3 or higher is required. \
-You may unset the system_freetype entry in mplsetup.cfg to let Matplotlib download it."
+You may unset the system_freetype entry in setup.cfg to let Matplotlib download it."
 #endif
diff --git a/src/ft2font.cpp b/src/ft2font.cpp
index bb7fb1fa29..720d8a622d 100644
--- a/src/ft2font.cpp
+++ b/src/ft2font.cpp
@@ -20,7 +20,7 @@
  To improve the hinting of the fonts, this code uses a hack
  presented here:

- http://agg.sourceforge.net/antigrain.com/research/font_rasterization/index.html
+ http://antigrain.com/research/font_rasterization/index.html

  The idea is to limit the effect of hinting in the x-direction, while
  preserving hinting in the y-direction.  Since freetype does not
@@ -99,13 +99,13 @@ void FT2Image::draw_bitmap(FT_Bitmap *bitmap, FT_Int x, FT_Int y)
     FT_Int char_width = bitmap->width;
     FT_Int char_height = bitmap->rows;

-    FT_Int x1 = std::min(std::max(x, 0), image_width);
-    FT_Int y1 = std::min(std::max(y, 0), image_height);
-    FT_Int x2 = std::min(std::max(x + char_width, 0), image_width);
-    FT_Int y2 = std::min(std::max(y + char_height, 0), image_height);
+    FT_Int x1 = CLAMP(x, 0, image_width);
+    FT_Int y1 = CLAMP(y, 0, image_height);
+    FT_Int x2 = CLAMP(x + char_width, 0, image_width);
+    FT_Int y2 = CLAMP(y + char_height, 0, image_height);

-    FT_Int x_start = std::max(0, -x);
-    FT_Int y_offset = y1 - std::max(0, -y);
+    FT_Int x_start = MAX(0, -x);
+    FT_Int y_offset = y1 - MAX(0, -y);

     if (bitmap->pixel_mode == FT_PIXEL_MODE_GRAY) {
         for (FT_Int i = y1; i < y2; ++i) {
@@ -172,21 +172,15 @@ FT2Image::draw_rect_filled(unsigned long x0, unsigned long y0, unsigned long x1,
 static FT_UInt ft_get_char_index_or_warn(FT_Face face, FT_ULong charcode)
 {
     FT_UInt glyph_index = FT_Get_Char_Index(face, charcode);
-    if (glyph_index) {
-        return glyph_index;
-    }
-    PyObject *text_helpers = NULL, *tmp = NULL;
-    if (!(text_helpers = PyImport_ImportModule("matplotlib._text_helpers")) ||
-        !(tmp = PyObject_CallMethod(text_helpers, "warn_on_missing_glyph", "k", charcode))) {
-        goto exit;
-    }
-exit:
-    Py_XDECREF(text_helpers);
-    Py_XDECREF(tmp);
-    if (PyErr_Occurred()) {
-        throw py::exception();
+    if (!glyph_index) {
+        PyErr_WarnFormat(NULL, 1, "Glyph %lu missing from current font.", charcode);
+        // Apparently PyErr_WarnFormat returns 0 even if the exception propagates
+        // due to running with -Werror, so check the error flag directly instead.
+        if (PyErr_Occurred()) {
+            throw py::exception();
+        }
     }
-    return 0;
+    return glyph_index;
 }


@@ -209,10 +203,10 @@ ft_outline_move_to(FT_Vector const* to, void* user)
     ft_outline_decomposer* d = reinterpret_cast<ft_outline_decomposer*>(user);
     if (d->codes) {
         if (d->index) {
-            // Appending CLOSEPOLY is important to make patheffects work.
+            // Appending ENDPOLY is important to make patheffects work.
             *(d->vertices++) = 0;
             *(d->vertices++) = 0;
-            *(d->codes++) = CLOSEPOLY;
+            *(d->codes++) = ENDPOLY;
         }
         *(d->vertices++) = to->x / 64.;
         *(d->vertices++) = to->y / 64.;
@@ -292,7 +286,7 @@ FT2Font::get_path()
                      "FT_Outline_Decompose failed with error 0x%x", error);
         return NULL;
     }
-    if (!decomposer.index) {  // Don't append CLOSEPOLY to null glyphs.
+    if (!decomposer.index) {  // Don't append ENDPOLY to null glyphs.
       npy_intp vertices_dims[2] = { 0, 2 };
       numpy::array_view<double, 2> vertices(vertices_dims);
       npy_intp codes_dims[1] = { 0 };
@@ -315,7 +309,7 @@ FT2Font::get_path()
     }
     *(decomposer.vertices++) = 0;
     *(decomposer.vertices++) = 0;
-    *(decomposer.codes++) = CLOSEPOLY;
+    *(decomposer.codes++) = ENDPOLY;
     return Py_BuildValue("NN", vertices.pyobj(), codes.pyobj());
 }

diff --git a/src/ft2font_wrapper.cpp b/src/ft2font_wrapper.cpp
index ddcb8b5b0a..362df3a2d3 100644
--- a/src/ft2font_wrapper.cpp
+++ b/src/ft2font_wrapper.cpp
@@ -258,6 +258,7 @@ typedef struct
 {
     PyObject_HEAD
     FT2Font *x;
+    PyObject *fname;
     PyObject *py_file;
     FT_StreamRec stream;
     Py_ssize_t shape[2];
@@ -296,8 +297,6 @@ exit:

 static void close_file_callback(FT_Stream stream)
 {
-    PyObject *type, *value, *traceback;
-    PyErr_Fetch(&type, &value, &traceback);
     PyFT2Font *self = (PyFT2Font *)stream->descriptor.pointer;
     PyObject *close_result = NULL;
     if (!(close_result = PyObject_CallMethod(self->py_file, "close", ""))) {
@@ -309,7 +308,6 @@ exit:
     if (PyErr_Occurred()) {
         PyErr_WriteUnraisable((PyObject*)self);
     }
-    PyErr_Restore(type, value, traceback);
 }

 static PyTypeObject PyFT2FontType;
@@ -319,6 +317,7 @@ static PyObject *PyFT2Font_new(PyTypeObject *type, PyObject *args, PyObject *kwd
     PyFT2Font *self;
     self = (PyFT2Font *)type->tp_alloc(type, 0);
     self->x = NULL;
+    self->fname = NULL;
     self->py_file = NULL;
     memset(&self->stream, 0, sizeof(FT_StreamRec));
     return (PyObject *)self;
@@ -409,6 +408,9 @@ static int PyFT2Font_init(PyFT2Font *self, PyObject *args, PyObject *kwds)

     CALL_CPP_INIT("FT2Font->set_kerning_factor", (self->x->set_kerning_factor(kerning_factor)));

+    Py_INCREF(filename);
+    self->fname = filename;
+
 exit:
     return PyErr_Occurred() ? -1 : 0;
 }
@@ -417,6 +419,7 @@ static void PyFT2Font_dealloc(PyFT2Font *self)
 {
     delete self->x;
     Py_XDECREF(self->py_file);
+    Py_XDECREF(self->fname);
     Py_TYPE(self)->tp_free((PyObject *)self);
 }

@@ -1417,12 +1420,12 @@ static PyObject *PyFT2Font_underline_thickness(PyFT2Font *self, void *closure)

 static PyObject *PyFT2Font_fname(PyFT2Font *self, void *closure)
 {
-    if (self->stream.close) {  // Called passed a filename to the constructor.
-        return PyObject_GetAttrString(self->py_file, "name");
-    } else {
-        Py_INCREF(self->py_file);
-        return self->py_file;
+    if (self->fname) {
+        Py_INCREF(self->fname);
+        return self->fname;
     }
+
+    Py_RETURN_NONE;
 }

 static int PyFT2Font_get_buffer(PyFT2Font *self, Py_buffer *buf, int flags)
@@ -1530,7 +1533,17 @@ static PyTypeObject *PyFT2Font_init_type(PyObject *m, PyTypeObject *type)
     return type;
 }

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "ft2font" };
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "ft2font",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -1538,8 +1551,6 @@ PyMODINIT_FUNC PyInit_ft2font(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -1547,57 +1558,55 @@ PyMODINIT_FUNC PyInit_ft2font(void)
     }

     if (!PyFT2Image_init_type(m, &PyFT2ImageType)) {
-        Py_DECREF(m);
         return NULL;
     }

     if (!PyGlyph_init_type(m, &PyGlyphType)) {
-        Py_DECREF(m);
         return NULL;
     }

     if (!PyFT2Font_init_type(m, &PyFT2FontType)) {
-        Py_DECREF(m);
         return NULL;
     }

-    if (PyModule_AddIntConstant(m, "SCALABLE", FT_FACE_FLAG_SCALABLE) ||
-        PyModule_AddIntConstant(m, "FIXED_SIZES", FT_FACE_FLAG_FIXED_SIZES) ||
-        PyModule_AddIntConstant(m, "FIXED_WIDTH", FT_FACE_FLAG_FIXED_WIDTH) ||
-        PyModule_AddIntConstant(m, "SFNT", FT_FACE_FLAG_SFNT) ||
-        PyModule_AddIntConstant(m, "HORIZONTAL", FT_FACE_FLAG_HORIZONTAL) ||
-        PyModule_AddIntConstant(m, "VERTICAL", FT_FACE_FLAG_VERTICAL) ||
-        PyModule_AddIntConstant(m, "KERNING", FT_FACE_FLAG_KERNING) ||
-        PyModule_AddIntConstant(m, "FAST_GLYPHS", FT_FACE_FLAG_FAST_GLYPHS) ||
-        PyModule_AddIntConstant(m, "MULTIPLE_MASTERS", FT_FACE_FLAG_MULTIPLE_MASTERS) ||
-        PyModule_AddIntConstant(m, "GLYPH_NAMES", FT_FACE_FLAG_GLYPH_NAMES) ||
-        PyModule_AddIntConstant(m, "EXTERNAL_STREAM", FT_FACE_FLAG_EXTERNAL_STREAM) ||
-        PyModule_AddIntConstant(m, "ITALIC", FT_STYLE_FLAG_ITALIC) ||
-        PyModule_AddIntConstant(m, "BOLD", FT_STYLE_FLAG_BOLD) ||
-        PyModule_AddIntConstant(m, "KERNING_DEFAULT", FT_KERNING_DEFAULT) ||
-        PyModule_AddIntConstant(m, "KERNING_UNFITTED", FT_KERNING_UNFITTED) ||
-        PyModule_AddIntConstant(m, "KERNING_UNSCALED", FT_KERNING_UNSCALED) ||
-        PyModule_AddIntConstant(m, "LOAD_DEFAULT", FT_LOAD_DEFAULT) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_SCALE", FT_LOAD_NO_SCALE) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_HINTING", FT_LOAD_NO_HINTING) ||
-        PyModule_AddIntConstant(m, "LOAD_RENDER", FT_LOAD_RENDER) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_BITMAP", FT_LOAD_NO_BITMAP) ||
-        PyModule_AddIntConstant(m, "LOAD_VERTICAL_LAYOUT", FT_LOAD_VERTICAL_LAYOUT) ||
-        PyModule_AddIntConstant(m, "LOAD_FORCE_AUTOHINT", FT_LOAD_FORCE_AUTOHINT) ||
-        PyModule_AddIntConstant(m, "LOAD_CROP_BITMAP", FT_LOAD_CROP_BITMAP) ||
-        PyModule_AddIntConstant(m, "LOAD_PEDANTIC", FT_LOAD_PEDANTIC) ||
-        PyModule_AddIntConstant(m, "LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH", FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_RECURSE", FT_LOAD_NO_RECURSE) ||
-        PyModule_AddIntConstant(m, "LOAD_IGNORE_TRANSFORM", FT_LOAD_IGNORE_TRANSFORM) ||
-        PyModule_AddIntConstant(m, "LOAD_MONOCHROME", FT_LOAD_MONOCHROME) ||
-        PyModule_AddIntConstant(m, "LOAD_LINEAR_DESIGN", FT_LOAD_LINEAR_DESIGN) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_AUTOHINT", (unsigned long)FT_LOAD_NO_AUTOHINT) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_NORMAL", (unsigned long)FT_LOAD_TARGET_NORMAL) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_LIGHT", (unsigned long)FT_LOAD_TARGET_LIGHT) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_MONO", (unsigned long)FT_LOAD_TARGET_MONO) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_LCD", (unsigned long)FT_LOAD_TARGET_LCD) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_LCD_V", (unsigned long)FT_LOAD_TARGET_LCD_V)) {
-        Py_DECREF(m);
+    PyObject *d = PyModule_GetDict(m);
+
+    if (add_dict_int(d, "SCALABLE", FT_FACE_FLAG_SCALABLE) ||
+        add_dict_int(d, "FIXED_SIZES", FT_FACE_FLAG_FIXED_SIZES) ||
+        add_dict_int(d, "FIXED_WIDTH", FT_FACE_FLAG_FIXED_WIDTH) ||
+        add_dict_int(d, "SFNT", FT_FACE_FLAG_SFNT) ||
+        add_dict_int(d, "HORIZONTAL", FT_FACE_FLAG_HORIZONTAL) ||
+        add_dict_int(d, "VERTICAL", FT_FACE_FLAG_VERTICAL) ||
+        add_dict_int(d, "KERNING", FT_FACE_FLAG_KERNING) ||
+        add_dict_int(d, "FAST_GLYPHS", FT_FACE_FLAG_FAST_GLYPHS) ||
+        add_dict_int(d, "MULTIPLE_MASTERS", FT_FACE_FLAG_MULTIPLE_MASTERS) ||
+        add_dict_int(d, "GLYPH_NAMES", FT_FACE_FLAG_GLYPH_NAMES) ||
+        add_dict_int(d, "EXTERNAL_STREAM", FT_FACE_FLAG_EXTERNAL_STREAM) ||
+        add_dict_int(d, "ITALIC", FT_STYLE_FLAG_ITALIC) ||
+        add_dict_int(d, "BOLD", FT_STYLE_FLAG_BOLD) ||
+        add_dict_int(d, "KERNING_DEFAULT", FT_KERNING_DEFAULT) ||
+        add_dict_int(d, "KERNING_UNFITTED", FT_KERNING_UNFITTED) ||
+        add_dict_int(d, "KERNING_UNSCALED", FT_KERNING_UNSCALED) ||
+        add_dict_int(d, "LOAD_DEFAULT", FT_LOAD_DEFAULT) ||
+        add_dict_int(d, "LOAD_NO_SCALE", FT_LOAD_NO_SCALE) ||
+        add_dict_int(d, "LOAD_NO_HINTING", FT_LOAD_NO_HINTING) ||
+        add_dict_int(d, "LOAD_RENDER", FT_LOAD_RENDER) ||
+        add_dict_int(d, "LOAD_NO_BITMAP", FT_LOAD_NO_BITMAP) ||
+        add_dict_int(d, "LOAD_VERTICAL_LAYOUT", FT_LOAD_VERTICAL_LAYOUT) ||
+        add_dict_int(d, "LOAD_FORCE_AUTOHINT", FT_LOAD_FORCE_AUTOHINT) ||
+        add_dict_int(d, "LOAD_CROP_BITMAP", FT_LOAD_CROP_BITMAP) ||
+        add_dict_int(d, "LOAD_PEDANTIC", FT_LOAD_PEDANTIC) ||
+        add_dict_int(d, "LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH", FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH) ||
+        add_dict_int(d, "LOAD_NO_RECURSE", FT_LOAD_NO_RECURSE) ||
+        add_dict_int(d, "LOAD_IGNORE_TRANSFORM", FT_LOAD_IGNORE_TRANSFORM) ||
+        add_dict_int(d, "LOAD_MONOCHROME", FT_LOAD_MONOCHROME) ||
+        add_dict_int(d, "LOAD_LINEAR_DESIGN", FT_LOAD_LINEAR_DESIGN) ||
+        add_dict_int(d, "LOAD_NO_AUTOHINT", (unsigned long)FT_LOAD_NO_AUTOHINT) ||
+        add_dict_int(d, "LOAD_TARGET_NORMAL", (unsigned long)FT_LOAD_TARGET_NORMAL) ||
+        add_dict_int(d, "LOAD_TARGET_LIGHT", (unsigned long)FT_LOAD_TARGET_LIGHT) ||
+        add_dict_int(d, "LOAD_TARGET_MONO", (unsigned long)FT_LOAD_TARGET_MONO) ||
+        add_dict_int(d, "LOAD_TARGET_LCD", (unsigned long)FT_LOAD_TARGET_LCD) ||
+        add_dict_int(d, "LOAD_TARGET_LCD_V", (unsigned long)FT_LOAD_TARGET_LCD_V)) {
         return NULL;
     }

@@ -1606,7 +1615,6 @@ PyMODINIT_FUNC PyInit_ft2font(void)

     if (error) {
         PyErr_SetString(PyExc_RuntimeError, "Could not initialize the freetype2 library");
-        Py_DECREF(m);
         return NULL;
     }

@@ -1617,16 +1625,16 @@ PyMODINIT_FUNC PyInit_ft2font(void)
         FT_Library_Version(_ft2Library, &major, &minor, &patch);
         sprintf(version_string, "%d.%d.%d", major, minor, patch);
         if (PyModule_AddStringConstant(m, "__freetype_version__", version_string)) {
-            Py_DECREF(m);
             return NULL;
         }
     }

     if (PyModule_AddStringConstant(m, "__freetype_build_type__", STRINGIFY(FREETYPE_BUILD_TYPE))) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/src/mplutils.cpp b/src/mplutils.cpp
new file mode 100644
index 0000000000..237def047d
--- /dev/null
+++ b/src/mplutils.cpp
@@ -0,0 +1,21 @@
+/* -*- mode: c++; c-basic-offset: 4 -*- */
+
+#include "mplutils.h"
+
+int add_dict_int(PyObject *dict, const char *key, long val)
+{
+    PyObject *valobj;
+    valobj = PyLong_FromLong(val);
+    if (valobj == NULL) {
+        return 1;
+    }
+
+    if (PyDict_SetItemString(dict, key, valobj)) {
+        Py_DECREF(valobj);
+        return 1;
+    }
+
+    Py_DECREF(valobj);
+
+    return 0;
+}
diff --git a/src/mplutils.h b/src/mplutils.h
index bcdcdf68e6..925ec32c08 100644
--- a/src/mplutils.h
+++ b/src/mplutils.h
@@ -29,21 +29,28 @@

 #include <Python.h>

+#undef CLAMP
+#define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
+
+#undef MAX
+#define MAX(a, b) (((a) > (b)) ? (a) : (b))
+
 inline double mpl_round(double v)
 {
     return (double)(int)(v + ((v >= 0.0) ? 0.5 : -0.5));
 }

-// 'kind' codes for paths.
 enum {
     STOP = 0,
     MOVETO = 1,
     LINETO = 2,
     CURVE3 = 3,
     CURVE4 = 4,
-    CLOSEPOLY = 0x4f
+    ENDPOLY = 0x4f
 };

 const size_t NUM_VERTICES[] = { 1, 1, 1, 2, 3, 1 };

+extern "C" int add_dict_int(PyObject *dict, const char *key, long val);
+
 #endif
diff --git a/src/path_converters.h b/src/path_converters.h
index 6cbbf9c141..5a1d289646 100644
--- a/src/path_converters.h
+++ b/src/path_converters.h
@@ -162,22 +162,16 @@ class PathNanRemover : protected EmbeddedQueue<4>
 {
     VertexSource *m_source;
     bool m_remove_nans;
-    bool m_has_codes;
+    bool m_has_curves;
     bool valid_segment_exists;
-    bool m_last_segment_valid;
-    bool m_was_broken;
-    double m_initX;
-    double m_initY;

   public:
-    /* has_codes should be true if the path contains bezier curve segments, or
-     * closed loops, as this requires a slower algorithm to remove the NaNs.
-     * When in doubt, set to true.
+    /* has_curves should be true if the path contains bezier curve
+       segments, as this requires a slower algorithm to remove the
+       NaNs.  When in doubt, set to true.
      */
-    PathNanRemover(VertexSource &source, bool remove_nans, bool has_codes)
-        : m_source(&source), m_remove_nans(remove_nans), m_has_codes(has_codes),
-          m_last_segment_valid(false), m_was_broken(false),
-          m_initX(nan("")), m_initY(nan(""))
+    PathNanRemover(VertexSource &source, bool remove_nans, bool has_curves)
+        : m_source(&source), m_remove_nans(remove_nans), m_has_curves(has_curves)
     {
         // ignore all close/end_poly commands until after the first valid
         // (nan-free) command is encountered
@@ -198,9 +192,8 @@ class PathNanRemover : protected EmbeddedQueue<4>
             return m_source->vertex(x, y);
         }

-        if (m_has_codes) {
-            /* This is the slow method for when there might be curves or closed
-             * loops. */
+        if (m_has_curves) {
+            /* This is the slow method for when there might be curves. */
             if (queue_pop(&code, x, y)) {
                 return code;
             }
@@ -212,41 +205,14 @@ class PathNanRemover : protected EmbeddedQueue<4>
                    are found along the way, the queue is emptied, and
                    the next curve segment is handled. */
                 code = m_source->vertex(x, y);
-                /* The vertices attached to STOP and CLOSEPOLY are never used,
-                 * so we leave them as-is even if NaN. */
-                if (code == agg::path_cmd_stop) {
+                /* The vertices attached to STOP and CLOSEPOLY left are never
+                   used, so we leave them as-is even if NaN. However, CLOSEPOLY
+                   only makes sense if a valid MOVETO command has already been
+                   emitted. */
+                if (code == agg::path_cmd_stop ||
+                    (code == (agg::path_cmd_end_poly | agg::path_flags_close) &&
+                     valid_segment_exists)) {
                     return code;
-                } else if (code == (agg::path_cmd_end_poly |
-                                    agg::path_flags_close) &&
-                           valid_segment_exists) {
-                    /* However, CLOSEPOLY only makes sense if a valid MOVETO
-                     * command has already been emitted. But if a NaN was
-                     * removed in the path, then we cannot close it as it is no
-                     * longer a loop. We must emulate that by inserting a
-                     * LINETO instead. */
-                    if (m_was_broken) {
-                        if (m_last_segment_valid && (
-                                std::isfinite(m_initX) &&
-                                std::isfinite(m_initY))) {
-                            /* Join to start if both ends are valid. */
-                            queue_push(agg::path_cmd_line_to, m_initX, m_initY);
-                            break;
-                        } else {
-                            /* Skip the close, in case there are additional
-                             * subpaths. */
-                            continue;
-                        }
-                        m_was_broken = false;
-                        break;
-                    } else {
-                        return code;
-                    }
-                } else if (code == agg::path_cmd_move_to) {
-                    /* Save the initial point in order to produce the last
-                     * segment closing a loop, *if* we broke the loop. */
-                    m_initX = *x;
-                    m_initY = *y;
-                    m_was_broken = false;
                 }

                 if (needs_move_to) {
@@ -254,24 +220,22 @@ class PathNanRemover : protected EmbeddedQueue<4>
                 }

                 size_t num_extra_points = num_extra_points_map[code & 0xF];
-                m_last_segment_valid = (std::isfinite(*x) && std::isfinite(*y));
+                bool has_nan = (!(std::isfinite(*x) && std::isfinite(*y)));
                 queue_push(code, *x, *y);

                 /* Note: this test can not be short-circuited, since we need to
                    advance through the entire curve no matter what */
                 for (size_t i = 0; i < num_extra_points; ++i) {
                     m_source->vertex(x, y);
-                    m_last_segment_valid = m_last_segment_valid &&
-                        (std::isfinite(*x) && std::isfinite(*y));
+                    has_nan = has_nan || !(std::isfinite(*x) && std::isfinite(*y));
                     queue_push(code, *x, *y);
                 }

-                if (m_last_segment_valid) {
+                if (!has_nan) {
                     valid_segment_exists = true;
                     break;
                 }

-                m_was_broken = true;
                 queue_clear();

                 /* If the last point is finite, we use that for the
@@ -290,9 +254,9 @@ class PathNanRemover : protected EmbeddedQueue<4>
             } else {
                 return agg::path_cmd_stop;
             }
-        } else // !m_has_codes
+        } else // !m_has_curves
         {
-            /* This is the fast path for when we know we have no codes. */
+            /* This is the fast path for when we know we have no curves */
             code = m_source->vertex(x, y);

             if (code == agg::path_cmd_stop ||
@@ -336,7 +300,6 @@ class PathClipper : public EmbeddedQueue<3>
     double m_initX;
     double m_initY;
     bool m_has_init;
-    bool m_was_clipped;

   public:
     PathClipper(VertexSource &source, bool do_clipping, double width, double height)
@@ -348,8 +311,7 @@ class PathClipper : public EmbeddedQueue<3>
           m_moveto(true),
           m_initX(nan("")),
           m_initY(nan("")),
-          m_has_init(false),
-          m_was_clipped(false)
+          m_has_init(false)
     {
         // empty
     }
@@ -363,8 +325,7 @@ class PathClipper : public EmbeddedQueue<3>
           m_moveto(true),
           m_initX(nan("")),
           m_initY(nan("")),
-          m_has_init(false),
-          m_was_clipped(false)
+          m_has_init(false)
     {
         m_cliprect.x1 -= 1.0;
         m_cliprect.y1 -= 1.0;
@@ -375,29 +336,21 @@ class PathClipper : public EmbeddedQueue<3>
     inline void rewind(unsigned path_id)
     {
         m_has_init = false;
-        m_was_clipped = false;
         m_moveto = true;
         m_source->rewind(path_id);
     }

-    int draw_clipped_line(double x0, double y0, double x1, double y1,
-                          bool closed=false)
+    int draw_clipped_line(double x0, double y0, double x1, double y1)
     {
         unsigned moved = agg::clip_line_segment(&x0, &y0, &x1, &y1, m_cliprect);
         // moved >= 4 - Fully clipped
         // moved & 1 != 0 - First point has been moved
         // moved & 2 != 0 - Second point has been moved
-        m_was_clipped = m_was_clipped || (moved != 0);
         if (moved < 4) {
             if (moved & 1 || m_moveto) {
                 queue_push(agg::path_cmd_move_to, x0, y0);
             }
             queue_push(agg::path_cmd_line_to, x1, y1);
-            if (closed && !m_was_clipped) {
-                // Close the path only if the end point hasn't moved.
-                queue_push(agg::path_cmd_end_poly | agg::path_flags_close,
-                           x1, y1);
-            }

             m_moveto = false;
             return 1;
@@ -411,91 +364,75 @@ class PathClipper : public EmbeddedQueue<3>
         unsigned code;
         bool emit_moveto = false;

-        if (!m_do_clipping) {
-            // If not doing any clipping, just pass along the vertices verbatim
-            return m_source->vertex(x, y);
-        }
-
-        /* This is the slow path where we actually do clipping */
+        if (m_do_clipping) {
+            /* This is the slow path where we actually do clipping */

-        if (queue_pop(&code, x, y)) {
-            return code;
-        }
+            if (queue_pop(&code, x, y)) {
+                return code;
+            }

-        while ((code = m_source->vertex(x, y)) != agg::path_cmd_stop) {
-            emit_moveto = false;
+            while ((code = m_source->vertex(x, y)) != agg::path_cmd_stop) {
+                emit_moveto = false;

-            switch (code) {
-            case (agg::path_cmd_end_poly | agg::path_flags_close):
-                if (m_has_init) {
-                    // Queue the line from last point to the initial point, and
-                    // if never clipped, add a close code.
-                    draw_clipped_line(m_lastX, m_lastY, m_initX, m_initY,
-                                      true);
-                } else {
-                    // An empty path that is immediately closed.
+                switch (code) {
+                case (agg::path_cmd_end_poly | agg::path_flags_close):
+                    if (m_has_init) {
+                        draw_clipped_line(m_lastX, m_lastY, m_initX, m_initY);
+                    }
                     queue_push(
                         agg::path_cmd_end_poly | agg::path_flags_close,
                         m_lastX, m_lastY);
-                }
-                // If paths were not clipped, then the above code queued
-                // something, and we should exit the loop. Otherwise, continue
-                // to the next point, as there may be a new subpath.
-                if (queue_nonempty()) {
-                    goto exit_loop;
-                }
-                break;
-
-            case agg::path_cmd_move_to:
-
-                // was the last command a moveto (and we have
-                // seen at least one command ?
-                // if so, shove it in the queue if in clip box
-                if (m_moveto && m_has_init &&
-                    m_lastX >= m_cliprect.x1 &&
-                    m_lastX <= m_cliprect.x2 &&
-                    m_lastY >= m_cliprect.y1 &&
-                    m_lastY <= m_cliprect.y2) {
-                    // push the last moveto onto the queue
-                    queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
-                    // flag that we need to emit it
-                    emit_moveto = true;
-                }
-                // update the internal state for this moveto
-                m_initX = m_lastX = *x;
-                m_initY = m_lastY = *y;
-                m_has_init = true;
-                m_moveto = true;
-                m_was_clipped = false;
-                // if the last command was moveto exit the loop to emit the code
-                if (emit_moveto) {
                     goto exit_loop;
-                }
-                // else, break and get the next point
-                break;

-            case agg::path_cmd_line_to:
-                if (draw_clipped_line(m_lastX, m_lastY, *x, *y)) {
+                case agg::path_cmd_move_to:
+
+                    // was the last command a moveto (and we have
+                    // seen at least one command ?
+                    // if so, shove it in the queue if in clip box
+                    if (m_moveto && m_has_init &&
+                        m_lastX >= m_cliprect.x1 &&
+                        m_lastX <= m_cliprect.x2 &&
+                        m_lastY >= m_cliprect.y1 &&
+                        m_lastY <= m_cliprect.y2) {
+                        // push the last moveto onto the queue
+                        queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
+                        // flag that we need to emit it
+                        emit_moveto = true;
+                    }
+                    // update the internal state for this moveto
+                    m_initX = m_lastX = *x;
+                    m_initY = m_lastY = *y;
+                    m_has_init = true;
+                    m_moveto = true;
+                    // if the last command was moveto exit the loop to emit the code
+                    if (emit_moveto) {
+                        goto exit_loop;
+                    }
+                    // else, break and get the next point
+                    break;
+
+                case agg::path_cmd_line_to:
+                    if (draw_clipped_line(m_lastX, m_lastY, *x, *y)) {
+                        m_lastX = *x;
+                        m_lastY = *y;
+                        goto exit_loop;
+                    }
+                    m_lastX = *x;
+                    m_lastY = *y;
+                    break;
+
+                default:
+                    if (m_moveto) {
+                        queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
+                        m_moveto = false;
+                    }
+
+                    queue_push(code, *x, *y);
                     m_lastX = *x;
                     m_lastY = *y;
                     goto exit_loop;
                 }
-                m_lastX = *x;
-                m_lastY = *y;
-                break;
-
-            default:
-                if (m_moveto) {
-                    queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
-                    m_moveto = false;
-                }
-
-                queue_push(code, *x, *y);
-                m_lastX = *x;
-                m_lastY = *y;
-                goto exit_loop;
             }
-        }

         exit_loop:

@@ -515,6 +452,11 @@ class PathClipper : public EmbeddedQueue<3>
             }

             return agg::path_cmd_stop;
+        } else {
+            // If not doing any clipping, just pass along the vertices
+            // verbatim
+            return m_source->vertex(x, y);
+        }
     }
 };

diff --git a/src/py_adaptors.h b/src/py_adaptors.h
index 7722137dc6..912c93c8bf 100644
--- a/src/py_adaptors.h
+++ b/src/py_adaptors.h
@@ -175,7 +175,7 @@ class PathIterator
         return m_simplify_threshold;
     }

-    inline bool has_codes() const
+    inline bool has_curves() const
     {
         return m_codes != NULL;
     }
@@ -194,7 +194,12 @@ class PathGenerator
   public:
     typedef PathIterator path_iterator;

-    PathGenerator() : m_paths(NULL), m_npaths(0) {}
+    PathGenerator(PyObject *obj) : m_paths(NULL), m_npaths(0)
+    {
+        if (!set(obj)) {
+            throw py::exception();
+        }
+    }

     ~PathGenerator()
     {
@@ -207,7 +212,6 @@ class PathGenerator
             return 0;
         }

-        Py_XDECREF(m_paths);
         m_paths = obj;
         Py_INCREF(m_paths);

diff --git a/src/py_converters.cpp b/src/py_converters.cpp
index d2c53c553c..a4c0b19099 100644
--- a/src/py_converters.cpp
+++ b/src/py_converters.cpp
@@ -212,13 +212,33 @@ int convert_dashes(PyObject *dashobj, void *dashesp)
 {
     Dashes *dashes = (Dashes *)dashesp;

+    if (dashobj == NULL && dashobj == Py_None) {
+        return 1;
+    }
+
+    PyObject *dash_offset_obj = NULL;
     double dash_offset = 0.0;
     PyObject *dashes_seq = NULL;

-    if (!PyArg_ParseTuple(dashobj, "dO:dashes", &dash_offset, &dashes_seq)) {
+    if (!PyArg_ParseTuple(dashobj, "OO:dashes", &dash_offset_obj, &dashes_seq)) {
         return 0;
     }

+    if (dash_offset_obj != Py_None) {
+        dash_offset = PyFloat_AsDouble(dash_offset_obj);
+        if (PyErr_Occurred()) {
+            return 0;
+        }
+    } else {
+        if (PyErr_WarnEx(PyExc_FutureWarning,
+                         "Passing the dash offset as None is deprecated since "
+                         "Matplotlib 3.3 and will be removed in Matplotlib 3.5; "
+                         "pass it as zero instead.",
+                         1)) {
+            return 0;
+        }
+    }
+
     if (dashes_seq == Py_None) {
         return 1;
     }
@@ -395,16 +415,6 @@ exit:
     return status;
 }

-int convert_pathgen(PyObject *obj, void *pathgenp)
-{
-    py::PathGenerator *paths = (py::PathGenerator *)pathgenp;
-    if (!paths->set(obj)) {
-        PyErr_SetString(PyExc_TypeError, "Not an iterable of paths");
-        return 0;
-    }
-    return 1;
-}
-
 int convert_clippath(PyObject *clippath_tuple, void *clippathp)
 {
     ClipPath *clippath = (ClipPath *)clippathp;
@@ -482,6 +492,22 @@ int convert_gcagg(PyObject *pygc, void *gcp)
     return 1;
 }

+int convert_offset_position(PyObject *obj, void *offsetp)
+{
+    e_offset_position *offset = (e_offset_position *)offsetp;
+    const char *names[] = {"data", NULL};
+    int values[] = {OFFSET_POSITION_DATA};
+    int result = (int)OFFSET_POSITION_FIGURE;
+
+    if (!convert_string_enum(obj, "offset_position", names, values, &result)) {
+        PyErr_Clear();
+    }
+
+    *offset = (e_offset_position)result;
+
+    return 1;
+}
+
 int convert_face(PyObject *color, GCAgg &gc, agg::rgba *rgba)
 {
     if (!convert_rgba(color, rgba)) {
diff --git a/src/py_converters.h b/src/py_converters.h
index 2c9dc6d1b8..2c19acdaaf 100644
--- a/src/py_converters.h
+++ b/src/py_converters.h
@@ -32,9 +32,9 @@ int convert_dashes(PyObject *dashobj, void *gcp);
 int convert_dashes_vector(PyObject *obj, void *dashesp);
 int convert_trans_affine(PyObject *obj, void *transp);
 int convert_path(PyObject *obj, void *pathp);
-int convert_pathgen(PyObject *obj, void *pathgenp);
 int convert_clippath(PyObject *clippath_tuple, void *clippathp);
 int convert_snap(PyObject *obj, void *snapp);
+int convert_offset_position(PyObject *obj, void *offsetp);
 int convert_sketch_params(PyObject *obj, void *sketchp);
 int convert_gcagg(PyObject *pygc, void *gcp);
 int convert_points(PyObject *pygc, void *pointsp);
diff --git a/src/qhull_wrap.cpp b/src/qhull_wrap.c
similarity index 54%
rename from src/qhull_wrap.cpp
rename to src/qhull_wrap.c
index f219f88b4b..0f7b393829 100644
--- a/src/qhull_wrap.cpp
+++ b/src/qhull_wrap.c
@@ -7,18 +7,9 @@
  */
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
-#include "numpy_cpp.h"
-#ifdef _MSC_VER
-/* The Qhull header does not declare this as extern "C", but only MSVC seems to
- * do name mangling on global variables. We thus need to declare this before
- * the header so that it treats it correctly, and doesn't mangle the name. */
-extern "C" {
-extern const char qh_version[];
-}
-#endif
+#include "numpy/ndarrayobject.h"
 #include "libqhull_r/qhull_ra.h"
-#include <cstdio>
-#include <vector>
+#include <stdio.h>


 #ifndef MPL_DEVNULL
@@ -44,104 +35,88 @@ static void
 get_facet_vertices(qhT* qh, const facetT* facet, int indices[3])
 {
     vertexT *vertex, **vertexp;
-    FOREACHvertex_(facet->vertices) {
+    FOREACHvertex_(facet->vertices)
         *indices++ = qh_pointid(qh, vertex->point);
-    }
 }

 /* Return the indices of the 3 triangles that are neighbors of the specified
  * facet (triangle). */
 static void
-get_facet_neighbours(const facetT* facet, std::vector<int>& tri_indices,
+get_facet_neighbours(const facetT* facet, const int* tri_indices,
                      int indices[3])
 {
     facetT *neighbor, **neighborp;
-    FOREACHneighbor_(facet) {
+    FOREACHneighbor_(facet)
         *indices++ = (neighbor->upperdelaunay ? -1 : tri_indices[neighbor->id]);
-    }
 }

-/* Return true if the specified points arrays contain at least 3 unique points,
- * or false otherwise. */
-static bool
-at_least_3_unique_points(npy_intp npoints, const double* x, const double* y)
+/* Return 1 if the specified points arrays contain at least 3 unique points,
+ * or 0 otherwise. */
+static int
+at_least_3_unique_points(int npoints, const double* x, const double* y)
 {
     int i;
     const int unique1 = 0;  /* First unique point has index 0. */
     int unique2 = 0;        /* Second unique point index is 0 until set. */

-    if (npoints < 3) {
-        return false;
-    }
+    if (npoints < 3)
+        return 0;

     for (i = 1; i < npoints; ++i) {
         if (unique2 == 0) {
             /* Looking for second unique point. */
-            if (x[i] != x[unique1] || y[i] != y[unique1]) {
+            if (x[i] != x[unique1] || y[i] != y[unique1])
                 unique2 = i;
-            }
         }
         else {
             /* Looking for third unique point. */
             if ( (x[i] != x[unique1] || y[i] != y[unique1]) &&
                  (x[i] != x[unique2] || y[i] != y[unique2]) ) {
                 /* 3 unique points found, with indices 0, unique2 and i. */
-                return true;
+                return 1;
             }
         }
     }

     /* Run out of points before 3 unique points found. */
-    return false;
+    return 0;
 }

-/* Holds on to info from Qhull so that it can be destructed automatically. */
-class QhullInfo {
-public:
-    QhullInfo(FILE *error_file, qhT* qh) {
-        this->error_file = error_file;
-        this->qh = qh;
-    }
-
-    ~QhullInfo() {
-        qh_freeqhull(this->qh, !qh_ALL);
-        int curlong, totlong;  /* Memory remaining. */
-        qh_memfreeshort(this->qh, &curlong, &totlong);
-        if (curlong || totlong) {
-            PyErr_WarnEx(PyExc_RuntimeWarning,
-                         "Qhull could not free all allocated memory", 1);
-        }
-
-        if (this->error_file != stderr) {
-            fclose(error_file);
-        }
-    }
-
-private:
-    FILE* error_file;
-    qhT* qh;
-};
-
-/* Delaunay implementation method.
- * If hide_qhull_errors is true then qhull error messages are discarded;
- * if it is false then they are written to stderr. */
+/* Delaunay implementation methyod.  If hide_qhull_errors is 1 then qhull error
+ * messages are discarded; if it is 0 then they are written to stderr. */
 static PyObject*
-delaunay_impl(npy_intp npoints, const double* x, const double* y,
-              bool hide_qhull_errors)
+delaunay_impl(int npoints, const double* x, const double* y,
+              int hide_qhull_errors)
 {
-    qhT qh_qh;                  /* qh variable type and name must be like */
-    qhT* qh = &qh_qh;           /* this for Qhull macros to work correctly. */
+       qhT qh_qh;                  /* qh variable type and name must be like */
+       qhT* qh = &qh_qh;           /* this for Qhull macros to work correctly. */
+    coordT* points = NULL;
     facetT* facet;
     int i, ntri, max_facet_id;
+    FILE* error_file = NULL;    /* qhull expects a FILE* to write errors to. */
     int exitcode;               /* Value returned from qh_new_qhull(). */
+    int* tri_indices = NULL;    /* Maps qhull facet id to triangle index. */
+    int indices[3];
+    int curlong, totlong;       /* Memory remaining after qh_memfreeshort. */
+    PyObject* tuple;            /* Return tuple (triangles, neighbors). */
     const int ndim = 2;
+    npy_intp dims[2];
+    PyArrayObject* triangles = NULL;
+    PyArrayObject* neighbors = NULL;
+    int* triangles_ptr;
+    int* neighbors_ptr;
     double x_mean = 0.0;
     double y_mean = 0.0;

     QHULL_LIB_CHECK

     /* Allocate points. */
-    std::vector<coordT> points(npoints * ndim);
+    points = (coordT*)malloc(npoints*ndim*sizeof(coordT));
+    if (points == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate points array in qhull.delaunay");
+        goto error_before_qhull;
+    }

     /* Determine mean x, y coordinates. */
     for (i = 0; i < npoints; ++i) {
@@ -158,14 +133,15 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
     }

     /* qhull expects a FILE* to write errors to. */
-    FILE* error_file = NULL;
     if (hide_qhull_errors) {
         /* qhull errors are ignored by writing to OS-equivalent of /dev/null.
          * Rather than have OS-specific code here, instead it is determined by
          * setupext.py and passed in via the macro MPL_DEVNULL. */
         error_file = fopen(STRINGIFY(MPL_DEVNULL), "w");
         if (error_file == NULL) {
-            throw std::runtime_error("Could not open devnull");
+            PyErr_SetString(PyExc_RuntimeError,
+                            "Could not open devnull in qhull.delaunay");
+            goto error_before_qhull;
         }
     }
     else {
@@ -174,16 +150,15 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
     }

     /* Perform Delaunay triangulation. */
-    QhullInfo info(error_file, qh);
     qh_zero(qh, error_file);
-    exitcode = qh_new_qhull(qh, ndim, (int)npoints, points.data(), False,
-                            (char*)"qhull d Qt Qbb Qc Qz", NULL, error_file);
+    exitcode = qh_new_qhull(qh, ndim, npoints, points, False,
+                            "qhull d Qt Qbb Qc Qz", NULL, error_file);
     if (exitcode != qh_ERRnone) {
         PyErr_Format(PyExc_RuntimeError,
                      "Error in qhull Delaunay triangulation calculation: %s (exitcode=%d)%s",
                      qhull_error_msg[exitcode], exitcode,
                      hide_qhull_errors ? "; use python verbose option (-v) to see original qhull error." : "");
-        return NULL;
+        goto error;
     }

     /* Split facets so that they only have 3 points each. */
@@ -193,44 +168,57 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
        Note that libqhull uses macros to iterate through collections. */
     ntri = 0;
     FORALLfacets {
-        if (!facet->upperdelaunay) {
+        if (!facet->upperdelaunay)
             ++ntri;
-        }
     }

     max_facet_id = qh->facet_id - 1;

     /* Create array to map facet id to triangle index. */
-    std::vector<int> tri_indices(max_facet_id+1);
+    tri_indices = (int*)malloc((max_facet_id+1)*sizeof(int));
+    if (tri_indices == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate triangle map in qhull.delaunay");
+        goto error;
+    }

-    /* Allocate Python arrays to return. */
-    npy_intp dims[2] = {ntri, 3};
-    numpy::array_view<int, ndim> triangles(dims);
-    int* triangles_ptr = triangles.data();
+    /* Allocate python arrays to return. */
+    dims[0] = ntri;
+    dims[1] = 3;
+    triangles = (PyArrayObject*)PyArray_SimpleNew(ndim, dims, NPY_INT);
+    if (triangles == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate triangles array in qhull.delaunay");
+        goto error;
+    }

-    numpy::array_view<int, ndim> neighbors(dims);
-    int* neighbors_ptr = neighbors.data();
+    neighbors = (PyArrayObject*)PyArray_SimpleNew(ndim, dims, NPY_INT);
+    if (neighbors == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate neighbors array in qhull.delaunay");
+        goto error;
+    }
+
+    triangles_ptr = (int*)PyArray_DATA(triangles);
+    neighbors_ptr = (int*)PyArray_DATA(neighbors);

     /* Determine triangles array and set tri_indices array. */
     i = 0;
     FORALLfacets {
         if (!facet->upperdelaunay) {
-            int indices[3];
             tri_indices[facet->id] = i++;
             get_facet_vertices(qh, facet, indices);
             *triangles_ptr++ = (facet->toporient ? indices[0] : indices[2]);
             *triangles_ptr++ = indices[1];
             *triangles_ptr++ = (facet->toporient ? indices[2] : indices[0]);
         }
-        else {
+        else
             tri_indices[facet->id] = -1;
-        }
     }

     /* Determine neighbors array. */
     FORALLfacets {
         if (!facet->upperdelaunay) {
-            int indices[3];
             get_facet_neighbours(facet, tri_indices, indices);
             *neighbors_ptr++ = (facet->toporient ? indices[2] : indices[0]);
             *neighbors_ptr++ = (facet->toporient ? indices[0] : indices[2]);
@@ -238,58 +226,95 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
         }
     }

-    PyObject* tuple = PyTuple_New(2);
-    if (tuple == 0) {
-        throw std::runtime_error("Failed to create Python tuple");
-    }
-
-    PyTuple_SET_ITEM(tuple, 0, triangles.pyobj());
-    PyTuple_SET_ITEM(tuple, 1, neighbors.pyobj());
+    /* Clean up. */
+    qh_freeqhull(qh, !qh_ALL);
+    qh_memfreeshort(qh, &curlong, &totlong);
+    if (curlong || totlong)
+        PyErr_WarnEx(PyExc_RuntimeWarning,
+                     "Qhull could not free all allocated memory", 1);
+    if (hide_qhull_errors)
+        fclose(error_file);
+    free(tri_indices);
+    free(points);
+
+    tuple = PyTuple_New(2);
+    PyTuple_SetItem(tuple, 0, (PyObject*)triangles);
+    PyTuple_SetItem(tuple, 1, (PyObject*)neighbors);
     return tuple;
+
+error:
+    /* Clean up. */
+    Py_XDECREF(triangles);
+    Py_XDECREF(neighbors);
+    qh_freeqhull(qh, !qh_ALL);
+    qh_memfreeshort(qh, &curlong, &totlong);
+    /* Don't bother checking curlong and totlong as raising error anyway. */
+    if (hide_qhull_errors)
+        fclose(error_file);
+    free(tri_indices);
+
+error_before_qhull:
+    free(points);
+
+    return NULL;
 }

-/* Process Python arguments and call Delaunay implementation method. */
+/* Process python arguments and call Delaunay implementation method. */
 static PyObject*
 delaunay(PyObject *self, PyObject *args)
 {
-    numpy::array_view<double, 1> xarray;
-    numpy::array_view<double, 1> yarray;
+    PyObject* xarg;
+    PyObject* yarg;
+    PyArrayObject* xarray;
+    PyArrayObject* yarray;
     PyObject* ret;
-    npy_intp npoints;
+    int npoints;
     const double* x;
     const double* y;

-    if (!PyArg_ParseTuple(args, "O&O&",
-                          &xarray.converter_contiguous, &xarray,
-                          &yarray.converter_contiguous, &yarray)) {
+    if (!PyArg_ParseTuple(args, "OO", &xarg, &yarg)) {
+        PyErr_SetString(PyExc_ValueError, "expecting x and y arrays");
         return NULL;
     }

-    npoints = xarray.dim(0);
-    if (npoints != yarray.dim(0)) {
+    xarray = (PyArrayObject*)PyArray_ContiguousFromObject(xarg, NPY_DOUBLE,
+                                                          1, 1);
+    yarray = (PyArrayObject*)PyArray_ContiguousFromObject(yarg, NPY_DOUBLE,
+                                                          1, 1);
+    if (xarray == 0 || yarray == 0 ||
+        PyArray_DIM(xarray,0) != PyArray_DIM(yarray, 0)) {
+        Py_XDECREF(xarray);
+        Py_XDECREF(yarray);
         PyErr_SetString(PyExc_ValueError,
                         "x and y must be 1D arrays of the same length");
         return NULL;
     }

+    npoints = PyArray_DIM(xarray, 0);
+
     if (npoints < 3) {
+        Py_XDECREF(xarray);
+        Py_XDECREF(yarray);
         PyErr_SetString(PyExc_ValueError,
                         "x and y arrays must have a length of at least 3");
         return NULL;
     }

-    x = xarray.data();
-    y = yarray.data();
+    x = (const double*)PyArray_DATA(xarray);
+    y = (const double*)PyArray_DATA(yarray);

     if (!at_least_3_unique_points(npoints, x, y)) {
+        Py_XDECREF(xarray);
+        Py_XDECREF(yarray);
         PyErr_SetString(PyExc_ValueError,
                         "x and y arrays must consist of at least 3 unique points");
         return NULL;
     }

-    CALL_CPP("qhull.delaunay",
-             (ret = delaunay_impl(npoints, x, y, Py_VerboseFlag == 0)));
+    ret = delaunay_impl(npoints, x, y, Py_VerboseFlag == 0);

+    Py_XDECREF(xarray);
+    Py_XDECREF(yarray);
     return ret;
 }

@@ -308,7 +333,11 @@ static PyMethodDef qhull_methods[] = {

 static struct PyModuleDef qhull_module = {
     PyModuleDef_HEAD_INIT,
-    "qhull", "Computing Delaunay triangulations.\n", -1, qhull_methods
+    "qhull",
+    "Computing Delaunay triangulations.\n",
+    -1,
+    qhull_methods,
+    NULL, NULL, NULL, NULL
 };

 #pragma GCC visibility push(default)
@@ -316,8 +345,17 @@ static struct PyModuleDef qhull_module = {
 PyMODINIT_FUNC
 PyInit__qhull(void)
 {
+    PyObject* m;
+
+    m = PyModule_Create(&qhull_module);
+
+    if (m == NULL) {
+        return NULL;
+    }
+
     import_array();
-    return PyModule_Create(&qhull_module);
+
+    return m;
 }

 #pragma GCC visibility pop
diff --git a/src/tri/_tri.cpp b/src/tri/_tri.cpp
index b7a87783de..075ab76583 100644
--- a/src/tri/_tri.cpp
+++ b/src/tri/_tri.cpp
@@ -7,12 +7,15 @@
  */
 #define NO_IMPORT_ARRAY

-#include "../mplutils.h"
 #include "_tri.h"

 #include <algorithm>
 #include <set>

+#define MOVETO 1
+#define LINETO 2
+
+

 TriEdge::TriEdge()
     : tri(-1), edge(-1)
@@ -597,88 +600,31 @@ void TriContourGenerator::clear_visited_flags(bool include_boundaries)
     }
 }

-PyObject* TriContourGenerator::contour_line_to_segs_and_kinds(const Contour& contour)
-{
-    // Convert all of the lines generated by a call to create_contour() into
-    // their Python equivalents for return to the calling function.
-    // A line is either a closed line loop (in which case the last point is
-    // identical to the first) or an open line strip.  Two NumPy arrays are
-    // created for each line:
-    //   vertices is a double array of shape (npoints, 2) containing the (x, y)
-    //     coordinates of the points in the line
-    //   codes is a uint8 array of shape (npoints,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are appended to the Python lists vertices_list and codes_list
-    // respectively for return to the Python calling function.
-
-    PyObject* vertices_list = PyList_New(contour.size());
-    if (vertices_list == 0)
-        throw std::runtime_error("Failed to create Python list");
-
-    PyObject* codes_list = PyList_New(contour.size());
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
-        throw std::runtime_error("Failed to create Python list");
-    }
-
+PyObject* TriContourGenerator::contour_to_segs(const Contour& contour)
+{
+    PyObject* segs = PyList_New(contour.size());
     for (Contour::size_type i = 0; i < contour.size(); ++i) {
-        const ContourLine& contour_line = contour[i];
-        npy_intp npoints = static_cast<npy_intp>(contour_line.size());
-
-        npy_intp segs_dims[2] = {npoints, 2};
-        numpy::array_view<double, 2> segs(segs_dims);
-        double* segs_ptr = segs.data();
-
-        npy_intp codes_dims[1] = {npoints};
-        numpy::array_view<unsigned char, 1> codes(codes_dims);
-        unsigned char* codes_ptr = codes.data();
-
-        for (ContourLine::const_iterator it = contour_line.begin();
-             it != contour_line.end(); ++it) {
-            *segs_ptr++ = it->x;
-            *segs_ptr++ = it->y;
-            *codes_ptr++ = (it == contour_line.begin() ? MOVETO : LINETO);
+        const ContourLine& line = contour[i];
+        npy_intp dims[2] = {static_cast<npy_intp>(line.size()),2};
+        PyArrayObject* py_line = (PyArrayObject*)PyArray_SimpleNew(
+                                                     2, dims, NPY_DOUBLE);
+        double* p = (double*)PyArray_DATA(py_line);
+        for (ContourLine::const_iterator it = line.begin(); it != line.end(); ++it) {
+            *p++ = it->x;
+            *p++ = it->y;
+        }
+        if (PyList_SetItem(segs, i, (PyObject*)py_line)) {
+            Py_XDECREF(segs);
+            PyErr_SetString(PyExc_RuntimeError,
+                            "Unable to set contour segments");
+            return NULL;
         }
-
-        // Closed line loop has identical first and last (x, y) points.
-        if (contour_line.size() > 1 &&
-            contour_line.front() == contour_line.back())
-            *(codes_ptr-1) = CLOSEPOLY;
-
-        PyList_SET_ITEM(vertices_list, i, segs.pyobj());
-        PyList_SET_ITEM(codes_list, i, codes.pyobj());
-    }
-
-    PyObject* result = PyTuple_New(2);
-    if (result == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Failed to create Python tuple");
     }
-
-    // No error checking here as filling in a brand new pre-allocated result.
-    PyTuple_SET_ITEM(result, 0, vertices_list);
-    PyTuple_SET_ITEM(result, 1, codes_list);
-
-    return result;
+    return segs;
 }

 PyObject* TriContourGenerator::contour_to_segs_and_kinds(const Contour& contour)
 {
-    // Convert all of the polygons generated by a call to
-    // create_filled_contour() into their Python equivalents for return to the
-    // calling function.  All of the polygons' points and kinds codes are
-    // combined into single NumPy arrays for each; this avoids having
-    // to determine which polygons are holes as this will be determined by the
-    // renderer.  If there are ntotal points in all of the polygons, the two
-    // NumPy arrays created are:
-    //   vertices is a double array of shape (ntotal, 2) containing the (x, y)
-    //     coordinates of the points in the polygons
-    //   codes is a uint8 array of shape (ntotal,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are returned in the Python lists vertices_list and codes_list
-    // respectively.
-
     Contour::const_iterator line;
     ContourLine::const_iterator point;

@@ -689,50 +635,32 @@ PyObject* TriContourGenerator::contour_to_segs_and_kinds(const Contour& contour)

     // Create segs array for point coordinates.
     npy_intp segs_dims[2] = {n_points, 2};
-    numpy::array_view<double, 2> segs(segs_dims);
-    double* segs_ptr = segs.data();
+    PyArrayObject* segs = (PyArrayObject*)PyArray_SimpleNew(
+                                                2, segs_dims, NPY_DOUBLE);
+    double* segs_ptr = (double*)PyArray_DATA(segs);

     // Create kinds array for code types.
-    npy_intp codes_dims[1] = {n_points};
-    numpy::array_view<unsigned char, 1> codes(codes_dims);
-    unsigned char* codes_ptr = codes.data();
+    npy_intp kinds_dims[1] = {n_points};
+    PyArrayObject* kinds = (PyArrayObject*)PyArray_SimpleNew(
+                                                1, kinds_dims, NPY_UBYTE);
+    unsigned char* kinds_ptr = (unsigned char*)PyArray_DATA(kinds);

     for (line = contour.begin(); line != contour.end(); ++line) {
         for (point = line->begin(); point != line->end(); point++) {
             *segs_ptr++ = point->x;
             *segs_ptr++ = point->y;
-            *codes_ptr++ = (point == line->begin() ? MOVETO : LINETO);
+            *kinds_ptr++ = (point == line->begin() ? MOVETO : LINETO);
         }
     }

-    PyObject* vertices_list = PyList_New(0);
-    if (vertices_list == 0)
-        throw std::runtime_error("Failed to create Python list");
-
-    PyObject* codes_list = PyList_New(0);
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
-        throw std::runtime_error("Failed to create Python list");
-    }
-
-    if (PyList_Append(vertices_list, segs.pyobj_steal()) ||
-        PyList_Append(codes_list, codes.pyobj_steal())) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Unable to add contour to vertices and codes lists");
-    }
-
     PyObject* result = PyTuple_New(2);
-    if (result == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Failed to create Python tuple");
+    if (PyTuple_SetItem(result, 0, (PyObject*)segs) ||
+        PyTuple_SetItem(result, 1, (PyObject*)kinds)) {
+        Py_XDECREF(result);
+        PyErr_SetString(PyExc_RuntimeError,
+                        "Unable to set contour segments and kinds");
+        return NULL;
     }
-
-    // No error checking here as filling in a brand new pre-allocated tuple.
-    PyTuple_SET_ITEM(result, 0, vertices_list);
-    PyTuple_SET_ITEM(result, 1, codes_list);
-
     return result;
 }

@@ -744,7 +672,7 @@ PyObject* TriContourGenerator::create_contour(const double& level)
     find_boundary_lines(contour, level);
     find_interior_lines(contour, level, false, false);

-    return contour_line_to_segs_and_kinds(contour);
+    return contour_to_segs(contour);
 }

 PyObject* TriContourGenerator::create_filled_contour(const double& lower_level,
diff --git a/src/tri/_tri.h b/src/tri/_tri.h
index 28c8e07933..13aad01fb6 100644
--- a/src/tri/_tri.h
+++ b/src/tri/_tri.h
@@ -363,16 +363,13 @@ private:
     void clear_visited_flags(bool include_boundaries);

     /* Convert a non-filled Contour from C++ to Python.
-     * Returns new python tuple ([segs0, segs1, ...], [kinds0, kinds1...])
-     * where
-     *   segs0: double array of shape (n_points,2) of point coordinates of first
-     *   contour line, etc.
-     *   kinds0: ubyte array of shape (n_points) of kinds codes of first contour
-     *   line, etc. */
-    PyObject* contour_line_to_segs_and_kinds(const Contour& contour);
+     * Returns new python list [segs0, segs1, ...] where
+     *   segs0: double array of shape (?,2) of point coordinates of first
+     *   contour line, etc. */
+    PyObject* contour_to_segs(const Contour& contour);

     /* Convert a filled Contour from C++ to Python.
-     * Returns new python tuple ([segs], [kinds]) where
+     * Returns new python tuple (segs, kinds) where
      *   segs: double array of shape (n_points,2) of all point coordinates,
      *   kinds: ubyte array of shape (n_points) of all point code types. */
     PyObject* contour_to_segs_and_kinds(const Contour& contour);
diff --git a/src/tri/_tri_wrapper.cpp b/src/tri/_tri_wrapper.cpp
index 391d817570..fcf155721e 100644
--- a/src/tri/_tri_wrapper.cpp
+++ b/src/tri/_tri_wrapper.cpp
@@ -489,7 +489,20 @@ static PyTypeObject* PyTrapezoidMapTriFinder_init_type(PyObject* m, PyTypeObject
     return type;
 }

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "_tri" };
+
+/* Module */
+
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "_tri",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -497,8 +510,6 @@ PyMODINIT_FUNC PyInit__tri(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -506,18 +517,17 @@ PyMODINIT_FUNC PyInit__tri(void)
     }

     if (!PyTriangulation_init_type(m, &PyTriangulationType)) {
-        Py_DECREF(m);
         return NULL;
     }
     if (!PyTriContourGenerator_init_type(m, &PyTriContourGeneratorType)) {
-        Py_DECREF(m);
         return NULL;
     }
     if (!PyTrapezoidMapTriFinder_init_type(m, &PyTrapezoidMapTriFinderType)) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/tools/boilerplate.py b/tools/boilerplate.py
index 46c8d36563..cf013ef0db 100644
--- a/tools/boilerplate.py
+++ b/tools/boilerplate.py
@@ -138,13 +138,7 @@ def generate_function(name, called_fullname, template, **kwargs):
     class_name, called_name = called_fullname.split('.')
     class_ = {'Axes': Axes, 'Figure': Figure}[class_name]

-    meth = getattr(class_, called_name)
-    decorator = _api.deprecation.DECORATORS.get(meth)
-    # Generate the wrapper with the non-kwonly signature, as it will get
-    # redecorated with make_keyword_only by _copy_docstring_and_deprecators.
-    if decorator and decorator.func is _api.make_keyword_only:
-        meth = meth.__wrapped__
-    signature = inspect.signature(meth)
+    signature = inspect.signature(getattr(class_, called_name))
     # Replace self argument.
     params = list(signature.parameters.values())[1:]
     signature = str(signature.replace(parameters=[
@@ -208,7 +202,6 @@ def boilerplate_gen():
         'ginput',
         'subplots_adjust',
         'suptitle',
-        'tight_layout',
         'waitforbuttonpress',
     )

diff --git a/tools/cache_zenodo_svg.py b/tools/cache_zenodo_svg.py
index fac396d53f..e00f4eb3d1 100644
--- a/tools/cache_zenodo_svg.py
+++ b/tools/cache_zenodo_svg.py
@@ -50,8 +50,7 @@ def _get_xdg_cache_dir():
     """
     Return the XDG cache directory.

-    See
-    https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
+    See https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
     """
     cache_dir = os.environ.get("XDG_CACHE_HOME")
     if not cache_dir:
@@ -63,7 +62,6 @@ def _get_xdg_cache_dir():

 if __name__ == "__main__":
     data = {
-        "v3.4.3": "5194481",
         "v3.4.2": "4743323",
         "v3.4.1": "4649959",
         "v3.4.0": "4638398",
@@ -106,7 +104,7 @@ if __name__ == "__main__":
     }
     doc_dir = Path(__file__).parent.parent.absolute() / "doc"
     target_dir = doc_dir / "_static/zenodo_cache"
-    citing = doc_dir / "users/project/citing.rst"
+    citing = doc_dir / "citing.rst"
     target_dir.mkdir(exist_ok=True, parents=True)
     header = []
     footer = []
@@ -134,7 +132,7 @@ if __name__ == "__main__":
             fout.write(
                 f"""
 {version}
-   .. image:: ../../_static/zenodo_cache/{doi}.svg
+   .. image:: _static/zenodo_cache/{doi}.svg
       :target:  https://doi.org/10.5281/zenodo.{doi}"""
             )
         fout.write("\n\n")
diff --git a/tools/github_stats.py b/tools/github_stats.py
index f6e1903241..3b9a4cbb53 100755
--- a/tools/github_stats.py
+++ b/tools/github_stats.py
@@ -78,8 +78,8 @@ def issues_closed_since(period=timedelta(days=365), project="matplotlib/matplotl
     filtered = [ i for i in allclosed if _parse_datetime(i['closed_at']) > since ]
     if pulls:
         filtered = [ i for i in filtered if _parse_datetime(i['merged_at']) > since ]
-        # filter out PRs not against main (backports)
-        filtered = [ i for i in filtered if i['base']['ref'] == 'main' ]
+        # filter out PRs not against master (backports)
+        filtered = [ i for i in filtered if i['base']['ref'] == 'master' ]
     else:
         filtered = [ i for i in filtered if not is_pull_request(i) ]

@@ -172,18 +172,17 @@ if __name__ == "__main__":

     n_issues, n_pulls = map(len, (issues, pulls))
     n_total = n_issues + n_pulls
-    since_day = since.strftime("%Y/%m/%d")
-    today = datetime.today()

     # Print summary report we can directly include into release notes.
     print('.. _github-stats:')
     print()
-    title = 'GitHub statistics ' + today.strftime('(%b %d, %Y)')
-    print(title)
-    print('=' * len(title))
+    print('GitHub Stats')
+    print('============')

     print()
-    print("GitHub statistics for %s (tag: %s) - %s" % (since_day, tag, today.strftime("%Y/%m/%d"), ))
+    since_day = since.strftime("%Y/%m/%d")
+    today = datetime.today().strftime("%Y/%m/%d")
+    print("GitHub stats for %s - %s (tag: %s)" % (since_day, today, tag))
     print()
     print("These lists are automatically generated, and may be incomplete or contain duplicates.")
     print()
@@ -230,9 +229,8 @@ if __name__ == "__main__":
         report(issues, show_urls)
     print()
     print()
-    print("""\
-Previous GitHub statistics
---------------------------
+    print("""Previous GitHub Stats
+---------------------


 .. toctree::
diff --git a/tools/subset.py b/tools/subset.py
index 53e8d5fd94..5b1494f1b5 100644
--- a/tools/subset.py
+++ b/tools/subset.py
@@ -9,7 +9,7 @@
 #   you may not use this file except in compliance with the License.
 #   You may obtain a copy of the License at
 #
-#       https://www.apache.org/licenses/LICENSE-2.0.txt
+#       http://www.apache.org/licenses/LICENSE-2.0
 #
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
@@ -21,10 +21,8 @@
 #
 # A script for subsetting a font, using FontForge. See README for details.

-# TODO 2013-04-08 ensure the menu files are as compact as possible by default,
-# similar to subset.pl
-# TODO 2013-05-22 in Arimo, the latin subset doesn't include ; but the greek
-# does. why on earth is this happening?
+# TODO 2013-04-08 ensure the menu files are as compact as possible by default, similar to subset.pl
+# TODO 2013-05-22 in Arimo, the latin subset doesn't include ; but the greek does. why on earth is this happening?

 import getopt
 import os
@@ -37,23 +35,21 @@ import fontforge

 def log_namelist(nam, unicode):
     if nam and isinstance(unicode, int):
-        print(f"0x{unicode:04X}", fontforge.nameFromUnicode(unicode), file=nam)
+        print("0x%0.4X" % unicode, fontforge.nameFromUnicode(unicode), file=nam)

-
-def select_with_refs(font, unicode, newfont, pe=None, nam=None):
+def select_with_refs(font, unicode, newfont, pe = None, nam = None):
     newfont.selection.select(('more', 'unicode'), unicode)
     log_namelist(nam, unicode)
     if pe:
-        print(f"SelectMore({unicode})", file=pe)
+        print("SelectMore(%d)" % unicode, file=pe)
     try:
         for ref in font[unicode].references:
             newfont.selection.select(('more',), ref[0])
             log_namelist(nam, ref[0])
             if pe:
-                print(f'SelectMore("{ref[0]}")', file=pe)
+                print('SelectMore("%s")' % ref[0], file=pe)
     except Exception:
-        print(f'Resolving references on u+{unicode:04x} failed')
-
+        print('Resolving references on u+%04x failed' % unicode)

 def subset_font_raw(font_in, font_out, unicodes, opts):
     if '--namelist' in opts:
@@ -61,7 +57,7 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         # change getopt.gnu_getopt from namelist to namelist=
         # and invert comments on following 2 lines
         # nam_fn = opts['--namelist']
-        nam_fn = f'{font_out}.nam'
+        nam_fn = font_out + '.nam'
         nam = open(nam_fn, 'w')
     else:
         nam = None
@@ -72,7 +68,7 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         pe = None
     font = fontforge.open(font_in)
     if pe:
-        print(f'Open("{font_in}")', file=pe)
+        print('Open("' + font_in + '")', file=pe)
         extract_vert_to_script(font_in, pe)
     for i in unicodes:
         select_with_refs(font, i, font, pe, nam)
@@ -87,10 +83,9 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
     for glyph in addl_glyphs:
         font.selection.select(('more',), glyph)
         if nam:
-            print(f"0x{fontforge.unicodeFromName(glyph):0.4X}", glyph,
-                  file=nam)
+            print("0x%0.4X" % fontforge.unicodeFromName(glyph), glyph, file=nam)
         if pe:
-            print(f'SelectMore("{glyph}")', file=pe)
+            print('SelectMore("%s")' % glyph, file=pe)

     flags = ()

@@ -154,11 +149,11 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         nam.close()

     if pe:
-        print(f'Generate("{font_out}")', file=pe)
+        print('Generate("' + font_out + '")', file=pe)
         pe.close()
         subprocess.call(["fontforge", "-script", pe_fn])
     else:
-        font.generate(font_out, flags=flags)
+        font.generate(font_out, flags = flags)
     font.close()

     if '--roundtrip' in opts:
@@ -166,8 +161,7 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         # the advanceWidthMax in the hhea table, and a workaround is to open
         # and re-generate
         font2 = fontforge.open(font_out)
-        font2.generate(font_out, flags=flags)
-
+        font2.generate(font_out, flags = flags)

 def subset_font(font_in, font_out, unicodes, opts):
     font_out_raw = font_out
@@ -179,70 +173,59 @@ def subset_font(font_in, font_out, unicodes, opts):
 # 2011-02-14 DC this needs to only happen with --namelist is used
 #        os.rename(font_out_raw + '.nam', font_out + '.nam')

-
 def getsubset(subset, font_in):
     subsets = subset.split('+')

-    quotes = [
-        0x2013,  # endash
-        0x2014,  # emdash
-        0x2018,  # quoteleft
-        0x2019,  # quoteright
-        0x201A,  # quotesinglbase
-        0x201C,  # quotedblleft
-        0x201D,  # quotedblright
-        0x201E,  # quotedblbase
-        0x2022,  # bullet
-        0x2039,  # guilsinglleft
-        0x203A,  # guilsinglright
-    ]
-
-    latin = [
-        *range(0x20, 0x7f),  # Basic Latin (A-Z, a-z, numbers)
-        *range(0xa0, 0x100),  # Western European symbols and diacritics
-        0x20ac,  # Euro
-        0x0152,  # OE
-        0x0153,  # oe
-        0x003b,  # semicolon
-        0x00b7,  # periodcentered
-        0x0131,  # dotlessi
-        0x02c6,  # circumflex
-        0x02da,  # ring
-        0x02dc,  # tilde
-        0x2074,  # foursuperior
-        0x2215,  # division slash
-        0x2044,  # fraction slash
-        0xe0ff,  # PUA: Font logo
-        0xeffd,  # PUA: Font version number
-        0xf000,  # PUA: font ppem size indicator: run
-                 # `ftview -f 1255 10 Ubuntu-Regular.ttf` to see it in action!
-    ]
+    quotes  = [0x2013] # endash
+    quotes += [0x2014] # emdash
+    quotes += [0x2018] # quoteleft
+    quotes += [0x2019] # quoteright
+    quotes += [0x201A] # quotesinglbase
+    quotes += [0x201C] # quotedblleft
+    quotes += [0x201D] # quotedblright
+    quotes += [0x201E] # quotedblbase
+    quotes += [0x2022] # bullet
+    quotes += [0x2039] # guilsinglleft
+    quotes += [0x203A] # guilsinglright
+
+    latin  = range(0x20, 0x7f) # Basic Latin (A-Z, a-z, numbers)
+    latin += range(0xa0, 0x100) # Western European symbols and diacritics
+    latin += [0x20ac] # Euro
+    latin += [0x0152] # OE
+    latin += [0x0153] # oe
+    latin += [0x003b] # semicolon
+    latin += [0x00b7] # periodcentered
+    latin += [0x0131] # dotlessi
+    latin += [0x02c6] # circumflex
+    latin += [0x02da] # ring
+    latin += [0x02dc] # tilde
+    latin += [0x2074] # foursuperior
+    latin += [0x2215] # division slash
+    latin += [0x2044] # fraction slash
+    latin += [0xe0ff] # PUA: Font logo
+    latin += [0xeffd] # PUA: Font version number
+    latin += [0xf000] # PUA: font ppem size indicator: run `ftview -f 1255 10 Ubuntu-Regular.ttf` to see it in action!

     result = quotes

     if 'menu' in subset:
         font = fontforge.open(font_in)
-        result = [
-            *map(ord, font.familyname),
-            0x0020,
-        ]
+        result = map(ord, font.familyname)
+        result += [0x0020]

     if 'latin' in subset:
         result += latin
     if 'latin-ext' in subset:
         # These ranges include Extended A, B, C, D, and Additional with the
         # exception of Vietnamese, which is a separate range
-        result += [
-            *range(0x100, 0x370),
-            *range(0x1d00, 0x1ea0),
-            *range(0x1ef2, 0x1f00),
-            *range(0x2070, 0x20d0),
-            *range(0x2c60, 0x2c80),
-            *range(0xa700, 0xa800),
-        ]
+        result += (range(0x100, 0x370) +
+                   range(0x1d00, 0x1ea0) +
+                   range(0x1ef2, 0x1f00) +
+                   range(0x2070, 0x20d0) +
+                   range(0x2c60, 0x2c80) +
+                   range(0xa700, 0xa800))
     if 'vietnamese' in subset:
-        # 2011-07-16 DC: Charset from
-        # http://vietunicode.sourceforge.net/charset/ + U+1ef9 from Fontaine
+        # 2011-07-16 DC: Charset from http://vietunicode.sourceforge.net/charset/ + U+1ef9 from Fontaine
         result += [0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00C8, 0x00C9,
                    0x00CA, 0x00CC, 0x00CD, 0x00D2, 0x00D3, 0x00D4,
                    0x00D5, 0x00D9, 0x00DA, 0x00DD, 0x00E0, 0x00E1,
@@ -250,26 +233,21 @@ def getsubset(subset, font_in):
                    0x00ED, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F9,
                    0x00FA, 0x00FD, 0x0102, 0x0103, 0x0110, 0x0111,
                    0x0128, 0x0129, 0x0168, 0x0169, 0x01A0, 0x01A1,
-                   0x01AF, 0x01B0, 0x20AB, *range(0x1EA0, 0x1EFA)]
+                   0x01AF, 0x01B0, 0x20AB] + range(0x1EA0, 0x1EFA)
     if 'greek' in subset:
-        # Could probably be more aggressive here and exclude archaic
-        # characters, but lack data
-        result += [*range(0x370, 0x400)]
+        # Could probably be more aggressive here and exclude archaic characters,
+        # but lack data
+        result += range(0x370, 0x400)
     if 'greek-ext' in subset:
-        result += [*range(0x370, 0x400), *range(0x1f00, 0x2000)]
+        result += range(0x370, 0x400) + range(0x1f00, 0x2000)
     if 'cyrillic' in subset:
         # Based on character frequency analysis
-        result += [*range(0x400, 0x460), 0x490, 0x491, 0x4b0, 0x4b1, 0x2116]
+        result += range(0x400, 0x460) + [0x490, 0x491, 0x4b0, 0x4b1, 0x2116]
     if 'cyrillic-ext' in subset:
-        result += [
-            *range(0x400, 0x530),
-            0x20b4,
-            # 0x2116 is the russian No, a number abbreviation similar to the
-            # latin #, suggested by Alexei Vanyashin
-            0x2116,
-            *range(0x2de0, 0x2e00),
-            *range(0xa640, 0xa6a0),
-        ]
+        result += (range(0x400, 0x530) +
+                   [0x20b4, 0x2116] + # 0x2116 is the russian No, a number abbreviation similar to the latin #, suggested by Alexei Vanyashin
+                   range(0x2de0, 0x2e00) +
+                   range(0xa640, 0xa6a0))
     if 'arabic' in subset:
         # Based on Droid Arabic Kufi 1.0
         result += [0x000D, 0x0020, 0x0621, 0x0627, 0x062D,
@@ -317,8 +295,7 @@ def getsubset(subset, font_in):
                    0x06C8, 0x06C9, 0x06CA, 0x06CB, 0x06CF, 0x06CE,
                    0x06D0, 0x06D1, 0x06D4, 0x06FA, 0x06DD, 0x06DE,
                    0x06E0, 0x06E9, 0x060D, 0xFD3E, 0xFD3F, 0x25CC,
-                   # Added from
-                   # https://groups.google.com/d/topic/googlefontdirectory-discuss/MwlMWMPNCXs/discussion
+                   # Added from https://groups.google.com/d/topic/googlefontdirectory-discuss/MwlMWMPNCXs/discussion
                    0x063b, 0x063c, 0x063d, 0x063e, 0x063f, 0x0620,
                    0x0674, 0x0674, 0x06EC]

@@ -331,48 +308,42 @@ def getsubset(subset, font_in):

     return result

-
 # code for extracting vertical metrics from a TrueType font
+
 class Sfnt:
     def __init__(self, data):
         version, numTables, _, _, _ = struct.unpack('>IHHHH', data[:12])
         self.tables = {}
         for i in range(numTables):
-            tag, checkSum, offset, length = struct.unpack(
-                '>4sIII', data[12 + 16 * i: 28 + 16 * i])
+            tag, checkSum, offset, length = struct.unpack('>4sIII', data[12 + 16 * i: 28 + 16 * i])
             self.tables[tag] = data[offset: offset + length]

     def hhea(self):
         r = {}
         d = self.tables['hhea']
-        r['Ascender'], r['Descender'], r['LineGap'] = struct.unpack(
-            '>hhh', d[4:10])
+        r['Ascender'], r['Descender'], r['LineGap'] = struct.unpack('>hhh', d[4:10])
         return r

     def os2(self):
         r = {}
         d = self.tables['OS/2']
         r['fsSelection'], = struct.unpack('>H', d[62:64])
-        r['sTypoAscender'], r['sTypoDescender'], r['sTypoLineGap'] = \
-            struct.unpack('>hhh', d[68:74])
-        r['usWinAscender'], r['usWinDescender'] = struct.unpack(
-            '>HH', d[74:78])
+        r['sTypoAscender'], r['sTypoDescender'], r['sTypoLineGap'] = struct.unpack('>hhh', d[68:74])
+        r['usWinAscender'], r['usWinDescender'] = struct.unpack('>HH', d[74:78])
         return r

-
 def set_os2(pe, name, val):
-    print(f'SetOS2Value("{name}", {val:d})', file=pe)
-
+    print('SetOS2Value("' + name + '", %d)' % val, file=pe)

 def set_os2_vert(pe, name, val):
     set_os2(pe, name + 'IsOffset', 0)
     set_os2(pe, name, val)

-
 # Extract vertical metrics data directly out of font file, and emit
 # script code to set the values in the generated font. This is a (rather
 # ugly) workaround for the issue described in:
-# https://sourceforge.net/p/fontforge/mailman/fontforge-users/thread/20100906085718.GB1907@khaled-laptop/
+# http://sourceforge.net/mailarchive/forum.php?thread_name=20100906085718.GB1907%40khaled-laptop&forum_name=fontforge-users
+
 def extract_vert_to_script(font_in, pe):
     with open(font_in, 'rb') as in_file:
         data = in_file.read()
@@ -386,12 +357,11 @@ def extract_vert_to_script(font_in, pe):
     set_os2_vert(pe, "HHeadAscent", hhea['Ascender'])
     set_os2_vert(pe, "HHeadDescent", hhea['Descender'])

-
 def main(argv):
-    optlist, args = getopt.gnu_getopt(argv, '', [
-        'string=', 'strip_names', 'opentype-features', 'simplify', 'new',
-        'script', 'nmr', 'roundtrip', 'subset=', 'namelist', 'null', 'nd',
-        'move-display'])
+    optlist, args = getopt.gnu_getopt(argv, '', ['string=', 'strip_names', 'opentype-features',
+                                                 'simplify', 'new', 'script',
+                                                 'nmr', 'roundtrip', 'subset=',
+                                                 'namelist', 'null', 'nd', 'move-display'])

     font_in, font_out = args
     opts = dict(optlist)
@@ -401,6 +371,5 @@ def main(argv):
         subset = getsubset(opts.get('--subset', 'latin'), font_in)
     subset_font(font_in, font_out, subset, opts)

-
 if __name__ == '__main__':
     main(sys.argv[1:])
diff --git a/tools/triage_tests.py b/tools/triage_tests.py
index 0fd1c76109..02b8f60076 100644
--- a/tools/triage_tests.py
+++ b/tools/triage_tests.py
@@ -30,7 +30,6 @@ import shutil
 import sys

 from matplotlib.backends.qt_compat import QtCore, QtGui, QtWidgets
-from matplotlib.backends.qt_compat import _enum, _exec


 # matplotlib stores the baseline images under two separate subtrees,
@@ -62,13 +61,13 @@ class Thumbnail(QtWidgets.QFrame):
         layout = QtWidgets.QVBoxLayout()

         label = QtWidgets.QLabel(name)
-        label.setAlignment(_enum('QtCore.Qt.AlignmentFlag').AlignHCenter |
-                           _enum('QtCore.Qt.AlignmentFlag').AlignVCenter)
+        label.setAlignment(QtCore.Qt.AlignHCenter |
+                           QtCore.Qt.AlignVCenter)
         layout.addWidget(label, 0)

         self.image = QtWidgets.QLabel()
-        self.image.setAlignment(_enum('QtCore.Qt.AlignmentFlag').AlignHCenter |
-                                _enum('QtCore.Qt.AlignmentFlag').AlignVCenter)
+        self.image.setAlignment(QtCore.Qt.AlignHCenter |
+                                QtCore.Qt.AlignVCenter)
         self.image.setMinimumSize(800 // 3, 600 // 3)
         layout.addWidget(self.image)
         self.setLayout(layout)
@@ -86,7 +85,7 @@ class EventFilter(QtCore.QObject):
         self.window = window

     def eventFilter(self, receiver, event):
-        if event.type() == _enum('QtCore.QEvent.Type').KeyPress:
+        if event.type() == QtCore.QEvent.KeyPress:
             self.window.keyPressEvent(event)
             return True
         else:
@@ -126,9 +125,8 @@ class Dialog(QtWidgets.QDialog):
         images_layout = QtWidgets.QVBoxLayout()
         images_box = QtWidgets.QWidget()
         self.image_display = QtWidgets.QLabel()
-        self.image_display.setAlignment(
-            _enum('QtCore.Qt.AlignmentFlag').AlignHCenter |
-            _enum('QtCore.Qt.AlignmentFlag').AlignVCenter)
+        self.image_display.setAlignment(QtCore.Qt.AlignHCenter |
+                                        QtCore.Qt.AlignVCenter)
         self.image_display.setMinimumSize(800, 600)
         images_layout.addWidget(self.image_display, 6)
         images_box.setLayout(images_layout)
@@ -166,9 +164,8 @@ class Dialog(QtWidgets.QDialog):
         for fname, thumbnail in zip(entry.thumbnails, self.thumbnails):
             pixmap = QtGui.QPixmap(os.fspath(fname))
             scaled_pixmap = pixmap.scaled(
-                thumbnail.size(),
-                _enum('QtCore.Qt.AspectRatioMode').KeepAspectRatio,
-                _enum('QtCore.Qt.TransformationMode').SmoothTransformation)
+                thumbnail.size(), QtCore.Qt.KeepAspectRatio,
+                QtCore.Qt.SmoothTransformation)
             thumbnail.image.setPixmap(scaled_pixmap)
             self.pixmaps.append(scaled_pixmap)

@@ -176,15 +173,13 @@ class Dialog(QtWidgets.QDialog):
         self.filelist.setCurrentRow(self.current_entry)

     def set_large_image(self, index):
-        self.thumbnails[self.current_thumbnail].setFrameShape(
-            _enum('QtWidgets.QFrame.Shape').NoFrame)
+        self.thumbnails[self.current_thumbnail].setFrameShape(0)
         self.current_thumbnail = index
         pixmap = QtGui.QPixmap(os.fspath(
             self.entries[self.current_entry]
             .thumbnails[self.current_thumbnail]))
         self.image_display.setPixmap(pixmap)
-        self.thumbnails[self.current_thumbnail].setFrameShape(
-            _enum('QtWidgets.QFrame.Shape').Box)
+        self.thumbnails[self.current_thumbnail].setFrameShape(1)

     def accept_test(self):
         entry = self.entries[self.current_entry]
@@ -209,17 +204,17 @@ class Dialog(QtWidgets.QDialog):
         self.set_entry(min((self.current_entry + 1), len(self.entries) - 1))

     def keyPressEvent(self, e):
-        if e.key() == _enum('QtCore.Qt.Key').Key_Left:
+        if e.key() == QtCore.Qt.Key_Left:
             self.set_large_image((self.current_thumbnail - 1) % 3)
-        elif e.key() == _enum('QtCore.Qt.Key').Key_Right:
+        elif e.key() == QtCore.Qt.Key_Right:
             self.set_large_image((self.current_thumbnail + 1) % 3)
-        elif e.key() == _enum('QtCore.Qt.Key').Key_Up:
+        elif e.key() == QtCore.Qt.Key_Up:
             self.set_entry(max(self.current_entry - 1, 0))
-        elif e.key() == _enum('QtCore.Qt.Key').Key_Down:
+        elif e.key() == QtCore.Qt.Key_Down:
             self.set_entry(min(self.current_entry + 1, len(self.entries) - 1))
-        elif e.key() == _enum('QtCore.Qt.Key').Key_A:
+        elif e.key() == QtCore.Qt.Key_A:
             self.accept_test()
-        elif e.key() == _enum('QtCore.Qt.Key').Key_R:
+        elif e.key() == QtCore.Qt.Key_R:
             self.reject_test()
         else:
             super().keyPressEvent(e)
@@ -238,8 +233,8 @@ class Entry:

         basename = self.diff[:-len('-failed-diff.png')]
         for ext in exts:
-            if basename.endswith(f'_{ext}'):
-                display_extension = f'_{ext}'
+            if basename.endswith('_' + ext):
+                display_extension = '_' + ext
                 extension = ext
                 basename = basename[:-4]
                 break
@@ -249,10 +244,11 @@ class Entry:

         self.basename = basename
         self.extension = extension
-        self.generated = f'{basename}.{extension}'
-        self.expected = f'{basename}-expected.{extension}'
-        self.expected_display = f'{basename}-expected{display_extension}.png'
-        self.generated_display = f'{basename}{display_extension}.png'
+        self.generated = basename + '.' + extension
+        self.expected = basename + '-expected.' + extension
+        self.expected_display = (basename + '-expected' + display_extension +
+                                 '.png')
+        self.generated_display = basename + display_extension + '.png'
         self.name = self.reldir / self.basename
         self.destdir = self.get_dest_dir(self.reldir)

@@ -281,7 +277,7 @@ class Entry:
             path = self.source / baseline_dir / reldir
             if path.is_dir():
                 return path
-        raise ValueError(f"Can't find baseline dir for {reldir}")
+        raise ValueError("Can't find baseline dir for {}".format(reldir))

     @property
     def display(self):
@@ -296,7 +292,7 @@ class Entry:
             'autogen': '\N{WHITE SQUARE CONTAINING BLACK SMALL SQUARE}',
         }
         box = status_map[self.status]
-        return f'{box} {self.name} [{self.extension}]'
+        return '{} {} [{}]'.format(box, self.name, self.extension)

     def accept(self):
         """
@@ -309,9 +305,7 @@ class Entry:
         """
         Reject this test by copying the expected result to the source tree.
         """
-        expected = self.dir / self.expected
-        if not expected.is_symlink():
-            copy_file(expected, self.destdir / self.generated)
+        copy_file(self.dir / self.expected, self.destdir / self.generated)
         self.status = 'reject'


@@ -345,7 +339,7 @@ def launch(result_images, source):
     dialog.show()
     filter = EventFilter(dialog)
     app.installEventFilter(filter)
-    sys.exit(_exec(app))
+    sys.exit(app.exec_())


 if __name__ == '__main__':
diff --git a/tutorials/advanced/blitting.py b/tutorials/advanced/blitting.py
index 5481e533ca..868b48a497 100644
--- a/tutorials/advanced/blitting.py
+++ b/tutorials/advanced/blitting.py
@@ -7,7 +7,7 @@ Faster rendering by using blitting
 <https://en.wikipedia.org/wiki/Bit_blit>`__ in raster graphics that,
 in the context of Matplotlib, can be used to (drastically) improve
 performance of interactive figures. For example, the
-:mod:`.animation` and :mod:`.widgets` modules use blitting
+:mod:`~.animation` and :mod:`~.widgets` modules use blitting
 internally. Here, we demonstrate how to implement your own blitting, outside
 of these classes.

diff --git a/tutorials/colors/colormap-manipulation.py b/tutorials/colors/colormap-manipulation.py
index 9c68dfb25b..7273ca25b0 100644
--- a/tutorials/colors/colormap-manipulation.py
+++ b/tutorials/colors/colormap-manipulation.py
@@ -48,7 +48,7 @@ print(viridis(0.56))
 # ListedColormap
 # --------------
 #
-# `.ListedColormap`\s store their color values in a ``.colors`` attribute.
+# `.ListedColormap` s store their color values in a ``.colors`` attribute.
 # The list of colors that comprise the colormap can be directly accessed using
 # the ``colors`` property,
 # or it can be accessed indirectly by calling  ``viridis`` with an array
@@ -68,7 +68,7 @@ print('viridis(np.linspace(0, 1, 12))', viridis(np.linspace(0, 1, 12)))
 ##############################################################################
 # LinearSegmentedColormap
 # -----------------------
-# `.LinearSegmentedColormap`\s do not have a ``.colors`` attribute.
+# `.LinearSegmentedColormap` s do not have a ``.colors`` attribute.
 # However, one may still call the colormap with an integer array, or with a
 # float array between 0 and 1.

@@ -114,7 +114,7 @@ plot_examples([cmap])

 ##############################################################################
 # In fact, that list may contain any valid
-# :doc:`Matplotlib color specification </tutorials/colors/colors>`.
+# :doc:`matplotlib color specification </tutorials/colors/colors>`.
 # Particularly useful for creating custom colormaps are Nx4 numpy arrays.
 # Because with the variety of numpy operations that we can do on a such an
 # array, carpentry of new colormaps from existing colormaps become quite
@@ -168,7 +168,7 @@ plot_examples([viridis, newcmp])
 # Creating linear segmented colormaps
 # ===================================
 #
-# The `.LinearSegmentedColormap` class specifies colormaps using anchor points
+# `.LinearSegmentedColormap` class specifies colormaps using anchor points
 # between which RGB(A) values are interpolated.
 #
 # The format to specify these colormaps allows discontinuities at the anchor
@@ -177,7 +177,7 @@ plot_examples([viridis, newcmp])
 # ``yleft[i]`` and ``yright[i]`` are the values of the color on either
 # side of the anchor point.
 #
-# If there are no discontinuities, then ``yleft[i] == yright[i]``:
+# If there are no discontinuities, then ``yleft[i]=yright[i]``:

 cdict = {'red':   [[0.0,  0.0, 0.0],
                    [0.5,  1.0, 1.0],
@@ -221,10 +221,9 @@ plot_linearmap(cdict)
 #
 # In the example below there is a discontinuity in red at 0.5.  The
 # interpolation between 0 and 0.5 goes from 0.3 to 1, and between 0.5 and 1
-# it goes from 0.9 to 1.  Note that ``red[0, 1]``, and ``red[2, 2]`` are both
-# superfluous to the interpolation because ``red[0, 1]`` (i.e., ``yleft[0]``)
-# is the value to the left of 0, and ``red[2, 2]`` (i.e., ``yright[2]``) is the
-# value to the right of 1, which are outside the color mapping domain.
+# it goes from 0.9 to 1.  Note that red[0, 1], and red[2, 2] are both
+# superfluous to the interpolation because red[0, 1] is the value to the
+# left of 0, and red[2, 2] is the value to the right of 1.0.

 cdict['red'] = [[0.0,  0.0, 0.3],
                 [0.5,  1.0, 0.9],
@@ -235,7 +234,7 @@ plot_linearmap(cdict)
 # Directly creating a segmented colormap from a list
 # --------------------------------------------------
 #
-# The approach described above is very versatile, but admittedly a bit
+# The above described is a very versatile approach, but admittedly a bit
 # cumbersome to implement. For some basic cases, the use of
 # `.LinearSegmentedColormap.from_list` may be easier. This creates a segmented
 # colormap with equal spacings from a supplied list of colors.
@@ -244,8 +243,8 @@ colors = ["darkorange", "gold", "lawngreen", "lightseagreen"]
 cmap1 = LinearSegmentedColormap.from_list("mycmap", colors)

 #############################################################################
-# If desired, the nodes of the colormap can be given as numbers between 0 and
-# 1. For example, one could have the reddish part take more space in the
+# If desired, the nodes of the colormap can be given as numbers
+# between 0 and 1. E.g. one could have the reddish part take more space in the
 # colormap.

 nodes = [0.0, 0.4, 0.8, 1.0]
diff --git a/tutorials/colors/colormapnorms.py b/tutorials/colors/colormapnorms.py
index ae3ac88256..41aa631094 100644
--- a/tutorials/colors/colormapnorms.py
+++ b/tutorials/colors/colormapnorms.py
@@ -277,8 +277,7 @@ pcm = ax.pcolormesh(longitude, latitude, topo, rasterized=True, norm=divnorm,
 # longitude depends on latitude.
 ax.set_aspect(1 / np.cos(np.deg2rad(49)))
 ax.set_title('TwoSlopeNorm(x)')
-cb = fig.colorbar(pcm, shrink=0.6)
-cb.set_ticks([-500, 0, 1000, 2000, 3000, 4000])
+fig.colorbar(pcm, shrink=0.6)
 plt.show()


@@ -313,8 +312,7 @@ plt.show()
 # ----------------------------------------------------------
 #
 # The `.TwoSlopeNorm` described above makes a useful example for
-# defining your own norm.  Note for the colorbar to work, you must
-# define an inverse for your norm:
+# defining your own norm.


 class MidpointNormalize(colors.Normalize):
@@ -325,14 +323,8 @@ class MidpointNormalize(colors.Normalize):
     def __call__(self, value, clip=None):
         # I'm ignoring masked values and all kinds of edge cases to make a
         # simple example...
-        # Note also that we must extrapolate beyond vmin/vmax
-        x, y = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1.]
-        return np.ma.masked_array(np.interp(value, x, y,
-                                            left=-np.inf, right=np.inf))
-
-    def inverse(self, value):
-        y, x = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1]
-        return np.interp(value, x, y, left=-np.inf, right=np.inf)
+        x, y = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1]
+        return np.ma.masked_array(np.interp(value, x, y))


 fig, ax = plt.subplots()
@@ -342,7 +334,5 @@ pcm = ax.pcolormesh(longitude, latitude, topo, rasterized=True, norm=midnorm,
                     cmap=terrain_map, shading='auto')
 ax.set_aspect(1 / np.cos(np.deg2rad(49)))
 ax.set_title('Custom norm')
-cb = fig.colorbar(pcm, shrink=0.6, extend='both')
-cb.set_ticks([-500, 0, 1000, 2000, 3000, 4000])
-
+fig.colorbar(pcm, shrink=0.6, extend='both')
 plt.show()
diff --git a/tutorials/colors/colormaps.py b/tutorials/colors/colormaps.py
index 97cf8b8f28..f8764a6a73 100644
--- a/tutorials/colors/colormaps.py
+++ b/tutorials/colors/colormaps.py
@@ -4,9 +4,8 @@ Choosing Colormaps in Matplotlib
 ********************************

 Matplotlib has a number of built-in colormaps accessible via
-`.matplotlib.cm.get_cmap`.  There are also external libraries that
-have many extra colormaps, which can be viewed in the
-`Third-party colormaps`_ section of the Matplotlib documentation.
+`.matplotlib.cm.get_cmap`.  There are also external libraries like
+[palettable]_ and [colorcet]_ that have many extra colormaps.
 Here we briefly discuss how to choose between the many options.  For
 help on creating your own colormaps, see
 :doc:`/tutorials/colors/colormap-manipulation`.
@@ -33,9 +32,8 @@ steps in the color space. Researchers have found that the human brain
 perceives changes in the lightness parameter as changes in the data
 much better than, for example, changes in hue. Therefore, colormaps
 which have monotonically increasing lightness through the colormap
-will be better interpreted by the viewer. Wonderful examples of
-perceptually uniform colormaps can be found in the
-`Third-party colormaps`_ section as well.
+will be better interpreted by the viewer. A wonderful example of
+perceptually uniform colormaps is [colorcet]_.

 Color can be represented in 3D space in various ways. One way to represent color
 is using CIELAB. In CIELAB, color space is represented by lightness,
@@ -47,8 +45,6 @@ An excellent starting resource for learning about human perception of colormaps
 is from [IBM]_.


-.. _color-colormaps_reference:
-
 Classes of colormaps
 ====================

@@ -82,40 +78,9 @@ import matplotlib as mpl
 import matplotlib.pyplot as plt
 from matplotlib import cm
 from colorspacious import cspace_converter
+from collections import OrderedDict

-
-###############################################################################
-#
-# First, we'll show the range of each colormap. Note that some seem
-# to change more "quickly" than others.
-
-cmaps = {}
-
-gradient = np.linspace(0, 1, 256)
-gradient = np.vstack((gradient, gradient))
-
-
-def plot_color_gradients(category, cmap_list):
-    # Create figure and adjust figure height to number of colormaps
-    nrows = len(cmap_list)
-    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22
-    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
-    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh,
-                        left=0.2, right=0.99)
-    axs[0].set_title(f'{category} colormaps', fontsize=14)
-
-    for ax, name in zip(axs, cmap_list):
-        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))
-        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
-                transform=ax.transAxes)
-
-    # Turn off *all* ticks & spines, not just the ones with colormaps.
-    for ax in axs:
-        ax.set_axis_off()
-
-    # Save colormap list for later.
-    cmaps[category] = cmap_list
-
+cmaps = OrderedDict()

 ###############################################################################
 # Sequential
@@ -129,15 +94,13 @@ def plot_color_gradients(category, cmap_list):
 # amongst the colormaps: some are approximately linear in :math:`L^*` and others
 # are more curved.

-plot_color_gradients('Perceptually Uniform Sequential',
-                     ['viridis', 'plasma', 'inferno', 'magma', 'cividis'])
-
-###############################################################################
+cmaps['Perceptually Uniform Sequential'] = [
+            'viridis', 'plasma', 'inferno', 'magma', 'cividis']

-plot_color_gradients('Sequential',
-                     ['Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
-                      'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
-                      'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])
+cmaps['Sequential'] = [
+            'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
+            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
+            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn']

 ###############################################################################
 # Sequential2
@@ -151,10 +114,10 @@ plot_color_gradients('Sequential',
 # banding of the data in those values in the colormap (see [mycarta-banding]_ for
 # an excellent example of this).

-plot_color_gradients('Sequential (2)',
-                     ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone',
-                      'pink', 'spring', 'summer', 'autumn', 'winter', 'cool',
-                      'Wistia', 'hot', 'afmhot', 'gist_heat', 'copper'])
+cmaps['Sequential (2)'] = [
+            'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',
+            'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',
+            'hot', 'afmhot', 'gist_heat', 'copper']

 ###############################################################################
 # Diverging
@@ -167,9 +130,9 @@ plot_color_gradients('Sequential (2)',
 # measures, BrBG and RdBu are good options. coolwarm is a good option, but it
 # doesn't span a wide range of :math:`L^*` values (see grayscale section below).

-plot_color_gradients('Diverging',
-                     ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',
-                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])
+cmaps['Diverging'] = [
+            'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',
+            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic']

 ###############################################################################
 # Cyclic
@@ -189,7 +152,7 @@ plot_color_gradients('Diverging',
 # for viewers to see perceptually. See an extension on this idea at
 # [mycarta-jet]_.

-plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])
+cmaps['Cyclic'] = ['twilight', 'twilight_shifted', 'hsv']

 ###############################################################################
 # Qualitative
@@ -200,10 +163,9 @@ plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])
 # the place throughout the colormap, and are clearly not monotonically increasing.
 # These would not be good options for use as perceptual colormaps.

-plot_color_gradients('Qualitative',
-                     ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2',
-                      'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b',
-                      'tab20c'])
+cmaps['Qualitative'] = ['Pastel1', 'Pastel2', 'Paired', 'Accent',
+                        'Dark2', 'Set1', 'Set2', 'Set3',
+                        'tab10', 'tab20', 'tab20b', 'tab20c']

 ###############################################################################
 # Miscellaneous
@@ -225,12 +187,43 @@ plot_color_gradients('Qualitative',
 # poor choice for representing data for viewers to see perceptually. See an
 # extension on this idea at [mycarta-jet]_ and [turbo]_.

+cmaps['Miscellaneous'] = [
+            'flag', 'prism', 'ocean', 'gist_earth', 'terrain', 'gist_stern',
+            'gnuplot', 'gnuplot2', 'CMRmap', 'cubehelix', 'brg',
+            'gist_rainbow', 'rainbow', 'jet', 'turbo', 'nipy_spectral',
+            'gist_ncar']
+
+###############################################################################
+# .. _color-colormaps_reference:
+#
+# First, we'll show the range of each colormap. Note that some seem
+# to change more "quickly" than others.
+
+gradient = np.linspace(0, 1, 256)
+gradient = np.vstack((gradient, gradient))
+
+
+def plot_color_gradients(cmap_category, cmap_list):
+    # Create figure and adjust figure height to number of colormaps
+    nrows = len(cmap_list)
+    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22
+    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
+    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh,
+                        left=0.2, right=0.99)
+    axs[0].set_title(cmap_category + ' colormaps', fontsize=14)
+
+    for ax, name in zip(axs, cmap_list):
+        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))
+        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
+                transform=ax.transAxes)

-plot_color_gradients('Miscellaneous',
-                     ['flag', 'prism', 'ocean', 'gist_earth', 'terrain',
-                      'gist_stern', 'gnuplot', 'gnuplot2', 'CMRmap',
-                      'cubehelix', 'brg', 'gist_rainbow', 'rainbow', 'jet',
-                      'turbo', 'nipy_spectral', 'gist_ncar'])
+    # Turn off *all* ticks & spines, not just the ones with colormaps.
+    for ax in axs:
+        ax.set_axis_off()
+
+
+for cmap_category, cmap_list in cmaps.items():
+    plot_color_gradients(cmap_category, cmap_list)

 plt.show()

@@ -283,7 +276,7 @@ for cmap_category, cmap_list in cmaps.items():
             # Plot colormap L values.  Do separately for each category
             # so each plot can be pretty.  To make scatter markers change
             # color along plot:
-            # https://stackoverflow.com/q/8202605/
+            # http://stackoverflow.com/questions/8202605/

             if cmap_category == 'Sequential':
                 # These colormaps all start at high lightness but we want them
@@ -421,14 +414,15 @@ for cmap_category, cmap_list in cmaps.items():
 # References
 # ==========
 #
-# .. _Third-party colormaps: https://matplotlib.org/mpl-third-party/#colormaps-and-styles
+# .. [colorcet] https://colorcet.pyviz.org
 # .. [Ware] http://ccom.unh.edu/sites/default/files/publications/Ware_1988_CGA_Color_sequences_univariate_maps.pdf
 # .. [Moreland] http://www.kennethmoreland.com/color-maps/ColorMapsExpanded.pdf
 # .. [list-colormaps] https://gist.github.com/endolith/2719900#id7
 # .. [mycarta-banding] https://mycarta.wordpress.com/2012/10/14/the-rainbow-is-deadlong-live-the-rainbow-part-4-cie-lab-heated-body/
 # .. [mycarta-jet] https://mycarta.wordpress.com/2012/10/06/the-rainbow-is-deadlong-live-the-rainbow-part-3/
 # .. [kovesi-colormaps] https://arxiv.org/abs/1509.03700
-# .. [bw] https://tannerhelland.com/3643/grayscale-image-algorithm-vb6/
+# .. [bw] http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/
 # .. [colorblindness] http://www.color-blindness.com/
 # .. [IBM] https://doi.org/10.1109/VISUAL.1995.480803
+# .. [palettable] https://jiffyclub.github.io/palettable/
 # .. [turbo] https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html
diff --git a/tutorials/colors/colors.py b/tutorials/colors/colors.py
index f5e36cfc90..dac7b800e4 100644
--- a/tutorials/colors/colors.py
+++ b/tutorials/colors/colors.py
@@ -3,7 +3,8 @@
 Specifying Colors
 *****************

-Matplotlib recognizes the following formats to specify a color.
+Matplotlib recognizes the following formats in the table below to specify a
+color.

 +--------------------------------------+--------------------------------------+
 | Format                               | Example                              |
@@ -19,20 +20,18 @@ Matplotlib recognizes the following formats to specify a color.
 | equivalent hex shorthand of          | - ``'#fb1'`` as ``'#ffbb11'``        |
 | duplicated characters.               |                                      |
 +--------------------------------------+--------------------------------------+
-| String representation of float value | - ``'0'`` as black                   |
-| in closed interval ``[0, 1]`` for    | - ``'1'`` as white                   |
-| grayscale values.                    | - ``'0.8'`` as light gray            |
+| String representation of float value | - ``'0.8'`` as light gray            |
+| in closed interval ``[0, 1]`` for    | - ``'0'`` as black                   |
+| black and white, respectively.       | - ``'1'`` as white                   |
 +--------------------------------------+--------------------------------------+
 | Single character shorthand notation  | - ``'b'`` as blue                    |
-| for some basic colors.               | - ``'g'`` as green                   |
+| for shades of colors.                | - ``'g'`` as green                   |
 |                                      | - ``'r'`` as red                     |
-| .. note::                            | - ``'c'`` as cyan                    |
-|    The colors green, cyan, magenta,  | - ``'m'`` as magenta                 |
-|    and yellow do not coincide with   | - ``'y'`` as yellow                  |
-|    X11/CSS4 colors. Their particular | - ``'k'`` as black                   |
-|    shades were chosen for better     | - ``'w'`` as white                   |
-|    visibility of colored lines       |                                      |
-|    against typical backgrounds.      |                                      |
+| .. note:: The colors green, cyan,    | - ``'c'`` as cyan                    |
+|           magenta, and yellow do not | - ``'m'`` as magenta                 |
+|           coincide with X11/CSS4     | - ``'y'`` as yellow                  |
+|           colors.                    | - ``'k'`` as black                   |
+|                                      | - ``'w'`` as white                   |
 +--------------------------------------+--------------------------------------+
 | Case-insensitive X11/CSS4 color name | - ``'aquamarine'``                   |
 | with no spaces.                      | - ``'mediumseagreen'``               |
@@ -160,11 +159,11 @@ demo('seaborn')
 # The visual below shows name collisions. Color names where color values agree
 # are in bold.

-import matplotlib.colors as mcolors
+import matplotlib._color_data as mcd
 import matplotlib.patches as mpatch

-overlap = {name for name in mcolors.CSS4_COLORS
-           if f'xkcd:{name}' in mcolors.XKCD_COLORS}
+overlap = {name for name in mcd.CSS4_COLORS
+           if "xkcd:" + name in mcd.XKCD_COLORS}

 fig = plt.figure(figsize=[9, 5])
 ax = fig.add_axes([0, 0, 1, 1])
@@ -173,30 +172,23 @@ n_groups = 3
 n_rows = len(overlap) // n_groups + 1

 for j, color_name in enumerate(sorted(overlap)):
-    css4 = mcolors.CSS4_COLORS[color_name]
-    xkcd = mcolors.XKCD_COLORS[f'xkcd:{color_name}'].upper()
-
-    # Pick text colour based on perceived luminance.
-    rgba = mcolors.to_rgba_array([css4, xkcd])
-    luma = 0.299 * rgba[:, 0] + 0.587 * rgba[:, 1] + 0.114 * rgba[:, 2]
-    css4_text_color = 'k' if luma[0] > 0.5 else 'w'
-    xkcd_text_color = 'k' if luma[1] > 0.5 else 'w'
+    css4 = mcd.CSS4_COLORS[color_name]
+    xkcd = mcd.XKCD_COLORS["xkcd:" + color_name].upper()

     col_shift = (j // n_rows) * 3
     y_pos = j % n_rows
-    text_args = dict(fontsize=10, weight='bold' if css4 == xkcd else None)
+    text_args = dict(va='center', fontsize=10,
+                     weight='bold' if css4 == xkcd else None)
     ax.add_patch(mpatch.Rectangle((0 + col_shift, y_pos), 1, 1, color=css4))
     ax.add_patch(mpatch.Rectangle((1 + col_shift, y_pos), 1, 1, color=xkcd))
-    ax.text(0.5 + col_shift, y_pos + .7, css4,
-            color=css4_text_color, ha='center', **text_args)
-    ax.text(1.5 + col_shift, y_pos + .7, xkcd,
-            color=xkcd_text_color, ha='center', **text_args)
-    ax.text(2 + col_shift, y_pos + .7, f'  {color_name}', **text_args)
+    ax.text(0 + col_shift, y_pos + .5, '  ' + css4, alpha=0.5, **text_args)
+    ax.text(1 + col_shift, y_pos + .5, '  ' + xkcd, alpha=0.5, **text_args)
+    ax.text(2 + col_shift, y_pos + .5, '  ' + color_name, **text_args)

 for g in range(n_groups):
     ax.hlines(range(n_rows), 3*g, 3*g + 2.8, color='0.7', linewidth=1)
-    ax.text(0.5 + 3*g, -0.3, 'X11/CSS4', ha='center')
-    ax.text(1.5 + 3*g, -0.3, 'xkcd', ha='center')
+    ax.text(0.5 + 3*g, -0.5, 'X11', ha='center', va='center')
+    ax.text(1.5 + 3*g, -0.5, 'xkcd', ha='center', va='center')

 ax.set_xlim(0, 3 * n_groups)
 ax.set_ylim(n_rows, -1)
diff --git a/tutorials/intermediate/artists.py b/tutorials/intermediate/artists.py
index 07c0e43cc8..1df2544caf 100644
--- a/tutorials/intermediate/artists.py
+++ b/tutorials/intermediate/artists.py
@@ -313,7 +313,7 @@ plt.show()
 # directly from the Axes list, but rather use the
 # :meth:`~matplotlib.figure.Figure.add_subplot` and
 # :meth:`~matplotlib.figure.Figure.add_axes` methods to insert, and the
-# `Axes.remove <matplotlib.artist.Artist.remove>` method to delete.  You are
+# :meth:`~matplotlib.figure.Figure.delaxes` method to delete.  You are
 # free however, to iterate over the list of Axes or index into it to get
 # access to ``Axes`` instances you want to customize.  Here is an
 # example which turns all the Axes grids on::
diff --git a/tutorials/intermediate/autoscale.py b/tutorials/intermediate/autoscale.py
index b585eb8511..64cc2e22f0 100644
--- a/tutorials/intermediate/autoscale.py
+++ b/tutorials/intermediate/autoscale.py
@@ -71,7 +71,7 @@ ax[1].set_title("margins(0.2)")
 # `~matplotlib.axes.Axes.use_sticky_edges`.
 # Artists have a property `.Artist.sticky_edges`, and the values of
 # sticky edges can be changed by writing to ``Artist.sticky_edges.x`` or
-# ``Artist.sticky_edges.y``.
+# ``.Artist.sticky_edges.y``.
 #
 # The following example shows how overriding works and when it is needed.

diff --git a/tutorials/intermediate/constrainedlayout_guide.py b/tutorials/intermediate/constrainedlayout_guide.py
index 7b296f9930..3458667aef 100644
--- a/tutorials/intermediate/constrainedlayout_guide.py
+++ b/tutorials/intermediate/constrainedlayout_guide.py
@@ -22,8 +22,7 @@ a figure. Two ways of doing so are

       plt.subplots(constrained_layout=True)

-* activate it via :ref:`rcParams<customizing-with-dynamic-rc-settings>`,
-  like::
+* activate it via :ref:`rcParams<matplotlib-rcparams>`, like::

       plt.rcParams['figure.constrained_layout.use'] = True

@@ -72,15 +71,15 @@ def example_plot(ax, fontsize=12, hide_labels=False):
         ax.set_ylabel('y-label', fontsize=fontsize)
         ax.set_title('Title', fontsize=fontsize)

+
 fig, ax = plt.subplots(constrained_layout=False)
 example_plot(ax, fontsize=24)

 ###############################################################################
 # To prevent this, the location of axes needs to be adjusted. For
-# subplots, this can be done manually by adjusting the subplot parameters
-# using `.Figure.subplots_adjust`. However, specifying your figure with the
-# # ``constrained_layout=True`` keyword argument will do the adjusting
-# # automatically.
+# subplots, this can be done by adjusting the subplot params
+# (:ref:`howto-subplots-adjust`). However, specifying your figure with the
+# ``constrained_layout=True`` kwarg will do the adjusting automatically.

 fig, ax = plt.subplots(constrained_layout=True)
 example_plot(ax, fontsize=24)
@@ -113,7 +112,7 @@ for ax in axs.flat:
 #
 # .. note::
 #
-#   For the `~.axes.Axes.pcolormesh` keyword arguments (``pc_kwargs``) we use a
+#   For the `~.axes.Axes.pcolormesh` kwargs (``pc_kwargs``) we use a
 #   dictionary. Below we will assign one colorbar to a number of axes each
 #   containing a `~.cm.ScalarMappable`; specifying the norm and colormap
 #   ensures the colorbar is accurate for all the axes.
@@ -296,8 +295,8 @@ pads = [0, 0.05, 0.1, 0.2]
 for pad, ax in zip(pads, axs.flat):
     pc = ax.pcolormesh(arr, **pc_kwargs)
     fig.colorbar(pc, ax=ax, shrink=0.6, pad=pad)
-    ax.set_xticklabels([])
-    ax.set_yticklabels([])
+    ax.set_xticklabels('')
+    ax.set_yticklabels('')
     ax.set_title(f'pad: {pad}')
 fig.set_constrained_layout_pads(w_pad=2 / 72, h_pad=2 / 72, hspace=0.2,
                                 wspace=0.2)
@@ -306,9 +305,9 @@ fig.set_constrained_layout_pads(w_pad=2 / 72, h_pad=2 / 72, hspace=0.2,
 # rcParams
 # ========
 #
-# There are five :ref:`rcParams<customizing-with-dynamic-rc-settings>`
-# that can be set, either in a script or in the :file:`matplotlibrc`
-# file. They all have the prefix ``figure.constrained_layout``:
+# There are five :ref:`rcParams<matplotlib-rcparams>` that can be set,
+# either in a script or in the :file:`matplotlibrc` file.
+# They all have the prefix ``figure.constrained_layout``:
 #
 # - *use*: Whether to use constrained_layout. Default is False
 # - *w_pad*, *h_pad*:    Padding around axes objects.
@@ -509,7 +508,6 @@ example_plot(ax2)
 example_plot(ax3)
 example_plot(ax4)
 fig.suptitle('subplot2grid')
-plt.show()

 ###############################################################################
 # Other Caveats
@@ -557,7 +555,7 @@ plt.show()
 # has some complexity due to the complex ways we can layout a figure.
 #
 # Layout in Matplotlib is carried out with gridspecs
-# via the `.GridSpec` class. A gridspec is a logical division of the figure
+# via the `~.GridSpec` class. A gridspec is a logical division of the figure
 # into rows and columns, with the relative width of the Axes in those
 # rows and columns set by *width_ratios* and *height_ratios*.
 #
@@ -590,7 +588,7 @@ from matplotlib._layoutgrid import plot_children

 fig, ax = plt.subplots(constrained_layout=True)
 example_plot(ax, fontsize=24)
-plot_children(fig)
+plot_children(fig, fig._layoutgrid)

 #######################################################################
 # Simple case: two Axes
@@ -605,7 +603,7 @@ plot_children(fig)
 fig, ax = plt.subplots(1, 2, constrained_layout=True)
 example_plot(ax[0], fontsize=32)
 example_plot(ax[1], fontsize=8)
-plot_children(fig, printit=False)
+plot_children(fig, fig._layoutgrid, printit=False)

 #######################################################################
 # Two Axes and colorbar
@@ -618,7 +616,7 @@ fig, ax = plt.subplots(1, 2, constrained_layout=True)
 im = ax[0].pcolormesh(arr, **pc_kwargs)
 fig.colorbar(im, ax=ax[0], shrink=0.6)
 im = ax[1].pcolormesh(arr, **pc_kwargs)
-plot_children(fig)
+plot_children(fig, fig._layoutgrid)

 #######################################################################
 # Colorbar associated with a Gridspec
@@ -631,7 +629,7 @@ fig, axs = plt.subplots(2, 2, constrained_layout=True)
 for ax in axs.flat:
     im = ax.pcolormesh(arr, **pc_kwargs)
 fig.colorbar(im, ax=axs, shrink=0.6)
-plot_children(fig, printit=False)
+plot_children(fig, fig._layoutgrid, printit=False)

 #######################################################################
 # Uneven sized Axes
@@ -656,7 +654,7 @@ ax = fig.add_subplot(gs[0, 1])
 im = ax.pcolormesh(arr, **pc_kwargs)
 ax = fig.add_subplot(gs[1, 1])
 im = ax.pcolormesh(arr, **pc_kwargs)
-plot_children(fig, printit=False)
+plot_children(fig, fig._layoutgrid, printit=False)

 #######################################################################
 # One case that requires finessing is if margins do not have any artists
@@ -671,5 +669,4 @@ ax00 = fig.add_subplot(gs[0, 0:2])
 ax01 = fig.add_subplot(gs[0, 2:])
 ax10 = fig.add_subplot(gs[1, 1:3])
 example_plot(ax10, fontsize=14)
-plot_children(fig)
-plt.show()
+plot_children(fig, fig._layoutgrid)
diff --git a/tutorials/intermediate/gridspec.py b/tutorials/intermediate/gridspec.py
index d9c5f10bd4..d1d469ac02 100644
--- a/tutorials/intermediate/gridspec.py
+++ b/tutorials/intermediate/gridspec.py
@@ -5,24 +5,27 @@ Customizing Figure Layouts Using GridSpec and Other Functions

 How to create grid-shaped combinations of axes.

-`~matplotlib.pyplot.subplots`
-    The primary function used to create figures and axes.  It is similar to
-    `.pyplot.subplot`, but creates and places all axes on the figure at once.
-    See also `.Figure.subplots`.
-
-`~matplotlib.gridspec.GridSpec`
-    Specifies the geometry of the grid that a subplot will be
-    placed. The number of rows and number of columns of the grid
-    need to be set. Optionally, the subplot layout parameters
-    (e.g., left, right, etc.) can be tuned.
-
-`~matplotlib.gridspec.SubplotSpec`
-    Specifies the location of the subplot in the given `.GridSpec`.
-
-`~matplotlib.pyplot.subplot2grid`
-    A helper function that is similar to `.pyplot.subplot`,
-    but uses 0-based indexing and let subplot to occupy multiple cells.
-    This function is not covered in this tutorial.
+    :func:`~matplotlib.pyplot.subplots`
+        Perhaps the primary function used to create figures and axes.
+        It's also similar to :func:`.matplotlib.pyplot.subplot`,
+        but creates and places all axes on the figure at once.  See also
+        `matplotlib.figure.Figure.subplots`.
+
+    :class:`~matplotlib.gridspec.GridSpec`
+        Specifies the geometry of the grid that a subplot will be
+        placed. The number of rows and number of columns of the grid
+        need to be set. Optionally, the subplot layout parameters
+        (e.g., left, right, etc.) can be tuned.
+
+    :class:`~matplotlib.gridspec.SubplotSpec`
+        Specifies the location of the subplot in the given *GridSpec*.
+
+    :func:`~matplotlib.pyplot.subplot2grid`
+        A helper function that is similar to
+        :func:`~matplotlib.pyplot.subplot`,
+        but uses 0-based indexing and let subplot to occupy multiple cells.
+        This function is not covered in this tutorial.
+
 """

 import matplotlib.pyplot as plt
@@ -61,7 +64,7 @@ f2_ax4 = fig2.add_subplot(spec2[1, 1])
 #############################################################################
 # The power of gridspec comes in being able to create subplots that span
 # rows and columns.  Note the `NumPy slice syntax
-# <https://numpy.org/doc/stable/reference/arrays.indexing.html>`_
+# <https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html>`_
 # for selecting the part of the gridspec each subplot will occupy.
 #
 # Note that we have also used the convenience method `.Figure.add_gridspec`
diff --git a/tutorials/intermediate/imshow_extent.py b/tutorials/intermediate/imshow_extent.py
index 8065a06714..e1e87eb253 100644
--- a/tutorials/intermediate/imshow_extent.py
+++ b/tutorials/intermediate/imshow_extent.py
@@ -2,18 +2,18 @@
 *origin* and *extent* in `~.Axes.imshow`
 ========================================

-:meth:`~.Axes.imshow` allows you to render an image (either a 2D array which
-will be color-mapped (based on *norm* and *cmap*) or a 3D RGB(A) array which
-will be used as-is) to a rectangular region in data space.  The orientation of
-the image in the final rendering is controlled by the *origin* and *extent*
-keyword arguments (and attributes on the resulting `.AxesImage` instance) and
-the data limits of the axes.
-
-The *extent* keyword arguments controls the bounding box in data coordinates
-that the image will fill specified as ``(left, right, bottom, top)`` in **data
-coordinates**, the *origin* keyword argument controls how the image fills that
-bounding box, and the orientation in the final rendered image is also affected
-by the axes limits.
+:meth:`~.Axes.imshow` allows you to render an image (either a 2D array
+which will be color-mapped (based on *norm* and *cmap*) or a 3D RGB(A)
+array which will be used as-is) to a rectangular region in data space.
+The orientation of the image in the final rendering is controlled by
+the *origin* and *extent* kwargs (and attributes on the resulting
+`~.AxesImage` instance) and the data limits of the axes.
+
+The *extent* kwarg controls the bounding box in data coordinates that
+the image will fill specified as ``(left, right, bottom, top)`` in
+**data coordinates**, the *origin* kwarg controls how the image fills
+that bounding box, and the orientation in the final rendered image is
+also affected by the axes limits.

 .. hint:: Most of the code below is used for adding labels and informative
    text to the plots. The described effects of *origin* and *extent* can be
diff --git a/tutorials/intermediate/legend_guide.py b/tutorials/intermediate/legend_guide.py
index 746a442614..c62a59d9c4 100644
--- a/tutorials/intermediate/legend_guide.py
+++ b/tutorials/intermediate/legend_guide.py
@@ -53,18 +53,16 @@ Those artists with an empty string as label or with a label starting with
 For full control of what is being added to the legend, it is common to pass
 the appropriate handles directly to :func:`legend`::

-    fig, ax = plt.subplots()
-    line_up, = ax.plot([1, 2, 3], label='Line 2')
-    line_down, = ax.plot([3, 2, 1], label='Line 1')
-    ax.legend(handles=[line_up, line_down])
+    line_up, = plt.plot([1, 2, 3], label='Line 2')
+    line_down, = plt.plot([3, 2, 1], label='Line 1')
+    plt.legend(handles=[line_up, line_down])

 In some cases, it is not possible to set the label of the handle, so it is
 possible to pass through the list of labels to :func:`legend`::

-    fig, ax = plt.subplots()
-    line_up, = ax.plot([1, 2, 3], label='Line 2')
-    line_down, = ax.plot([3, 2, 1], label='Line 1')
-    ax.legend([line_up, line_down], ['Line Up', 'Line Down'])
+    line_up, = plt.plot([1, 2, 3], label='Line 2')
+    line_down, = plt.plot([3, 2, 1], label='Line 1')
+    plt.legend([line_up, line_down], ['Line Up', 'Line Down'])


 .. _proxy_legend_handles:
@@ -83,9 +81,8 @@ is represented by a red color:
 import matplotlib.patches as mpatches
 import matplotlib.pyplot as plt

-fig, ax = plt.subplots()
 red_patch = mpatches.Patch(color='red', label='The red data')
-ax.legend(handles=[red_patch])
+plt.legend(handles=[red_patch])

 plt.show()

@@ -95,10 +92,9 @@ plt.show()

 import matplotlib.lines as mlines

-fig, ax = plt.subplots()
 blue_line = mlines.Line2D([], [], color='blue', marker='*',
                           markersize=15, label='Blue stars')
-ax.legend(handles=[blue_line])
+plt.legend(handles=[blue_line])

 plt.show()

@@ -114,25 +110,25 @@ plt.show()
 # figure's top right-hand corner instead of the axes' corner, simply specify
 # the corner's location and the coordinate system of that location::
 #
-#     ax.legend(bbox_to_anchor=(1, 1),
-#               bbox_transform=fig.transFigure)
+#     plt.legend(bbox_to_anchor=(1, 1),
+#                bbox_transform=plt.gcf().transFigure)
 #
 # More examples of custom legend placement:

-fig, ax_dict = plt.subplot_mosaic([['top', 'top'], ['bottom', 'BLANK']],
-                                  empty_sentinel="BLANK")
-ax_dict['top'].plot([1, 2, 3], label="test1")
-ax_dict['top'].plot([3, 2, 1], label="test2")
+plt.subplot(211)
+plt.plot([1, 2, 3], label="test1")
+plt.plot([3, 2, 1], label="test2")
+
 # Place a legend above this subplot, expanding itself to
 # fully use the given bounding box.
-ax_dict['top'].legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',
-                      ncol=2, mode="expand", borderaxespad=0.)
+plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',
+           ncol=2, mode="expand", borderaxespad=0.)

-ax_dict['bottom'].plot([1, 2, 3], label="test1")
-ax_dict['bottom'].plot([3, 2, 1], label="test2")
+plt.subplot(223)
+plt.plot([1, 2, 3], label="test1")
+plt.plot([3, 2, 1], label="test2")
 # Place a legend to the right of this smaller subplot.
-ax_dict['bottom'].legend(bbox_to_anchor=(1.05, 1),
-                         loc='upper left', borderaxespad=0.)
+plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)

 plt.show()

@@ -148,18 +144,17 @@ plt.show()
 # handles on the Axes. To keep old legend instances, we must add them
 # manually to the Axes:

-fig, ax = plt.subplots()
-line1, = ax.plot([1, 2, 3], label="Line 1", linestyle='--')
-line2, = ax.plot([3, 2, 1], label="Line 2", linewidth=4)
+line1, = plt.plot([1, 2, 3], label="Line 1", linestyle='--')
+line2, = plt.plot([3, 2, 1], label="Line 2", linewidth=4)

 # Create a legend for the first line.
-first_legend = ax.legend(handles=[line1], loc='upper right')
+first_legend = plt.legend(handles=[line1], loc='upper right')

-# Add the legend manually to the Axes.
-ax.add_artist(first_legend)
+# Add the legend manually to the current Axes.
+plt.gca().add_artist(first_legend)

 # Create another legend for the second line.
-ax.legend(handles=[line2], loc='lower right')
+plt.legend(handles=[line2], loc='lower right')

 plt.show()

@@ -193,16 +188,15 @@ plt.show()

 from matplotlib.legend_handler import HandlerLine2D

-fig, ax = plt.subplots()
-line1, = ax.plot([3, 2, 1], marker='o', label='Line 1')
-line2, = ax.plot([1, 2, 3], marker='o', label='Line 2')
+line1, = plt.plot([3, 2, 1], marker='o', label='Line 1')
+line2, = plt.plot([1, 2, 3], marker='o', label='Line 2')

-ax.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
+plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})

 ###############################################################################
 # As you can see, "Line 1" now has 4 marker points, where "Line 2" has 2 (the
 # default). Try the above code, only change the map's key from ``line1`` to
-# ``type(line1)``. Notice how now both `.Line2D` instances get 4 markers.
+# ``type(line1)``. Notice how now both `~.Line2D` instances get 4 markers.
 #
 # Along with handlers for complex plot types such as errorbars, stem plots
 # and histograms, the default ``handler_map`` has a special ``tuple`` handler
@@ -214,12 +208,11 @@ from numpy.random import randn

 z = randn(10)

-fig, ax = plt.subplots()
-red_dot, = ax.plot(z, "ro", markersize=15)
+red_dot, = plt.plot(z, "ro", markersize=15)
 # Put a white cross over some of the data.
-white_cross, = ax.plot(z[:5], "w+", markeredgewidth=3, markersize=15)
+white_cross, = plt.plot(z[:5], "w+", markeredgewidth=3, markersize=15)

-ax.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])
+plt.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])

 ###############################################################################
 # The `.legend_handler.HandlerTuple` class can also be used to
@@ -227,12 +220,11 @@ ax.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])

 from matplotlib.legend_handler import HandlerLine2D, HandlerTuple

-fig, ax = plt.subplots()
-p1, = ax.plot([1, 2.5, 3], 'r-d')
-p2, = ax.plot([3, 2, 1], 'k-o')
+p1, = plt.plot([1, 2.5, 3], 'r-d')
+p2, = plt.plot([3, 2, 1], 'k-o')

-l = ax.legend([(p1, p2)], ['Two keys'], numpoints=1,
-              handler_map={tuple: HandlerTuple(ndivide=None)})
+l = plt.legend([(p1, p2)], ['Two keys'], numpoints=1,
+               handler_map={tuple: HandlerTuple(ndivide=None)})

 ###############################################################################
 # Implementing a custom legend handler
@@ -261,10 +253,9 @@ class AnyObjectHandler:
         handlebox.add_artist(patch)
         return patch

-fig, ax = plt.subplots()

-ax.legend([AnyObject()], ['My first handler'],
-          handler_map={AnyObject: AnyObjectHandler()})
+plt.legend([AnyObject()], ['My first handler'],
+           handler_map={AnyObject: AnyObjectHandler()})

 ###############################################################################
 # Alternatively, had we wanted to globally accept ``AnyObject`` instances
@@ -295,9 +286,7 @@ class HandlerEllipse(HandlerPatch):

 c = mpatches.Circle((0.5, 0.5), 0.25, facecolor="green",
                     edgecolor="red", linewidth=3)
+plt.gca().add_patch(c)

-fig, ax = plt.subplots()
-
-ax.add_patch(c)
-ax.legend([c], ["An ellipse, not a rectangle"],
-          handler_map={mpatches.Circle: HandlerEllipse()})
+plt.legend([c], ["An ellipse, not a rectangle"],
+           handler_map={mpatches.Circle: HandlerEllipse()})
diff --git a/tutorials/intermediate/tight_layout_guide.py b/tutorials/intermediate/tight_layout_guide.py
index 4bc92b49c1..bafd50e4ec 100644
--- a/tutorials/intermediate/tight_layout_guide.py
+++ b/tutorials/intermediate/tight_layout_guide.py
@@ -46,9 +46,9 @@ example_plot(ax, fontsize=24)

 ###############################################################################
 # To prevent this, the location of axes needs to be adjusted. For
-# subplots, this can be done manually by adjusting the subplot parameters
-# using `.Figure.subplots_adjust`. `.Figure.tight_layout` does this
-# automatically.
+# subplots, this can be done by adjusting the subplot params
+# (:ref:`howto-subplots-adjust`). Matplotlib v1.1 introduced
+# `.Figure.tight_layout` that does this automatically for you.

 fig, ax = plt.subplots()
 example_plot(ax, fontsize=24)
diff --git a/tutorials/introductory/customizing.py b/tutorials/introductory/customizing.py
index 9e74016c82..993692bc8d 100644
--- a/tutorials/introductory/customizing.py
+++ b/tutorials/introductory/customizing.py
@@ -1,113 +1,32 @@
 """
 .. redirect-from:: /users/customizing

-=====================================================
 Customizing Matplotlib with style sheets and rcParams
 =====================================================

 Tips for customizing the properties and default styles of Matplotlib.

-There are three ways to customize Matplotlib:
-
-    1. :ref:`Setting rcParams at runtime<customizing-with-dynamic-rc-settings>`.
-    2. :ref:`Using style sheets<customizing-with-style-sheets>`.
-    3. :ref:`Changing your matplotlibrc file<customizing-with-matplotlibrc-files>`.
-
-Setting rcParams at runtime takes precedence over style sheets, style
-sheets take precedence over :file:`matplotlibrc` files.
+Using style sheets
+------------------

-.. _customizing-with-dynamic-rc-settings:
+The :mod:`.style` package adds support for easy-to-switch plotting
+"styles" with the same parameters as a :ref:`matplotlib rc
+<customizing-with-matplotlibrc-files>` file (which is read at startup to
+configure Matplotlib).

-Runtime rc settings
-===================
-
-You can dynamically change the default rc (runtime configuration)
-settings in a python script or interactively from the python shell. All
-rc settings are stored in a dictionary-like variable called
-:data:`matplotlib.rcParams`, which is global to the matplotlib package.
-See `matplotlib.rcParams` for a full list of configurable rcParams.
-rcParams can be modified directly, for example:
+There are a number of pre-defined styles :doc:`provided by Matplotlib
+</gallery/style_sheets/style_sheets_reference>`. For
+example, there's a pre-defined style called "ggplot", which emulates the
+aesthetics of ggplot_ (a popular plotting package for R_). To use this style,
+just add:
 """

 import numpy as np
 import matplotlib.pyplot as plt
 import matplotlib as mpl
 from cycler import cycler
-mpl.rcParams['lines.linewidth'] = 2
-mpl.rcParams['lines.linestyle'] = '--'
-data = np.random.randn(50)
-plt.plot(data)
-
-###############################################################################
-# Note, that in order to change the usual `~.Axes.plot` color you have to
-# change the *prop_cycle* property of *axes*:
-
-mpl.rcParams['axes.prop_cycle'] = cycler(color=['r', 'g', 'b', 'y'])
-plt.plot(data)  # first color is red
-
-###############################################################################
-# Matplotlib also provides a couple of convenience functions for modifying rc
-# settings. `matplotlib.rc` can be used to modify multiple
-# settings in a single group at once, using keyword arguments:
-
-mpl.rc('lines', linewidth=4, linestyle='-.')
-plt.plot(data)
-
-###############################################################################
-# Temporary rc settings
-# ---------------------
-#
-# The :data:`matplotlib.rcParams` object can also be changed temporarily using
-# the `matplotlib.rc_context` context manager:
-
-with mpl.rc_context({'lines.linewidth': 2, 'lines.linestyle': ':'}):
-    plt.plot(data)
-
-###############################################################################
-# `matplotlib.rc_context` can also be used as a decorator to modify the
-# defaults within a function:
-
-
-@mpl.rc_context({'lines.linewidth': 3, 'lines.linestyle': '-'})
-def plotting_function():
-    plt.plot(data)
-
-plotting_function()
-
-###############################################################################
-# `matplotlib.rcdefaults` will restore the standard Matplotlib
-# default settings.
-#
-# There is some degree of validation when setting the values of rcParams, see
-# :mod:`matplotlib.rcsetup` for details.
-
-###############################################################################
-# .. _customizing-with-style-sheets:
-#
-# Using style sheets
-# ==================
-#
-# Another way to change the visual appearance of plots is to set the
-# rcParams in a so-called style sheet and import that style sheet with
-# `matplotlib.style.use`. In this way you can switch easily between
-# different styles by simply changing the imported style sheet. A style
-# sheets looks the same as a :ref:`matplotlibrc<matplotlibrc-sample>`
-# file, but in a style sheet you can only set rcParams that are related
-# to the actual style of a plot. Other rcParams, like *backend*, will be
-# ignored. :file:`matplotlibrc` files support all rcParams. The
-# rationale behind this is to make style sheets portable between
-# different machines without having to worry about dependencies which
-# might or might not be installed on another machine. For a full list of
-# rcParams see `matplotlib.rcParams`. For a list of rcParams that are
-# ignored in style sheets see `matplotlib.style.use`.
-#
-# There are a number of pre-defined styles :doc:`provided by Matplotlib
-# </gallery/style_sheets/style_sheets_reference>`. For
-# example, there's a pre-defined style called "ggplot", which emulates the
-# aesthetics of ggplot_ (a popular plotting package for R_). To use this
-# style, add:
-
 plt.style.use('ggplot')
+data = np.random.randn(50)

 ###############################################################################
 # To list all available styles, use:
@@ -185,18 +104,59 @@ with plt.style.context('dark_background'):
 plt.show()

 ###############################################################################
+# .. _matplotlib-rcparams:
+#
+# Matplotlib rcParams
+# ===================
+#
+# .. _customizing-with-dynamic-rc-settings:
+#
+# Dynamic rc settings
+# -------------------
+#
+# You can also dynamically change the default rc settings in a python script or
+# interactively from the python shell. All of the rc settings are stored in a
+# dictionary-like variable called :data:`matplotlib.rcParams`, which is global to
+# the matplotlib package. rcParams can be modified directly, for example:
+
+mpl.rcParams['lines.linewidth'] = 2
+mpl.rcParams['lines.linestyle'] = '--'
+plt.plot(data)
+
+###############################################################################
+# Note, that in order to change the usual `~.Axes.plot` color you have to
+# change the *prop_cycle* property of *axes*:
+
+mpl.rcParams['axes.prop_cycle'] = cycler(color=['r', 'g', 'b', 'y'])
+plt.plot(data)  # first color is red
+
+###############################################################################
+# Matplotlib also provides a couple of convenience functions for modifying rc
+# settings. `matplotlib.rc` can be used to modify multiple
+# settings in a single group at once, using keyword arguments:
+
+mpl.rc('lines', linewidth=4, linestyle='-.')
+plt.plot(data)
+
+###############################################################################
+# `matplotlib.rcdefaults` will restore the standard Matplotlib
+# default settings.
+#
+# There is some degree of validation when setting the values of rcParams, see
+# :mod:`matplotlib.rcsetup` for details.
+#
 # .. _customizing-with-matplotlibrc-files:
 #
 # The :file:`matplotlibrc` file
-# =============================
+# -----------------------------
 #
 # Matplotlib uses :file:`matplotlibrc` configuration files to customize all
 # kinds of properties, which we call 'rc settings' or 'rc parameters'. You can
 # control the defaults of almost every property in Matplotlib: figure size and
 # DPI, line width, color and style, axes, axis and grid properties, text and
-# font properties and so on. The :file:`matplotlibrc` is read at startup to
-# configure Matplotlib. Matplotlib looks for :file:`matplotlibrc` in four
-# locations, in the following order:
+# font properties and so on. When a URL or path is not specified with a call to
+# ``style.use('<path>/<style-name>.mplstyle')``, Matplotlib looks for
+# :file:`matplotlibrc` in four locations, in the following order:
 #
 # 1. :file:`matplotlibrc` in the current working directory, usually used for
 #    specific customizations that you do not want to apply elsewhere.
@@ -223,12 +183,8 @@ plt.show()
 #    your customizations to be saved, please move this file to your
 #    user-specific matplotlib directory.
 #
-# Once a :file:`matplotlibrc` file has been found, it will *not* search
-# any of the other paths. When a
-# :ref:`style sheet<customizing-with-style-sheets>` is given with
-# ``style.use('<path>/<style-name>.mplstyle')``, settings specified in
-# the style sheet take precedence over settings in the
-# :file:`matplotlibrc` file.
+# Once a :file:`matplotlibrc` file has been found, it will *not* search any of
+# the other paths.
 #
 # To display where the currently active :file:`matplotlibrc` file was
 # loaded from, one can do the following::
@@ -237,15 +193,14 @@ plt.show()
 #   >>> matplotlib.matplotlib_fname()
 #   '/home/foo/.config/matplotlib/matplotlibrc'
 #
-# See below for a sample :ref:`matplotlibrc file<matplotlibrc-sample>`
-# and see `matplotlib.rcParams` for a full list of configurable rcParams.
+# See below for a sample :ref:`matplotlibrc file<matplotlibrc-sample>`.
 #
 # .. _matplotlibrc-sample:
 #
-# The default :file:`matplotlibrc` file
-# -------------------------------------
+# A sample matplotlibrc file
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
 #
-# .. literalinclude:: ../../../lib/matplotlib/mpl-data/matplotlibrc
+# .. literalinclude:: ../../../matplotlibrc.template
 #
 #
 # .. _ggplot: https://ggplot2.tidyverse.org/
diff --git a/tutorials/introductory/images.py b/tutorials/introductory/images.py
index 02470a35bb..858c3ccd26 100644
--- a/tutorials/introductory/images.py
+++ b/tutorials/introductory/images.py
@@ -33,7 +33,7 @@ This turns on inline plotting, where plot graphics will appear in your
 notebook.  This has important implications for interactivity.  For inline plotting, commands in
 cells below the cell that outputs a plot will not affect the plot.  For example,
 changing the colormap is not possible from cells below the cell that creates a plot.
-However, for other backends, such as Qt, that open a separate window,
+However, for other backends, such as Qt5, that open a separate window,
 cells below those that create the plot will change the plot - it is a
 live object in memory.

@@ -69,7 +69,7 @@ import matplotlib.image as mpimg
 # on where you get your data, the other kinds of image that you'll most
 # likely encounter are RGBA images, which allow for transparency, or
 # single-channel grayscale (luminosity) images.  Download `stinkbug.png
-# <https://raw.githubusercontent.com/matplotlib/matplotlib/main/doc/_static/stinkbug.png>`_
+# <https://raw.githubusercontent.com/matplotlib/matplotlib/master/doc/_static/stinkbug.png>`_
 # to your computer for the rest of this tutorial.
 #
 # And here we go...
@@ -132,7 +132,7 @@ imgplot = plt.imshow(img)
 lum_img = img[:, :, 0]

 # This is array slicing.  You can read more in the `Numpy tutorial
-# <https://numpy.org/doc/stable/user/quickstart.html>`_.
+# <https://docs.scipy.org/doc/numpy/user/quickstart.html>`_.

 plt.imshow(lum_img)

diff --git a/tutorials/introductory/lifecycle.py b/tutorials/introductory/lifecycle.py
index 4f30a4d085..00732d4aca 100644
--- a/tutorials/introductory/lifecycle.py
+++ b/tutorials/introductory/lifecycle.py
@@ -13,8 +13,7 @@ to highlight some neat features and best-practices using Matplotlib.
 .. note::

     This tutorial is based on
-    `this excellent blog post
-    <https://pbpython.com/effective-matplotlib.html>`_
+    `this excellent blog post <http://pbpython.com/effective-matplotlib.html>`_
     by Chris Moffitt. It was transformed into this tutorial by Chris Holdgraf.

 A note on the Object-Oriented API vs. Pyplot
@@ -170,14 +169,14 @@ ax.set(xlim=[-10000, 140000], xlabel='Total Revenue', ylabel='Company',

 ###############################################################################
 # We can also adjust the size of this plot using the :func:`pyplot.subplots`
-# function. We can do this with the *figsize* keyword argument.
+# function. We can do this with the ``figsize`` kwarg.
 #
 # .. note::
 #
-#    While indexing in NumPy follows the form (row, column), the *figsize*
-#    keyword argument follows the form (width, height). This follows
-#    conventions in visualization, which unfortunately are different from those
-#    of linear algebra.
+#    While indexing in NumPy follows the form (row, column), the figsize
+#    kwarg follows the form (width, height). This follows conventions in
+#    visualization, which unfortunately are different from those of linear
+#    algebra.

 fig, ax = plt.subplots(figsize=(8, 4))
 ax.barh(group_names, group_data)
@@ -199,7 +198,7 @@ ax.set(xlim=[-10000, 140000], xlabel='Total Revenue', ylabel='Company',


 def currency(x, pos):
-    """The two arguments are the value and tick position"""
+    """The two args are the value and tick position"""
     if x >= 1e6:
         s = '${:1.1f}M'.format(x*1e-6)
     else:
diff --git a/tutorials/introductory/pyplot.py b/tutorials/introductory/pyplot.py
index 994bbb50d6..1a8167c061 100644
--- a/tutorials/introductory/pyplot.py
+++ b/tutorials/introductory/pyplot.py
@@ -77,7 +77,7 @@ plt.show()
 #
 # If matplotlib were limited to working with lists, it would be fairly
 # useless for numeric processing.  Generally, you will use `numpy
-# <https://numpy.org/>`_ arrays.  In fact, all sequences are
+# <http://www.numpy.org>`_ arrays.  In fact, all sequences are
 # converted to numpy arrays internally.  The example below illustrates
 # plotting several lines with different format styles in one function call
 # using arrays.
@@ -150,7 +150,7 @@ plt.show()
 # antialiased, etc; see `matplotlib.lines.Line2D`.  There are
 # several ways to set line properties
 #
-# * Use keyword arguments::
+# * Use keyword args::
 #
 #       plt.plot(x, y, linewidth=2.0)
 #
@@ -171,7 +171,7 @@ plt.show()
 #   MATLAB-style string/value pairs::
 #
 #       lines = plt.plot(x1, y1, x2, y2)
-#       # use keyword arguments
+#       # use keyword args
 #       plt.setp(lines, color='r', linewidth=2.0)
 #       # or MATLAB style string value pairs
 #       plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
@@ -273,9 +273,10 @@ plt.show()
 # which allows you to specify the location as ``axes([left, bottom,
 # width, height])`` where all values are in fractional (0 to 1)
 # coordinates.  See :doc:`/gallery/subplots_axes_and_figures/axes_demo` for an example of
-# placing axes manually and :doc:`/gallery/subplots_axes_and_figures/subplot` for an
+# placing axes manually and :doc:`/gallery/subplots_axes_and_figures/subplot_demo` for an
 # example with lots of subplots.
 #
+#
 # You can create multiple figures by using multiple
 # `~.pyplot.figure` calls with an increasing figure
 # number.  Of course, each figure can contain as many axes and subplots
@@ -460,5 +461,5 @@ plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
 plt.show()

 ###############################################################################
-# It is also possible to add your own scale, see `matplotlib.scale` for
+# It is also possible to add your own scale, see :ref:`adding-new-scales` for
 # details.
diff --git a/tutorials/introductory/sample_plots.py b/tutorials/introductory/sample_plots.py
index 84dd92d328..67091ad1b4 100644
--- a/tutorials/introductory/sample_plots.py
+++ b/tutorials/introductory/sample_plots.py
@@ -17,6 +17,9 @@ Here's how to create a line plot with text labels using
 .. figure:: ../../gallery/lines_bars_and_markers/images/sphx_glr_simple_plot_001.png
    :target: ../../gallery/lines_bars_and_markers/simple_plot.html
    :align: center
+   :scale: 50
+
+   Simple Plot

 .. _screenshots_subplot_demo:

@@ -29,6 +32,9 @@ Multiple axes (i.e. subplots) are created with the
 .. figure:: ../../gallery/subplots_axes_and_figures/images/sphx_glr_subplot_001.png
    :target: ../../gallery/subplots_axes_and_figures/subplot.html
    :align: center
+   :scale: 50
+
+   Subplot

 .. _screenshots_images_demo:

@@ -41,8 +47,9 @@ horizontal dimensions) using the :func:`~matplotlib.pyplot.imshow` function.
 .. figure:: ../../gallery/images_contours_and_fields/images/sphx_glr_image_demo_003.png
    :target: ../../gallery/images_contours_and_fields/image_demo.html
    :align: center
+   :scale: 50

-   Example of using :func:`~matplotlib.pyplot.imshow` to display an MRI
+   Example of using :func:`~matplotlib.pyplot.imshow` to display a CT scan

 .. _screenshots_pcolormesh_demo:

@@ -59,6 +66,9 @@ the same data:
 .. figure:: ../../gallery/images_contours_and_fields/images/sphx_glr_pcolormesh_levels_001.png
    :target: ../../gallery/images_contours_and_fields/pcolormesh_levels.html
    :align: center
+   :scale: 50
+
+   Example comparing :func:`~matplotlib.pyplot.pcolormesh` and :func:`~matplotlib.pyplot.contour` for plotting two-dimensional data

 .. _screenshots_histogram_demo:

@@ -71,6 +81,10 @@ histograms and returns the bin counts or probabilities:
 .. figure:: ../../gallery/statistics/images/sphx_glr_histogram_features_001.png
    :target: ../../gallery/statistics/histogram_features.html
    :align: center
+   :scale: 50
+
+   Histogram Features
+

 .. _screenshots_path_demo:

@@ -83,19 +97,25 @@ You can add arbitrary paths in Matplotlib using the
 .. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_path_patch_001.png
    :target: ../../gallery/shapes_and_collections/path_patch.html
    :align: center
+   :scale: 50
+
+   Path Patch

 .. _screenshots_mplot3d_surface:

 Three-dimensional plotting
 ==========================

-The mplot3d toolkit (see :doc:`/tutorials/toolkits/mplot3d` and
+The mplot3d toolkit (see :ref:`toolkit_mplot3d-tutorial` and
 :ref:`mplot3d-examples-index`) has support for simple 3D graphs
 including surface, wireframe, scatter, and bar charts.

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_surface3d_001.png
    :target: ../../gallery/mplot3d/surface3d.html
    :align: center
+   :scale: 50
+
+   Surface3d

 Thanks to John Porter, Jonathon Taylor, Reinier Heeres, and Ben Root for
 the `.mplot3d` toolkit. This toolkit is included with all standard Matplotlib
@@ -115,6 +135,7 @@ such as the speed or local intensity of the vector field.
 .. figure:: ../../gallery/images_contours_and_fields/images/sphx_glr_plot_streamplot_001.png
    :target: ../../gallery/images_contours_and_fields/plot_streamplot.html
    :align: center
+   :scale: 50

    Streamplot with various plotting options.

@@ -126,7 +147,7 @@ streamplot function.
 Ellipses
 ========

-In support of the `Phoenix <https://www.jpl.nasa.gov/news/phoenix/main.php>`_
+In support of the `Phoenix <http://www.jpl.nasa.gov/news/phoenix/main.php>`_
 mission to Mars (which used Matplotlib to display ground tracking of
 spacecraft), Michael Droettboom built on work by Charlie Moad to provide
 an extremely accurate 8-spline approximation to elliptical arcs (see
@@ -135,6 +156,9 @@ an extremely accurate 8-spline approximation to elliptical arcs (see
 .. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_ellipse_demo_001.png
    :target: ../../gallery/shapes_and_collections/ellipse_demo.html
    :align: center
+   :scale: 50
+
+   Ellipse Demo

 .. _screenshots_barchart_demo:

@@ -147,6 +171,9 @@ includes customizations such as error bars:
 .. figure:: ../../gallery/statistics/images/sphx_glr_barchart_demo_001.png
    :target: ../../gallery/statistics/barchart_demo.html
    :align: center
+   :scale: 50
+
+   Barchart Demo

 You can also create stacked bars
 (`bar_stacked.py <../../gallery/lines_bars_and_markers/bar_stacked.html>`_),
@@ -168,6 +195,9 @@ a few lines of code.
 .. figure:: ../../gallery/pie_and_polar_charts/images/sphx_glr_pie_features_001.png
    :target: ../../gallery/pie_and_polar_charts/pie_features.html
    :align: center
+   :scale: 50
+
+   Pie Features

 .. _screenshots_table_demo:

@@ -180,9 +210,14 @@ to an axes.
 .. figure:: ../../gallery/misc/images/sphx_glr_table_demo_001.png
    :target: ../../gallery/misc/table_demo.html
    :align: center
+   :scale: 50
+
+   Table Demo
+

 .. _screenshots_scatter_demo:

+
 Scatter plots
 =============

@@ -195,6 +230,10 @@ alpha attribute is used to make semitransparent circle markers.
 .. figure:: ../../gallery/lines_bars_and_markers/images/sphx_glr_scatter_demo2_001.png
    :target: ../../gallery/lines_bars_and_markers/scatter_demo2.html
    :align: center
+   :scale: 50
+
+   Scatter Demo2
+

 .. _screenshots_slider_demo:

@@ -209,6 +248,7 @@ and widgets.  See :mod:`matplotlib.widgets` and the
 .. figure:: ../../gallery/widgets/images/sphx_glr_slider_demo_001.png
    :target: ../../gallery/widgets/slider_demo.html
    :align: center
+   :scale: 50

    Slider and radio-button GUI.

@@ -224,6 +264,9 @@ plot filled curves and polygons:
 .. figure:: ../../gallery/lines_bars_and_markers/images/sphx_glr_fill_001.png
    :target: ../../gallery/lines_bars_and_markers/fill.html
    :align: center
+   :scale: 50
+
+   Fill

 Thanks to Andrew Straw for adding this function.

@@ -238,6 +281,9 @@ tick formatters for both.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_date_001.png
    :target: ../../gallery/text_labels_and_annotations/date.html
    :align: center
+   :scale: 50
+
+   Date

 See :mod:`matplotlib.ticker` and :mod:`matplotlib.dates` for details and usage.

@@ -255,6 +301,9 @@ logarithmic plots.
 .. figure:: ../../gallery/scales/images/sphx_glr_log_demo_001.png
    :target: ../../gallery/scales/log_demo.html
    :align: center
+   :scale: 50
+
+   Log Demo

 Thanks to Andrew Straw, Darren Dale and Gregory Lielens for contributions
 log-scaling infrastructure.
@@ -269,6 +318,9 @@ The :func:`~matplotlib.pyplot.polar` function generates polar plots.
 .. figure:: ../../gallery/pie_and_polar_charts/images/sphx_glr_polar_demo_001.png
    :target: ../../gallery/pie_and_polar_charts/polar_demo.html
    :align: center
+   :scale: 50
+
+   Polar Demo

 .. _screenshots_legend_demo:

@@ -283,6 +335,9 @@ functions.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_legend_001.png
    :target: ../../gallery/text_labels_and_annotations/legend.html
    :align: center
+   :scale: 50
+
+   Legend

 Thanks to Charles Twardy for input on the legend function.

@@ -300,6 +355,9 @@ fonts.  See the :mod:`matplotlib.mathtext` module for additional details.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_mathtext_examples_001.png
    :target: ../../gallery/text_labels_and_annotations/mathtext_examples.html
    :align: center
+   :scale: 50
+
+   Mathtext Examples

 Matplotlib's mathtext infrastructure is an independent implementation and
 does not require TeX or any external packages installed on your computer. See
@@ -318,6 +376,9 @@ rendering of strings with the *usetex* option.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png
    :target: ../../gallery/text_labels_and_annotations/tex_demo.html
    :align: center
+   :scale: 50
+
+   Tex Demo

 .. _screenshots_eeg_demo:

@@ -329,14 +390,12 @@ Here is a screenshot of an EEG viewer called `pbrain
 <https://github.com/nipy/pbrain>`__.

 .. image:: ../../_static/eeg_small.png
-   :align: center

 The lower axes uses :func:`~matplotlib.pyplot.specgram`
 to plot the spectrogram of one of the EEG channels.

 For examples of how to embed Matplotlib in different toolkits, see:

-   * :doc:`/gallery/user_interfaces/embedding_in_gtk4_sgskip`
    * :doc:`/gallery/user_interfaces/embedding_in_gtk3_sgskip`
    * :doc:`/gallery/user_interfaces/embedding_in_wx2_sgskip`
    * :doc:`/gallery/user_interfaces/mpl_with_glade3_sgskip`
@@ -347,11 +406,14 @@ XKCD-style sketch plots
 =======================

 Just for fun, Matplotlib supports plotting in the style of `xkcd
-<https://xkcd.com/>`_.
+<https://www.xkcd.com/>`_.

 .. figure:: ../../gallery/showcase/images/sphx_glr_xkcd_001.png
    :target: ../../gallery/showcase/xkcd.html
    :align: center
+   :scale: 50
+
+   xkcd

 Subplot example
 ===============
diff --git a/tutorials/introductory/usage.py b/tutorials/introductory/usage.py
index fc265883c6..5f234e366c 100644
--- a/tutorials/introductory/usage.py
+++ b/tutorials/introductory/usage.py
@@ -3,7 +3,7 @@
 Usage Guide
 ***********

-This tutorial covers some basic usage patterns and best practices to
+This tutorial covers some basic usage patterns and best-practices to
 help you get started with Matplotlib.
 """

@@ -16,10 +16,10 @@ import numpy as np
 # A simple example
 # ================
 #
-# Matplotlib graphs your data on `~.figure.Figure`\s (e.g., windows, Jupyter
-# widgets, etc.), each of which can contain one or more `~.axes.Axes`, an
+# Matplotlib graphs your data on `~.figure.Figure`\s (i.e., windows, Jupyter
+# widgets, etc.), each of which can contain one or more `~.axes.Axes` (i.e., an
 # area where points can be specified in terms of x-y coordinates, or theta-r
-# in a polar plot, x-y-z in a 3D plot, etc.  The simplest way of
+# in a polar plot, or x-y-z in a 3D plot, etc.).  The simplest way of
 # creating a figure with an axes is using `.pyplot.subplots`. We can then use
 # `.Axes.plot` to draw some data on the axes:

@@ -50,7 +50,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # Parts of a Figure
 # =================
 #
-# Here is a more detailed layout of the components of a Matplotlib figure.
+# Now, let's have a deeper look at the components of a Matplotlib figure.
 #
 # .. image:: ../../_static/anatomy.png
 #
@@ -58,11 +58,11 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # ----------------------------------
 #
 # The **whole** figure.  The figure keeps
-# track of all the child :class:`~matplotlib.axes.Axes`, a group of
+# track of all the child :class:`~matplotlib.axes.Axes`, a smattering of
 # 'special' artists (titles, figure legends, etc), and the **canvas**.
-# (The canvas is not the primary focus. It is crucial as it is the
-# object that actually does the drawing to get you your plot, but as
-# the user, it is mostly invisible to you).  A figure can contain any
+# (Don't worry too much about the canvas, it is crucial as it is the
+# object that actually does the drawing to get you your plot, but as the
+# user it is more-or-less invisible to you).  A figure can contain any
 # number of :class:`~matplotlib.axes.Axes`, but will typically have
 # at least one.
 #
@@ -78,7 +78,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # :class:`~matplotlib.axes.Axes`
 # ------------------------------
 #
-# This is what you think of as 'a plot'. It is the region of the image
+# This is what you think of as 'a plot', it is the region of the image
 # with the data space. A given figure
 # can contain many Axes, but a given :class:`~matplotlib.axes.Axes`
 # object can only be in one :class:`~matplotlib.figure.Figure`.  The
@@ -97,8 +97,8 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # :class:`~matplotlib.axis.Axis`
 # ------------------------------
 #
-# These are the objects most similar to a number line.
-# They set graph limits and generate ticks (the marks
+# These are the number-line-like objects. They take
+# care of setting the graph limits and generating the ticks (the marks
 # on the axis) and ticklabels (strings labeling the ticks).  The location of
 # the ticks is determined by a `~matplotlib.ticker.Locator` object and the
 # ticklabel strings are formatted by a `~matplotlib.ticker.Formatter`.  The
@@ -108,10 +108,10 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # :class:`~matplotlib.artist.Artist`
 # ----------------------------------
 #
-# Basically, everything visible on the figure is an artist (even
+# Basically, everything you can see on the figure is an artist (even the
 # `.Figure`, `Axes <.axes.Axes>`, and `~.axis.Axis` objects).  This includes
 # `.Text` objects, `.Line2D` objects, :mod:`.collections` objects, `.Patch`
-# objects, etc... When the figure is rendered, all of the
+# objects ... (you get the idea).  When the figure is rendered, all of the
 # artists are drawn to the **canvas**.  Most Artists are tied to an Axes; such
 # an Artist cannot be shared by multiple Axes, or moved from one to another.
 #
@@ -121,9 +121,9 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # =====================================
 #
 # All of plotting functions expect `numpy.array` or `numpy.ma.masked_array` as
-# input.  Classes that are similar to arrays ('array-like') such as `pandas`
-# data objects and `numpy.matrix` may not work as intended.  Common convention
-# is to convert these to `numpy.array` objects prior to plotting.
+# input.  Classes that are 'array-like' such as `pandas` data objects
+# and `numpy.matrix` may or may not work as intended.  It is best to
+# convert these to `numpy.array` objects prior to plotting.
 #
 # For example, to convert a `pandas.DataFrame` ::
 #
@@ -149,7 +149,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 #
 # So one can do (OO-style)

-x = np.linspace(0, 2, 100)  # Sample data.
+x = np.linspace(0, 2, 100)

 # Note that even in the OO-style, we use `.pyplot.figure` to create the figure.
 fig, ax = plt.subplots()  # Create a figure and an axes.
@@ -164,7 +164,7 @@ ax.legend()  # Add a legend.
 ###############################################################################
 # or (pyplot-style)

-x = np.linspace(0, 2, 100)  # Sample data.
+x = np.linspace(0, 2, 100)

 plt.plot(x, x, label='linear')  # Plot some data on the (implicit) axes.
 plt.plot(x, x**2, label='quadratic')  # etc.
@@ -182,7 +182,7 @@ plt.legend()
 #
 # Matplotlib's documentation and examples use both the OO and the pyplot
 # approaches (which are equally powerful), and you should feel free to use
-# either (however, it is preferable to pick one of them and stick to it, instead
+# either (however, it is preferable pick one of them and stick to it, instead
 # of mixing them).  In general, we suggest to restrict pyplot to interactive
 # plotting (e.g., in a Jupyter notebook), and to prefer the OO-style for
 # non-interactive plotting (in functions and scripts that are intended to be
@@ -203,8 +203,10 @@ plt.legend()
 #    nowadays and deprecated. It is only mentioned here because you may still
 #    encounter it in the wild.
 #
-# If you need to make the same plots over and over
-# again with different data sets, use the recommended signature function below.
+# Typically one finds oneself making the same plots over and over
+# again, but with different data sets, which leads to needing to write
+# specialized functions to do the plotting.  The recommended function
+# signature is something like:


 def my_plotter(ax, data1, data2, param_dict):
@@ -223,7 +225,7 @@ def my_plotter(ax, data1, data2, param_dict):
        The y data

     param_dict : dict
-       Dictionary of keyword arguments to pass to ax.plot
+       Dictionary of kwargs to pass to ax.plot

     Returns
     -------
@@ -241,11 +243,549 @@ fig, ax = plt.subplots(1, 1)
 my_plotter(ax, data1, data2, {'marker': 'x'})

 ###############################################################################
-# or if you wanted to have two sub-plots:
+# or if you wanted to have 2 sub-plots:

 fig, (ax1, ax2) = plt.subplots(1, 2)
 my_plotter(ax1, data1, data2, {'marker': 'x'})
 my_plotter(ax2, data3, data4, {'marker': 'o'})

 ###############################################################################
-# These examples provide convenience for more complex graphs.
+# For these simple examples this style seems like overkill, however
+# once the graphs get slightly more complex it pays off.
+#
+#
+# .. _backends:
+#
+# Backends
+# ========
+#
+# .. _what-is-a-backend:
+#
+# What is a backend?
+# ------------------
+#
+# A lot of documentation on the website and in the mailing lists refers
+# to the "backend" and many new users are confused by this term.
+# Matplotlib targets many different use cases and output formats.  Some
+# people use Matplotlib interactively from the python shell and have
+# plotting windows pop up when they type commands.  Some people run
+# `Jupyter <https://jupyter.org>`_ notebooks and draw inline plots for
+# quick data analysis. Others embed Matplotlib into graphical user
+# interfaces like PyQt or PyGObject to build rich applications.  Some
+# people use Matplotlib in batch scripts to generate postscript images
+# from numerical simulations, and still others run web application
+# servers to dynamically serve up graphs.
+#
+# To support all of these use cases, Matplotlib can target different
+# outputs, and each of these capabilities is called a backend; the
+# "frontend" is the user facing code, i.e., the plotting code, whereas the
+# "backend" does all the hard work behind-the-scenes to make the figure.
+# There are two types of backends: user interface backends (for use in
+# PyQt/PySide, PyGObject, Tkinter, wxPython, or macOS/Cocoa); also referred to
+# as "interactive backends") and hardcopy backends to make image files
+# (PNG, SVG, PDF, PS; also referred to as "non-interactive backends").
+#
+# Selecting a backend
+# -------------------
+#
+# There are three ways to configure your backend:
+#
+# 1. The :rc:`backend` parameter in your :file:`matplotlibrc` file
+# 2. The :envvar:`MPLBACKEND` environment variable
+# 3. The function :func:`matplotlib.use`
+#
+# A more detailed description is given below.
+#
+# If multiple of these are configurations are present, the last one from the
+# list takes precedence; e.g. calling :func:`matplotlib.use()` will override
+# the setting in your :file:`matplotlibrc`.
+#
+# If no backend is explicitly set, Matplotlib automatically detects a usable
+# backend based on what is available on your system and on whether a GUI event
+# loop is already running. On Linux, if the environment variable
+# :envvar:`DISPLAY` is unset, the "event loop" is identified as "headless",
+# which causes a fallback to a noninteractive backend (agg); in all other
+# cases, an interactive backend is preferred (usually, at least tkagg will be
+# available).
+#
+# Here is a detailed description of the configuration methods:
+#
+# #. Setting :rc:`backend` in your :file:`matplotlibrc` file::
+#
+#        backend : qt5agg   # use pyqt5 with antigrain (agg) rendering
+#
+#    See also :doc:`/tutorials/introductory/customizing`.
+#
+# #. Setting the :envvar:`MPLBACKEND` environment variable:
+#
+#    You can set the environment variable either for your current shell or for
+#    a single script.
+#
+#    On Unix::
+#
+#         > export MPLBACKEND=qt5agg
+#         > python simple_plot.py
+#
+#         > MPLBACKEND=qt5agg python simple_plot.py
+#
+#    On Windows, only the former is possible::
+#
+#         > set MPLBACKEND=qt5agg
+#         > python simple_plot.py
+#
+#    Setting this environment variable will override the ``backend`` parameter
+#    in *any* :file:`matplotlibrc`, even if there is a :file:`matplotlibrc` in
+#    your current working directory. Therefore, setting :envvar:`MPLBACKEND`
+#    globally, e.g. in your :file:`.bashrc` or :file:`.profile`, is discouraged
+#    as it might lead to counter-intuitive behavior.
+#
+# #. If your script depends on a specific backend you can use the function
+#    :func:`matplotlib.use`::
+#
+#       import matplotlib
+#       matplotlib.use('qt5agg')
+#
+#    This should be done before any figure is created, otherwise Matplotlib may
+#    fail to switch the backend and raise an ImportError.
+#
+#    Using `~matplotlib.use` will require changes in your code if users want to
+#    use a different backend.  Therefore, you should avoid explicitly calling
+#    `~matplotlib.use` unless absolutely necessary.
+#
+# .. _the-builtin-backends:
+#
+# The builtin backends
+# --------------------
+#
+# By default, Matplotlib should automatically select a default backend which
+# allows both interactive work and plotting from scripts, with output to the
+# screen and/or to a file, so at least initially, you will not need to worry
+# about the backend.  The most common exception is if your Python distribution
+# comes without :mod:`tkinter` and you have no other GUI toolkit installed.
+# This happens on certain Linux distributions, where you need to install a
+# Linux package named ``python-tk`` (or similar).
+#
+# If, however, you want to write graphical user interfaces, or a web
+# application server
+# (:doc:`/gallery/user_interfaces/web_application_server_sgskip`), or need a
+# better understanding of what is going on, read on. To make things a little
+# more customizable for graphical user interfaces, Matplotlib separates
+# the concept of the renderer (the thing that actually does the drawing)
+# from the canvas (the place where the drawing goes).  The canonical
+# renderer for user interfaces is ``Agg`` which uses the `Anti-Grain
+# Geometry`_ C++ library to make a raster (pixel) image of the figure; it
+# is used by the ``Qt5Agg``, ``Qt4Agg``, ``GTK3Agg``, ``wxAgg``, ``TkAgg``, and
+# ``macosx`` backends.  An alternative renderer is based on the Cairo library,
+# used by ``Qt5Cairo``, ``Qt4Cairo``, etc.
+#
+# For the rendering engines, one can also distinguish between `vector
+# <https://en.wikipedia.org/wiki/Vector_graphics>`_ or `raster
+# <https://en.wikipedia.org/wiki/Raster_graphics>`_ renderers.  Vector
+# graphics languages issue drawing commands like "draw a line from this
+# point to this point" and hence are scale free, and raster backends
+# generate a pixel representation of the line whose accuracy depends on a
+# DPI setting.
+#
+# Here is a summary of the Matplotlib renderers (there is an eponymous
+# backend for each; these are *non-interactive backends*, capable of
+# writing to a file):
+#
+# ========  =========  =======================================================
+# Renderer  Filetypes  Description
+# ========  =========  =======================================================
+# AGG       png        raster_ graphics -- high quality images using the
+#                      `Anti-Grain Geometry`_ engine
+# PDF       pdf        vector_ graphics -- `Portable Document Format`_
+# PS        ps, eps    vector_ graphics -- Postscript_ output
+# SVG       svg        vector_ graphics -- `Scalable Vector Graphics`_
+# PGF       pgf, pdf   vector_ graphics -- using the pgf_ package
+# Cairo     png, ps,   raster_ or vector_ graphics -- using the Cairo_ library
+#           pdf, svg
+# ========  =========  =======================================================
+#
+# To save plots using the non-interactive backends, use the
+# ``matplotlib.pyplot.savefig('filename')`` method.
+#
+# And here are the user interfaces and renderer combinations supported;
+# these are *interactive backends*, capable of displaying to the screen
+# and of using appropriate renderers from the table above to write to
+# a file:
+#
+# ========= ================================================================
+# Backend   Description
+# ========= ================================================================
+# Qt5Agg    Agg rendering in a Qt5_ canvas (requires PyQt5_).  This
+#           backend can be activated in IPython with ``%matplotlib qt5``.
+# ipympl    Agg rendering embedded in a Jupyter widget.  (requires ipympl).
+#           This backend can be enabled in a Jupyter notebook with
+#           ``%matplotlib ipympl``.
+# GTK3Agg   Agg rendering to a GTK_ 3.x canvas (requires PyGObject_,
+#           and pycairo_ or cairocffi_).  This backend can be activated in
+#           IPython with ``%matplotlib gtk3``.
+# macosx    Agg rendering into a Cocoa canvas in OSX.  This backend can be
+#           activated in IPython with ``%matplotlib osx``.
+# TkAgg     Agg rendering to a Tk_ canvas (requires TkInter_). This
+#           backend can be activated in IPython with ``%matplotlib tk``.
+# nbAgg     Embed an interactive figure in a Jupyter classic notebook.  This
+#           backend can be enabled in Jupyter notebooks via
+#           ``%matplotlib notebook``.
+# WebAgg    On ``show()`` will start a tornado server with an interactive
+#           figure.
+# GTK3Cairo Cairo rendering to a GTK_ 3.x canvas (requires PyGObject_,
+#           and pycairo_ or cairocffi_).
+# Qt4Agg    Agg rendering to a Qt4_ canvas (requires PyQt4_ or
+#           ``pyside``).  This backend can be activated in IPython with
+#           ``%matplotlib qt4``.
+# wxAgg     Agg rendering to a wxWidgets_ canvas (requires wxPython_ 4).
+#           This backend can be activated in IPython with ``%matplotlib wx``.
+# ========= ================================================================
+#
+# .. note::
+#    The names of builtin backends case-insensitive; e.g., 'Qt5Agg' and
+#    'qt5agg' are equivalent.
+#
+# .. _`Anti-Grain Geometry`: http://antigrain.com/
+# .. _`Portable Document Format`: https://en.wikipedia.org/wiki/Portable_Document_Format
+# .. _Postscript: https://en.wikipedia.org/wiki/PostScript
+# .. _`Scalable Vector Graphics`: https://en.wikipedia.org/wiki/Scalable_Vector_Graphics
+# .. _pgf: https://ctan.org/pkg/pgf
+# .. _Cairo: https://www.cairographics.org
+# .. _PyGObject: https://wiki.gnome.org/action/show/Projects/PyGObject
+# .. _pycairo: https://www.cairographics.org/pycairo/
+# .. _cairocffi: https://pythonhosted.org/cairocffi/
+# .. _wxPython: https://www.wxpython.org/
+# .. _TkInter: https://docs.python.org/3/library/tk.html
+# .. _PyQt4: https://riverbankcomputing.com/software/pyqt/intro
+# .. _PyQt5: https://riverbankcomputing.com/software/pyqt/intro
+# .. _Qt5: https://doc.qt.io/qt-5/index.html
+# .. _GTK: https://www.gtk.org/
+# .. _Tk: https://www.tcl.tk/
+# .. _Qt4: https://doc.qt.io/archives/qt-4.8/index.html
+# .. _wxWidgets: https://www.wxwidgets.org/
+#
+# ipympl
+# ^^^^^^
+#
+# The Jupyter widget ecosystem is moving too fast to support directly in
+# Matplotlib.  To install ipympl
+#
+# .. code-block:: bash
+#
+#    pip install ipympl
+#    jupyter nbextension enable --py --sys-prefix ipympl
+#
+# or
+#
+# .. code-block:: bash
+#
+#    conda install ipympl -c conda-forge
+#
+# See `jupyter-matplotlib <https://github.com/matplotlib/jupyter-matplotlib>`__
+# for more details.
+#
+# .. _QT_API-usage:
+#
+# How do I select PyQt4 or PySide?
+# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+#
+# The :envvar:`QT_API` environment variable can be set to either ``pyqt`` or
+# ``pyside`` to use ``PyQt4`` or ``PySide``, respectively.
+#
+# Since the default value for the bindings to be used is ``PyQt4``, Matplotlib
+# first tries to import it. If the import fails, it tries to import ``PySide``.
+#
+# Using non-builtin backends
+# --------------------------
+# More generally, any importable backend can be selected by using any of the
+# methods above. If ``name.of.the.backend`` is the module containing the
+# backend, use ``module://name.of.the.backend`` as the backend name, e.g.
+# ``matplotlib.use('module://name.of.the.backend')``.
+#
+#
+# .. _interactive-mode:
+#
+# What is interactive mode?
+# =========================
+#
+# Use of an interactive backend (see :ref:`what-is-a-backend`)
+# permits--but does not by itself require or ensure--plotting
+# to the screen.  Whether and when plotting to the screen occurs,
+# and whether a script or shell session continues after a plot
+# is drawn on the screen, depends on the functions and methods
+# that are called, and on a state variable that determines whether
+# Matplotlib is in "interactive mode".  The default Boolean value is set
+# by the :file:`matplotlibrc` file, and may be customized like any other
+# configuration parameter (see :doc:`/tutorials/introductory/customizing`).  It
+# may also be set via :func:`matplotlib.interactive`, and its
+# value may be queried via :func:`matplotlib.is_interactive`.  Turning
+# interactive mode on and off in the middle of a stream of plotting
+# commands, whether in a script or in a shell, is rarely needed
+# and potentially confusing. In the following, we will assume all
+# plotting is done with interactive mode either on or off.
+#
+# .. note::
+#    Major changes related to interactivity, and in particular the
+#    role and behavior of :func:`~matplotlib.pyplot.show`, were made in the
+#    transition to Matplotlib version 1.0, and bugs were fixed in
+#    1.0.1.  Here we describe the version 1.0.1 behavior for the
+#    primary interactive backends, with the partial exception of
+#    *macosx*.
+#
+# Interactive mode may also be turned on via :func:`matplotlib.pyplot.ion`,
+# and turned off via :func:`matplotlib.pyplot.ioff`.
+#
+# .. note::
+#    Interactive mode works with suitable backends in ipython and in
+#    the ordinary python shell, but it does *not* work in the IDLE IDE.
+#    If the default backend does not support interactivity, an interactive
+#    backend can be explicitly activated using any of the methods discussed
+#    in `What is a backend?`_.
+#
+#
+# Interactive example
+# --------------------
+#
+# From an ordinary python prompt, or after invoking ipython with no options,
+# try this::
+#
+#     import matplotlib.pyplot as plt
+#     plt.ion()
+#     plt.plot([1.6, 2.7])
+#
+# This will pop up a plot window. Your terminal prompt will remain active, so
+# that you can type additional commands such as::
+#
+#     plt.title("interactive test")
+#     plt.xlabel("index")
+#
+# On most interactive backends, the figure window will also be updated if you
+# change it via the object-oriented interface. E.g. get a reference to the
+# `~matplotlib.axes.Axes` instance, and call a method of that instance::
+#
+#     ax = plt.gca()
+#     ax.plot([3.1, 2.2])
+#
+# If you are using certain backends (like ``macosx``), or an older version
+# of Matplotlib, you may not see the new line added to the plot immediately.
+# In this case, you need to explicitly call :func:`~matplotlib.pyplot.draw`
+# in order to update the plot::
+#
+#     plt.draw()
+#
+#
+# Non-interactive example
+# -----------------------
+#
+# Start a fresh session as in the previous example, but now
+# turn interactive mode off::
+#
+#     import matplotlib.pyplot as plt
+#     plt.ioff()
+#     plt.plot([1.6, 2.7])
+#
+# Nothing happened--or at least nothing has shown up on the
+# screen (unless you are using *macosx* backend, which is
+# anomalous).  To make the plot appear, you need to do this::
+#
+#     plt.show()
+#
+# Now you see the plot, but your terminal command line is
+# unresponsive; `.pyplot.show()` *blocks* the input
+# of additional commands until you manually kill the plot
+# window.
+#
+# What good is this--being forced to use a blocking function?
+# Suppose you need a script that plots the contents of a file
+# to the screen.  You want to look at that plot, and then end
+# the script.  Without some blocking command such as ``show()``, the
+# script would flash up the plot and then end immediately,
+# leaving nothing on the screen.
+#
+# In addition, non-interactive mode delays all drawing until
+# ``show()`` is called; this is more efficient than redrawing
+# the plot each time a line in the script adds a new feature.
+#
+# Prior to version 1.0, ``show()`` generally could not be called
+# more than once in a single script (although sometimes one
+# could get away with it); for version 1.0.1 and above, this
+# restriction is lifted, so one can write a script like this::
+#
+#     import numpy as np
+#     import matplotlib.pyplot as plt
+#
+#     plt.ioff()
+#     for i in range(3):
+#         plt.plot(np.random.rand(10))
+#         plt.show()
+#
+# This makes three plots, one at a time. I.e., the second plot will show up
+# once the first plot is closed.
+#
+# Summary
+# -------
+#
+# In interactive mode, pyplot functions automatically draw
+# to the screen.
+#
+# When plotting interactively, if using
+# object method calls in addition to pyplot functions, then
+# call :func:`~matplotlib.pyplot.draw` whenever you want to
+# refresh the plot.
+#
+# Use non-interactive mode in scripts in which you want to
+# generate one or more figures and display them before ending
+# or generating a new set of figures.  In that case, use
+# :func:`~matplotlib.pyplot.show` to display the figure(s) and
+# to block execution until you have manually destroyed them.
+#
+# .. _performance:
+#
+# Performance
+# ===========
+#
+# Whether exploring data in interactive mode or programmatically
+# saving lots of plots, rendering performance can be a painful
+# bottleneck in your pipeline. Matplotlib provides a couple
+# ways to greatly reduce rendering time at the cost of a slight
+# change (to a settable tolerance) in your plot's appearance.
+# The methods available to reduce rendering time depend on the
+# type of plot that is being created.
+#
+# Line segment simplification
+# ---------------------------
+#
+# For plots that have line segments (e.g. typical line plots, outlines
+# of polygons, etc.), rendering performance can be controlled by
+# :rc:`path.simplify` and :rc:`path.simplify_threshold`, which
+# can be defined e.g. in the :file:`matplotlibrc` file (see
+# :doc:`/tutorials/introductory/customizing` for more information about
+# the :file:`matplotlibrc` file). :rc:`path.simplify` is a boolean
+# indicating whether or not line segments are simplified at all.
+# :rc:`path.simplify_threshold` controls how much line segments are simplified;
+# higher thresholds result in quicker rendering.
+#
+# The following script will first display the data without any
+# simplification, and then display the same data with simplification.
+# Try interacting with both of them::
+#
+#   import numpy as np
+#   import matplotlib.pyplot as plt
+#   import matplotlib as mpl
+#
+#   # Setup, and create the data to plot
+#   y = np.random.rand(100000)
+#   y[50000:] *= 2
+#   y[np.geomspace(10, 50000, 400).astype(int)] = -1
+#   mpl.rcParams['path.simplify'] = True
+#
+#   mpl.rcParams['path.simplify_threshold'] = 0.0
+#   plt.plot(y)
+#   plt.show()
+#
+#   mpl.rcParams['path.simplify_threshold'] = 1.0
+#   plt.plot(y)
+#   plt.show()
+#
+# Matplotlib currently defaults to a conservative simplification
+# threshold of ``1/9``. If you want to change your default settings
+# to use a different value, you can change your :file:`matplotlibrc`
+# file.  Alternatively, you could create a new style for
+# interactive plotting (with maximal simplification) and another
+# style for publication quality plotting (with minimal
+# simplification) and activate them as necessary. See
+# :doc:`/tutorials/introductory/customizing` for
+# instructions on how to perform these actions.
+#
+# The simplification works by iteratively merging line segments
+# into a single vector until the next line segment's perpendicular
+# distance to the vector (measured in display-coordinate space)
+# is greater than the ``path.simplify_threshold`` parameter.
+#
+# .. note::
+#   Changes related to how line segments are simplified were made
+#   in version 2.1. Rendering time will still be improved by these
+#   parameters prior to 2.1, but rendering time for some kinds of
+#   data will be vastly improved in versions 2.1 and greater.
+#
+# Marker simplification
+# ---------------------
+#
+# Markers can also be simplified, albeit less robustly than
+# line segments. Marker simplification is only available
+# to :class:`~matplotlib.lines.Line2D` objects (through the
+# ``markevery`` property). Wherever
+# :class:`~matplotlib.lines.Line2D` construction parameters
+# are passed through, such as
+# :func:`matplotlib.pyplot.plot` and
+# :meth:`matplotlib.axes.Axes.plot`, the ``markevery``
+# parameter can be used::
+#
+#   plt.plot(x, y, markevery=10)
+#
+# The ``markevery`` argument allows for naive subsampling, or an
+# attempt at evenly spaced (along the *x* axis) sampling. See the
+# :doc:`/gallery/lines_bars_and_markers/markevery_demo`
+# for more information.
+#
+# Splitting lines into smaller chunks
+# -----------------------------------
+#
+# If you are using the Agg backend (see :ref:`what-is-a-backend`),
+# then you can make use of :rc:`agg.path.chunksize`
+# This allows you to specify a chunk size, and any lines with
+# greater than that many vertices will be split into multiple
+# lines, each of which has no more than ``agg.path.chunksize``
+# many vertices. (Unless ``agg.path.chunksize`` is zero, in
+# which case there is no chunking.) For some kind of data,
+# chunking the line up into reasonable sizes can greatly
+# decrease rendering time.
+#
+# The following script will first display the data without any
+# chunk size restriction, and then display the same data with
+# a chunk size of 10,000. The difference can best be seen when
+# the figures are large, try maximizing the GUI and then
+# interacting with them::
+#
+#   import numpy as np
+#   import matplotlib.pyplot as plt
+#   import matplotlib as mpl
+#   mpl.rcParams['path.simplify_threshold'] = 1.0
+#
+#   # Setup, and create the data to plot
+#   y = np.random.rand(100000)
+#   y[50000:] *= 2
+#   y[np.geomspace(10, 50000, 400).astype(int)] = -1
+#   mpl.rcParams['path.simplify'] = True
+#
+#   mpl.rcParams['agg.path.chunksize'] = 0
+#   plt.plot(y)
+#   plt.show()
+#
+#   mpl.rcParams['agg.path.chunksize'] = 10000
+#   plt.plot(y)
+#   plt.show()
+#
+# Legends
+# -------
+#
+# The default legend behavior for axes attempts to find the location
+# that covers the fewest data points (``loc='best'``). This can be a
+# very expensive computation if there are lots of data points. In
+# this case, you may want to provide a specific location.
+#
+# Using the *fast* style
+# ----------------------
+#
+# The *fast* style can be used to automatically set
+# simplification and chunking parameters to reasonable
+# settings to speed up plotting large amounts of data.
+# It can be used simply by running::
+#
+#   import matplotlib.style as mplstyle
+#   mplstyle.use('fast')
+#
+# It is very lightweight, so it plays nicely with other
+# styles, just make sure the fast style is applied last
+# so that other styles do not overwrite the settings::
+#
+#   mplstyle.use(['dark_background', 'ggplot', 'fast'])
diff --git a/tutorials/text/annotations.py b/tutorials/text/annotations.py
index 113ff40a04..878835b2f7 100644
--- a/tutorials/text/annotations.py
+++ b/tutorials/text/annotations.py
@@ -6,502 +6,570 @@ Annotating text with Matplotlib.

 .. contents:: Table of Contents
    :depth: 3
-"""

-from matplotlib import pyplot as plt
-
-###############################################################################
-# .. _annotations-tutorial:
-#
-# Basic annotation
-# ----------------
-#
-# The uses of the basic :func:`~matplotlib.pyplot.text` will place text
-# at an arbitrary position on the Axes.  A common use case of text is to
-# annotate some feature of the plot, and the
-# :func:`~matplotlib.axes.Axes.annotate` method provides helper functionality
-# to make annotations easy.  In an annotation, there are two points to
-# consider: the location being annotated represented by the argument
-# *xy* and the location of the text *xytext*.  Both of these
-# arguments are ``(x, y)`` tuples.
-#
-# .. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_basic_001.png
-#    :target: ../../gallery/pyplots/annotation_basic.html
-#    :align: center
-#
-# In this example, both the *xy* (arrow tip) and *xytext* locations
-# (text location) are in data coordinates.  There are a variety of other
-# coordinate systems one can choose -- you can specify the coordinate
-# system of *xy* and *xytext* with one of the following strings for
-# *xycoords* and *textcoords* (default is 'data')
-#
-# ==================  ========================================================
-# argument            coordinate system
-# ==================  ========================================================
-# 'figure points'     points from the lower left corner of the figure
-# 'figure pixels'     pixels from the lower left corner of the figure
-# 'figure fraction'   (0, 0) is lower left of figure and (1, 1) is upper right
-# 'axes points'       points from lower left corner of axes
-# 'axes pixels'       pixels from lower left corner of axes
-# 'axes fraction'     (0, 0) is lower left of axes and (1, 1) is upper right
-# 'data'              use the axes data coordinate system
-# ==================  ========================================================
-#
-# For example to place the text coordinates in fractional axes
-# coordinates, one could do::
-#
-#     ax.annotate('local max', xy=(3, 1),  xycoords='data',
-#                 xytext=(0.8, 0.95), textcoords='axes fraction',
-#                 arrowprops=dict(facecolor='black', shrink=0.05),
-#                 horizontalalignment='right', verticalalignment='top',
-#                 )
-#
-# For physical coordinate systems (points or pixels) the origin is the
-# bottom-left of the figure or axes.
-#
-# Optionally, you can enable drawing of an arrow from the text to the annotated
-# point by giving a dictionary of arrow properties in the optional keyword
-# argument *arrowprops*.
-#
-#
-# ==================== =====================================================
-# *arrowprops* key     description
-# ==================== =====================================================
-# width                the width of the arrow in points
-# frac                 the fraction of the arrow length occupied by the head
-# headwidth            the width of the base of the arrow head in points
-# shrink               move the tip and base some percent away from
-#                      the annotated point and text
-#
-# \*\*kwargs           any key for :class:`matplotlib.patches.Polygon`,
-#                      e.g., ``facecolor``
-# ==================== =====================================================
-#
-#
-# In the example below, the *xy* point is in native coordinates
-# (*xycoords* defaults to 'data').  For a polar axes, this is in
-# (theta, radius) space.  The text in this example is placed in the
-# fractional figure coordinate system. :class:`matplotlib.text.Text`
-# keyword arguments like *horizontalalignment*, *verticalalignment* and
-# *fontsize* are passed from `~matplotlib.axes.Axes.annotate` to the
-# ``Text`` instance.
-#
-# .. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_polar_001.png
-#    :target: ../../gallery/pyplots/annotation_polar.html
-#    :align: center
-#
-# For more on all the wild and wonderful things you can do with
-# annotations, including fancy arrows, see :ref:`plotting-guide-annotation`
-# and :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
-#
-#
-# Do not proceed unless you have already read :ref:`annotations-tutorial`,
-# :func:`~matplotlib.pyplot.text` and :func:`~matplotlib.pyplot.annotate`!
-#
-#
-# .. _plotting-guide-annotation:
-#
-# Advanced Annotations
-# --------------------
-#
-# Annotating with Text with Box
-# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# Let's start with a simple example.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_text_arrow_001.png
-#    :target: ../../gallery/userdemo/annotate_text_arrow.html
-#    :align: center
-#
-# `~.Axes.text` takes a *bbox* keyword argument, which draws a box around the
-# text::
-#
-#     t = ax.text(
-#         0, 0, "Direction", ha="center", va="center", rotation=45, size=15,
-#         bbox=dict(boxstyle="rarrow,pad=0.3", fc="cyan", ec="b", lw=2))
-#
-# The patch object associated with the text can be accessed by::
-#
-#     bb = t.get_bbox_patch()
-#
-# The return value is a `.FancyBboxPatch`; patch properties
-# (facecolor, edgewidth, etc.) can be accessed and modified as usual.
-# `.FancyBboxPatch.set_boxstyle` sets the box shape::
-#
-#   bb.set_boxstyle("rarrow", pad=0.6)
-#
-# The arguments are the name of the box style with its attributes as
-# keyword arguments. Currently, following box styles are implemented.
-#
-#   ==========   ==============   ==========================
-#   Class        Name             Attrs
-#   ==========   ==============   ==========================
-#   Circle       ``circle``       pad=0.3
-#   DArrow       ``darrow``       pad=0.3
-#   LArrow       ``larrow``       pad=0.3
-#   RArrow       ``rarrow``       pad=0.3
-#   Round        ``round``        pad=0.3,rounding_size=None
-#   Round4       ``round4``       pad=0.3,rounding_size=None
-#   Roundtooth   ``roundtooth``   pad=0.3,tooth_size=None
-#   Sawtooth     ``sawtooth``     pad=0.3,tooth_size=None
-#   Square       ``square``       pad=0.3
-#   ==========   ==============   ==========================
-#
-# .. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_fancybox_demo_001.png
-#    :target: ../../gallery/shapes_and_collections/fancybox_demo.html
-#    :align: center
-#
-# Note that the attribute arguments can be specified within the style
-# name with separating comma (this form can be used as "boxstyle" value
-# of bbox argument when initializing the text instance) ::
-#
-#    bb.set_boxstyle("rarrow,pad=0.6")
-#
-# Annotating with Arrow
-# ~~~~~~~~~~~~~~~~~~~~~
-#
-# `~.Axes.annotate` draws an arrow connecting two points in an axes::
-#
-#     ax.annotate("Annotation",
-#                 xy=(x1, y1), xycoords='data',
-#                 xytext=(x2, y2), textcoords='offset points',
-#                 )
-#
-# This annotates a point at *xy* in the given coordinate (*xycoords*)
-# with the text at *xytext* given in *textcoords*. Often, the
-# annotated point is specified in the *data* coordinate and the annotating
-# text in *offset points*.
-# See `~.Axes.annotate` for available coordinate systems.
-#
-# An arrow connecting *xy* to *xytext* can be optionally drawn by
-# specifying the *arrowprops* argument. To draw only an arrow, use
-# empty string as the first argument. ::
-#
-#     ax.annotate("",
-#                 xy=(0.2, 0.2), xycoords='data',
-#                 xytext=(0.8, 0.8), textcoords='data',
-#                 arrowprops=dict(arrowstyle="->",
-#                                 connectionstyle="arc3"),
-#                 )
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple01_001.png
-#    :target: ../../gallery/userdemo/annotate_simple01.html
-#    :align: center
-#
-# The arrow is drawn as follows:
-#
-# 1. A path connecting the two points is created, as specified by the
-#    *connectionstyle* parameter.
-# 2. The path is clipped to avoid patches *patchA* and *patchB*, if these are
-#    set.
-# 3. The path is further shrunk by *shrinkA* and *shrinkB* (in pixels).
-# 4. The path is transmuted to an arrow patch, as specified by the *arrowstyle*
-#    parameter.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_explain_001.png
-#    :target: ../../gallery/userdemo/annotate_explain.html
-#    :align: center
-#
-# The creation of the connecting path between two points is controlled by
-# ``connectionstyle`` key and the following styles are available.
-#
-#    ==========   =============================================
-#    Name         Attrs
-#    ==========   =============================================
-#    ``angle``    angleA=90,angleB=0,rad=0.0
-#    ``angle3``   angleA=90,angleB=0
-#    ``arc``      angleA=0,angleB=0,armA=None,armB=None,rad=0.0
-#    ``arc3``     rad=0.0
-#    ``bar``      armA=0.0,armB=0.0,fraction=0.3,angle=None
-#    ==========   =============================================
-#
-# Note that "3" in ``angle3`` and ``arc3`` is meant to indicate that the
-# resulting path is a quadratic spline segment (three control
-# points). As will be discussed below, some arrow style options can only
-# be used when the connecting path is a quadratic spline.
-#
-# The behavior of each connection style is (limitedly) demonstrated in the
-# example below. (Warning: The behavior of the ``bar`` style is currently not
-# well defined, it may be changed in the future).
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_connectionstyle_demo_001.png
-#    :target: ../../gallery/userdemo/connectionstyle_demo.html
-#    :align: center
-#
-# The connecting path (after clipping and shrinking) is then mutated to
-# an arrow patch, according to the given ``arrowstyle``.
-#
-#     ==========   =============================================
-#     Name         Attrs
-#     ==========   =============================================
-#     ``-``        None
-#     ``->``       head_length=0.4,head_width=0.2
-#     ``-[``       widthB=1.0,lengthB=0.2,angleB=None
-#     ``|-|``      widthA=1.0,widthB=1.0
-#     ``-|>``      head_length=0.4,head_width=0.2
-#     ``<-``       head_length=0.4,head_width=0.2
-#     ``<->``      head_length=0.4,head_width=0.2
-#     ``<|-``      head_length=0.4,head_width=0.2
-#     ``<|-|>``    head_length=0.4,head_width=0.2
-#     ``fancy``    head_length=0.4,head_width=0.4,tail_width=0.4
-#     ``simple``   head_length=0.5,head_width=0.5,tail_width=0.2
-#     ``wedge``    tail_width=0.3,shrink_factor=0.5
-#     ==========   =============================================
-#
-# .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_fancyarrow_demo_001.png
-#    :target: ../../gallery/text_labels_and_annotations/fancyarrow_demo.html
-#    :align: center
-#
-# Some arrowstyles only work with connection styles that generate a
-# quadratic-spline segment. They are ``fancy``, ``simple``, and ``wedge``.
-# For these arrow styles, you must use the "angle3" or "arc3" connection
-# style.
-#
-# If the annotation string is given, the patchA is set to the bbox patch
-# of the text by default.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple02_001.png
-#    :target: ../../gallery/userdemo/annotate_simple02.html
-#    :align: center
-#
-# As with `~.Axes.text`, a box around the text can be drawn using the *bbox*
-# argument.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple03_001.png
-#    :target: ../../gallery/userdemo/annotate_simple03.html
-#    :align: center
-#
-# By default, the starting point is set to the center of the text
-# extent.  This can be adjusted with ``relpos`` key value. The values
-# are normalized to the extent of the text. For example, (0, 0) means
-# lower-left corner and (1, 1) means top-right.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple04_001.png
-#    :target: ../../gallery/userdemo/annotate_simple04.html
-#    :align: center
-#
-# Placing Artist at anchored Axes locations
-# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# There are classes of artists that can be placed at an anchored
-# location in the Axes.  A common example is the legend.  This type
-# of artist can be created by using the `.OffsetBox` class. A few
-# predefined classes are available in :mod:`matplotlib.offsetbox` and in
-# :mod:`mpl_toolkits.axes_grid1.anchored_artists`.
-
-from matplotlib.offsetbox import AnchoredText
-
-fig, ax = plt.subplots()
-at = AnchoredText(
-    "Figure 1a", prop=dict(size=15), frameon=True, loc='upper left')
-at.patch.set_boxstyle("round,pad=0.,rounding_size=0.2")
-ax.add_artist(at)
-
-###############################################################################
-# The *loc* keyword has same meaning as in the legend command.
-#
-# A simple application is when the size of the artist (or collection of
-# artists) is known in pixel size during the time of creation. For
-# example, If you want to draw a circle with fixed size of 20 pixel x 20
-# pixel (radius = 10 pixel), you can utilize
-# ``AnchoredDrawingArea``. The instance is created with a size of the
-# drawing area (in pixels), and arbitrary artists can added to the
-# drawing area. Note that the extents of the artists that are added to
-# the drawing area are not related to the placement of the drawing
-# area itself. Only the initial size matters.
-#
-# The artists that are added to the drawing area should not have a
-# transform set (it will be overridden) and the dimensions of those
-# artists are interpreted as a pixel coordinate, i.e., the radius of the
-# circles in above example are 10 pixels and 5 pixels, respectively.
-
-from matplotlib.patches import Circle
-from mpl_toolkits.axes_grid1.anchored_artists import AnchoredDrawingArea
-
-fig, ax = plt.subplots()
-ada = AnchoredDrawingArea(40, 20, 0, 0,
-                          loc='upper right', pad=0., frameon=False)
-p1 = Circle((10, 10), 10)
-ada.drawing_area.add_artist(p1)
-p2 = Circle((30, 10), 5, fc="r")
-ada.drawing_area.add_artist(p2)
-ax.add_artist(ada)
-
-###############################################################################
-# Sometimes, you want your artists to scale with the data coordinate (or
-# coordinates other than canvas pixels). You can use
-# ``AnchoredAuxTransformBox`` class. This is similar to
-# ``AnchoredDrawingArea`` except that the extent of the artist is
-# determined during the drawing time respecting the specified transform.
-#
-# The ellipse in the example below will have width and height
-# corresponding to 0.1 and 0.4 in data coordinates and will be
-# automatically scaled when the view limits of the axes change.
-
-from matplotlib.patches import Ellipse
-from mpl_toolkits.axes_grid1.anchored_artists import AnchoredAuxTransformBox
-
-fig, ax = plt.subplots()
-box = AnchoredAuxTransformBox(ax.transData, loc='upper left')
-el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)  # in data coordinates!
-box.drawing_area.add_artist(el)
-ax.add_artist(box)
-
-###############################################################################
-# As in the legend, the bbox_to_anchor argument can be set.  Using the
-# HPacker and VPacker, you can have an arrangement(?) of artist as in the
-# legend (as a matter of fact, this is how the legend is created).
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box04_001.png
-#    :target: ../../gallery/userdemo/anchored_box04.html
-#    :align: center
-#
-# Note that unlike the legend, the ``bbox_transform`` is set
-# to IdentityTransform by default.
-#
-# Coordinate systems for Annotations
-# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# The Annotation in matplotlib supports several types of coordinates as
-# described in :ref:`annotations-tutorial`. For an advanced user who wants
-# more control, it supports a few other options.
-#
-# 1. A `.Transform` instance.  For example, ::
-#
-#      ax.annotate("Test", xy=(0.5, 0.5), xycoords=ax.transAxes)
-#
-#    is identical to ::
-#
-#      ax.annotate("Test", xy=(0.5, 0.5), xycoords="axes fraction")
-#
-#    This allows annotating a point in another axes::
-#
-#      fig, (ax1, ax2) = plt.subplots(1, 2)
-#      ax2.annotate("Test", xy=(0.5, 0.5), xycoords=ax1.transData,
-#                   xytext=(0.5, 0.5), textcoords=ax2.transData,
-#                   arrowprops=dict(arrowstyle="->"))
-#
-# 2. An `.Artist` instance. The *xy* value (or *xytext*) is interpreted as a
-#    fractional coordinate of the bbox (return value of *get_window_extent*) of
-#    the artist::
-#
-#      an1 = ax.annotate("Test 1", xy=(0.5, 0.5), xycoords="data",
-#                        va="center", ha="center",
-#                        bbox=dict(boxstyle="round", fc="w"))
-#      an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,  # (1, 0.5) of the an1's bbox
-#                        xytext=(30, 0), textcoords="offset points",
-#                        va="center", ha="left",
-#                        bbox=dict(boxstyle="round", fc="w"),
-#                        arrowprops=dict(arrowstyle="->"))
-#
-#    .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord01_001.png
-#       :target: ../../gallery/userdemo/annotate_simple_coord01.html
-#       :align: center
-#
-#    Note that you must ensure that the extent of the coordinate artist (*an1* in
-#    above example) is determined before *an2* gets drawn. Usually, this means
-#    that *an2* needs to be drawn after *an1*.
-#
-# 3. A callable object that takes the renderer instance as single argument, and
-#    returns either a `.Transform` or a `.BboxBase`.  The return value is then
-#    handled as in (1), for transforms, or in (2), for bboxes.  For example, ::
-#
-#      an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,
-#                        xytext=(30, 0), textcoords="offset points")
-#
-#    is identical to::
-#
-#      an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1.get_window_extent,
-#                        xytext=(30, 0), textcoords="offset points")
-#
-# 4. A pair of coordinate specifications -- the first for the x-coordinate, and
-#    the second is for the y-coordinate; e.g. ::
-#
-#      annotate("Test", xy=(0.5, 1), xycoords=("data", "axes fraction"))
-#
-#    Here, 0.5 is in data coordinates, and 1 is in normalized axes coordinates.
-#    Each of the coordinate specifications can also be an artist or a transform.
-#    For example,
-#
-#    .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord02_001.png
-#       :target: ../../gallery/userdemo/annotate_simple_coord02.html
-#       :align: center
-#
-# 5. Sometimes, you want your annotation with some "offset points", not from the
-#    annotated point but from some other point.  `.text.OffsetFrom` is a helper
-#    for such cases.
-#
-#    .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord03_001.png
-#       :target: ../../gallery/userdemo/annotate_simple_coord03.html
-#       :align: center
-#
-#    You may take a look at this example
-#    :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
-#
-# Using ConnectionPatch
-# ~~~~~~~~~~~~~~~~~~~~~
-#
-# ConnectionPatch is like an annotation without text. While `~.Axes.annotate`
-# is sufficient in most situations, ConnectionPatch is useful when you want to
-# connect points in different axes. ::
-#
-#   from matplotlib.patches import ConnectionPatch
-#   xy = (0.2, 0.2)
-#   con = ConnectionPatch(xyA=xy, coordsA=ax1.transData,
-#                         xyB=xy, coordsB=ax2.transData)
-#   fig.add_artist(con)
-#
-# The above code connects point *xy* in the data coordinates of ``ax1`` to
-# point *xy* in the data coordinates of ``ax2``. Here is a simple example.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_connect_simple01_001.png
-#    :target: ../../gallery/userdemo/connect_simple01.html
-#    :align: center
-#
-# Here, we added the ConnectionPatch to the *figure* (with `~.Figure.add_artist`)
-# rather than to either axes: this ensures that it is drawn on top of both axes,
-# and is also necessary if using :doc:`constrained_layout
-# </tutorials/intermediate/constrainedlayout_guide>` for positioning the axes.
-#
-# Advanced Topics
-# ---------------
-#
-# Zoom effect between Axes
-# ~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# ``mpl_toolkits.axes_grid1.inset_locator`` defines some patch classes useful for
-# interconnecting two axes. Understanding the code requires some knowledge of
-# Matplotlib's transform system.
-#
-# .. figure:: ../../gallery/subplots_axes_and_figures/images/sphx_glr_axes_zoom_effect_001.png
-#    :target: ../../gallery/subplots_axes_and_figures/axes_zoom_effect.html
-#    :align: center
-#
-# Define Custom BoxStyle
-# ~~~~~~~~~~~~~~~~~~~~~~
-#
-# You can use a custom box style. The value for the ``boxstyle`` can be a
-# callable object in the following forms.::
-#
-#         def __call__(self, x0, y0, width, height, mutation_size,
-#                      aspect_ratio=1.):
-#             '''
-#             Given the location and size of the box, return the path of
-#             the box around it.
-#
-#               - *x0*, *y0*, *width*, *height* : location and size of the box
-#               - *mutation_size* : a reference scale for the mutation.
-#               - *aspect_ratio* : aspect-ratio for the mutation.
-#             '''
-#             path = ...
-#             return path
-#
-# Here is a complete example.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_custom_boxstyle01_001.png
-#    :target: ../../gallery/userdemo/custom_boxstyle01.html
-#    :align: center
-#
-# Similarly, you can define a custom ConnectionStyle and a custom ArrowStyle.
-# See the source code of ``lib/matplotlib/patches.py`` and check
-# how each style class is defined.
+.. _annotations-tutorial:
+
+Basic annotation
+----------------
+
+The uses of the basic :func:`~matplotlib.pyplot.text` will place text
+at an arbitrary position on the Axes.  A common use case of text is to
+annotate some feature of the plot, and the
+:func:`~matplotlib.axes.Axes.annotate` method provides helper functionality
+to make annotations easy.  In an annotation, there are two points to
+consider: the location being annotated represented by the argument
+*xy* and the location of the text *xytext*.  Both of these
+arguments are ``(x, y)`` tuples.
+
+.. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_basic_001.png
+   :target: ../../gallery/pyplots/annotation_basic.html
+   :align: center
+   :scale: 50
+
+   Annotation Basic
+
+In this example, both the *xy* (arrow tip) and *xytext* locations
+(text location) are in data coordinates.  There are a variety of other
+coordinate systems one can choose -- you can specify the coordinate
+system of *xy* and *xytext* with one of the following strings for
+*xycoords* and *textcoords* (default is 'data')
+
+==================  ========================================================
+argument            coordinate system
+==================  ========================================================
+'figure points'     points from the lower left corner of the figure
+'figure pixels'     pixels from the lower left corner of the figure
+'figure fraction'   (0, 0) is lower left of figure and (1, 1) is upper right
+'axes points'       points from lower left corner of axes
+'axes pixels'       pixels from lower left corner of axes
+'axes fraction'     (0, 0) is lower left of axes and (1, 1) is upper right
+'data'              use the axes data coordinate system
+==================  ========================================================
+
+For example to place the text coordinates in fractional axes
+coordinates, one could do::
+
+    ax.annotate('local max', xy=(3, 1),  xycoords='data',
+                xytext=(0.8, 0.95), textcoords='axes fraction',
+                arrowprops=dict(facecolor='black', shrink=0.05),
+                horizontalalignment='right', verticalalignment='top',
+                )
+
+For physical coordinate systems (points or pixels) the origin is the
+bottom-left of the figure or axes.
+
+Optionally, you can enable drawing of an arrow from the text to the annotated
+point by giving a dictionary of arrow properties in the optional keyword
+argument *arrowprops*.
+
+
+==================== =====================================================
+*arrowprops* key     description
+==================== =====================================================
+width                the width of the arrow in points
+frac                 the fraction of the arrow length occupied by the head
+headwidth            the width of the base of the arrow head in points
+shrink               move the tip and base some percent away from
+                     the annotated point and text
+
+\*\*kwargs           any key for :class:`matplotlib.patches.Polygon`,
+                     e.g., ``facecolor``
+==================== =====================================================
+
+
+In the example below, the *xy* point is in native coordinates
+(*xycoords* defaults to 'data').  For a polar axes, this is in
+(theta, radius) space.  The text in this example is placed in the
+fractional figure coordinate system. :class:`matplotlib.text.Text`
+keyword arguments like *horizontalalignment*, *verticalalignment* and
+*fontsize* are passed from `~matplotlib.axes.Axes.annotate` to the
+``Text`` instance.
+
+.. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_polar_001.png
+   :target: ../../gallery/pyplots/annotation_polar.html
+   :align: center
+   :scale: 50
+
+   Annotation Polar
+
+For more on all the wild and wonderful things you can do with
+annotations, including fancy arrows, see :ref:`plotting-guide-annotation`
+and :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
+
+
+Do not proceed unless you have already read :ref:`annotations-tutorial`,
+:func:`~matplotlib.pyplot.text` and :func:`~matplotlib.pyplot.annotate`!
+
+
+.. _plotting-guide-annotation:
+
+Advanced Annotations
+--------------------
+
+Annotating with Text with Box
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Let's start with a simple example.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_text_arrow_001.png
+   :target: ../../gallery/userdemo/annotate_text_arrow.html
+   :align: center
+   :scale: 50
+
+   Annotate Text Arrow
+
+`~.Axes.text` takes a *bbox* keyword argument, which draws a box around the
+text::
+
+    t = ax.text(
+        0, 0, "Direction", ha="center", va="center", rotation=45, size=15,
+        bbox=dict(boxstyle="rarrow,pad=0.3", fc="cyan", ec="b", lw=2))
+
+The patch object associated with the text can be accessed by::
+
+    bb = t.get_bbox_patch()
+
+The return value is a `.FancyBboxPatch`; patch properties
+(facecolor, edgewidth, etc.) can be accessed and modified as usual.
+`.FancyBboxPatch.set_boxstyle` sets the box shape::
+
+  bb.set_boxstyle("rarrow", pad=0.6)
+
+The arguments are the name of the box style with its attributes as
+keyword arguments. Currently, following box styles are implemented.
+
+  ==========   ==============   ==========================
+  Class        Name             Attrs
+  ==========   ==============   ==========================
+  Circle       ``circle``       pad=0.3
+  DArrow       ``darrow``       pad=0.3
+  LArrow       ``larrow``       pad=0.3
+  RArrow       ``rarrow``       pad=0.3
+  Round        ``round``        pad=0.3,rounding_size=None
+  Round4       ``round4``       pad=0.3,rounding_size=None
+  Roundtooth   ``roundtooth``   pad=0.3,tooth_size=None
+  Sawtooth     ``sawtooth``     pad=0.3,tooth_size=None
+  Square       ``square``       pad=0.3
+  ==========   ==============   ==========================
+
+.. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_fancybox_demo_001.png
+   :target: ../../gallery/shapes_and_collections/fancybox_demo.html
+   :align: center
+   :scale: 50
+
+   Fancybox Demo
+
+Note that the attribute arguments can be specified within the style
+name with separating comma (this form can be used as "boxstyle" value
+of bbox argument when initializing the text instance) ::
+
+   bb.set_boxstyle("rarrow,pad=0.6")
+
+Annotating with Arrow
+~~~~~~~~~~~~~~~~~~~~~
+
+`~.Axes.annotate` draws an arrow connecting two points in an axes::
+
+    ax.annotate("Annotation",
+                xy=(x1, y1), xycoords='data',
+                xytext=(x2, y2), textcoords='offset points',
+                )
+
+This annotates a point at *xy* in the given coordinate (*xycoords*)
+with the text at *xytext* given in *textcoords*. Often, the
+annotated point is specified in the *data* coordinate and the annotating
+text in *offset points*.
+See `~.Axes.annotate` for available coordinate systems.
+
+An arrow connecting *xy* to *xytext* can be optionally drawn by
+specifying the *arrowprops* argument. To draw only an arrow, use
+empty string as the first argument. ::
+
+    ax.annotate("",
+                xy=(0.2, 0.2), xycoords='data',
+                xytext=(0.8, 0.8), textcoords='data',
+                arrowprops=dict(arrowstyle="->",
+                                connectionstyle="arc3"),
+                )
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple01_001.png
+   :target: ../../gallery/userdemo/annotate_simple01.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple01
+
+The arrow is drawn as follows:
+
+1. A path connecting the two points is created, as specified by the
+   *connectionstyle* parameter.
+2. The path is clipped to avoid patches *patchA* and *patchB*, if these are
+   set.
+3. The path is further shrunk by *shrinkA* and *shrinkB* (in pixels).
+4. The path is transmuted to an arrow patch, as specified by the *arrowstyle*
+   parameter.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_explain_001.png
+   :target: ../../gallery/userdemo/annotate_explain.html
+   :align: center
+   :scale: 50
+
+   Annotate Explain
+
+
+The creation of the connecting path between two points is controlled by
+``connectionstyle`` key and the following styles are available.
+
+   ==========   =============================================
+   Name         Attrs
+   ==========   =============================================
+   ``angle``    angleA=90,angleB=0,rad=0.0
+   ``angle3``   angleA=90,angleB=0
+   ``arc``      angleA=0,angleB=0,armA=None,armB=None,rad=0.0
+   ``arc3``     rad=0.0
+   ``bar``      armA=0.0,armB=0.0,fraction=0.3,angle=None
+   ==========   =============================================
+
+Note that "3" in ``angle3`` and ``arc3`` is meant to indicate that the
+resulting path is a quadratic spline segment (three control
+points). As will be discussed below, some arrow style options can only
+be used when the connecting path is a quadratic spline.
+
+The behavior of each connection style is (limitedly) demonstrated in the
+example below. (Warning: The behavior of the ``bar`` style is currently not
+well defined, it may be changed in the future).
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_connectionstyle_demo_001.png
+   :target: ../../gallery/userdemo/connectionstyle_demo.html
+   :align: center
+   :scale: 50
+
+   Connectionstyle Demo
+
+
+The connecting path (after clipping and shrinking) is then mutated to
+an arrow patch, according to the given ``arrowstyle``.
+
+    ==========   =============================================
+    Name         Attrs
+    ==========   =============================================
+    ``-``        None
+    ``->``       head_length=0.4,head_width=0.2
+    ``-[``       widthB=1.0,lengthB=0.2,angleB=None
+    ``|-|``      widthA=1.0,widthB=1.0
+    ``-|>``      head_length=0.4,head_width=0.2
+    ``<-``       head_length=0.4,head_width=0.2
+    ``<->``      head_length=0.4,head_width=0.2
+    ``<|-``      head_length=0.4,head_width=0.2
+    ``<|-|>``    head_length=0.4,head_width=0.2
+    ``fancy``    head_length=0.4,head_width=0.4,tail_width=0.4
+    ``simple``   head_length=0.5,head_width=0.5,tail_width=0.2
+    ``wedge``    tail_width=0.3,shrink_factor=0.5
+    ==========   =============================================
+
+.. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_fancyarrow_demo_001.png
+   :target: ../../gallery/text_labels_and_annotations/fancyarrow_demo.html
+   :align: center
+   :scale: 50
+
+   Fancyarrow Demo
+
+Some arrowstyles only work with connection styles that generate a
+quadratic-spline segment. They are ``fancy``, ``simple``, and ``wedge``.
+For these arrow styles, you must use the "angle3" or "arc3" connection
+style.
+
+If the annotation string is given, the patchA is set to the bbox patch
+of the text by default.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple02_001.png
+   :target: ../../gallery/userdemo/annotate_simple02.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple02
+
+As with `~.Axes.text`, a box around the text can be drawn using the *bbox*
+argument.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple03_001.png
+   :target: ../../gallery/userdemo/annotate_simple03.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple03
+
+By default, the starting point is set to the center of the text
+extent.  This can be adjusted with ``relpos`` key value. The values
+are normalized to the extent of the text. For example, (0, 0) means
+lower-left corner and (1, 1) means top-right.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple04_001.png
+   :target: ../../gallery/userdemo/annotate_simple04.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple04
+
+
+Placing Artist at the anchored location of the Axes
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+There are classes of artists that can be placed at an anchored
+location in the Axes.  A common example is the legend.  This type
+of artist can be created by using the `.OffsetBox` class. A few
+predefined classes are available in :mod:`matplotlib.offsetbox` and in
+:mod:`mpl_toolkits.axes_grid1.anchored_artists`. ::
+
+    from matplotlib.offsetbox import AnchoredText
+    at = AnchoredText("Figure 1a",
+                      prop=dict(size=15), frameon=True,
+                      loc='upper left',
+                      )
+    at.patch.set_boxstyle("round,pad=0.,rounding_size=0.2")
+    ax.add_artist(at)
+
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box01_001.png
+   :target: ../../gallery/userdemo/anchored_box01.html
+   :align: center
+   :scale: 50
+
+   Anchored Box01
+
+
+The *loc* keyword has same meaning as in the legend command.
+
+A simple application is when the size of the artist (or collection of
+artists) is known in pixel size during the time of creation. For
+example, If you want to draw a circle with fixed size of 20 pixel x 20
+pixel (radius = 10 pixel), you can utilize
+``AnchoredDrawingArea``. The instance is created with a size of the
+drawing area (in pixels), and arbitrary artists can added to the
+drawing area. Note that the extents of the artists that are added to
+the drawing area are not related to the placement of the drawing
+area itself. Only the initial size matters. ::
+
+    from mpl_toolkits.axes_grid1.anchored_artists import AnchoredDrawingArea
+
+    ada = AnchoredDrawingArea(20, 20, 0, 0,
+                              loc='upper right', pad=0., frameon=False)
+    p1 = Circle((10, 10), 10)
+    ada.drawing_area.add_artist(p1)
+    p2 = Circle((30, 10), 5, fc="r")
+    ada.drawing_area.add_artist(p2)
+
+The artists that are added to the drawing area should not have a
+transform set (it will be overridden) and the dimensions of those
+artists are interpreted as a pixel coordinate, i.e., the radius of the
+circles in above example are 10 pixels and 5 pixels, respectively.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box02_001.png
+   :target: ../../gallery/userdemo/anchored_box02.html
+   :align: center
+   :scale: 50
+
+   Anchored Box02
+
+Sometimes, you want your artists to scale with the data coordinate (or
+coordinates other than canvas pixels). You can use
+``AnchoredAuxTransformBox`` class. This is similar to
+``AnchoredDrawingArea`` except that the extent of the artist is
+determined during the drawing time respecting the specified transform. ::
+
+  from mpl_toolkits.axes_grid1.anchored_artists import AnchoredAuxTransformBox
+
+  box = AnchoredAuxTransformBox(ax.transData, loc='upper left')
+  el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)  # in data coordinates!
+  box.drawing_area.add_artist(el)
+
+The ellipse in the above example will have width and height
+corresponding to 0.1 and 0.4 in data coordinates and will be
+automatically scaled when the view limits of the axes change.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box03_001.png
+   :target: ../../gallery/userdemo/anchored_box03.html
+   :align: center
+   :scale: 50
+
+   Anchored Box03
+
+As in the legend, the bbox_to_anchor argument can be set.  Using the
+HPacker and VPacker, you can have an arrangement(?) of artist as in the
+legend (as a matter of fact, this is how the legend is created).
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box04_001.png
+   :target: ../../gallery/userdemo/anchored_box04.html
+   :align: center
+   :scale: 50
+
+   Anchored Box04
+
+Note that unlike the legend, the ``bbox_transform`` is set
+to IdentityTransform by default.
+
+Using Complex Coordinates with Annotations
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The Annotation in matplotlib supports several types of coordinates as
+described in :ref:`annotations-tutorial`. For an advanced user who wants
+more control, it supports a few other options.
+
+1. A `.Transform` instance.  For example, ::
+
+     ax.annotate("Test", xy=(0.5, 0.5), xycoords=ax.transAxes)
+
+   is identical to ::
+
+     ax.annotate("Test", xy=(0.5, 0.5), xycoords="axes fraction")
+
+   This allows annotating a point in another axes::
+
+     fig, (ax1, ax2) = plt.subplots(1, 2)
+     ax2.annotate("Test", xy=(0.5, 0.5), xycoords=ax1.transData,
+                  xytext=(0.5, 0.5), textcoords=ax2.transData,
+                  arrowprops=dict(arrowstyle="->"))
+
+2. An `.Artist` instance. The *xy* value (or *xytext*) is interpreted as a
+   fractional coordinate of the bbox (return value of *get_window_extent*) of
+   the artist::
+
+     an1 = ax.annotate("Test 1", xy=(0.5, 0.5), xycoords="data",
+                       va="center", ha="center",
+                       bbox=dict(boxstyle="round", fc="w"))
+     an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,  # (1, 0.5) of the an1's bbox
+                       xytext=(30, 0), textcoords="offset points",
+                       va="center", ha="left",
+                       bbox=dict(boxstyle="round", fc="w"),
+                       arrowprops=dict(arrowstyle="->"))
+
+   .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord01_001.png
+      :target: ../../gallery/userdemo/annotate_simple_coord01.html
+      :align: center
+      :scale: 50
+
+      Annotation with Simple Coordinates
+
+   Note that you must ensure that the extent of the coordinate artist (*an1* in
+   above example) is determined before *an2* gets drawn. Usually, this means
+   that *an2* needs to be drawn after *an1*.
+
+3. A callable object that takes the renderer instance as single argument, and
+   returns either a `.Transform` or a `.BboxBase`.  The return value is then
+   handled as in (1), for transforms, or in (2), for bboxes.  For example, ::
+
+     an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,
+                       xytext=(30, 0), textcoords="offset points")
+
+   is identical to::
+
+     an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1.get_window_extent,
+                       xytext=(30, 0), textcoords="offset points")
+
+4. A pair of coordinate specifications -- the first for the x-coordinate, and
+   the second is for the y-coordinate; e.g. ::
+
+     annotate("Test", xy=(0.5, 1), xycoords=("data", "axes fraction"))
+
+   Here, 0.5 is in data coordinates, and 1 is in normalized axes coordinates.
+   Each of the coordinate specifications can also be an artist or a transform.
+   For example,
+
+   .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord02_001.png
+      :target: ../../gallery/userdemo/annotate_simple_coord02.html
+      :align: center
+      :scale: 50
+
+      Annotation with Simple Coordinates 2
+
+5. Sometimes, you want your annotation with some "offset points", not from the
+   annotated point but from some other point.  `.text.OffsetFrom` is a helper
+   for such cases.
+
+   .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord03_001.png
+      :target: ../../gallery/userdemo/annotate_simple_coord03.html
+      :align: center
+      :scale: 50
+
+      Annotation with Simple Coordinates 3
+
+   You may take a look at this example
+   :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
+
+Using ConnectionPatch
+~~~~~~~~~~~~~~~~~~~~~
+
+ConnectionPatch is like an annotation without text. While `~.Axes.annotate`
+is sufficient in most situations, ConnectionPatch is useful when you want to
+connect points in different axes. ::
+
+  from matplotlib.patches import ConnectionPatch
+  xy = (0.2, 0.2)
+  con = ConnectionPatch(xyA=xy, coordsA=ax1.transData,
+                        xyB=xy, coordsB=ax2.transData)
+  fig.add_artist(con)
+
+The above code connects point *xy* in the data coordinates of ``ax1`` to
+point *xy* in the data coordinates of ``ax2``. Here is a simple example.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_connect_simple01_001.png
+   :target: ../../gallery/userdemo/connect_simple01.html
+   :align: center
+   :scale: 50
+
+   Connect Simple01
+
+Here, we added the ConnectionPatch to the *figure* (with `~.Figure.add_artist`)
+rather than to either axes: this ensures that it is drawn on top of both axes,
+and is also necessary if using :doc:`constrained_layout
+</tutorials/intermediate/constrainedlayout_guide>` for positioning the axes.
+
+Advanced Topics
+---------------
+
+Zoom effect between Axes
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+``mpl_toolkits.axes_grid1.inset_locator`` defines some patch classes useful for
+interconnecting two axes. Understanding the code requires some knowledge of
+Matplotlib's transform system.
+
+.. figure:: ../../gallery/subplots_axes_and_figures/images/sphx_glr_axes_zoom_effect_001.png
+   :target: ../../gallery/subplots_axes_and_figures/axes_zoom_effect.html
+   :align: center
+   :scale: 50
+
+   Axes Zoom Effect
+
+Define Custom BoxStyle
+~~~~~~~~~~~~~~~~~~~~~~
+
+You can use a custom box style. The value for the ``boxstyle`` can be a
+callable object in the following forms.::
+
+        def __call__(self, x0, y0, width, height, mutation_size,
+                     aspect_ratio=1.):
+            '''
+            Given the location and size of the box, return the path of
+            the box around it.
+
+              - *x0*, *y0*, *width*, *height* : location and size of the box
+              - *mutation_size* : a reference scale for the mutation.
+              - *aspect_ratio* : aspect-ratio for the mutation.
+            '''
+            path = ...
+            return path
+
+Here is a complete example.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_custom_boxstyle01_001.png
+   :target: ../../gallery/userdemo/custom_boxstyle01.html
+   :align: center
+   :scale: 50
+
+   Custom Boxstyle01
+
+Similarly, you can define a custom ConnectionStyle and a custom ArrowStyle.
+See the source code of ``lib/matplotlib/patches.py`` and check
+how each style class is defined.
+"""
diff --git a/tutorials/text/mathtext.py b/tutorials/text/mathtext.py
index 9e9abfc523..3663d27f5f 100644
--- a/tutorials/text/mathtext.py
+++ b/tutorials/text/mathtext.py
@@ -1,14 +1,15 @@
 r"""
 Writing mathematical expressions
 ================================
+An introduction to writing mathematical expressions in Matplotlib.

-You can use a subset of TeX markup in any Matplotlib text string by placing it
+You can use a subset TeX markup in any matplotlib text string by placing it
 inside a pair of dollar signs ($).

 Note that you do not need to have TeX installed, since Matplotlib ships
 its own TeX expression parser, layout engine, and fonts.  The layout engine
 is a fairly direct adaptation of the layout algorithms in Donald Knuth's
-TeX, so the quality is quite good (Matplotlib also provides a ``usetex``
+TeX, so the quality is quite good (matplotlib also provides a ``usetex``
 option for those who do want to call out to TeX to generate their text (see
 :doc:`/tutorials/text/usetex`).

@@ -111,7 +112,7 @@ small::

     r'$(\frac{5 - \frac{1}{x}}{4})$'

-.. math::
+.. math ::

     (\frac{5 - \frac{1}{x}}{4})

@@ -120,7 +121,7 @@ the parser that those brackets encompass the entire object.::

     r'$\left(\frac{5 - \frac{1}{x}}{4}\right)$'

-.. math::
+.. math ::

     \left(\frac{5 - \frac{1}{x}}{4}\right)

@@ -130,7 +131,7 @@ Radicals can be produced with the ``\sqrt[]{}`` command.  For example::

     r'$\sqrt{2}$'

-.. math::
+.. math ::

     \sqrt{2}

@@ -140,7 +141,7 @@ fractions or sub/superscripts::

     r'$\sqrt[3]{x}$'

-.. math::
+.. math ::

     \sqrt[3]{x}

@@ -308,10 +309,8 @@ long and short forms for some of them.
     ``\acute a`` or ``\'a``        :mathmpl:`\acute a`
     ``\bar a``                     :mathmpl:`\bar a`
     ``\breve a``                   :mathmpl:`\breve a`
-    ``\dot a`` or ``\.a``          :mathmpl:`\dot a`
     ``\ddot a`` or ``\''a``        :mathmpl:`\ddot a`
-    ``\dddot a``                   :mathmpl:`\dddot a`
-    ``\ddddot a``                  :mathmpl:`\ddddot a`
+    ``\dot a`` or ``\.a``          :mathmpl:`\dot a`
     ``\grave a`` or ``\`a``        :mathmpl:`\grave a`
     ``\hat a`` or ``\^a``          :mathmpl:`\hat a`
     ``\tilde a`` or ``\~a``        :mathmpl:`\tilde a`
@@ -357,4 +356,7 @@ Here is an example illustrating many of these features in context.
 .. figure:: ../../gallery/pyplots/images/sphx_glr_pyplot_mathtext_001.png
    :target: ../../gallery/pyplots/pyplot_mathtext.html
    :align: center
+   :scale: 50
+
+   Pyplot Mathtext
 """
diff --git a/tutorials/text/pgf.py b/tutorials/text/pgf.py
index caedf394f3..43e7a96289 100644
--- a/tutorials/text/pgf.py
+++ b/tutorials/text/pgf.py
@@ -1,6 +1,6 @@
 r"""
 *********************************
-Typesetting with XeLaTeX/LuaLaTeX
+Typesetting With XeLaTeX/LuaLaTeX
 *********************************

 How to typeset text with the ``pgf`` backend in Matplotlib.
@@ -150,6 +150,11 @@ Troubleshooting
   executables. See :ref:`environment-variables` and
   :ref:`setting-windows-environment-variables` for details.

+* A limitation on Windows causes the backend to keep file handles that have
+  been opened by your application open. As a result, it may not be possible
+  to delete the corresponding files until the application closes (see
+  `#1324 <https://github.com/matplotlib/matplotlib/issues/1324>`_).
+
 * Sometimes the font rendering in figures that are saved to png images is
   very bad. This happens when the pdftocairo tool is not available and
   ghostscript is used for the pdf to png conversion.
@@ -170,7 +175,7 @@ Troubleshooting
   alternatively make the fonts available to your OS. See this
   `tex.stackexchange.com question`__ for more details.

-  __ https://tex.stackexchange.com/q/43642/
+  __ http://tex.stackexchange.com/questions/43642

 * If the font configuration used by Matplotlib differs from the font setting
   in yout LaTeX document, the alignment of text elements in imported figures
@@ -182,17 +187,11 @@ Troubleshooting
   big scatter graphs.  In an extreme case this can cause TeX to run out of
   memory: "TeX capacity exceeded, sorry"  You can configure latex to increase
   the amount of memory available to generate the ``.pdf`` image as discussed on
-  `tex.stackexchange.com <https://tex.stackexchange.com/q/7953/>`_.
+  `tex.stackexchange.com <http://tex.stackexchange.com/questions/7953>`_.
   Another way would be to "rasterize" parts of the graph causing problems
   using either the ``rasterized=True`` keyword, or ``.set_rasterized(True)`` as
   per :doc:`this example </gallery/misc/rasterization_demo>`.

-* Various math fonts are compiled and rendered only if corresponding font
-  packages are loaded. Specifically, when using ``\mathbf{}`` on Greek letters,
-  the default computer modern font may not contain them, in which case the
-  letter is not rendered. In such scenarios, the ``lmodern`` package should be
-  loaded.
-
 * If you still need help, please see :ref:`reporting-problems`

 .. _LaTeX: http://www.tug.org
diff --git a/tutorials/text/text_intro.py b/tutorials/text/text_intro.py
index 1f2a7a1a28..10432971e1 100644
--- a/tutorials/text/text_intro.py
+++ b/tutorials/text/text_intro.py
@@ -153,7 +153,7 @@ plt.show()
 # *position*, via which we can manually specify the label positions.  Here we
 # put the xlabel to the far left of the axis.  Note, that the y-coordinate of
 # this position has no effect - to adjust the y-position we need to use the
-# *labelpad* keyword argument.
+# *labelpad* kwarg.

 fig, ax = plt.subplots(figsize=(5, 3))
 fig.subplots_adjust(bottom=0.15, left=0.2)
@@ -165,8 +165,8 @@ plt.show()

 ##############################################################################
 # All the labelling in this tutorial can be changed by manipulating the
-# `matplotlib.font_manager.FontProperties` method, or by named keyword
-# arguments to `~matplotlib.axes.Axes.set_xlabel`
+# `matplotlib.font_manager.FontProperties` method, or by named kwargs to
+# `~matplotlib.axes.Axes.set_xlabel`

 from matplotlib.font_manager import FontProperties

diff --git a/tutorials/text/text_props.py b/tutorials/text/text_props.py
index fba757979c..95dd8b54fc 100644
--- a/tutorials/text/text_props.py
+++ b/tutorials/text/text_props.py
@@ -149,9 +149,9 @@ plt.show()
 # +---------------------+----------------------------------------------------+
 # | rcParam             | usage                                              |
 # +=====================+====================================================+
-# | ``'font.family'``   | List of font families (installed on user's machine)|
-# |                     | and/or ``{'cursive', 'fantasy', 'monospace',       |
-# |                     | 'sans', 'sans serif', 'sans-serif', 'serif'}``.    |
+# | ``'font.family'``   | List of either names of font or ``{'cursive',      |
+# |                     | 'fantasy', 'monospace', 'sans', 'sans serif',      |
+# |                     | 'sans-serif', 'serif'}``.                          |
 # |                     |                                                    |
 # +---------------------+----------------------------------------------------+
 # |  ``'font.style'``   | The default style, ex ``'normal'``,                |
@@ -174,18 +174,13 @@ plt.show()
 # |                     | this size.                                         |
 # +---------------------+----------------------------------------------------+
 #
-# Matplotlib can use font families installed on the user's computer, i.e.
-# Helvetica, Times, etc. Font families can also be specified with
-# generic-family aliases like (``{'cursive', 'fantasy', 'monospace',
-# 'sans', 'sans serif', 'sans-serif', 'serif'}``).
-#
-# The mapping between the generic family aliases and actual font families
-# (mentioned at :doc:`default rcParams </tutorials/introductory/customizing>`)
+# The mapping between the family aliases (``{'cursive', 'fantasy',
+# 'monospace', 'sans', 'sans serif', 'sans-serif', 'serif'}``) and actual font names
 # is controlled by the following rcParams:
 #
 #
 # +------------------------------------------+--------------------------------+
-# | CSS-based generic-family alias           | rcParam with mappings          |
+# | family alias                             | rcParam with mappings          |
 # +==========================================+================================+
 # | ``'serif'``                              | ``'font.serif'``               |
 # +------------------------------------------+--------------------------------+
@@ -199,15 +194,7 @@ plt.show()
 # +------------------------------------------+--------------------------------+
 #
 #
-# If any of generic family names appear in ``'font.family'``, we replace that entry
-# by all the entries in the corresponding rcParam mapping.
-# For example: ::
-#
-#    matplotlib.rcParams['font.family'] = ['Family1', 'serif', 'Family2']
-#    matplotlib.rcParams['font.serif'] = ['SerifFamily1', 'SerifFamily2']
-#
-#    # This is effectively translated to:
-#    matplotlib.rcParams['font.family'] = ['Family1', 'SerifFamily1', 'SerifFamily2', 'Family2']
+# which are lists of font names.
 #
 # Text with non-latin glyphs
 # ==========================
@@ -217,29 +204,17 @@ plt.show()
 # Korean, or Japanese.
 #
 # To set the default font to be one that supports the code points you
-# need, prepend the font name to ``'font.family'`` (recommended), or to the
-# desired alias lists. ::
-#
-#    # first method
-#    matplotlib.rcParams['font.family'] = ['Source Han Sans TW', 'sans-serif']
-#
-#    # second method
-#    matplotlib.rcParams['font.family'] = ['sans-serif']
-#    matplotlib.rcParams['sans-serif'] = ['Source Han Sans TW', ...]
-#
-# The generic family alias lists contain fonts that are either shipped
-# alongside Matplotlib (so they have 100% chance of being found), or fonts
-# which have a very high probability of being present in most systems.
+# need, prepend the font name to ``'font.family'`` or the desired alias
+# lists ::
 #
-# A good practice when setting custom font families is to append
-# a generic-family to the font-family list as a last resort.
+#    matplotlib.rcParams['font.sans-serif'] = ['Source Han Sans TW', 'sans-serif']
 #
-# You can also set it in your :file:`.matplotlibrc` file::
+# or set it in your :file:`.matplotlibrc` file::
 #
-#    font.family: Source Han Sans TW, Arial, sans-serif
+#    font.sans-serif: Source Han Sans TW, Arial, sans-serif
 #
-# To control the font used on per-artist basis use the *name*, *fontname* or
-# *fontproperties* keyword arguments documented :doc:`above
+# To control the font used on per-artist basis use the ``'name'``,
+# ``'fontname'`` or ``'fontproperties'`` kwargs documented :doc:`above
 # </tutorials/text/text_props>`.
 #
 #
diff --git a/tutorials/text/usetex.py b/tutorials/text/usetex.py
index 6082084149..3dc4e377a7 100644
--- a/tutorials/text/usetex.py
+++ b/tutorials/text/usetex.py
@@ -1,6 +1,6 @@
 r"""
 *************************
-Text rendering with LaTeX
+Text rendering With LaTeX
 *************************

 Matplotlib can use LaTeX to render text.  This is activated by setting
@@ -11,13 +11,10 @@ is more flexible, since different LaTeX packages (font packages, math packages,
 etc.) can be used. The results can be striking, especially when you take care
 to use the same fonts in your figures as in the main document.

-Matplotlib's LaTeX support requires a working LaTeX_ installation.  For
-the \*Agg backends, dvipng_ is additionally required; for the PS backend,
-PSfrag_, dvips_ and Ghostscript_ are additionally required.  For the PDF
-and SVG backends, if LuaTeX is present, it will be used to speed up some
-post-processing steps, but note that it is not used to parse the TeX string
-itself (only LaTeX is supported).  The executables for these external
-dependencies must all be located on your :envvar:`PATH`.
+Matplotlib's LaTeX support requires a working LaTeX_ installation.  For the
+\*Agg backends, dvipng_ is additionally required; for the PS backend, psfrag_,
+dvips_ and Ghostscript_ are additionally required.  The executables for these
+external dependencies must all be located on your :envvar:`PATH`.

 There are a couple of options to mention, which can be changed using
 :doc:`rc settings </tutorials/introductory/customizing>`. Here is an example
@@ -51,34 +48,14 @@ matplotlibrc use::
       "font.family": "serif",
       "font.serif": ["Palatino"],
   })
-  # It's also possible to use the reduced notation by directly setting font.family:
-  plt.rcParams.update({
-    "text.usetex": True,
-    "font.family": "Helvetica"
-  })
-
-Currently, the supported fonts are:
-
-================= ============================================================
-family            fonts
-================= ============================================================
-``'serif'``         ``'New Century Schoolbook'``, ``'Bookman'``, ``'Times'``,
-                    ``'Palatino'``, ``'Charter'``, ``'Computer Modern Roman'``
-
-``'sans-serif'``  ``'Helvetica'``, ``'Avant Garde'``, ``'Computer Modern
-                  Serif'``
-
-``'cursive'``     ``'Zapf Chancery'``
-
-``'monospace'``   ``'Courier'``, ``'Computer Modern Typewriter'``
-================= ============================================================

 Here is the standard example,
-:doc:`/gallery/text_labels_and_annotations/tex_demo`:
+:file:`/gallery/text_labels_and_annotations/tex_demo`:

 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png
    :target: ../../gallery/text_labels_and_annotations/tex_demo.html
    :align: center
+   :scale: 50

 Note that display math mode (``$$ e=mc^2 $$``) is not supported, but adding the
 command ``\displaystyle``, as in the above demo, will produce the same results.
@@ -125,13 +102,13 @@ Possible hangups

 * On Ubuntu and Gentoo, the base texlive install does not ship with
   the type1cm package. You may need to install some of the extra
-  packages to get all the goodies that come bundled with other LaTeX
+  packages to get all the goodies that come bundled with other latex
   distributions.

-* Some progress has been made so Matplotlib uses the dvi files
-  directly for text layout. This allows LaTeX to be used for text
+* Some progress has been made so matplotlib uses the dvi files
+  directly for text layout. This allows latex to be used for text
   layout with the pdf and svg backends, as well as the \*Agg and PS
-  backends. In the future, a LaTeX installation may be the only
+  backends. In the future, a latex installation may be the only
   external dependency.

 .. _usetex-troubleshooting:
@@ -154,7 +131,7 @@ Troubleshooting
   problems. Please disable this option before reporting problems to
   the mailing list.

-* If you still need help, please see :ref:`reporting-problems`.
+* If you still need help, please see :ref:`reporting-problems`

 .. _dvipng: http://www.nongnu.org/dvipng/
 .. _dvips: https://tug.org/texinfohtml/dvips.html
@@ -163,6 +140,6 @@ Troubleshooting
 .. _LaTeX: http://www.tug.org
 .. _Poppler: https://poppler.freedesktop.org/
 .. _PSNFSS: http://www.ctan.org/tex-archive/macros/latex/required/psnfss/psnfss2e.pdf
-.. _PSfrag: https://ctan.org/pkg/psfrag
+.. _psfrag: https://ctan.org/pkg/psfrag
 .. _Xpdf: http://www.xpdfreader.com/
 """
diff --git a/tutorials/toolkits/axes_grid.py b/tutorials/toolkits/axes_grid.py
index 97c09c22a6..e55555a4aa 100644
--- a/tutorials/toolkits/axes_grid.py
+++ b/tutorials/toolkits/axes_grid.py
@@ -1,24 +1,38 @@
 r"""
+==============================
+Overview of axes_grid1 toolkit
+==============================
+
+Controlling the layout of plots with the
+:mod:`mpl_toolkits.axes_grid1` toolkit.
+
 .. _axes_grid1_users-guide-index:

-==========================================
-Overview of :mod:`mpl_toolkits.axes_grid1`
-==========================================

-:mod:`.axes_grid1` provides the following features:
+What is axes_grid1 toolkit?
+===========================

-- Helper classes (ImageGrid_, RGBAxes_, AxesDivider_) to ease the layout of
-  axes displaying images with a fixed aspect ratio while satisfying additional
-  constraints (matching the heights of a colorbar and an image, or fixing the
-  padding between images);
-- ParasiteAxes_ (twinx/twiny-like features so that you can plot different data
-  (e.g., different y-scale) in a same Axes);
-- AnchoredArtists_ (custom artists which are placed at an anchored position,
-  similarly to legends).
+:mod:`mpl_toolkits.axes_grid1` is a collection of helper classes to ease
+displaying (multiple) images with matplotlib. In matplotlib, the axes location
+(and size) is specified in the normalized figure coordinates, which
+may not be ideal for displaying images that needs to have a given
+aspect ratio.  For example, it helps if you have a colorbar whose
+height always matches that of the image.  `ImageGrid`_, `RGB Axes`_ and
+`AxesDivider`_ are helper classes that deal with adjusting the
+location of (multiple) Axes.  They provides a framework to adjust the
+position of multiple axes at the drawing time. `ParasiteAxes`_
+provides twinx(or twiny)-like features so that you can plot different
+data (e.g., different y-scale) in a same Axes. `AnchoredArtists`_
+includes custom artists which are placed at some anchored position,
+like the legend.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_demo_axes_grid_001.png
    :target: ../../gallery/axes_grid1/demo_axes_grid.html
    :align: center
+   :scale: 50
+
+   Demo Axes Grid
+

 axes_grid1
 ==========
@@ -26,62 +40,87 @@ axes_grid1
 ImageGrid
 ---------

-In Matplotlib, axes location and size are usually specified in normalized
-figure coordinates (0 = bottom left, 1 = top right), which makes
-it difficult to achieve a fixed (absolute) padding between images.
-`~.axes_grid1.axes_grid.ImageGrid` can be used to achieve such a padding; see
-its docs for detailed API information.
+A grid of Axes.
+
+In Matplotlib, the axes location (and size) is specified in normalized
+figure coordinates. This may not be ideal for images that needs to be
+displayed with a given aspect ratio; for example, it is difficult to
+display multiple images of a same size with some fixed padding between
+them.  `~.axes_grid1.axes_grid.ImageGrid` can be used in such a case; see its
+docs for a detailed list of the parameters it accepts.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axesgrid_001.png
    :target: ../../gallery/axes_grid1/simple_axesgrid.html
    :align: center
+   :scale: 50
+
+   Simple Axesgrid

 * The position of each axes is determined at the drawing time (see
-  AxesDivider_), so that the size of the entire grid fits in the
+  `AxesDivider`_), so that the size of the entire grid fits in the
   given rectangle (like the aspect of axes). Note that in this example,
   the paddings between axes are fixed even if you changes the figure
   size.

-* Axes in the same column share their x-axis, and axes in the same row share
-  their y-axis (in the sense of `~.Axes.sharex`, `~.Axes.sharey`).
-  Additionally, Axes in the same column all have the same width, and axes in
-  the same row all have the same height.  These widths and heights are scaled
-  in proportion to the axes' view limits (xlim or ylim).
+* axes in the same column has a same axes width (in figure
+  coordinate), and similarly, axes in the same row has a same
+  height. The widths (height) of the axes in the same row (column) are
+  scaled according to their view limits (xlim or ylim).

   .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axesgrid2_001.png
      :target: ../../gallery/axes_grid1/simple_axesgrid2.html
      :align: center
+     :scale: 50
+
+     Simple Axes Grid
+
+* xaxis are shared among axes in a same column. Similarly, yaxis are
+  shared among axes in a same row. Therefore, changing axis properties
+  (view limits, tick location, etc. either by plot commands or using
+  your mouse in interactive backends) of one axes will affect all
+  other shared axes.

 The examples below show what you can do with ImageGrid.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_demo_axes_grid_001.png
    :target: ../../gallery/axes_grid1/demo_axes_grid.html
    :align: center
+   :scale: 50
+
+   Demo Axes Grid
+

 AxesDivider Class
 -----------------

-Behind the scenes, ImageGrid (and RGBAxes, described below) rely on
-`~.axes_grid1.axes_divider.AxesDivider`, whose role is to calculate the
-location of the axes at drawing time.
-
-Users typically do not need to directly instantiate dividers
-by calling `~.axes_grid1.axes_divider.AxesDivider`; instead,
-`~.axes_grid1.axes_divider.make_axes_locatable` can be used to create a divider
-for an axes::
+Behind the scene, the ImageGrid class and the RGBAxes class utilize the
+`~.axes_grid1.axes_divider.AxesDivider` class, whose role is to calculate the
+location of the axes at drawing time. Direct use of the
+AxesDivider class will not be necessary for most users. The
+axes_divider module provides a helper function
+`~.axes_grid1.axes_divider.make_axes_locatable`, which can be useful.
+It takes a existing axes instance and create a divider for it. ::

   ax = subplot(1, 1, 1)
   divider = make_axes_locatable(ax)

-`.AxesDivider.append_axes` can then be used to create a new axes on a given
-side ("left", "right", "top", "bottom") of the original axes.
+*make_axes_locatable* returns an instance of the
+`~.axes_grid1.axes_divider.AxesDivider` class. It provides an
+`~.AxesDivider.append_axes` method that
+creates a new axes on the given side of ("top", "right", "bottom" and
+"left") of the original axes.
+

-colorbar whose height (or width) in sync with the main axes
------------------------------------------------------------
+colorbar whose height (or width) in sync with the master axes
+-------------------------------------------------------------

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_colorbar_001.png
    :target: ../../gallery/axes_grid1/simple_colorbar.html
    :align: center
+   :scale: 50
+
+   Simple Colorbar
+

 scatter_hist.py with AxesDivider
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -109,13 +148,17 @@ See the full source code below.
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_scatter_hist_locatable_axes_001.png
    :target: ../../gallery/axes_grid1/scatter_hist_locatable_axes.html
    :align: center
+   :scale: 50
+
+   Scatter Hist

 The :doc:`/gallery/axes_grid1/scatter_hist_locatable_axes` using the
-AxesDivider has some advantages over the
+AxesDivider has some advantage over the
 original :doc:`/gallery/lines_bars_and_markers/scatter_hist` in Matplotlib.
 For example, you can set the aspect ratio of the scatter plot, even with the
 x-axis or y-axis is shared accordingly.

+
 ParasiteAxes
 ------------

@@ -138,12 +181,17 @@ legend command in host, creates a legend that includes lines in the
 parasite axes.  To create a host axes, you may use *host_subplot* or
 *host_axes* command.

+
 Example 1. twinx
 ~~~~~~~~~~~~~~~~

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_parasite_simple_001.png
    :target: ../../gallery/axes_grid1/parasite_simple.html
    :align: center
+   :scale: 50
+
+   Parasite Simple
+

 Example 2. twin
 ~~~~~~~~~~~~~~~
@@ -154,79 +202,102 @@ top(or right)-axis to have different tick-locations, tick-labels, or
 tick-formatter for bottom(or left)-axis. ::

   ax2 = ax.twin() # now, ax2 is responsible for "top" axis and "right" axis
-  ax2.set_xticks([0., .5*np.pi, np.pi, 1.5*np.pi, 2*np.pi],
-                 labels=["0", r"$\frac{1}{2}\pi$",
-                         r"$\pi$", r"$\frac{3}{2}\pi$", r"$2\pi$"])
+  ax2.set_xticks([0., .5*np.pi, np.pi, 1.5*np.pi, 2*np.pi])
+  ax2.set_xticklabels(["0", r"$\frac{1}{2}\pi$",
+                       r"$\pi$", r"$\frac{3}{2}\pi$", r"$2\pi$"])
+

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axisline4_001.png
    :target: ../../gallery/axes_grid1/simple_axisline4.html
    :align: center
+   :scale: 50
+
+   Simple Axisline4

 A more sophisticated example using twin. Note that if you change the
 x-limit in the host axes, the x-limit of the parasite axes will change
 accordingly.

+
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_parasite_simple2_001.png
    :target: ../../gallery/axes_grid1/parasite_simple2.html
    :align: center
+   :scale: 50
+
+   Parasite Simple2
+

 AnchoredArtists
 ---------------

-:mod:`.axes_grid1.anchored_artists` is a collection of artists whose location
-is anchored to the (axes) bbox, similarly to legends.  These artists derive
-from `.offsetbox.OffsetBox`, and the artist need to be drawn in canvas
-coordinates.  There is limited support for arbitrary transforms.  For example,
-the ellipse in the example below will have width and height in data coordinate.
+It's a collection of artists whose location is anchored to the (axes)
+bbox, like the legend. It is derived from *OffsetBox* in Matplotlib, and
+artist need to be drawn in the canvas coordinate. But, there is a
+limited support for an arbitrary transform. For example, the ellipse
+in the example below will have width and height in the data
+coordinate.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_anchored_artists_001.png
    :target: ../../gallery/axes_grid1/simple_anchored_artists.html
    :align: center
+   :scale: 50
+
+   Simple Anchored Artists
+

 InsetLocator
 ------------

-.. seealso::
-   `.Axes.inset_axes` and `.Axes.indicate_inset_zoom` in the main library.
+:mod:`mpl_toolkits.axes_grid1.inset_locator` provides helper classes
+and functions to place your (inset) axes at the anchored position of
+the parent axes, similarly to AnchoredArtist.

-:mod:`.axes_grid1.inset_locator` provides helper classes and functions to
-place inset axes at an anchored position of the parent axes, similarly to
-AnchoredArtist.
-
-`.inset_locator.inset_axes` creates an inset axes whose size is either fixed,
-or a fixed proportion of the parent axes::
+Using :func:`mpl_toolkits.axes_grid1.inset_locator.inset_axes`, you
+can have inset axes whose size is either fixed, or a fixed proportion
+of the parent axes::

     inset_axes = inset_axes(parent_axes,
-                            width="30%",  # width = 30% of parent_bbox
-                            height=1.,  # height = 1 inch
+                            width="30%", # width = 30% of parent_bbox
+                            height=1., # height : 1 inch
                             loc='lower left')

 creates an inset axes whose width is 30% of the parent axes and whose
 height is fixed at 1 inch.

-`.inset_locator.zoomed_inset_axes` creates an inset axes whose data scale is
-that of the parent axes multiplied by some factor, e.g. ::
+You may creates your inset whose size is determined so that the data
+scale of the inset axes to be that of the parent axes multiplied by
+some factor. For example, ::

     inset_axes = zoomed_inset_axes(ax,
-                                   0.5,  # zoom = 0.5
+                                   0.5, # zoom = 0.5
                                    loc='upper right')

-creates an inset axes whose data scale is half of the parent axes.  This can be
-useful to mark the zoomed area on the parent axes:
+creates an inset axes whose data scale is half of the parent axes.
+Here is complete examples.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_inset_locator_demo_001.png
    :target: ../../gallery/axes_grid1/inset_locator_demo.html
    :align: center
+   :scale: 50
+
+   Inset Locator Demo

-`.inset_locator.mark_inset` allows marking the location of the area represented
-by the inset axes:
+For example, :func:`.zoomed_inset_axes` can be used when you want the
+inset represents the zoom-up of the small portion in the parent axes.
+And :mod:`~mpl_toolkits.axes_grid1.inset_locator` provides a helper
+function :func:`.mark_inset` to mark the location of the area
+represented by the inset axes.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_inset_locator_demo2_001.png
    :target: ../../gallery/axes_grid1/inset_locator_demo2.html
    :align: center
+   :scale: 50

-RGBAxes
--------
+   Inset Locator Demo2
+
+
+RGB Axes
+~~~~~~~~

 RGBAxes is a helper class to conveniently show RGB composite
 images. Like ImageGrid, the location of axes are adjusted so that the
@@ -240,9 +311,12 @@ yaxis of each axes are shared. ::
     r, g, b = get_rgb()  # r, g, b are 2D images.
     ax.imshow_rgb(r, g, b)

+
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_demo_axes_rgb_001.png
    :target: ../../gallery/axes_grid1/demo_axes_rgb.html
    :align: center
+   :scale: 50
+

 AxesDivider
 ===========
@@ -318,9 +392,10 @@ Locators that spans over multiple cells can be created with, e.g.::

 See the example,

-.. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axes_divider1_001.png
+.. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axes_divider1_002.png
    :target: ../../gallery/axes_grid1/simple_axes_divider1.html
    :align: center
+   :scale: 50

 You can also adjust the size of each axes according to its x or y
 data limits (AxesX and AxesY).
@@ -328,4 +403,5 @@ data limits (AxesX and AxesY).
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axes_divider3_001.png
    :target: ../../gallery/axes_grid1/simple_axes_divider3.html
    :align: center
+   :scale: 50
 """
diff --git a/tutorials/toolkits/axisartist.py b/tutorials/toolkits/axisartist.py
index 7040a2f6a4..6a9e6edc9f 100644
--- a/tutorials/toolkits/axisartist.py
+++ b/tutorials/toolkits/axisartist.py
@@ -20,6 +20,9 @@ curved coordinate systems.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_floating_axis_001.png
    :target: ../../gallery/axisartist/demo_floating_axis.html
    :align: center
+   :scale: 50
+
+   Demo Floating Axis

 Since it uses special artists, some Matplotlib commands that work on
 Axes.xaxis and Axes.yaxis may not work.
@@ -65,6 +68,9 @@ For example, you can hide the right and top spines using::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axisline3_001.png
    :target: ../../gallery/axisartist/simple_axisline3.html
    :align: center
+   :scale: 50
+
+   Simple Axisline3

 It is also possible to add a horizontal axis. For example, you may have an
 horizontal axis at y=0 (in data coordinate). ::
@@ -74,6 +80,9 @@ horizontal axis at y=0 (in data coordinate). ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axisartist1_001.png
    :target: ../../gallery/axisartist/simple_axisartist1.html
    :align: center
+   :scale: 50
+
+   Simple Axisartist1

 Or a fixed axis with some offset ::

@@ -97,6 +106,9 @@ Here is an example that uses ParasiteAxes.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_parasite_axes2_001.png
    :target: ../../gallery/axisartist/demo_parasite_axes2.html
    :align: center
+   :scale: 50
+
+   Demo Parasite Axes2

 Curvilinear Grid
 ----------------
@@ -107,6 +119,9 @@ and ticks.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_curvelinear_grid_001.png
    :target: ../../gallery/axisartist/demo_curvelinear_grid.html
    :align: center
+   :scale: 50
+
+   Demo CurveLinear Grid

 Floating Axes
 -------------
@@ -117,6 +132,9 @@ floating axis.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_floating_axes_001.png
    :target: ../../gallery/axisartist/demo_floating_axes.html
    :align: center
+   :scale: 50
+
+   Demo Floating Axes

 axisartist namespace
 ====================
@@ -149,6 +167,9 @@ In summary, all these changes was to support
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_floating_axis_001.png
    :target: ../../gallery/axisartist/demo_floating_axis.html
    :align: center
+   :scale: 50
+
+   Demo Floating Axis

 *mpl_toolkits.axisartist.Axes* class defines a *axis* attribute, which
 is a dictionary of AxisArtist instances. By default, the dictionary
@@ -310,6 +331,9 @@ using "set_axis_direction" method. ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axis_direction01_001.png
    :target: ../../gallery/axisartist/simple_axis_direction01.html
    :align: center
+   :scale: 50
+
+   Simple Axis Direction01

 The parameter for set_axis_direction is one of ["left", "right",
 "bottom", "top"].
@@ -335,6 +359,7 @@ You must understand some underlying concept of directions.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_axis_direction_001.png
    :target: ../../gallery/axisartist/axis_direction.html
    :align: center
+   :scale: 50

 On the other hand, there is a concept of "axis_direction". This is a
 default setting of above properties for each, "bottom", "left", "top",
@@ -360,6 +385,9 @@ direction can be more clear with curved axis.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_axis_direction_001.png
    :target: ../../gallery/axisartist/demo_axis_direction.html
    :align: center
+   :scale: 50
+
+   Demo Axis Direction

 The axis_direction can be adjusted in the AxisArtist level, or in the
 level of its child artists, i.e., ticks, ticklabels, and axis-label. ::
@@ -391,6 +419,9 @@ default direction). ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axis_direction03_001.png
    :target: ../../gallery/axisartist/simple_axis_direction03.html
    :align: center
+   :scale: 50
+
+   Simple Axis Direction03

 So, in summary,

@@ -426,6 +457,9 @@ Alignment of TickLabels are treated specially. See below
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_ticklabel_alignment_001.png
    :target: ../../gallery/axisartist/demo_ticklabel_alignment.html
    :align: center
+   :scale: 50
+
+   Demo Ticklabel Alignment

 Adjusting pad
 -------------
@@ -441,6 +475,9 @@ Or ticklabels and axis-label ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axis_pad_001.png
    :target: ../../gallery/axisartist/simple_axis_pad.html
    :align: center
+   :scale: 50
+
+   Simple Axis Pad

 GridHelper
 ==========
@@ -527,6 +564,9 @@ coordinates, or you may use Parasite Axes for convenience.::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_curvelinear_grid_001.png
    :target: ../../gallery/axisartist/demo_curvelinear_grid.html
    :align: center
+   :scale: 50
+
+   Demo CurveLinear Grid

 FloatingAxis
 ============
diff --git a/tutorials/toolkits/mplot3d.py b/tutorials/toolkits/mplot3d.py
index 86479dbabb..d5ab4f2b10 100644
--- a/tutorials/toolkits/mplot3d.py
+++ b/tutorials/toolkits/mplot3d.py
@@ -8,8 +8,12 @@ Generating 3D plots using the mplot3d toolkit.
 .. currentmodule:: mpl_toolkits.mplot3d

 .. contents::
-   :backlinks: none
+      :backlinks: none

+.. _toolkit_mplot3d-tutorial:
+
+Getting started
+---------------
 3D Axes (of class `.Axes3D`) are created by passing the ``projection="3d"``
 keyword argument to `.Figure.add_subplot`::

@@ -17,15 +21,9 @@ keyword argument to `.Figure.add_subplot`::
    fig = plt.figure()
    ax = fig.add_subplot(projection='3d')

-Multiple 3D subplots can be added on the same figure, as for 2D subplots.
-
-.. figure:: ../../gallery/mplot3d/images/sphx_glr_subplot3d_001.png
-   :target: ../../gallery/mplot3d/subplot3d.html
-   :align: center
-
 .. versionchanged:: 1.0.0
-   Prior to Matplotlib 1.0.0, only a single `.Axes3D` could be created per
-   figure; it needed to be directly instantiated as ``ax = Axes3D(fig)``.
+   Prior to Matplotlib 1.0.0, `.Axes3D` needed to be directly instantiated with
+   ``from mpl_toolkits.mplot3d import Axes3D; ax = Axes3D(fig)``.

 .. versionchanged:: 3.2.0
    Prior to Matplotlib 3.2.0, it was necessary to explicitly import the
@@ -38,79 +36,104 @@ toolkit.
 .. _plot3d:

 Line plots
-==========
+====================
+.. automethod:: Axes3D.plot

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_lines3d_001.png
    :target: ../../gallery/mplot3d/lines3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.plot
+   Lines3d

 .. _scatter3d:

 Scatter plots
 =============
+.. automethod:: Axes3D.scatter

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_scatter3d_001.png
    :target: ../../gallery/mplot3d/scatter3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.scatter
+   Scatter3d

 .. _wireframe:

 Wireframe plots
 ===============
+.. automethod:: Axes3D.plot_wireframe

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_wire3d_001.png
    :target: ../../gallery/mplot3d/wire3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.plot_wireframe
+   Wire3d

 .. _surface:

 Surface plots
 =============
+.. automethod:: Axes3D.plot_surface

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_surface3d_001.png
    :target: ../../gallery/mplot3d/surface3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.plot_surface
+   Surface3d
+
+   Surface3d 2
+
+   Surface3d 3

 .. _trisurface:

 Tri-Surface plots
 =================
+.. automethod:: Axes3D.plot_trisurf

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_trisurf3d_001.png
    :target: ../../gallery/mplot3d/trisurf3d.html
    :align: center
+   :scale: 50
+
+   Trisurf3d

-.. automethod:: Axes3D.plot_trisurf

 .. _contour3d:

 Contour plots
 =============
+.. automethod:: Axes3D.contour

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_contour3d_001.png
    :target: ../../gallery/mplot3d/contour3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.contour
+   Contour3d
+
+   Contour3d 2
+
+   Contour3d 3

 .. _contourf3d:

 Filled contour plots
 ====================
+.. automethod:: Axes3D.contourf

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_contourf3d_001.png
    :target: ../../gallery/mplot3d/contourf3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.contourf
+   Contourf3d
+
+   Contourf3d 2

 .. versionadded:: 1.1.0
    The feature demoed in the second contourf3d example was enabled as a
@@ -119,52 +142,84 @@ Filled contour plots
 .. _polygon3d:

 Polygon plots
-=============
+====================
+.. automethod:: Axes3D.add_collection3d

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_polys3d_001.png
    :target: ../../gallery/mplot3d/polys3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.add_collection3d
+   Polys3d

 .. _bar3d:

 Bar plots
-=========
+====================
+.. automethod:: Axes3D.bar

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_bars3d_001.png
    :target: ../../gallery/mplot3d/bars3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.bar
+   Bars3d

 .. _quiver3d:

 Quiver
-======
+====================
+.. automethod:: Axes3D.quiver

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_quiver3d_001.png
    :target: ../../gallery/mplot3d/quiver3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.quiver
+   Quiver3d

 .. _2dcollections3d:

 2D plots in 3D
-==============
+====================
 .. figure:: ../../gallery/mplot3d/images/sphx_glr_2dcollections3d_001.png
    :target: ../../gallery/mplot3d/2dcollections3d.html
    :align: center
+   :scale: 50
+
+   2dcollections3d

 .. _text3d:

 Text
-====
+====================
+.. automethod:: Axes3D.text

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_text3d_001.png
    :target: ../../gallery/mplot3d/text3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.text
+   Text3d
+
+.. _3dsubplots:
+
+Subplotting
+====================
+Having multiple 3D plots in a single figure is the same
+as it is for 2D plots. Also, you can have both 2D and 3D plots
+in the same figure.
+
+.. versionadded:: 1.0.0
+   Subplotting 3D plots was added in v1.0.0.  Earlier version can not
+   do this.
+
+.. figure:: ../../gallery/mplot3d/images/sphx_glr_subplot3d_001.png
+   :target: ../../gallery/mplot3d/subplot3d.html
+   :align: center
+   :scale: 50
+
+   Subplot3d
+
+   Mixed Subplots
 """
diff --git a/versioneer.py b/versioneer.py
new file mode 100644
index 0000000000..304372b5bf
--- /dev/null
+++ b/versioneer.py
@@ -0,0 +1,1704 @@
+
+# Version: 0.15 +matplotlib modifications to avoid the need for setup.cfg to exist.
+
+"""
+The Versioneer
+==============
+
+* like a rocketeer, but for versions!
+* https://github.com/warner/python-versioneer
+* Brian Warner
+* License: Public Domain
+* Compatible With: python2.6, 2.7, 3.2, 3.3, 3.4, and pypy
+* [![Latest Version]
+(https://pypip.in/version/versioneer/badge.svg?style=flat)
+](https://pypi.python.org/pypi/versioneer/)
+* [![Build Status]
+(https://travis-ci.org/warner/python-versioneer.png?branch=master)
+](https://travis-ci.org/warner/python-versioneer)
+
+This is a tool for managing a recorded version number in distutils-based
+python projects. The goal is to remove the tedious and error-prone "update
+the embedded version string" step from your release process. Making a new
+release should be as easy as recording a new tag in your version-control
+system, and maybe making new tarballs.
+
+
+## Quick Install
+
+* `pip install versioneer` to somewhere to your $PATH
+* add a `[versioneer]` section to your setup.cfg (see below)
+* run `versioneer install` in your source tree, commit the results
+
+## Version Identifiers
+
+Source trees come from a variety of places:
+
+* a version-control system checkout (mostly used by developers)
+* a nightly tarball, produced by build automation
+* a snapshot tarball, produced by a web-based VCS browser, like github's
+  "tarball from tag" feature
+* a release tarball, produced by "setup.py sdist", distributed through PyPI
+
+Within each source tree, the version identifier (either a string or a number,
+this tool is format-agnostic) can come from a variety of places:
+
+* ask the VCS tool itself, e.g. "git describe" (for checkouts), which knows
+  about recent "tags" and an absolute revision-id
+* the name of the directory into which the tarball was unpacked
+* an expanded VCS keyword ($Id$, etc)
+* a `_version.py` created by some earlier build step
+
+For released software, the version identifier is closely related to a VCS
+tag. Some projects use tag names that include more than just the version
+string (e.g. "myproject-1.2" instead of just "1.2"), in which case the tool
+needs to strip the tag prefix to extract the version identifier. For
+unreleased software (between tags), the version identifier should provide
+enough information to help developers recreate the same tree, while also
+giving them an idea of roughly how old the tree is (after version 1.2, before
+version 1.3). Many VCS systems can report a description that captures this,
+for example `git describe --tags --dirty --always` reports things like
+"0.7-1-g574ab98-dirty" to indicate that the checkout is one revision past the
+0.7 tag, has a unique revision id of "574ab98", and is "dirty" (it has
+uncommitted changes.
+
+The version identifier is used for multiple purposes:
+
+* to allow the module to self-identify its version: `myproject.__version__`
+* to choose a name and prefix for a 'setup.py sdist' tarball
+
+## Theory of Operation
+
+Versioneer works by adding a special `_version.py` file into your source
+tree, where your `__init__.py` can import it. This `_version.py` knows how to
+dynamically ask the VCS tool for version information at import time.
+
+`_version.py` also contains `$Revision$` markers, and the installation
+process marks `_version.py` to have this marker rewritten with a tag name
+during the `git archive` command. As a result, generated tarballs will
+contain enough information to get the proper version.
+
+To allow `setup.py` to compute a version too, a `versioneer.py` is added to
+the top level of your source tree, next to `setup.py` and the `setup.cfg`
+that configures it. This overrides several distutils/setuptools commands to
+compute the version when invoked, and changes `setup.py build` and `setup.py
+sdist` to replace `_version.py` with a small static file that contains just
+the generated version data.
+
+## Installation
+
+First, decide on values for the following configuration variables:
+
+* `VCS`: the version control system you use. Currently accepts "git".
+
+* `style`: the style of version string to be produced. See "Styles" below for
+  details. Defaults to "pep440", which looks like
+  `TAG[+DISTANCE.gSHORTHASH[.dirty]]`.
+
+* `versionfile_source`:
+
+  A project-relative pathname into which the generated version strings should
+  be written. This is usually a `_version.py` next to your project's main
+  `__init__.py` file, so it can be imported at runtime. If your project uses
+  `src/myproject/__init__.py`, this should be `src/myproject/_version.py`.
+  This file should be checked in to your VCS as usual: the copy created below
+  by `setup.py setup_versioneer` will include code that parses expanded VCS
+  keywords in generated tarballs. The 'build' and 'sdist' commands will
+  replace it with a copy that has just the calculated version string.
+
+  This must be set even if your project does not have any modules (and will
+  therefore never import `_version.py`), since "setup.py sdist" -based trees
+  still need somewhere to record the pre-calculated version strings. Anywhere
+  in the source tree should do. If there is a `__init__.py` next to your
+  `_version.py`, the `setup.py setup_versioneer` command (described below)
+  will append some `__version__`-setting assignments, if they aren't already
+  present.
+
+* `versionfile_build`:
+
+  Like `versionfile_source`, but relative to the build directory instead of
+  the source directory. These will differ when your setup.py uses
+  'package_dir='. If you have `package_dir={'myproject': 'src/myproject'}`,
+  then you will probably have `versionfile_build='myproject/_version.py'` and
+  `versionfile_source='src/myproject/_version.py'`.
+
+  If this is set to None, then `setup.py build` will not attempt to rewrite
+  any `_version.py` in the built tree. If your project does not have any
+  libraries (e.g. if it only builds a script), then you should use
+  `versionfile_build = None` and override `distutils.command.build_scripts`
+  to explicitly insert a copy of `versioneer.get_version()` into your
+  generated script.
+
+* `tag_prefix`:
+
+  a string, like 'PROJECTNAME-', which appears at the start of all VCS tags.
+  If your tags look like 'myproject-1.2.0', then you should use
+  tag_prefix='myproject-'. If you use unprefixed tags like '1.2.0', this
+  should be an empty string.
+
+* `parentdir_prefix`:
+
+  a optional string, frequently the same as tag_prefix, which appears at the
+  start of all unpacked tarball filenames. If your tarball unpacks into
+  'myproject-1.2.0', this should be 'myproject-'. To disable this feature,
+  just omit the field from your `setup.cfg`.
+
+This tool provides one script, named `versioneer`. That script has one mode,
+"install", which writes a copy of `versioneer.py` into the current directory
+and runs `versioneer.py setup` to finish the installation.
+
+To versioneer-enable your project:
+
+* 1: Modify your `setup.cfg`, adding a section named `[versioneer]` and
+  populating it with the configuration values you decided earlier (note that
+  the option names are not case-sensitive):
+
+  ````
+  [versioneer]
+  VCS = git
+  style = pep440
+  versionfile_source = src/myproject/_version.py
+  versionfile_build = myproject/_version.py
+  tag_prefix = ""
+  parentdir_prefix = myproject-
+  ````
+
+* 2: Run `versioneer install`. This will do the following:
+
+  * copy `versioneer.py` into the top of your source tree
+  * create `_version.py` in the right place (`versionfile_source`)
+  * modify your `__init__.py` (if one exists next to `_version.py`) to define
+    `__version__` (by calling a function from `_version.py`)
+  * modify your `MANIFEST.in` to include both `versioneer.py` and the
+    generated `_version.py` in sdist tarballs
+
+  `versioneer install` will complain about any problems it finds with your
+  `setup.py` or `setup.cfg`. Run it multiple times until you have fixed all
+  the problems.
+
+* 3: add a `import versioneer` to your setup.py, and add the following
+  arguments to the setup() call:
+
+        version=versioneer.get_version(),
+        cmdclass=versioneer.get_cmdclass(),
+
+* 4: commit these changes to your VCS. To make sure you won't forget,
+  `versioneer install` will mark everything it touched for addition using
+  `git add`. Don't forget to add `setup.py` and `setup.cfg` too.
+
+## Post-Installation Usage
+
+Once established, all uses of your tree from a VCS checkout should get the
+current version string. All generated tarballs should include an embedded
+version string (so users who unpack them will not need a VCS tool installed).
+
+If you distribute your project through PyPI, then the release process should
+boil down to two steps:
+
+* 1: git tag 1.0
+* 2: python setup.py register sdist upload
+
+If you distribute it through github (i.e. users use github to generate
+tarballs with `git archive`), the process is:
+
+* 1: git tag 1.0
+* 2: git push; git push --tags
+
+Versioneer will report "0+untagged.NUMCOMMITS.gHASH" until your tree has at
+least one tag in its history.
+
+## Version-String Flavors
+
+Code which uses Versioneer can learn about its version string at runtime by
+importing `_version` from your main `__init__.py` file and running the
+`get_versions()` function. From the "outside" (e.g. in `setup.py`), you can
+import the top-level `versioneer.py` and run `get_versions()`.
+
+Both functions return a dictionary with different flavors of version
+information:
+
+* `['version']`: A condensed version string, rendered using the selected
+  style. This is the most commonly used value for the project's version
+  string. The default "pep440" style yields strings like `0.11`,
+  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the "Styles" section
+  below for alternative styles.
+
+* `['full-revisionid']`: detailed revision identifier. For Git, this is the
+  full SHA1 commit id, e.g. "1076c978a8d3cfc70f408fe5974aa6c092c949ac".
+
+* `['dirty']`: a boolean, True if the tree has uncommitted changes. Note that
+  this is only accurate if run in a VCS checkout, otherwise it is likely to
+  be False or None
+
+* `['error']`: if the version string could not be computed, this will be set
+  to a string describing the problem, otherwise it will be None. It may be
+  useful to throw an exception in setup.py if this is set, to avoid e.g.
+  creating tarballs with a version string of "unknown".
+
+Some variants are more useful than others. Including `full-revisionid` in a
+bug report should allow developers to reconstruct the exact code being tested
+(or indicate the presence of local changes that should be shared with the
+developers). `version` is suitable for display in an "about" box or a CLI
+`--version` output: it can be easily compared against release notes and lists
+of bugs fixed in various releases.
+
+The installer adds the following text to your `__init__.py` to place a basic
+version in `YOURPROJECT.__version__`:
+
+    from ._version import get_versions
+    __version__ = get_versions()['version']
+    del get_versions
+
+## Styles
+
+The setup.cfg `style=` configuration controls how the VCS information is
+rendered into a version string.
+
+The default style, "pep440", produces a PEP440-compliant string, equal to the
+un-prefixed tag name for actual releases, and containing an additional "local
+version" section with more detail for in-between builds. For Git, this is
+TAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags
+--dirty --always`. For example "0.11+2.g1076c97.dirty" indicates that the
+tree is like the "1076c97" commit but has uncommitted changes (".dirty"), and
+that this commit is two revisions ("+2") beyond the "0.11" tag. For released
+software (exactly equal to a known tag), the identifier will only contain the
+stripped tag, e.g. "0.11".
+
+Other styles are available. See details.md in the Versioneer source tree for
+descriptions.
+
+## Debugging
+
+Versioneer tries to avoid fatal errors: if something goes wrong, it will tend
+to return a version of "0+unknown". To investigate the problem, run `setup.py
+version`, which will run the version-lookup code in a verbose mode, and will
+display the full contents of `get_versions()` (including the `error` string,
+which may help identify what went wrong).
+
+## Updating Versioneer
+
+To upgrade your project to a new release of Versioneer, do the following:
+
+* install the new Versioneer (`pip install -U versioneer` or equivalent)
+* edit `setup.cfg`, if necessary, to include any new configuration settings
+  indicated by the release notes
+* re-run `versioneer install` in your source tree, to replace
+  `SRC/_version.py`
+* commit any changed files
+
+### Upgrading to 0.15
+
+Starting with this version, Versioneer is configured with a `[versioneer]`
+section in your `setup.cfg` file. Earlier versions required the `setup.py` to
+set attributes on the `versioneer` module immediately after import. The new
+version will refuse to run (raising an exception during import) until you
+have provided the necessary `setup.cfg` section.
+
+In addition, the Versioneer package provides an executable named
+`versioneer`, and the installation process is driven by running `versioneer
+install`. In 0.14 and earlier, the executable was named
+`versioneer-installer` and was run without an argument.
+
+### Upgrading to 0.14
+
+0.14 changes the format of the version string. 0.13 and earlier used
+hyphen-separated strings like "0.11-2-g1076c97-dirty". 0.14 and beyond use a
+plus-separated "local version" section strings, with dot-separated
+components, like "0.11+2.g1076c97". PEP440-strict tools did not like the old
+format, but should be ok with the new one.
+
+### Upgrading from 0.11 to 0.12
+
+Nothing special.
+
+### Upgrading from 0.10 to 0.11
+
+You must add a `versioneer.VCS = "git"` to your `setup.py` before re-running
+`setup.py setup_versioneer`. This will enable the use of additional
+version-control systems (SVN, etc) in the future.
+
+## Future Directions
+
+This tool is designed to make it easily extended to other version-control
+systems: all VCS-specific components are in separate directories like
+src/git/ . The top-level `versioneer.py` script is assembled from these
+components by running make-versioneer.py . In the future, make-versioneer.py
+will take a VCS name as an argument, and will construct a version of
+`versioneer.py` that is specific to the given VCS. It might also take the
+configuration arguments that are currently provided manually during
+installation by editing setup.py . Alternatively, it might go the other
+direction and include code from all supported VCS systems, reducing the
+number of intermediate scripts.
+
+
+## License
+
+To make Versioneer easier to embed, all its code is hereby released into the
+public domain. The `_version.py` that it creates is also in the public
+domain.
+
+"""
+
+from __future__ import print_function
+try:
+    import configparser
+except ImportError:
+    import ConfigParser as configparser
+import errno
+import json
+import os
+import re
+import subprocess
+import sys
+
+
+class VersioneerConfig:
+    pass
+
+
+def get_root():
+    # we require that all commands are run from the project root, i.e. the
+    # directory that contains setup.py, setup.cfg, and versioneer.py .
+    root = os.path.realpath(os.path.abspath(os.getcwd()))
+    setup_py = os.path.join(root, "setup.py")
+    versioneer_py = os.path.join(root, "versioneer.py")
+    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):
+        # allow 'python path/to/setup.py COMMAND'
+        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))
+        setup_py = os.path.join(root, "setup.py")
+        versioneer_py = os.path.join(root, "versioneer.py")
+    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):
+        err = ("Versioneer was unable to run the project root directory. "
+               "Versioneer requires setup.py to be executed from "
+               "its immediate directory (like 'python setup.py COMMAND'), "
+               "or in a way that lets it use sys.argv[0] to find the root "
+               "(like 'python path/to/setup.py COMMAND').")
+        raise VersioneerBadRootError(err)
+    try:
+        # Certain runtime workflows (setup.py install/develop in a setuptools
+        # tree) execute all dependencies in a single python process, so
+        # "versioneer" may be imported multiple times, and python's shared
+        # module-import table will cache the first one. So we can't use
+        # os.path.dirname(__file__), as that will find whichever
+        # versioneer.py was first imported, even in later projects.
+        me = os.path.realpath(os.path.abspath(__file__))
+        if os.path.splitext(me)[0] != os.path.splitext(versioneer_py)[0]:
+            print("Warning: build in %s is using versioneer.py from %s"
+                  % (os.path.dirname(me), versioneer_py))
+    except NameError:
+        pass
+    return root
+
+
+def get_config_from_root(root):
+    # This might raise EnvironmentError (if setup.cfg is missing), or
+    # configparser.NoSectionError (if it lacks a [versioneer] section), or
+    # configparser.NoOptionError (if it lacks "VCS="). See the docstring at
+    # the top of versioneer.py for instructions on writing your setup.cfg .
+    setup_cfg = os.path.join(root, "setup.cfg")
+
+
+    parser = configparser.SafeConfigParser()
+    if os.path.exists(setup_cfg):
+        with open(setup_cfg, "r") as f:
+            parser.readfp(f)
+
+    def get(parser, name):
+        if parser.has_option("versioneer", name):
+            return parser.get("versioneer", name)
+        return None
+    cfg = VersioneerConfig()
+
+    VCS = get(parser, "VCS") or 'git'
+    cfg.VCS = VCS
+    cfg.style = get(parser, "style") or "pep440"
+    version_file =  os.path.join('lib', 'matplotlib', '_version.py')
+    cfg.versionfile_source = get(parser, "versionfile_source") or version_file
+    cfg.versionfile_build = get(parser, "versionfile_build") or os.path.join('matplotlib', '_version.py')
+    cfg.tag_prefix = get(parser, "tag_prefix") or 'v'
+    cfg.parentdir_prefix = get(parser, "parentdir_prefix") or 'matplotlib-'
+    cfg.verbose = get(parser, "verbose")
+    return cfg
+
+
+class NotThisMethod(Exception):
+    pass
+
+# these dictionaries contain VCS-specific tools
+LONG_VERSION_PY = {}
+HANDLERS = {}
+
+
+def register_vcs_handler(vcs, method):  # decorator
+    def decorate(f):
+        if vcs not in HANDLERS:
+            HANDLERS[vcs] = {}
+        HANDLERS[vcs][method] = f
+        return f
+    return decorate
+
+
+def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False):
+    assert isinstance(commands, list)
+    p = None
+    for c in commands:
+        try:
+            dispcmd = str([c] + args)
+            # remember shell=False, so use git.cmd on windows, not just git
+            p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE,
+                                 stderr=(subprocess.PIPE if hide_stderr
+                                         else None))
+            break
+        except EnvironmentError:
+            e = sys.exc_info()[1]
+            if e.errno == errno.ENOENT:
+                continue
+            if verbose:
+                print("unable to run %s" % dispcmd)
+                print(e)
+            return None
+    else:
+        if verbose:
+            print("unable to find command, tried %s" % (commands,))
+        return None
+    stdout = p.communicate()[0].strip()
+    if sys.version_info[0] >= 3:
+        stdout = stdout.decode()
+    if p.returncode != 0:
+        if verbose:
+            print("unable to run %s (error)" % dispcmd)
+        return None
+    return stdout
+LONG_VERSION_PY['git'] = r'''
+# This file helps to compute a version number in source trees obtained from
+# git-archive tarball (such as those provided by githubs download-from-tag
+# feature). Distribution tarballs (built by setup.py sdist) and build
+# directories (produced by setup.py build) will contain a much shorter file
+# that just contains the computed version number.
+
+# This file is released into the public domain. Generated by
+# versioneer-0.15 (https://github.com/warner/python-versioneer)
+
+import errno
+import os
+import re
+import subprocess
+import sys
+
+
+def get_keywords():
+    # these strings will be replaced by git during git-archive.
+    # setup.py/versioneer.py will grep for the variable names, so they must
+    # each be defined on a line of their own. _version.py will just call
+    # get_keywords().
+    git_refnames = "%(DOLLAR)sFormat:%%d%(DOLLAR)s"
+    git_full = "%(DOLLAR)sFormat:%%H%(DOLLAR)s"
+    keywords = {"refnames": git_refnames, "full": git_full}
+    return keywords
+
+
+class VersioneerConfig:
+    pass
+
+
+def get_config():
+    # these strings are filled in when 'setup.py versioneer' creates
+    # _version.py
+    cfg = VersioneerConfig()
+    cfg.VCS = "git"
+    cfg.style = "%(STYLE)s"
+    cfg.tag_prefix = "%(TAG_PREFIX)s"
+    cfg.parentdir_prefix = "%(PARENTDIR_PREFIX)s"
+    cfg.versionfile_source = "%(VERSIONFILE_SOURCE)s"
+    cfg.verbose = False
+    return cfg
+
+
+class NotThisMethod(Exception):
+    pass
+
+
+LONG_VERSION_PY = {}
+HANDLERS = {}
+
+
+def register_vcs_handler(vcs, method):  # decorator
+    def decorate(f):
+        if vcs not in HANDLERS:
+            HANDLERS[vcs] = {}
+        HANDLERS[vcs][method] = f
+        return f
+    return decorate
+
+
+def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False):
+    assert isinstance(commands, list)
+    p = None
+    for c in commands:
+        try:
+            dispcmd = str([c] + args)
+            # remember shell=False, so use git.cmd on windows, not just git
+            p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE,
+                                 stderr=(subprocess.PIPE if hide_stderr
+                                         else None))
+            break
+        except EnvironmentError:
+            e = sys.exc_info()[1]
+            if e.errno == errno.ENOENT:
+                continue
+            if verbose:
+                print("unable to run %%s" %% dispcmd)
+                print(e)
+            return None
+    else:
+        if verbose:
+            print("unable to find command, tried %%s" %% (commands,))
+        return None
+    stdout = p.communicate()[0].strip()
+    if sys.version_info[0] >= 3:
+        stdout = stdout.decode()
+    if p.returncode != 0:
+        if verbose:
+            print("unable to run %%s (error)" %% dispcmd)
+        return None
+    return stdout
+
+
+def versions_from_parentdir(parentdir_prefix, root, verbose):
+    # Source tarballs conventionally unpack into a directory that includes
+    # both the project name and a version string.
+    dirname = os.path.basename(root)
+    if not dirname.startswith(parentdir_prefix):
+        if verbose:
+            print("guessing rootdir is '%%s', but '%%s' doesn't start with "
+                  "prefix '%%s'" %% (root, dirname, parentdir_prefix))
+        raise NotThisMethod("rootdir doesn't start with parentdir_prefix")
+    return {"version": dirname[len(parentdir_prefix):],
+            "full-revisionid": None,
+            "dirty": False, "error": None}
+
+
+@register_vcs_handler("git", "get_keywords")
+def git_get_keywords(versionfile_abs):
+    # the code embedded in _version.py can just fetch the value of these
+    # keywords. When used from setup.py, we don't want to import _version.py,
+    # so we do it with a regexp instead. This function is not used from
+    # _version.py.
+    keywords = {}
+    try:
+        f = open(versionfile_abs, "r")
+        for line in f.readlines():
+            if line.strip().startswith("git_refnames ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["refnames"] = mo.group(1)
+            if line.strip().startswith("git_full ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["full"] = mo.group(1)
+        f.close()
+    except EnvironmentError:
+        pass
+    return keywords
+
+
+@register_vcs_handler("git", "keywords")
+def git_versions_from_keywords(keywords, tag_prefix, verbose):
+    if not keywords:
+        raise NotThisMethod("no keywords at all, weird")
+    refnames = keywords["refnames"].strip()
+    if refnames.startswith("$Format"):
+        if verbose:
+            print("keywords are unexpanded, not using")
+        raise NotThisMethod("unexpanded keywords, not a git-archive tarball")
+    refs = set([r.strip() for r in refnames.strip("()").split(",")])
+    # starting in git-1.8.3, tags are listed as "tag: foo-1.0" instead of
+    # just "foo-1.0". If we see a "tag: " prefix, prefer those.
+    TAG = "tag: "
+    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])
+    if not tags:
+        # Either we're using git < 1.8.3, or there really are no tags. We use
+        # a heuristic: assume all version tags have a digit. The old git %%d
+        # expansion behaves like git log --decorate=short and strips out the
+        # refs/heads/ and refs/tags/ prefixes that would let us distinguish
+        # between branches and tags. By ignoring refnames without digits, we
+        # filter out many common branch names like "release" and
+        # "stabilization", as well as "HEAD" and "master".
+        tags = set([r for r in refs if re.search(r'\d', r)])
+        if verbose:
+            print("discarding '%%s', no digits" %% ",".join(refs-tags))
+    if verbose:
+        print("likely tags: %%s" %% ",".join(sorted(tags)))
+    for ref in sorted(tags):
+        # sorting will prefer e.g. "2.0" over "2.0rc1"
+        if ref.startswith(tag_prefix):
+            r = ref[len(tag_prefix):]
+            if verbose:
+                print("picking %%s" %% r)
+            return {"version": r,
+                    "full-revisionid": keywords["full"].strip(),
+                    "dirty": False, "error": None
+                    }
+    # no suitable tags, so version is "0+unknown", but full hex is still there
+    if verbose:
+        print("no suitable tags, using unknown + full revision id")
+    return {"version": "0+unknown",
+            "full-revisionid": keywords["full"].strip(),
+            "dirty": False, "error": "no suitable tags"}
+
+
+@register_vcs_handler("git", "pieces_from_vcs")
+def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):
+    # this runs 'git' from the root of the source tree. This only gets called
+    # if the git-archive 'subst' keywords were *not* expanded, and
+    # _version.py hasn't already been rewritten with a short version string,
+    # meaning we're inside a checked out source tree.
+
+    if not os.path.exists(os.path.join(root, ".git")):
+        if verbose:
+            print("no .git in %%s" %% root)
+        raise NotThisMethod("no .git directory")
+
+    GITS = ["git"]
+    if sys.platform == "win32":
+        GITS = ["git.cmd", "git.exe"]
+    # if there is a tag, this yields TAG-NUM-gHEX[-dirty]
+    # if there are no tags, this yields HEX[-dirty] (no NUM)
+    describe_out = run_command(GITS, ["describe", "--tags", "--dirty",
+                                      "--always", "--long"],
+                               cwd=root)
+    # --long was added in git-1.5.5
+    if describe_out is None:
+        raise NotThisMethod("'git describe' failed")
+    describe_out = describe_out.strip()
+    full_out = run_command(GITS, ["rev-parse", "HEAD"], cwd=root)
+    if full_out is None:
+        raise NotThisMethod("'git rev-parse' failed")
+    full_out = full_out.strip()
+
+    pieces = {}
+    pieces["long"] = full_out
+    pieces["short"] = full_out[:7]  # maybe improved later
+    pieces["error"] = None
+
+    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]
+    # TAG might have hyphens.
+    git_describe = describe_out
+
+    # look for -dirty suffix
+    dirty = git_describe.endswith("-dirty")
+    pieces["dirty"] = dirty
+    if dirty:
+        git_describe = git_describe[:git_describe.rindex("-dirty")]
+
+    # now we have TAG-NUM-gHEX or HEX
+
+    if "-" in git_describe:
+        # TAG-NUM-gHEX
+        mo = re.search(r'^(.+)-(\d+)-g([0-9a-f]+)$', git_describe)
+        if not mo:
+            # unparsable. Maybe git-describe is misbehaving?
+            pieces["error"] = ("unable to parse git-describe output: '%%s'"
+                               %% describe_out)
+            return pieces
+
+        # tag
+        full_tag = mo.group(1)
+        if not full_tag.startswith(tag_prefix):
+            if verbose:
+                fmt = "tag '%%s' doesn't start with prefix '%%s'"
+                print(fmt %% (full_tag, tag_prefix))
+            pieces["error"] = ("tag '%%s' doesn't start with prefix '%%s'"
+                               %% (full_tag, tag_prefix))
+            return pieces
+        pieces["closest-tag"] = full_tag[len(tag_prefix):]
+
+        # distance: number of commits since tag
+        pieces["distance"] = int(mo.group(2))
+
+        # commit: short hex revision ID
+        pieces["short"] = mo.group(3)
+
+    else:
+        # HEX: no tags
+        pieces["closest-tag"] = None
+        count_out = run_command(GITS, ["rev-list", "HEAD", "--count"],
+                                cwd=root)
+        pieces["distance"] = int(count_out)  # total number of commits
+
+    return pieces
+
+
+def plus_or_dot(pieces):
+    if "+" in pieces.get("closest-tag", ""):
+        return "."
+    return "+"
+
+
+def render_pep440(pieces):
+    # now build up version string, with post-release "local version
+    # identifier". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you
+    # get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty
+
+    # exceptions:
+    # 1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += plus_or_dot(pieces)
+            rendered += "%%d.g%%s" %% (pieces["distance"], pieces["short"])
+            if pieces["dirty"]:
+                rendered += ".dirty"
+    else:
+        # exception #1
+        rendered = "0+untagged.%%d.g%%s" %% (pieces["distance"],
+                                          pieces["short"])
+        if pieces["dirty"]:
+            rendered += ".dirty"
+    return rendered
+
+
+def render_pep440_pre(pieces):
+    # TAG[.post.devDISTANCE] . No -dirty
+
+    # exceptions:
+    # 1: no tags. 0.post.devDISTANCE
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += ".post.dev%%d" %% pieces["distance"]
+    else:
+        # exception #1
+        rendered = "0.post.dev%%d" %% pieces["distance"]
+    return rendered
+
+
+def render_pep440_post(pieces):
+    # TAG[.postDISTANCE[.dev0]+gHEX] . The ".dev0" means dirty. Note that
+    # .dev0 sorts backwards (a dirty tree will appear "older" than the
+    # corresponding clean one), but you shouldn't be releasing software with
+    # -dirty anyways.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%%d" %% pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+            rendered += plus_or_dot(pieces)
+            rendered += "g%%s" %% pieces["short"]
+    else:
+        # exception #1
+        rendered = "0.post%%d" %% pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+        rendered += "+g%%s" %% pieces["short"]
+    return rendered
+
+
+def render_pep440_old(pieces):
+    # TAG[.postDISTANCE[.dev0]] . The ".dev0" means dirty.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%%d" %% pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+    else:
+        # exception #1
+        rendered = "0.post%%d" %% pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+    return rendered
+
+
+def render_git_describe(pieces):
+    # TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty
+    # --always'
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += "-%%d-g%%s" %% (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render_git_describe_long(pieces):
+    # TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty
+    # --always -long'. The distance/hash is unconditional.
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        rendered += "-%%d-g%%s" %% (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render(pieces, style):
+    if pieces["error"]:
+        return {"version": "unknown",
+                "full-revisionid": pieces.get("long"),
+                "dirty": None,
+                "error": pieces["error"]}
+
+    if not style or style == "default":
+        style = "pep440"  # the default
+
+    if style == "pep440":
+        rendered = render_pep440(pieces)
+    elif style == "pep440-pre":
+        rendered = render_pep440_pre(pieces)
+    elif style == "pep440-post":
+        rendered = render_pep440_post(pieces)
+    elif style == "pep440-old":
+        rendered = render_pep440_old(pieces)
+    elif style == "git-describe":
+        rendered = render_git_describe(pieces)
+    elif style == "git-describe-long":
+        rendered = render_git_describe_long(pieces)
+    else:
+        raise ValueError("unknown style '%%s'" %% style)
+
+    return {"version": rendered, "full-revisionid": pieces["long"],
+            "dirty": pieces["dirty"], "error": None}
+
+
+def get_versions():
+    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have
+    # __file__, we can work backwards from there to the root. Some
+    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which
+    # case we can only use expanded keywords.
+
+    cfg = get_config()
+    verbose = cfg.verbose
+
+    try:
+        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,
+                                          verbose)
+    except NotThisMethod:
+        pass
+
+    try:
+        root = os.path.realpath(__file__)
+        # versionfile_source is the relative path from the top of the source
+        # tree (where the .git directory might live) to this file. Invert
+        # this to find the root from __file__.
+        for i in cfg.versionfile_source.split('/'):
+            root = os.path.dirname(root)
+    except NameError:
+        return {"version": "0+unknown", "full-revisionid": None,
+                "dirty": None,
+                "error": "unable to find root of source tree"}
+
+    try:
+        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)
+        return render(pieces, cfg.style)
+    except NotThisMethod:
+        pass
+
+    try:
+        if cfg.parentdir_prefix:
+            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)
+    except NotThisMethod:
+        pass
+
+    return {"version": "0+unknown", "full-revisionid": None,
+            "dirty": None,
+            "error": "unable to compute version"}
+'''
+
+
+@register_vcs_handler("git", "get_keywords")
+def git_get_keywords(versionfile_abs):
+    # the code embedded in _version.py can just fetch the value of these
+    # keywords. When used from setup.py, we don't want to import _version.py,
+    # so we do it with a regexp instead. This function is not used from
+    # _version.py.
+    keywords = {}
+    try:
+        f = open(versionfile_abs, "r")
+        for line in f.readlines():
+            if line.strip().startswith("git_refnames ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["refnames"] = mo.group(1)
+            if line.strip().startswith("git_full ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["full"] = mo.group(1)
+        f.close()
+    except EnvironmentError:
+        pass
+    return keywords
+
+
+@register_vcs_handler("git", "keywords")
+def git_versions_from_keywords(keywords, tag_prefix, verbose):
+    if not keywords:
+        raise NotThisMethod("no keywords at all, weird")
+    refnames = keywords["refnames"].strip()
+    if refnames.startswith("$Format"):
+        if verbose:
+            print("keywords are unexpanded, not using")
+        raise NotThisMethod("unexpanded keywords, not a git-archive tarball")
+    refs = set([r.strip() for r in refnames.strip("()").split(",")])
+    # starting in git-1.8.3, tags are listed as "tag: foo-1.0" instead of
+    # just "foo-1.0". If we see a "tag: " prefix, prefer those.
+    TAG = "tag: "
+    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])
+    if not tags:
+        # Either we're using git < 1.8.3, or there really are no tags. We use
+        # a heuristic: assume all version tags have a digit. The old git %d
+        # expansion behaves like git log --decorate=short and strips out the
+        # refs/heads/ and refs/tags/ prefixes that would let us distinguish
+        # between branches and tags. By ignoring refnames without digits, we
+        # filter out many common branch names like "release" and
+        # "stabilization", as well as "HEAD" and "master".
+        tags = set([r for r in refs if re.search(r'\d', r)])
+        if verbose:
+            print("discarding '%s', no digits" % ",".join(refs-tags))
+    if verbose:
+        print("likely tags: %s" % ",".join(sorted(tags)))
+    for ref in sorted(tags):
+        # sorting will prefer e.g. "2.0" over "2.0rc1"
+        if ref.startswith(tag_prefix):
+            r = ref[len(tag_prefix):]
+            if verbose:
+                print("picking %s" % r)
+            return {"version": r,
+                    "full-revisionid": keywords["full"].strip(),
+                    "dirty": False, "error": None
+                    }
+    # no suitable tags, so version is "0+unknown", but full hex is still there
+    if verbose:
+        print("no suitable tags, using unknown + full revision id")
+    return {"version": "0+unknown",
+            "full-revisionid": keywords["full"].strip(),
+            "dirty": False, "error": "no suitable tags"}
+
+
+@register_vcs_handler("git", "pieces_from_vcs")
+def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):
+    # this runs 'git' from the root of the source tree. This only gets called
+    # if the git-archive 'subst' keywords were *not* expanded, and
+    # _version.py hasn't already been rewritten with a short version string,
+    # meaning we're inside a checked out source tree.
+
+    if not os.path.exists(os.path.join(root, ".git")):
+        if verbose:
+            print("no .git in %s" % root)
+        raise NotThisMethod("no .git directory")
+
+    GITS = ["git"]
+    if sys.platform == "win32":
+        GITS = ["git.cmd", "git.exe"]
+    # if there is a tag, this yields TAG-NUM-gHEX[-dirty]
+    # if there are no tags, this yields HEX[-dirty] (no NUM)
+    describe_out = run_command(GITS, ["describe", "--tags", "--dirty",
+                                      "--always", "--long"],
+                               cwd=root)
+    # --long was added in git-1.5.5
+    if describe_out is None:
+        raise NotThisMethod("'git describe' failed")
+    describe_out = describe_out.strip()
+    full_out = run_command(GITS, ["rev-parse", "HEAD"], cwd=root)
+    if full_out is None:
+        raise NotThisMethod("'git rev-parse' failed")
+    full_out = full_out.strip()
+
+    pieces = {}
+    pieces["long"] = full_out
+    pieces["short"] = full_out[:7]  # maybe improved later
+    pieces["error"] = None
+
+    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]
+    # TAG might have hyphens.
+    git_describe = describe_out
+
+    # look for -dirty suffix
+    dirty = git_describe.endswith("-dirty")
+    pieces["dirty"] = dirty
+    if dirty:
+        git_describe = git_describe[:git_describe.rindex("-dirty")]
+
+    # now we have TAG-NUM-gHEX or HEX
+
+    if "-" in git_describe:
+        # TAG-NUM-gHEX
+        mo = re.search(r'^(.+)-(\d+)-g([0-9a-f]+)$', git_describe)
+        if not mo:
+            # unparsable. Maybe git-describe is misbehaving?
+            pieces["error"] = ("unable to parse git-describe output: '%s'"
+                               % describe_out)
+            return pieces
+
+        # tag
+        full_tag = mo.group(1)
+        if not full_tag.startswith(tag_prefix):
+            if verbose:
+                fmt = "tag '%s' doesn't start with prefix '%s'"
+                print(fmt % (full_tag, tag_prefix))
+            pieces["error"] = ("tag '%s' doesn't start with prefix '%s'"
+                               % (full_tag, tag_prefix))
+            return pieces
+        pieces["closest-tag"] = full_tag[len(tag_prefix):]
+
+        # distance: number of commits since tag
+        pieces["distance"] = int(mo.group(2))
+
+        # commit: short hex revision ID
+        pieces["short"] = mo.group(3)
+
+    else:
+        # HEX: no tags
+        pieces["closest-tag"] = None
+        count_out = run_command(GITS, ["rev-list", "HEAD", "--count"],
+                                cwd=root)
+        pieces["distance"] = int(count_out)  # total number of commits
+
+    return pieces
+
+
+def do_vcs_install(manifest_in, versionfile_source, ipy):
+    GITS = ["git"]
+    if sys.platform == "win32":
+        GITS = ["git.cmd", "git.exe"]
+    files = [manifest_in, versionfile_source]
+    if ipy:
+        files.append(ipy)
+    try:
+        me = __file__
+        if me.endswith(".pyc") or me.endswith(".pyo"):
+            me = os.path.splitext(me)[0] + ".py"
+        versioneer_file = os.path.relpath(me)
+    except NameError:
+        versioneer_file = "versioneer.py"
+    files.append(versioneer_file)
+    present = False
+    try:
+        f = open(".gitattributes", "r")
+        for line in f.readlines():
+            if line.strip().startswith(versionfile_source):
+                if "export-subst" in line.strip().split()[1:]:
+                    present = True
+        f.close()
+    except EnvironmentError:
+        pass
+    if not present:
+        f = open(".gitattributes", "a+")
+        f.write("%s export-subst\n" % versionfile_source)
+        f.close()
+        files.append(".gitattributes")
+    run_command(GITS, ["add", "--"] + files)
+
+
+def versions_from_parentdir(parentdir_prefix, root, verbose):
+    # Source tarballs conventionally unpack into a directory that includes
+    # both the project name and a version string.
+    dirname = os.path.basename(root)
+    if not dirname.startswith(parentdir_prefix):
+        if verbose:
+            print("guessing rootdir is '%s', but '%s' doesn't start with "
+                  "prefix '%s'" % (root, dirname, parentdir_prefix))
+        raise NotThisMethod("rootdir doesn't start with parentdir_prefix")
+    return {"version": dirname[len(parentdir_prefix):],
+            "full-revisionid": None,
+            "dirty": False, "error": None}
+
+SHORT_VERSION_PY = """
+# This file was generated by 'versioneer.py' (0.15) from
+# revision-control system data, or from the parent directory name of an
+# unpacked source archive. Distribution tarballs contain a pre-generated copy
+# of this file.
+
+import json
+import sys
+
+version_json = '''
+%s
+'''  # END VERSION_JSON
+
+
+def get_versions():
+    return json.loads(version_json)
+"""
+
+
+def versions_from_file(filename):
+    try:
+        with open(filename) as f:
+            contents = f.read()
+    except EnvironmentError:
+        raise NotThisMethod("unable to read _version.py")
+    mo = re.search(r"version_json = '''\n(.*)'''  # END VERSION_JSON",
+                   contents, re.M | re.S)
+    if not mo:
+        raise NotThisMethod("no version_json in _version.py")
+    return json.loads(mo.group(1))
+
+
+def write_to_version_file(filename, versions):
+    os.unlink(filename)
+    contents = json.dumps(versions, sort_keys=True,
+                          indent=1, separators=(",", ": "))
+    with open(filename, "w") as f:
+        f.write(SHORT_VERSION_PY % contents)
+
+    print("set %s to '%s'" % (filename, versions["version"]))
+
+
+def plus_or_dot(pieces):
+    if "+" in pieces.get("closest-tag", ""):
+        return "."
+    return "+"
+
+
+def render_pep440(pieces):
+    # now build up version string, with post-release "local version
+    # identifier". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you
+    # get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty
+
+    # exceptions:
+    # 1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += plus_or_dot(pieces)
+            rendered += "%d.g%s" % (pieces["distance"], pieces["short"])
+            if pieces["dirty"]:
+                rendered += ".dirty"
+    else:
+        # exception #1
+        rendered = "0+untagged.%d.g%s" % (pieces["distance"],
+                                          pieces["short"])
+        if pieces["dirty"]:
+            rendered += ".dirty"
+    return rendered
+
+
+def render_pep440_pre(pieces):
+    # TAG[.post.devDISTANCE] . No -dirty
+
+    # exceptions:
+    # 1: no tags. 0.post.devDISTANCE
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += ".post.dev%d" % pieces["distance"]
+    else:
+        # exception #1
+        rendered = "0.post.dev%d" % pieces["distance"]
+    return rendered
+
+
+def render_pep440_post(pieces):
+    # TAG[.postDISTANCE[.dev0]+gHEX] . The ".dev0" means dirty. Note that
+    # .dev0 sorts backwards (a dirty tree will appear "older" than the
+    # corresponding clean one), but you shouldn't be releasing software with
+    # -dirty anyways.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%d" % pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+            rendered += plus_or_dot(pieces)
+            rendered += "g%s" % pieces["short"]
+    else:
+        # exception #1
+        rendered = "0.post%d" % pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+        rendered += "+g%s" % pieces["short"]
+    return rendered
+
+
+def render_pep440_old(pieces):
+    # TAG[.postDISTANCE[.dev0]] . The ".dev0" means dirty.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%d" % pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+    else:
+        # exception #1
+        rendered = "0.post%d" % pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+    return rendered
+
+
+def render_git_describe(pieces):
+    # TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty
+    # --always'
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += "-%d-g%s" % (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render_git_describe_long(pieces):
+    # TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty
+    # --always -long'. The distance/hash is unconditional.
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        rendered += "-%d-g%s" % (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render(pieces, style):
+    if pieces["error"]:
+        return {"version": "unknown",
+                "full-revisionid": pieces.get("long"),
+                "dirty": None,
+                "error": pieces["error"]}
+
+    if not style or style == "default":
+        style = "pep440"  # the default
+
+    if style == "pep440":
+        rendered = render_pep440(pieces)
+    elif style == "pep440-pre":
+        rendered = render_pep440_pre(pieces)
+    elif style == "pep440-post":
+        rendered = render_pep440_post(pieces)
+    elif style == "pep440-old":
+        rendered = render_pep440_old(pieces)
+    elif style == "git-describe":
+        rendered = render_git_describe(pieces)
+    elif style == "git-describe-long":
+        rendered = render_git_describe_long(pieces)
+    else:
+        raise ValueError("unknown style '%s'" % style)
+
+    return {"version": rendered, "full-revisionid": pieces["long"],
+            "dirty": pieces["dirty"], "error": None}
+
+
+class VersioneerBadRootError(Exception):
+    pass
+
+
+def get_versions(verbose=False):
+    # returns dict with two keys: 'version' and 'full'
+
+    if "versioneer" in sys.modules:
+        # see the discussion in cmdclass.py:get_cmdclass()
+        del sys.modules["versioneer"]
+
+    root = get_root()
+    cfg = get_config_from_root(root)
+
+    assert cfg.VCS is not None, "please set [versioneer]VCS= in setup.cfg"
+    handlers = HANDLERS.get(cfg.VCS)
+    assert handlers, "unrecognized VCS '%s'" % cfg.VCS
+    verbose = verbose or cfg.verbose
+    assert cfg.versionfile_source is not None, \
+        "please set versioneer.versionfile_source"
+    assert cfg.tag_prefix is not None, "please set versioneer.tag_prefix"
+
+    versionfile_abs = os.path.join(root, cfg.versionfile_source)
+
+    # extract version from first of: _version.py, VCS command (e.g. 'git
+    # describe'), parentdir. This is meant to work for developers using a
+    # source checkout, for users of a tarball created by 'setup.py sdist',
+    # and for users of a tarball/zipball created by 'git archive' or github's
+    # download-from-tag feature or the equivalent in other VCSes.
+
+    get_keywords_f = handlers.get("get_keywords")
+    from_keywords_f = handlers.get("keywords")
+    if get_keywords_f and from_keywords_f:
+        try:
+            keywords = get_keywords_f(versionfile_abs)
+            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)
+            if verbose:
+                print("got version from expanded keyword %s" % ver)
+            return ver
+        except NotThisMethod:
+            pass
+
+    try:
+        ver = versions_from_file(versionfile_abs)
+        if verbose:
+            print("got version from file %s %s" % (versionfile_abs, ver))
+        return ver
+    except NotThisMethod:
+        pass
+
+    from_vcs_f = handlers.get("pieces_from_vcs")
+    if from_vcs_f:
+        try:
+            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)
+            ver = render(pieces, cfg.style)
+            if verbose:
+                print("got version from VCS %s" % ver)
+            return ver
+        except NotThisMethod:
+            pass
+
+    try:
+        if cfg.parentdir_prefix:
+            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)
+            if verbose:
+                print("got version from parentdir %s" % ver)
+            return ver
+    except NotThisMethod:
+        pass
+
+    if verbose:
+        print("unable to compute version")
+
+    return {"version": "0+unknown", "full-revisionid": None,
+            "dirty": None, "error": "unable to compute version"}
+
+
+def get_version():
+    return get_versions()["version"]
+
+
+def get_cmdclass():
+    if "versioneer" in sys.modules:
+        del sys.modules["versioneer"]
+        # this fixes the "python setup.py develop" case (also 'install' and
+        # 'easy_install .'), in which subdependencies of the main project are
+        # built (using setup.py bdist_egg) in the same python process. Assume
+        # a main project A and a dependency B, which use different versions
+        # of Versioneer. A's setup.py imports A's Versioneer, leaving it in
+        # sys.modules by the time B's setup.py is executed, causing B to run
+        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a
+        # sandbox that restores sys.modules to it's pre-build state, so the
+        # parent is protected against the child's "import versioneer". By
+        # removing ourselves from sys.modules here, before the child build
+        # happens, we protect the child from the parent's versioneer too.
+        # Also see https://github.com/warner/python-versioneer/issues/52
+
+    cmds = {}
+
+    # we add "version" to both distutils and setuptools
+    from distutils.core import Command
+
+    class cmd_version(Command):
+        description = "report generated version string"
+        user_options = []
+        boolean_options = []
+
+        def initialize_options(self):
+            pass
+
+        def finalize_options(self):
+            pass
+
+        def run(self):
+            vers = get_versions(verbose=True)
+            print("Version: %s" % vers["version"])
+            print(" full-revisionid: %s" % vers.get("full-revisionid"))
+            print(" dirty: %s" % vers.get("dirty"))
+            if vers["error"]:
+                print(" error: %s" % vers["error"])
+    cmds["version"] = cmd_version
+
+    # we override "build_py" in both distutils and setuptools
+    #
+    # most invocation pathways end up running build_py:
+    #  distutils/build -> build_py
+    #  distutils/install -> distutils/build ->..
+    #  setuptools/bdist_wheel -> distutils/install ->..
+    #  setuptools/bdist_egg -> distutils/install_lib -> build_py
+    #  setuptools/install -> bdist_egg ->..
+    #  setuptools/develop -> ?
+
+    from distutils.command.build_py import build_py as _build_py
+
+    class cmd_build_py(_build_py):
+        def run(self):
+            root = get_root()
+            cfg = get_config_from_root(root)
+            versions = get_versions()
+            _build_py.run(self)
+            # now locate _version.py in the new build/ directory and replace
+            # it with an updated value
+            if cfg.versionfile_build:
+                target_versionfile = os.path.join(self.build_lib,
+                                                  cfg.versionfile_build)
+                print("UPDATING %s" % target_versionfile)
+                write_to_version_file(target_versionfile, versions)
+    cmds["build_py"] = cmd_build_py
+
+    if "cx_Freeze" in sys.modules:  # cx_freeze enabled?
+        from cx_Freeze.dist import build_exe as _build_exe
+
+        class cmd_build_exe(_build_exe):
+            def run(self):
+                root = get_root()
+                cfg = get_config_from_root(root)
+                versions = get_versions()
+                target_versionfile = cfg.versionfile_source
+                print("UPDATING %s" % target_versionfile)
+                write_to_version_file(target_versionfile, versions)
+
+                _build_exe.run(self)
+                os.unlink(target_versionfile)
+                with open(cfg.versionfile_source, "w") as f:
+                    LONG = LONG_VERSION_PY[cfg.VCS]
+                    f.write(LONG %
+                            {"DOLLAR": "$",
+                             "STYLE": cfg.style,
+                             "TAG_PREFIX": cfg.tag_prefix,
+                             "PARENTDIR_PREFIX": cfg.parentdir_prefix,
+                             "VERSIONFILE_SOURCE": cfg.versionfile_source,
+                             })
+        cmds["build_exe"] = cmd_build_exe
+        del cmds["build_py"]
+
+    # we override different "sdist" commands for both environments
+    if "setuptools" in sys.modules:
+        from setuptools.command.sdist import sdist as _sdist
+    else:
+        from distutils.command.sdist import sdist as _sdist
+
+    class cmd_sdist(_sdist):
+        def run(self):
+            versions = get_versions()
+            self._versioneer_generated_versions = versions
+            # unless we update this, the command will keep using the old
+            # version
+            self.distribution.metadata.version = versions["version"]
+            return _sdist.run(self)
+
+        def make_release_tree(self, base_dir, files):
+            root = get_root()
+            cfg = get_config_from_root(root)
+            _sdist.make_release_tree(self, base_dir, files)
+            # now locate _version.py in the new base_dir directory
+            # (remembering that it may be a hardlink) and replace it with an
+            # updated value
+            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)
+            print("UPDATING %s" % target_versionfile)
+            write_to_version_file(target_versionfile,
+                                  self._versioneer_generated_versions)
+    cmds["sdist"] = cmd_sdist
+
+    return cmds
+
+
+CONFIG_ERROR = """
+setup.cfg is missing the necessary Versioneer configuration. You need
+a section like:
+
+ [versioneer]
+ VCS = git
+ style = pep440
+ versionfile_source = src/myproject/_version.py
+ versionfile_build = myproject/_version.py
+ tag_prefix = ""
+ parentdir_prefix = myproject-
+
+You will also need to edit your setup.py to use the results:
+
+ import versioneer
+ setup(version=versioneer.get_version(),
+       cmdclass=versioneer.get_cmdclass(), ...)
+
+Please read the docstring in ./versioneer.py for configuration instructions,
+edit setup.cfg, and re-run the installer or 'python versioneer.py setup'.
+"""
+
+SAMPLE_CONFIG = """
+# See the docstring in versioneer.py for instructions. Note that you must
+# re-run 'versioneer.py setup' after changing this section, and commit the
+# resulting files.
+
+[versioneer]
+#VCS = git
+#style = pep440
+#versionfile_source =
+#versionfile_build =
+#tag_prefix =
+#parentdir_prefix =
+
+"""
+
+INIT_PY_SNIPPET = """
+from ._version import get_versions
+__version__ = get_versions()['version']
+del get_versions
+"""
+
+
+def do_setup():
+    root = get_root()
+    try:
+        cfg = get_config_from_root(root)
+    except (EnvironmentError, configparser.NoSectionError,
+            configparser.NoOptionError) as e:
+        if isinstance(e, (EnvironmentError, configparser.NoSectionError)):
+            print("Adding sample versioneer config to setup.cfg",
+                  file=sys.stderr)
+            with open(os.path.join(root, "setup.cfg"), "a") as f:
+                f.write(SAMPLE_CONFIG)
+        print(CONFIG_ERROR, file=sys.stderr)
+        return 1
+
+    print(" creating %s" % cfg.versionfile_source)
+    with open(cfg.versionfile_source, "w") as f:
+        LONG = LONG_VERSION_PY[cfg.VCS]
+        f.write(LONG % {"DOLLAR": "$",
+                        "STYLE": cfg.style,
+                        "TAG_PREFIX": cfg.tag_prefix,
+                        "PARENTDIR_PREFIX": cfg.parentdir_prefix,
+                        "VERSIONFILE_SOURCE": cfg.versionfile_source,
+                        })
+
+    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),
+                       "__init__.py")
+    if os.path.exists(ipy):
+        try:
+            with open(ipy, "r") as f:
+                old = f.read()
+        except EnvironmentError:
+            old = ""
+        if INIT_PY_SNIPPET not in old:
+            print(" appending to %s" % ipy)
+            with open(ipy, "a") as f:
+                f.write(INIT_PY_SNIPPET)
+        else:
+            print(" %s unmodified" % ipy)
+    else:
+        print(" %s doesn't exist, ok" % ipy)
+        ipy = None
+
+    # Make sure both the top-level "versioneer.py" and versionfile_source
+    # (PKG/_version.py, used by runtime code) are in MANIFEST.in, so
+    # they'll be copied into source distributions. Pip won't be able to
+    # install the package without this.
+    manifest_in = os.path.join(root, "MANIFEST.in")
+    simple_includes = set()
+    try:
+        with open(manifest_in, "r") as f:
+            for line in f:
+                if line.startswith("include "):
+                    for include in line.split()[1:]:
+                        simple_includes.add(include)
+    except EnvironmentError:
+        pass
+    # That doesn't cover everything MANIFEST.in can do
+    # (http://docs.python.org/2/distutils/sourcedist.html#commands), so
+    # it might give some false negatives. Appending redundant 'include'
+    # lines is safe, though.
+    if "versioneer.py" not in simple_includes:
+        print(" appending 'versioneer.py' to MANIFEST.in")
+        with open(manifest_in, "a") as f:
+            f.write("include versioneer.py\n")
+    else:
+        print(" 'versioneer.py' already in MANIFEST.in")
+    if cfg.versionfile_source not in simple_includes:
+        print(" appending versionfile_source ('%s') to MANIFEST.in" %
+              cfg.versionfile_source)
+        with open(manifest_in, "a") as f:
+            f.write("include %s\n" % cfg.versionfile_source)
+    else:
+        print(" versionfile_source already in MANIFEST.in")
+
+    # Make VCS-specific changes. For git, this means creating/changing
+    # .gitattributes to mark _version.py for export-time keyword
+    # substitution.
+    do_vcs_install(manifest_in, cfg.versionfile_source, ipy)
+    return 0
+
+
+def scan_setup_py():
+    found = set()
+    setters = False
+    errors = 0
+    with open("setup.py", "r") as f:
+        for line in f.readlines():
+            if "import versioneer" in line:
+                found.add("import")
+            if "versioneer.get_cmdclass()" in line:
+                found.add("cmdclass")
+            if "versioneer.get_version()" in line:
+                found.add("get_version")
+            if "versioneer.VCS" in line:
+                setters = True
+            if "versioneer.versionfile_source" in line:
+                setters = True
+    if len(found) != 3:
+        print("")
+        print("Your setup.py appears to be missing some important items")
+        print("(but I might be wrong). Please make sure it has something")
+        print("roughly like the following:")
+        print("")
+        print(" import versioneer")
+        print(" setup( version=versioneer.get_version(),")
+        print("        cmdclass=versioneer.get_cmdclass(),  ...)")
+        print("")
+        errors += 1
+    if setters:
+        print("You should remove lines like 'versioneer.VCS = ' and")
+        print("'versioneer.versionfile_source = ' . This configuration")
+        print("now lives in setup.cfg, and should be removed from setup.py")
+        print("")
+        errors += 1
+    return errors
+
+if __name__ == "__main__":
+    cmd = sys.argv[1]
+    if cmd == "setup":
+        errors = do_setup()
+        errors += scan_setup_py()
+        if errors:
+            sys.exit(1)
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 17:04:22,869 - INFO - ------------------------------
2025-01-17 17:04:22,869 - INFO - END Runtime Completion Fn
2025-01-17 17:04:22,869 - INFO - ------------------------------
2025-01-17 17:04:22,870 - INFO - Got git diff for instance matplotlib__matplotlib-21568:
--------
+                                                       bool has_curves)
 {
     typedef agg::conv_transform<typename PathGenerator::path_iterator> transformed_path_t;
     typedef PathNanRemover<transformed_path_t> nan_removed_t;
@@ -966,7 +969,11 @@ inline void RendererAgg::_draw_path_collection_generic(GCAgg &gc,
             double xo = offsets(i % Noffsets, 0);
             double yo = offsets(i % Noffsets, 1);
             offset_trans.transform(&xo, &yo);
-            trans *= agg::trans_affine_translation(xo, yo);
+            if (offset_position == OFFSET_POSITION_DATA) {
+                trans = agg::trans_affine_translation(xo, yo) * trans;
+            } else {
+                trans *= agg::trans_affine_translation(xo, yo);
+            }
         }

         // These transformations must be done post-offsets
@@ -992,17 +999,17 @@ inline void RendererAgg::_draw_path_collection_generic(GCAgg &gc,
             }
         }

-        bool do_clip = !face.first && !gc.has_hatchpath();
+        bool do_clip = !face.first && !gc.has_hatchpath() && !has_curves;

         if (check_snap) {
             gc.isaa = antialiaseds(i % Naa);

             transformed_path_t tpath(path, trans);
-            nan_removed_t nan_removed(tpath, true, has_codes);
+            nan_removed_t nan_removed(tpath, true, has_curves);
             clipped_t clipped(nan_removed, do_clip, width, height);
             snapped_t snapped(
                 clipped, gc.snap_mode, path.total_vertices(), points_to_pixels(gc.linewidth));
-            if (has_codes) {
+            if (has_curves) {
                 snapped_curve_t curve(snapped);
                 _draw_path(curve, has_clippath, face, gc);
             } else {
@@ -1012,9 +1019,9 @@ inline void RendererAgg::_draw_path_collection_generic(GCAgg &gc,
             gc.isaa = antialiaseds(i % Naa);

             transformed_path_t tpath(path, trans);
-            nan_removed_t nan_removed(tpath, true, has_codes);
+            nan_removed_t nan_removed(tpath, true, has_curves);
             clipped_t clipped(nan_removed, do_clip, width, height);
-            if (has_codes) {
+            if (has_curves) {
                 curve_t curve(clipped);
                 _draw_path(curve, has_clippath, face, gc);
             } else {
@@ -1040,7 +1047,8 @@ inline void RendererAgg::draw_path_collection(GCAgg &gc,
                                               ColorArray &edgecolors,
                                               LineWidthArray &linewidths,
                                               DashesVector &linestyles,
-                                              AntialiasedArray &antialiaseds)
+                                              AntialiasedArray &antialiaseds,
+                                              e_offset_position offset_position)
 {
     _draw_path_collection_generic(gc,
                                   master_transform,
@@ -1056,6 +1064,7 @@ inline void RendererAgg::draw_path_collection(GCAgg &gc,
                                   linewidths,
                                   linestyles,
                                   antialiaseds,
+                                  offset_position,
                                   true,
                                   true);
 }
@@ -1166,6 +1175,7 @@ inline void RendererAgg::draw_quad_mesh(GCAgg &gc,
                                   linewidths,
                                   linestyles,
                                   antialiaseds,
+                                  OFFSET_POSITION_FIGURE,
                                   true, // check_snap
                                   false);
 }
diff --git a/src/_backend_agg_basic_types.h b/src/_backend_agg_basic_types.h
index 3ee86312ef..9f65253d9f 100644
--- a/src/_backend_agg_basic_types.h
+++ b/src/_backend_agg_basic_types.h
@@ -69,6 +69,11 @@ class Dashes

 typedef std::vector<Dashes> DashesVector;

+enum e_offset_position {
+    OFFSET_POSITION_FIGURE,
+    OFFSET_POSITION_DATA
+};
+
 class GCAgg
 {
   public:
diff --git a/src/_backend_agg_wrapper.cpp b/src/_backend_agg_wrapper.cpp
index e9c923471f..49a271b96b 100644
--- a/src/_backend_agg_wrapper.cpp
+++ b/src/_backend_agg_wrapper.cpp
@@ -320,7 +320,7 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
 {
     GCAgg gc;
     agg::trans_affine master_transform;
-    py::PathGenerator paths;
+    PyObject *pathobj;
     numpy::array_view<const double, 3> transforms;
     numpy::array_view<const double, 2> offsets;
     agg::trans_affine offset_trans;
@@ -330,16 +330,15 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
     DashesVector dashes;
     numpy::array_view<const uint8_t, 1> antialiaseds;
     PyObject *ignored;
-    PyObject *offset_position; // offset position is no longer used
+    e_offset_position offset_position;

     if (!PyArg_ParseTuple(args,
-                          "O&O&O&O&O&O&O&O&O&O&O&OO:draw_path_collection",
+                          "O&O&OO&O&O&O&O&O&O&O&OO&:draw_path_collection",
                           &convert_gcagg,
                           &gc,
                           &convert_trans_affine,
                           &master_transform,
-                          &convert_pathgen,
-                          &paths,
+                          &pathobj,
                           &convert_transforms,
                           &transforms,
                           &convert_points,
@@ -357,22 +356,33 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
                           &antialiaseds.converter,
                           &antialiaseds,
                           &ignored,
+                          &convert_offset_position,
                           &offset_position)) {
         return NULL;
     }

-    CALL_CPP("draw_path_collection",
-             (self->x->draw_path_collection(gc,
-                                            master_transform,
-                                            paths,
-                                            transforms,
-                                            offsets,
-                                            offset_trans,
-                                            facecolors,
-                                            edgecolors,
-                                            linewidths,
-                                            dashes,
-                                            antialiaseds)));
+    try
+    {
+        py::PathGenerator path(pathobj);
+
+        CALL_CPP("draw_path_collection",
+                 (self->x->draw_path_collection(gc,
+                                                master_transform,
+                                                path,
+                                                transforms,
+                                                offsets,
+                                                offset_trans,
+                                                facecolors,
+                                                edgecolors,
+                                                linewidths,
+                                                dashes,
+                                                antialiaseds,
+                                                offset_position)));
+    }
+    catch (const py::exception &)
+    {
+        return NULL;
+    }

     Py_RETURN_NONE;
 }
@@ -638,7 +648,17 @@ static PyTypeObject *PyRendererAgg_init_type(PyObject *m, PyTypeObject *type)
     return type;
 }

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "_backend_agg" };
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "_backend_agg",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -646,21 +666,19 @@ PyMODINIT_FUNC PyInit__backend_agg(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
         return NULL;
     }

+    import_array();
+
     if (!PyRendererAgg_init_type(m, &PyRendererAggType)) {
-        Py_DECREF(m);
         return NULL;
     }

     if (!PyBufferRegion_init_type(m, &PyBufferRegionType)) {
-        Py_DECREF(m);
         return NULL;
     }

diff --git a/src/_c_internal_utils.c b/src/_c_internal_utils.c
index db20d49bc9..4a61fe5b6e 100644
--- a/src/_c_internal_utils.c
+++ b/src/_c_internal_utils.c
@@ -68,13 +68,7 @@ mpl_GetCurrentProcessExplicitAppUserModelID(PyObject* module)
     wchar_t* appid = NULL;
     HRESULT hr = GetCurrentProcessExplicitAppUserModelID(&appid);
     if (FAILED(hr)) {
-#if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x07030600
-        /* Remove when we require PyPy 7.3.6 */
-        PyErr_SetFromWindowsErr(hr);
-        return NULL;
-#else
         return PyErr_SetFromWindowsErr(hr);
-#endif
     }
     PyObject* py_appid = PyUnicode_FromWideChar(appid, -1);
     CoTaskMemFree(appid);
@@ -95,13 +89,7 @@ mpl_SetCurrentProcessExplicitAppUserModelID(PyObject* module, PyObject* arg)
     HRESULT hr = SetCurrentProcessExplicitAppUserModelID(appid);
     PyMem_Free(appid);
     if (FAILED(hr)) {
-#if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x07030600
-        /* Remove when we require PyPy 7.3.6 */
-        PyErr_SetFromWindowsErr(hr);
-        return NULL;
-#else
         return PyErr_SetFromWindowsErr(hr);
-#endif
     }
     Py_RETURN_NONE;
 #else
@@ -136,47 +124,6 @@ mpl_SetForegroundWindow(PyObject* module, PyObject *arg)
 #endif
 }

-static PyObject*
-mpl_SetProcessDpiAwareness_max(PyObject* module)
-{
-#ifdef _WIN32
-#ifdef _DPI_AWARENESS_CONTEXTS_
-    // These functions and options were added in later Windows 10 updates, so
-    // must be loaded dynamically.
-    typedef BOOL (WINAPI *IsValidDpiAwarenessContext_t)(DPI_AWARENESS_CONTEXT);
-    typedef BOOL (WINAPI *SetProcessDpiAwarenessContext_t)(DPI_AWARENESS_CONTEXT);
-
-    HMODULE user32 = LoadLibrary("user32.dll");
-    IsValidDpiAwarenessContext_t IsValidDpiAwarenessContextPtr =
-        (IsValidDpiAwarenessContext_t)GetProcAddress(
-            user32, "IsValidDpiAwarenessContext");
-    SetProcessDpiAwarenessContext_t SetProcessDpiAwarenessContextPtr =
-        (SetProcessDpiAwarenessContext_t)GetProcAddress(
-            user32, "SetProcessDpiAwarenessContext");
-    if (IsValidDpiAwarenessContextPtr != NULL && SetProcessDpiAwarenessContextPtr != NULL) {
-        if (IsValidDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2)) {
-            // Added in Creators Update of Windows 10.
-            SetProcessDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);
-        } else if (IsValidDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE)) {
-            // Added in Windows 10.
-            SetProcessDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE);
-        } else if (IsValidDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_SYSTEM_AWARE)) {
-            // Added in Windows 10.
-            SetProcessDpiAwarenessContextPtr(DPI_AWARENESS_CONTEXT_SYSTEM_AWARE);
-        }
-    } else {
-        // Added in Windows Vista.
-        SetProcessDPIAware();
-    }
-    FreeLibrary(user32);
-#else
-    // Added in Windows Vista.
-    SetProcessDPIAware();
-#endif
-#endif
-    Py_RETURN_NONE;
-}
-
 static PyMethodDef functions[] = {
     {"display_is_valid", (PyCFunction)mpl_display_is_valid, METH_NOARGS,
      "display_is_valid()\n--\n\n"
@@ -204,15 +151,9 @@ static PyMethodDef functions[] = {
      "Win32_SetForegroundWindow(hwnd, /)\n--\n\n"
      "Wrapper for Windows' SetForegroundWindow.  On non-Windows platforms, \n"
      "a no-op."},
-    {"Win32_SetProcessDpiAwareness_max",
-     (PyCFunction)mpl_SetProcessDpiAwareness_max, METH_NOARGS,
-     "Win32_SetProcessDpiAwareness_max()\n--\n\n"
-     "Set Windows' process DPI awareness to best option available.\n"
-     "On non-Windows platforms, does nothing."},
     {NULL, NULL}};  // sentinel.
 static PyModuleDef util_module = {
-    PyModuleDef_HEAD_INIT, "_c_internal_utils", NULL, 0, functions
-};
+    PyModuleDef_HEAD_INIT, "_c_internal_utils", "", 0, functions, NULL, NULL, NULL, NULL};

 #pragma GCC visibility push(default)
 PyMODINIT_FUNC PyInit__c_internal_utils(void)
diff --git a/src/_contour.cpp b/src/_contour.cpp
index 663d0e93bd..ac655d73de 100644
--- a/src/_contour.cpp
+++ b/src/_contour.cpp
@@ -11,6 +11,11 @@
 #include <algorithm>


+// 'kind' codes.
+#define MOVETO 1
+#define LINETO 2
+#define CLOSEPOLY 79
+
 // Point indices from current quad index.
 #define POINT_SW (quad)
 #define POINT_SE (quad+1)
@@ -376,52 +381,24 @@ QuadContourGenerator::~QuadContourGenerator()
     delete [] _cache;
 }

-void QuadContourGenerator::append_contour_line_to_vertices_and_codes(
+void QuadContourGenerator::append_contour_line_to_vertices(
     ContourLine& contour_line,
-    PyObject* vertices_list,
-    PyObject* codes_list) const
+    PyObject* vertices_list) const
 {
-    // Convert ContourLine to Python equivalent, and clear it for reuse.
-    // This function is called once for each line generated in create_contour().
-    // A line is either a closed line loop (in which case the last point is
-    // identical to the first) or an open line strip.  Two NumPy arrays are
-    // created for each line:
-    //   vertices is a double array of shape (npoints, 2) containing the (x, y)
-    //     coordinates of the points in the line
-    //   codes is a uint8 array of shape (npoints,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are appended to the Python lists vertices_list and codes_list
-    // respectively for return to the Python calling function.
-
     assert(vertices_list != 0 && "Null python vertices_list");
-    assert(codes_list != 0 && "Null python codes_list");
-
-    npy_intp npoints = static_cast<npy_intp>(contour_line.size());
-
-    npy_intp vertices_dims[2] = {npoints, 2};
-    numpy::array_view<double, 2> vertices(vertices_dims);
-    double* vertices_ptr = vertices.data();
-
-    npy_intp codes_dims[1] = {npoints};
-    numpy::array_view<unsigned char, 1> codes(codes_dims);
-    unsigned char* codes_ptr = codes.data();

+    // Convert ContourLine to python equivalent, and clear it.
+    npy_intp dims[2] = {static_cast<npy_intp>(contour_line.size()), 2};
+    numpy::array_view<double, 2> line(dims);
+    npy_intp i = 0;
     for (ContourLine::const_iterator point = contour_line.begin();
-         point != contour_line.end(); ++point) {
-        *vertices_ptr++ = point->x;
-        *vertices_ptr++ = point->y;
-        *codes_ptr++ = (point == contour_line.begin() ? MOVETO : LINETO);
+         point != contour_line.end(); ++point, ++i) {
+        line(i, 0) = point->x;
+        line(i, 1) = point->y;
     }
-
-    // Closed line loop has identical first and last (x, y) points.
-    if (contour_line.size() > 1 && contour_line.front() == contour_line.back())
-        *(codes_ptr-1) = CLOSEPOLY;
-
-    if (PyList_Append(vertices_list, vertices.pyobj_steal()) ||
-        PyList_Append(codes_list, codes.pyobj_steal())) {
+    if (PyList_Append(vertices_list, line.pyobj_steal())) {
         Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Unable to add contour line to vertices and codes lists");
+        throw std::runtime_error("Unable to add contour line to vertices_list");
     }

     contour_line.clear();
@@ -432,18 +409,6 @@ void QuadContourGenerator::append_contour_to_vertices_and_codes(
     PyObject* vertices_list,
     PyObject* codes_list) const
 {
-    // Convert Contour to Python equivalent, and clear it for reuse.
-    // This function is called once for each polygon generated in
-    // create_filled_contour().  A polygon consists of an outer line loop
-    // (called the parent) and zero or more inner line loops or holes (called
-    // the children).  Two NumPy arrays are created for each polygon:
-    //   vertices is a double array of shape (npoints, 2) containing the (x, y)
-    //     coordinates of the points in the polygon (parent plus children)
-    //   codes is a uint8 array of shape (npoints,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are appended to the Python lists vertices_list and codes_list
-    // respectively for return to the Python calling function.
-
     assert(vertices_list != 0 && "Null python vertices_list");
     assert(codes_list != 0 && "Null python codes_list");

@@ -547,12 +512,6 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
     if (vertices_list == 0)
         throw std::runtime_error("Failed to create Python list");

-    PyObject* codes_list = PyList_New(0);
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
-        throw std::runtime_error("Failed to create Python list");
-    }
-
     // Lines that start and end on boundaries.
     long ichunk, jchunk, istart, iend, jstart, jend;
     for (long ijchunk = 0; ijchunk < _chunk_count; ++ijchunk) {
@@ -564,33 +523,33 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
                 if (EXISTS_NONE(quad) || VISITED(quad,1)) continue;

                 if (BOUNDARY_S(quad) && Z_SW >= 1 && Z_SE < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_S, level)) continue;
+                    start_line(vertices_list, quad, Edge_S, level)) continue;

                 if (BOUNDARY_W(quad) && Z_NW >= 1 && Z_SW < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_W, level)) continue;
+                    start_line(vertices_list, quad, Edge_W, level)) continue;

                 if (BOUNDARY_N(quad) && Z_NE >= 1 && Z_NW < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_N, level)) continue;
+                    start_line(vertices_list, quad, Edge_N, level)) continue;

                 if (BOUNDARY_E(quad) && Z_SE >= 1 && Z_NE < 1 &&
-                    start_line(vertices_list, codes_list, quad, Edge_E, level)) continue;
+                    start_line(vertices_list, quad, Edge_E, level)) continue;

                 if (_corner_mask) {
                     // Equates to NE boundary.
                     if (EXISTS_SW_CORNER(quad) && Z_SE >= 1 && Z_NW < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_NE, level)) continue;
+                        start_line(vertices_list, quad, Edge_NE, level)) continue;

                     // Equates to NW boundary.
                     if (EXISTS_SE_CORNER(quad) && Z_NE >= 1 && Z_SW < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_NW, level)) continue;
+                        start_line(vertices_list, quad, Edge_NW, level)) continue;

                     // Equates to SE boundary.
                     if (EXISTS_NW_CORNER(quad) && Z_SW >= 1 && Z_NE < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_SE, level)) continue;
+                        start_line(vertices_list, quad, Edge_SE, level)) continue;

                     // Equates to SW boundary.
                     if (EXISTS_NE_CORNER(quad) && Z_NW >= 1 && Z_SE < 1 &&
-                        start_line(vertices_list, codes_list, quad, Edge_SW, level)) continue;
+                        start_line(vertices_list, quad, Edge_SW, level)) continue;
                 }
             }
         }
@@ -622,9 +581,7 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
                                 !ignore_first, &start_quad_edge, 1, false);
                 if (ignore_first && !contour_line.empty())
                     contour_line.push_back(contour_line.front());
-
-                append_contour_line_to_vertices_and_codes(
-                    contour_line, vertices_list, codes_list);
+                append_contour_line_to_vertices(contour_line, vertices_list);

                 // Repeat if saddle point but not visited.
                 if (SADDLE(quad,1) && !VISITED(quad,1))
@@ -633,18 +590,7 @@ PyObject* QuadContourGenerator::create_contour(const double& level)
         }
     }

-    PyObject* tuple = PyTuple_New(2);
-    if (tuple == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Failed to create Python tuple");
-    }
-
-    // No error checking here as filling in a brand new pre-allocated tuple.
-    PyTuple_SET_ITEM(tuple, 0, vertices_list);
-    PyTuple_SET_ITEM(tuple, 1, codes_list);
-
-    return tuple;
+    return vertices_list;
 }

 PyObject* QuadContourGenerator::create_filled_contour(const double& lower_level,
@@ -654,13 +600,13 @@ PyObject* QuadContourGenerator::create_filled_contour(const double& lower_level,

     Contour contour;

-    PyObject* vertices_list = PyList_New(0);
-    if (vertices_list == 0)
+    PyObject* vertices = PyList_New(0);
+    if (vertices == 0)
         throw std::runtime_error("Failed to create Python list");

-    PyObject* codes_list = PyList_New(0);
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
+    PyObject* codes = PyList_New(0);
+    if (codes == 0) {
+        Py_XDECREF(vertices);
         throw std::runtime_error("Failed to create Python list");
     }

@@ -691,19 +637,19 @@ PyObject* QuadContourGenerator::create_filled_contour(const double& lower_level,
         }

         // Create python objects to return for this chunk.
-        append_contour_to_vertices_and_codes(contour, vertices_list, codes_list);
+        append_contour_to_vertices_and_codes(contour, vertices, codes);
     }

     PyObject* tuple = PyTuple_New(2);
     if (tuple == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
+        Py_XDECREF(vertices);
+        Py_XDECREF(codes);
         throw std::runtime_error("Failed to create Python tuple");
     }

     // No error checking here as filling in a brand new pre-allocated tuple.
-    PyTuple_SET_ITEM(tuple, 0, vertices_list);
-    PyTuple_SET_ITEM(tuple, 1, codes_list);
+    PyTuple_SET_ITEM(tuple, 0, vertices);
+    PyTuple_SET_ITEM(tuple, 1, codes);

     return tuple;
 }
@@ -1794,8 +1740,7 @@ ContourLine* QuadContourGenerator::start_filled(
 }

 bool QuadContourGenerator::start_line(
-    PyObject* vertices_list, PyObject* codes_list, long quad, Edge edge,
-    const double& level)
+    PyObject* vertices_list, long quad, Edge edge, const double& level)
 {
     assert(vertices_list != 0 && "Null python vertices list");
     assert(is_edge_a_boundary(QuadEdge(quad, edge)) &&
@@ -1804,10 +1749,7 @@ bool QuadContourGenerator::start_line(
     QuadEdge quad_edge(quad, edge);
     ContourLine contour_line(false);
     follow_interior(contour_line, quad_edge, 1, level, true, 0, 1, false);
-
-    append_contour_line_to_vertices_and_codes(
-        contour_line, vertices_list, codes_list);
-
+    append_contour_line_to_vertices(contour_line, vertices_list);
     return VISITED(quad,1);
 }

diff --git a/src/_contour.h b/src/_contour.h
index 6f1931db0e..6232b3abd2 100644
--- a/src/_contour.h
+++ b/src/_contour.h
@@ -318,13 +318,12 @@ private:
         Hole
     } HoleOrNot;

-    // Append a C++ ContourLine to the end of two python lists.  Used for line
+    // Append a C++ ContourLine to the end of a python list.  Used for line
     // contours where each ContourLine is converted to a separate numpy array
     // of (x,y) points.
     // Clears the ContourLine too.
-    void append_contour_line_to_vertices_and_codes(ContourLine& contour_line,
-                                                   PyObject* vertices_list,
-                                                   PyObject* codes_list) const;
+    void append_contour_line_to_vertices(ContourLine& contour_line,
+                                         PyObject* vertices_list) const;

     // Append a C++ Contour to the end of two python lists.  Used for filled
     // contours where each non-hole ContourLine and its child holes are
@@ -489,14 +488,12 @@ private:
     // Start and complete a line contour that both starts and end on a
     // boundary, traversing the interior of the domain.
     //   vertices_list: Python list that the ContourLine should be appended to.
-    //   codes_list: Python list that the kind codes should be appended to.
     //   quad: index of quad to start ContourLine in.
     //   edge: boundary edge to start ContourLine from.
     //   level: contour z-value.
     // Returns true if the start quad does not need to be visited again, i.e.
     // VISITED(quad,1).
     bool start_line(PyObject* vertices_list,
-                    PyObject* codes_list,
                     long quad,
                     Edge edge,
                     const double& level);
diff --git a/src/_contour_wrapper.cpp b/src/_contour_wrapper.cpp
index ccbccc6158..da891eb700 100644
--- a/src/_contour_wrapper.cpp
+++ b/src/_contour_wrapper.cpp
@@ -152,7 +152,17 @@ static PyTypeObject* PyQuadContourGenerator_init_type(PyObject* m, PyTypeObject*

 /* Module */

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "_contour" };
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "_contour",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -160,8 +170,6 @@ PyMODINIT_FUNC PyInit__contour(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -169,10 +177,11 @@ PyMODINIT_FUNC PyInit__contour(void)
     }

     if (!PyQuadContourGenerator_init_type(m, &PyQuadContourGeneratorType)) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/src/_image.cpp b/src/_image.cpp
new file mode 100644
index 0000000000..28e509a4a4
--- /dev/null
+++ b/src/_image.cpp
@@ -0,0 +1,118 @@
+/* -*- mode: c++; c-basic-offset: 4 -*- */
+
+#define NO_IMPORT_ARRAY
+
+#include <math.h>
+
+// utilities for irregular grids
+void _bin_indices_middle(
+    unsigned int *irows, int nrows, const float *ys1, unsigned long ny, float dy, float y_min)
+{
+    int i, j, j_last;
+    unsigned int *rowstart = irows;
+    const float *ys2 = ys1 + 1;
+    const float *yl = ys1 + ny;
+    float yo = y_min + dy / 2.0f;
+    float ym = 0.5f * (*ys1 + *ys2);
+    // y/rows
+    j = 0;
+    j_last = j;
+    for (i = 0; i < nrows; i++, yo += dy, rowstart++) {
+        while (ys2 != yl && yo > ym) {
+            ys1 = ys2;
+            ys2 = ys1 + 1;
+            ym = 0.5f * (*ys1 + *ys2);
+            j++;
+        }
+        *rowstart = j - j_last;
+        j_last = j;
+    }
+}
+
+void _bin_indices_middle_linear(float *arows,
+                                unsigned int *irows,
+                                int nrows,
+                                const float *y,
+                                unsigned long ny,
+                                float dy,
+                                float y_min)
+{
+    int i;
+    int ii = 0;
+    int iilast = (int)ny - 1;
+    float sc = 1 / dy;
+    int iy0 = (int)floor(sc * (y[ii] - y_min));
+    int iy1 = (int)floor(sc * (y[ii + 1] - y_min));
+    float invgap = 1.0f / (iy1 - iy0);
+    for (i = 0; i < nrows && i <= iy0; i++) {
+        irows[i] = 0;
+        arows[i] = 1.0;
+    }
+    for (; i < nrows; i++) {
+        while (i > iy1 && ii < iilast) {
+            ii++;
+            iy0 = iy1;
+            iy1 = (int)floor(sc * (y[ii + 1] - y_min));
+            invgap = 1.0f / (iy1 - iy0);
+        }
+        if (i >= iy0 && i <= iy1) {
+            irows[i] = ii;
+            arows[i] = (iy1 - i) * invgap;
+        } else
+            break;
+    }
+    for (; i < nrows; i++) {
+        irows[i] = iilast - 1;
+        arows[i] = 0.0;
+    }
+}
+
+void _bin_indices(int *irows, int nrows, const double *y, unsigned long ny, double sc, double offs)
+{
+    int i;
+    if (sc * (y[ny - 1] - y[0]) > 0) {
+        int ii = 0;
+        int iilast = (int)ny - 1;
+        int iy0 = (int)floor(sc * (y[ii] - offs));
+        int iy1 = (int)floor(sc * (y[ii + 1] - offs));
+        for (i = 0; i < nrows && i < iy0; i++) {
+            irows[i] = -1;
+        }
+        for (; i < nrows; i++) {
+            while (i > iy1 && ii < iilast) {
+                ii++;
+                iy0 = iy1;
+                iy1 = (int)floor(sc * (y[ii + 1] - offs));
+            }
+            if (i >= iy0 && i <= iy1)
+                irows[i] = ii;
+            else
+                break;
+        }
+        for (; i < nrows; i++) {
+            irows[i] = -1;
+        }
+    } else {
+        int iilast = (int)ny - 1;
+        int ii = iilast;
+        int iy0 = (int)floor(sc * (y[ii] - offs));
+        int iy1 = (int)floor(sc * (y[ii - 1] - offs));
+        for (i = 0; i < nrows && i < iy0; i++) {
+            irows[i] = -1;
+        }
+        for (; i < nrows; i++) {
+            while (i > iy1 && ii > 1) {
+                ii--;
+                iy0 = iy1;
+                iy1 = (int)floor(sc * (y[ii - 1] - offs));
+            }
+            if (i >= iy0 && i <= iy1)
+                irows[i] = ii - 1;
+            else
+                break;
+        }
+        for (; i < nrows; i++) {
+            irows[i] = -1;
+        }
+    }
+}
diff --git a/src/_image.h b/src/_image.h
new file mode 100644
index 0000000000..37a080fff1
--- /dev/null
+++ b/src/_image.h
@@ -0,0 +1,198 @@
+/* -*- mode: c++; c-basic-offset: 4 -*- */
+
+/* image.h
+ *
+ */
+
+#ifndef MPL_IMAGE_H
+#define MPL_IMAGE_H
+
+#include <vector>
+
+
+// utilities for irregular grids
+void _bin_indices_middle(
+    unsigned int *irows, int nrows, const float *ys1, unsigned long ny, float dy, float y_min);
+void _bin_indices_middle_linear(float *arows,
+                                unsigned int *irows,
+                                int nrows,
+                                const float *y,
+                                unsigned long ny,
+                                float dy,
+                                float y_min);
+void _bin_indices(int *irows, int nrows, const double *y, unsigned long ny, double sc, double offs);
+
+template <class CoordinateArray, class ColorArray, class OutputArray>
+void pcolor(CoordinateArray &x,
+            CoordinateArray &y,
+            ColorArray &d,
+            unsigned int rows,
+            unsigned int cols,
+            float bounds[4],
+            int interpolation,
+            OutputArray &out)
+{
+    if (rows >= 32768 || cols >= 32768) {
+        throw std::runtime_error("rows and cols must both be less than 32768");
+    }
+
+    float x_min = bounds[0];
+    float x_max = bounds[1];
+    float y_min = bounds[2];
+    float y_max = bounds[3];
+    float width = x_max - x_min;
+    float height = y_max - y_min;
+    float dx = width / ((float)cols);
+    float dy = height / ((float)rows);
+
+    // Check we have something to output to
+    if (rows == 0 || cols == 0) {
+        throw std::runtime_error("Cannot scale to zero size");
+    }
+
+    if (d.dim(2) != 4) {
+        throw std::runtime_error("data must be in RGBA format");
+    }
+
+    // Check dimensions match
+    unsigned long nx = x.dim(0);
+    unsigned long ny = y.dim(0);
+    if (nx != (unsigned long)d.dim(1) || ny != (unsigned long)d.dim(0)) {
+        throw std::runtime_error("data and axis dimensions do not match");
+    }
+
+    // Allocate memory for pointer arrays
+    std::vector<unsigned int> rowstarts(rows);
+    std::vector<unsigned int> colstarts(cols);
+
+    // Calculate the pointer arrays to map input x to output x
+    unsigned int i, j;
+    unsigned int *colstart = &colstarts[0];
+    unsigned int *rowstart = &rowstarts[0];
+    const float *xs1 = x.data();
+    const float *ys1 = y.data();
+
+    // Copy data to output buffer
+    const unsigned char *start;
+    const unsigned char *inposition;
+    size_t inrowsize = nx * 4;
+    size_t rowsize = cols * 4;
+    unsigned char *position = (unsigned char *)out.data();
+    unsigned char *oldposition = NULL;
+    start = d.data();
+
+    if (interpolation == NEAREST) {
+        _bin_indices_middle(colstart, cols, xs1, nx, dx, x_min);
+        _bin_indices_middle(rowstart, rows, ys1, ny, dy, y_min);
+        for (i = 0; i < rows; i++, rowstart++) {
+            if (i > 0 && *rowstart == 0) {
+                memcpy(position, oldposition, rowsize * sizeof(unsigned char));
+                oldposition = position;
+                position += rowsize;
+            } else {
+                oldposition = position;
+                start += *rowstart * inrowsize;
+                inposition = start;
+                for (j = 0, colstart = &colstarts[0]; j < cols; j++, position += 4, colstart++) {
+                    inposition += *colstart * 4;
+                    memcpy(position, inposition, 4 * sizeof(unsigned char));
+                }
+            }
+        }
+    } else if (interpolation == BILINEAR) {
+        std::vector<float> acols(cols);
+        std::vector<float> arows(rows);
+
+        _bin_indices_middle_linear(&acols[0], colstart, cols, xs1, nx, dx, x_min);
+        _bin_indices_middle_linear(&arows[0], rowstart, rows, ys1, ny, dy, y_min);
+        double a00, a01, a10, a11, alpha, beta;
+
+        // Copy data to output buffer
+        for (i = 0; i < rows; i++) {
+            for (j = 0; j < cols; j++) {
+                alpha = arows[i];
+                beta = acols[j];
+
+                a00 = alpha * beta;
+                a01 = alpha * (1.0 - beta);
+                a10 = (1.0 - alpha) * beta;
+                a11 = 1.0 - a00 - a01 - a10;
+
+                for (size_t k = 0; k < 4; ++k) {
+                    position[k] =
+                        d(rowstart[i], colstart[j], k) * a00 +
+                        d(rowstart[i], colstart[j] + 1, k) * a01 +
+                        d(rowstart[i] + 1, colstart[j], k) * a10 +
+                        d(rowstart[i] + 1, colstart[j] + 1, k) * a11;
+                }
+                position += 4;
+            }
+        }
+    }
+}
+
+template <class CoordinateArray, class ColorArray, class Color, class OutputArray>
+void pcolor2(CoordinateArray &x,
+             CoordinateArray &y,
+             ColorArray &d,
+             unsigned int rows,
+             unsigned int cols,
+             float bounds[4],
+             Color &bg,
+             OutputArray &out)
+{
+    double x_left = bounds[0];
+    double x_right = bounds[1];
+    double y_bot = bounds[2];
+    double y_top = bounds[3];
+
+    // Check we have something to output to
+    if (rows == 0 || cols == 0) {
+        throw std::runtime_error("rows or cols is zero; there are no pixels");
+    }
+
+    if (d.dim(2) != 4) {
+        throw std::runtime_error("data must be in RGBA format");
+    }
+
+    // Check dimensions match
+    unsigned long nx = x.dim(0);
+    unsigned long ny = y.dim(0);
+    if (nx != (unsigned long)d.dim(1) + 1 || ny != (unsigned long)d.dim(0) + 1) {
+        throw std::runtime_error("data and axis bin boundary dimensions are incompatible");
+    }
+
+    if (bg.dim(0) != 4) {
+        throw std::runtime_error("bg must be in RGBA format");
+    }
+
+    std::vector<int> irows(rows);
+    std::vector<int> jcols(cols);
+
+    // Calculate the pointer arrays to map input x to output x
+    size_t i, j;
+    const double *x0 = x.data();
+    const double *y0 = y.data();
+    double sx = cols / (x_right - x_left);
+    double sy = rows / (y_top - y_bot);
+    _bin_indices(&jcols[0], cols, x0, nx, sx, x_left);
+    _bin_indices(&irows[0], rows, y0, ny, sy, y_bot);
+
+    // Copy data to output buffer
+    unsigned char *position = (unsigned char *)out.data();
+
+    for (i = 0; i < rows; i++) {
+        for (j = 0; j < cols; j++) {
+            if (irows[i] == -1 || jcols[j] == -1) {
+                memcpy(position, (const unsigned char *)bg.data(), 4 * sizeof(unsigned char));
+            } else {
+                for (size_t k = 0; k < 4; ++k) {
+                    position[k] = d(irows[i], jcols[j], k);
+                }
+            }
+            position += 4;
+        }
+    }
+}
+
+#endif
diff --git a/src/_image_resample.h b/src/_image_resample.h
index 99cedd9b2c..a508afa33e 100644
--- a/src/_image_resample.h
+++ b/src/_image_resample.h
@@ -25,7 +25,7 @@

 //----------------------------------------------------------------------------
 // Anti-Grain Geometry - Version 2.4
-// Copyright (C) 2002-2005 Maxim Shemanarev (http://antigrain.com/)
+// Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)
 //
 // Permission to copy, use, modify, sell and distribute this software
 // is granted provided this copyright notice appears in all copies.
@@ -35,7 +35,7 @@
 //----------------------------------------------------------------------------
 // Contact: mcseem@antigrain.com
 //          mcseemagg@yahoo.com
-//          http://antigrain.com/
+//          http://www.antigrain.com
 //----------------------------------------------------------------------------
 //
 // Adaptation for high precision colors has been sponsored by
diff --git a/src/_image_wrapper.cpp b/src/_image_wrapper.cpp
index f53c88acf2..73d093aa3b 100644
--- a/src/_image_wrapper.cpp
+++ b/src/_image_wrapper.cpp
@@ -1,5 +1,6 @@
 #include "mplutils.h"
 #include "_image_resample.h"
+#include "_image.h"
 #include "numpy_cpp.h"
 #include "py_converters.h"

@@ -289,13 +290,111 @@ image_resample(PyObject *self, PyObject* args, PyObject *kwargs)
     return NULL;
 }

+
+const char *image_pcolor__doc__ =
+    "pcolor(x, y, data, rows, cols, bounds)\n"
+    "\n"
+    "Generate a pseudo-color image from data on a non-uniform grid using\n"
+    "nearest neighbour or linear interpolation.\n"
+    "bounds = (x_min, x_max, y_min, y_max)\n"
+    "interpolation = NEAREST or BILINEAR \n";
+
+static PyObject *image_pcolor(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    numpy::array_view<const float, 1> x;
+    numpy::array_view<const float, 1> y;
+    numpy::array_view<const agg::int8u, 3> d;
+    npy_intp rows, cols;
+    float bounds[4];
+    int interpolation;
+
+    if (!PyArg_ParseTuple(args,
+                          "O&O&O&nn(ffff)i:pcolor",
+                          &x.converter,
+                          &x,
+                          &y.converter,
+                          &y,
+                          &d.converter_contiguous,
+                          &d,
+                          &rows,
+                          &cols,
+                          &bounds[0],
+                          &bounds[1],
+                          &bounds[2],
+                          &bounds[3],
+                          &interpolation)) {
+        return NULL;
+    }
+
+    npy_intp dim[3] = {rows, cols, 4};
+    numpy::array_view<const agg::int8u, 3> output(dim);
+
+    CALL_CPP("pcolor", (pcolor(x, y, d, rows, cols, bounds, interpolation, output)));
+
+    return output.pyobj();
+}
+
+const char *image_pcolor2__doc__ =
+    "pcolor2(x, y, data, rows, cols, bounds, bg)\n"
+    "\n"
+    "Generate a pseudo-color image from data on a non-uniform grid\n"
+    "specified by its cell boundaries.\n"
+    "bounds = (x_left, x_right, y_bot, y_top)\n"
+    "bg = ndarray of 4 uint8 representing background rgba\n";
+
+static PyObject *image_pcolor2(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    numpy::array_view<const double, 1> x;
+    numpy::array_view<const double, 1> y;
+    numpy::array_view<const agg::int8u, 3> d;
+    npy_intp rows, cols;
+    float bounds[4];
+    numpy::array_view<const agg::int8u, 1> bg;
+
+    if (!PyArg_ParseTuple(args,
+                          "O&O&O&nn(ffff)O&:pcolor2",
+                          &x.converter_contiguous,
+                          &x,
+                          &y.converter_contiguous,
+                          &y,
+                          &d.converter_contiguous,
+                          &d,
+                          &rows,
+                          &cols,
+                          &bounds[0],
+                          &bounds[1],
+                          &bounds[2],
+                          &bounds[3],
+                          &bg.converter,
+                          &bg)) {
+        return NULL;
+    }
+
+    npy_intp dim[3] = {rows, cols, 4};
+    numpy::array_view<const agg::int8u, 3> output(dim);
+
+    CALL_CPP("pcolor2", (pcolor2(x, y, d, rows, cols, bounds, bg, output)));
+
+    return output.pyobj();
+}
+
 static PyMethodDef module_functions[] = {
     {"resample", (PyCFunction)image_resample, METH_VARARGS|METH_KEYWORDS, image_resample__doc__},
+    {"pcolor", (PyCFunction)image_pcolor, METH_VARARGS, image_pcolor__doc__},
+    {"pcolor2", (PyCFunction)image_pcolor2, METH_VARARGS, image_pcolor2__doc__},
     {NULL}
 };

 static struct PyModuleDef moduledef = {
-    PyModuleDef_HEAD_INIT, "_image", NULL, 0, module_functions,
+    PyModuleDef_HEAD_INIT,
+    "_image",
+    NULL,
+    0,
+    module_functions,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };

 #pragma GCC visibility push(default)
@@ -304,8 +403,6 @@ PyMODINIT_FUNC PyInit__image(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -330,10 +427,11 @@ PyMODINIT_FUNC PyInit__image(void)
         PyModule_AddIntConstant(m, "LANCZOS", LANCZOS) ||
         PyModule_AddIntConstant(m, "BLACKMAN", BLACKMAN) ||
         PyModule_AddIntConstant(m, "_n_interpolation", _n_interpolation)) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/src/_macosx.m b/src/_macosx.m
index 9eeeab46eb..190157811e 100755
--- a/src/_macosx.m
+++ b/src/_macosx.m
@@ -237,8 +237,6 @@ static int wait_for_stdin(void)
 }
 - (void)dealloc;
 - (void)drawRect:(NSRect)rect;
-- (void)updateDevicePixelRatio:(double)scale;
-- (void)windowDidChangeBackingProperties:(NSNotification*)notification;
 - (void)windowDidResize:(NSNotification*)notification;
 - (View*)initWithFrame:(NSRect)rect;
 - (void)setCanvas: (PyObject*)newCanvas;
@@ -708,7 +706,6 @@ FigureManager_init(FigureManager *self, PyObject *args, PyObject *kwds)
     [window setDelegate: view];
     [window makeFirstResponder: view];
     [[window contentView] addSubview: view];
-    [view updateDevicePixelRatio: [window backingScaleFactor]];

     return 0;
 }
@@ -804,9 +801,6 @@ FigureManager_resize(FigureManager* self, PyObject *args, PyObject *kwds)
     Window* window = self->window;
     if(window)
     {
-        CGFloat device_pixel_ratio = [window backingScaleFactor];
-        width /= device_pixel_ratio;
-        height /= device_pixel_ratio;
         // 36 comes from hard-coded size of toolbar later in code
         [window setContentSize: NSMakeSize(width, height + 36.)];
     }
@@ -1379,15 +1373,13 @@ set_cursor(PyObject* unused, PyObject* args)
 {
     int i;
     if(!PyArg_ParseTuple(args, "i", &i)) return NULL;
-    switch (i) {
+    switch (i)
+    { case 0: [[NSCursor pointingHandCursor] set]; break;
       case 1: [[NSCursor arrowCursor] set]; break;
-      case 2: [[NSCursor pointingHandCursor] set]; break;
-      case 3: [[NSCursor crosshairCursor] set]; break;
-      case 4: [[NSCursor openHandCursor] set]; break;
+      case 2: [[NSCursor crosshairCursor] set]; break;
+      case 3: [[NSCursor openHandCursor] set]; break;
       /* OSX handles busy state itself so no need to set a cursor here */
-      case 5: break;
-      case 6: [[NSCursor resizeLeftRightCursor] set]; break;
-      case 7: [[NSCursor resizeUpDownCursor] set]; break;
+      case 4: break;
       default: return NULL;
     }
     Py_RETURN_NONE;
@@ -1660,6 +1652,15 @@ static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)

     CGContextRef cr = [[NSGraphicsContext currentContext] CGContext];

+    double new_device_scale = _get_device_scale(cr);
+
+    if (device_scale != new_device_scale) {
+        device_scale = new_device_scale;
+        if (!PyObject_CallMethod(canvas, "_set_device_scale", "d", device_scale, NULL)) {
+            PyErr_Print();
+            goto exit;
+        }
+    }
     if (!(renderer = PyObject_CallMethod(canvas, "_draw", "", NULL))
         || !(renderer_buffer = PyObject_GetAttrString(renderer, "_renderer"))) {
         PyErr_Print();
@@ -1680,33 +1681,6 @@ static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)
     PyGILState_Release(gstate);
 }

-- (void)updateDevicePixelRatio:(double)scale
-{
-    PyObject* change = NULL;
-    PyGILState_STATE gstate = PyGILState_Ensure();
-
-    device_scale = scale;
-    if (!(change = PyObject_CallMethod(canvas, "_set_device_pixel_ratio", "d", device_scale, NULL))) {
-        PyErr_Print();
-        goto exit;
-    }
-    if (PyObject_IsTrue(change)) {
-        [self setNeedsDisplay: YES];
-    }
-
-  exit:
-    Py_XDECREF(change);
-
-    PyGILState_Release(gstate);
-}
-
-- (void)windowDidChangeBackingProperties:(NSNotification *)notification
-{
-    Window* window = [notification object];
-
-    [self updateDevicePixelRatio: [window backingScaleFactor]];
-}
-
 - (void)windowDidResize: (NSNotification*)notification
 {
     int width, height;
@@ -1909,12 +1883,127 @@ static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)
     PyGILState_Release(gstate);
 }

-- (void)rightMouseDown:(NSEvent *)event { [self mouseDown: event]; }
-- (void)rightMouseUp:(NSEvent *)event { [self mouseUp: event]; }
-- (void)rightMouseDragged:(NSEvent *)event { [self mouseDragged: event]; }
-- (void)otherMouseDown:(NSEvent *)event { [self mouseDown: event]; }
-- (void)otherMouseUp:(NSEvent *)event { [self mouseUp: event]; }
-- (void)otherMouseDragged:(NSEvent *)event { [self mouseDragged: event]; }
+- (void)rightMouseDown:(NSEvent *)event
+{
+    int x, y;
+    int num = 3;
+    int dblclick = 0;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    if ([event clickCount] == 2) {
+      dblclick = 1;
+    }
+    result = PyObject_CallMethod(canvas, "button_press_event", "iiii", x, y, num, dblclick);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)rightMouseUp:(NSEvent *)event
+{
+    int x, y;
+    int num = 3;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    result = PyObject_CallMethod(canvas, "button_release_event", "iii", x, y, num);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)rightMouseDragged:(NSEvent *)event
+{
+    int x, y;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    PyGILState_STATE gstate = PyGILState_Ensure();
+    PyObject* result = PyObject_CallMethod(canvas, "motion_notify_event", "ii", x, y);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)otherMouseDown:(NSEvent *)event
+{
+    int x, y;
+    int num = 2;
+    int dblclick = 0;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    if ([event clickCount] == 2) {
+      dblclick = 1;
+    }
+    result = PyObject_CallMethod(canvas, "button_press_event", "iiii", x, y, num, dblclick);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)otherMouseUp:(NSEvent *)event
+{
+    int x, y;
+    int num = 2;
+    PyObject* result;
+    PyGILState_STATE gstate;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    gstate = PyGILState_Ensure();
+    result = PyObject_CallMethod(canvas, "button_release_event", "iii", x, y, num);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}
+
+- (void)otherMouseDragged:(NSEvent *)event
+{
+    int x, y;
+    NSPoint location = [event locationInWindow];
+    location = [self convertPoint: location fromView: nil];
+    x = location.x * device_scale;
+    y = location.y * device_scale;
+    PyGILState_STATE gstate = PyGILState_Ensure();
+    PyObject* result = PyObject_CallMethod(canvas, "motion_notify_event", "ii", x, y);
+    if(result)
+        Py_DECREF(result);
+    else
+        PyErr_Print();
+
+    PyGILState_Release(gstate);
+}

 - (void)setRubberband:(NSRect)rect
 {
@@ -2319,7 +2408,15 @@ static struct PyMethodDef methods[] = {
 };

 static struct PyModuleDef moduledef = {
-    PyModuleDef_HEAD_INIT, "_macosx", "Mac OS X native backend", -1, methods
+    PyModuleDef_HEAD_INIT,
+    "_macosx",
+    "Mac OS X native backend",
+    -1,
+    methods,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };

 #pragma GCC visibility push(default)
diff --git a/src/_path.h b/src/_path.h
index f4c8fd036d..16a981f0e3 100644
--- a/src/_path.h
+++ b/src/_path.h
@@ -259,7 +259,7 @@ inline void points_in_path(PointArray &points,
     }

     transformed_path_t trans_path(path, trans);
-    no_nans_t no_nans_path(trans_path, true, path.has_codes());
+    no_nans_t no_nans_path(trans_path, true, path.has_curves());
     curve_t curved_path(no_nans_path);
     if (r != 0.0) {
         contour_t contoured_path(curved_path);
@@ -305,7 +305,7 @@ void points_on_path(PointArray &points,
     }

     transformed_path_t trans_path(path, trans);
-    no_nans_t nan_removed_path(trans_path, true, path.has_codes());
+    no_nans_t nan_removed_path(trans_path, true, path.has_curves());
     curve_t curved_path(nan_removed_path);
     stroke_t stroked_path(curved_path);
     stroked_path.width(r * 2.0);
@@ -378,7 +378,7 @@ void update_path_extents(PathIterator &path, agg::trans_affine &trans, extent_li
     unsigned code;

     transformed_path_t tpath(path, trans);
-    nan_removed_t nan_removed(tpath, true, path.has_codes());
+    nan_removed_t nan_removed(tpath, true, path.has_curves());

     nan_removed.rewind(0);

@@ -447,6 +447,7 @@ void point_in_path_collection(double x,
                               OffsetArray &offsets,
                               agg::trans_affine &offset_trans,
                               bool filled,
+                              e_offset_position offset_position,
                               std::vector<int> &result)
 {
     size_t Npaths = paths.size();
@@ -482,7 +483,11 @@ void point_in_path_collection(double x,
             double xo = offsets(i % Noffsets, 0);
             double yo = offsets(i % Noffsets, 1);
             offset_trans.transform(&xo, &yo);
-            trans *= agg::trans_affine_translation(xo, yo);
+            if (offset_position == OFFSET_POSITION_DATA) {
+                trans = agg::trans_affine_translation(xo, yo) * trans;
+            } else {
+                trans *= agg::trans_affine_translation(xo, yo);
+            }
         }

         if (filled) {
@@ -512,7 +517,7 @@ bool path_in_path(PathIterator1 &a,
     }

     transformed_path_t b_path_trans(b, btrans);
-    no_nans_t b_no_nans(b_path_trans, true, b.has_codes());
+    no_nans_t b_no_nans(b_path_trans, true, b.has_curves());
     curve_t b_curved(b_no_nans);

     double x, y;
@@ -529,7 +534,7 @@ bool path_in_path(PathIterator1 &a,
 /** The clip_path_to_rect code here is a clean-room implementation of
     the Sutherland-Hodgman clipping algorithm described here:

-  https://en.wikipedia.org/wiki/Sutherland-Hodgman_clipping_algorithm
+  http://en.wikipedia.org/wiki/Sutherland-Hodgman_clipping_algorithm
 */

 namespace clip_to_rect_filters
@@ -884,8 +889,8 @@ bool path_intersects_path(PathIterator1 &p1, PathIterator2 &p2)
         return false;
     }

-    no_nans_t n1(p1, true, p1.has_codes());
-    no_nans_t n2(p2, true, p2.has_codes());
+    no_nans_t n1(p1, true, p1.has_curves());
+    no_nans_t n2(p2, true, p2.has_curves());

     curve_t c1(n1);
     curve_t c2(n2);
@@ -949,7 +954,7 @@ bool path_intersects_rectangle(PathIterator &path,
         return false;
     }

-    no_nans_t no_nans(path, true, path.has_codes());
+    no_nans_t no_nans(path, true, path.has_curves());
     curve_t curve(no_nans);

     double cx = (rect_x1 + rect_x2) * 0.5, cy = (rect_y1 + rect_y2) * 0.5;
@@ -998,8 +1003,8 @@ void convert_path_to_polygons(PathIterator &path,
     bool simplify = path.should_simplify();

     transformed_path_t tpath(path, trans);
-    nan_removal_t nan_removed(tpath, true, path.has_codes());
-    clipped_t clipped(nan_removed, do_clip, width, height);
+    nan_removal_t nan_removed(tpath, true, path.has_curves());
+    clipped_t clipped(nan_removed, do_clip && !path.has_curves(), width, height);
     simplify_t simplified(clipped, simplify, path.simplify_threshold());
     curve_t curve(simplified);

@@ -1063,8 +1068,8 @@ void cleanup_path(PathIterator &path,
     typedef Sketch<curve_t> sketch_t;

     transformed_path_t tpath(path, trans);
-    nan_removal_t nan_removed(tpath, remove_nans, path.has_codes());
-    clipped_t clipped(nan_removed, do_clip, rect);
+    nan_removal_t nan_removed(tpath, remove_nans, path.has_curves());
+    clipped_t clipped(nan_removed, do_clip && !path.has_curves(), rect);
     snapped_t snapped(clipped, snap_mode, path.total_vertices(), stroke_width);
     simplify_t simplified(snapped, do_simplify, path.simplify_threshold());

@@ -1147,14 +1152,15 @@ bool __convert_to_string(PathIterator &path,
     double last_x = 0.0;
     double last_y = 0.0;

+    const int sizes[] = { 1, 1, 2, 3 };
     int size = 0;
     unsigned code;

     while ((code = path.vertex(&x[0], &y[0])) != agg::path_cmd_stop) {
-        if (code == CLOSEPOLY) {
+        if (code == 0x4f) {
             buffer += codes[4];
         } else if (code < 5) {
-            size = NUM_VERTICES[code];
+            size = sizes[code - 1];

             for (int i = 1; i < size; ++i) {
                 unsigned subcode = path.vertex(&x[i], &y[i]);
@@ -1222,8 +1228,8 @@ bool convert_to_string(PathIterator &path,
     bool do_clip = (clip_rect.x1 < clip_rect.x2 && clip_rect.y1 < clip_rect.y2);

     transformed_path_t tpath(path, trans);
-    nan_removal_t nan_removed(tpath, true, path.has_codes());
-    clipped_t clipped(nan_removed, do_clip, clip_rect);
+    nan_removal_t nan_removed(tpath, true, path.has_curves());
+    clipped_t clipped(nan_removed, do_clip && !path.has_curves(), clip_rect);
     simplify_t simplified(clipped, simplify, path.simplify_threshold());

     buffersize = path.total_vertices() * (precision + 5) * 4;
diff --git a/src/_path_wrapper.cpp b/src/_path_wrapper.cpp
index 6911059d0d..2b58aec0cf 100644
--- a/src/_path_wrapper.cpp
+++ b/src/_path_wrapper.cpp
@@ -269,18 +269,17 @@ const char *Py_get_path_collection_extents__doc__ =
 static PyObject *Py_get_path_collection_extents(PyObject *self, PyObject *args, PyObject *kwds)
 {
     agg::trans_affine master_transform;
-    py::PathGenerator paths;
+    PyObject *pathsobj;
     numpy::array_view<const double, 3> transforms;
     numpy::array_view<const double, 2> offsets;
     agg::trans_affine offset_trans;
     extent_limits e;

     if (!PyArg_ParseTuple(args,
-                          "O&O&O&O&O&:get_path_collection_extents",
+                          "O&OO&O&O&:get_path_collection_extents",
                           &convert_trans_affine,
                           &master_transform,
-                          &convert_pathgen,
-                          &paths,
+                          &pathsobj,
                           &convert_transforms,
                           &transforms,
                           &convert_points,
@@ -290,9 +289,18 @@ static PyObject *Py_get_path_collection_extents(PyObject *self, PyObject *args,
         return NULL;
     }

-    CALL_CPP("get_path_collection_extents",
-             (get_path_collection_extents(
-                 master_transform, paths, transforms, offsets, offset_trans, e)));
+    try
+    {
+        py::PathGenerator paths(pathsobj);
+
+        CALL_CPP("get_path_collection_extents",
+                 (get_path_collection_extents(
+                     master_transform, paths, transforms, offsets, offset_trans, e)));
+    }
+    catch (const py::exception &)
+    {
+        return NULL;
+    }

     npy_intp dims[] = { 2, 2 };
     numpy::array_view<double, 2> extents(dims);
@@ -319,23 +327,22 @@ static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args, PyO
 {
     double x, y, radius;
     agg::trans_affine master_transform;
-    py::PathGenerator paths;
+    PyObject *pathsobj;
     numpy::array_view<const double, 3> transforms;
     numpy::array_view<const double, 2> offsets;
     agg::trans_affine offset_trans;
     bool filled;
-    PyObject *offset_position; // no longer used
+    e_offset_position offset_position;
     std::vector<int> result;

     if (!PyArg_ParseTuple(args,
-                          "dddO&O&O&O&O&O&O:point_in_path_collection",
+                          "dddO&OO&O&O&O&O&:point_in_path_collection",
                           &x,
                           &y,
                           &radius,
                           &convert_trans_affine,
                           &master_transform,
-                          &convert_pathgen,
-                          &paths,
+                          &pathsobj,
                           &convert_transforms,
                           &transforms,
                           &convert_points,
@@ -344,21 +351,32 @@ static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args, PyO
                           &offset_trans,
                           &convert_bool,
                           &filled,
+                          &convert_offset_position,
                           &offset_position)) {
         return NULL;
     }

-    CALL_CPP("point_in_path_collection",
-             (point_in_path_collection(x,
-                                       y,
-                                       radius,
-                                       master_transform,
-                                       paths,
-                                       transforms,
-                                       offsets,
-                                       offset_trans,
-                                       filled,
-                                       result)));
+    try
+    {
+        py::PathGenerator paths(pathsobj);
+
+        CALL_CPP("point_in_path_collection",
+                 (point_in_path_collection(x,
+                                           y,
+                                           radius,
+                                           master_transform,
+                                           paths,
+                                           transforms,
+                                           offsets,
+                                           offset_trans,
+                                           filled,
+                                           offset_position,
+                                           result)));
+    }
+    catch (const py::exception &)
+    {
+        return NULL;
+    }

     npy_intp dims[] = {(npy_intp)result.size() };
     numpy::array_view<int, 1> pyresult(dims);
@@ -892,15 +910,31 @@ static PyMethodDef module_functions[] = {
 };

 static struct PyModuleDef moduledef = {
-    PyModuleDef_HEAD_INIT, "_path", NULL, 0, module_functions
+    PyModuleDef_HEAD_INIT,
+    "_path",
+    NULL,
+    0,
+    module_functions,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };

 #pragma GCC visibility push(default)

 PyMODINIT_FUNC PyInit__path(void)
 {
+    PyObject *m;
+    m = PyModule_Create(&moduledef);
+
+    if (m == NULL) {
+        return NULL;
+    }
+
     import_array();
-    return PyModule_Create(&moduledef);
+
+    return m;
 }

 #pragma GCC visibility pop
diff --git a/src/_tkagg.cpp b/src/_tkagg.cpp
index 7f72ed2ea6..5f058d14e0 100644
--- a/src/_tkagg.cpp
+++ b/src/_tkagg.cpp
@@ -27,9 +27,7 @@
 #endif

 #ifdef WIN32_DLL
-#include <string>
 #include <windows.h>
-#include <commctrl.h>
 #define PSAPI_VERSION 1
 #include <psapi.h>  // Must be linked with 'psapi' library
 #define dlsym GetProcAddress
@@ -50,12 +48,7 @@ static int convert_voidptr(PyObject *obj, void *p)
 // Global vars for Tk functions.  We load these symbols from the tkinter
 // extension module or loaded Tk libraries at run-time.
 static Tk_FindPhoto_t TK_FIND_PHOTO;
-static Tk_PhotoPutBlock_t TK_PHOTO_PUT_BLOCK;
-#ifdef WIN32_DLL
-// Global vars for Tcl functions.  We load these symbols from the tkinter
-// extension module or loaded Tcl libraries at run-time.
-static Tcl_SetVar_t TCL_SETVAR;
-#endif
+static Tk_PhotoPutBlock_NoComposite_t TK_PHOTO_PUT_BLOCK_NO_COMPOSITE;

 static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
 {
@@ -63,16 +56,13 @@ static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
     char const *photo_name;
     int height, width;
     unsigned char *data_ptr;
-    int comp_rule;
-    int put_retval;
     int o0, o1, o2, o3;
     int x1, x2, y1, y2;
     Tk_PhotoHandle photo;
     Tk_PhotoImageBlock block;
-    if (!PyArg_ParseTuple(args, "O&s(iiO&)i(iiii)(iiii):blit",
+    if (!PyArg_ParseTuple(args, "O&s(iiO&)(iiii)(iiii):blit",
                           convert_voidptr, &interp, &photo_name,
                           &height, &width, convert_voidptr, &data_ptr,
-                          &comp_rule,
                           &o0, &o1, &o2, &o3,
                           &x1, &x2, &y1, &y2)) {
         goto exit;
@@ -85,12 +75,7 @@ static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
         PyErr_SetString(PyExc_ValueError, "Attempting to draw out of bounds");
         goto exit;
     }
-    if (comp_rule != TK_PHOTO_COMPOSITE_OVERLAY && comp_rule != TK_PHOTO_COMPOSITE_SET) {
-        PyErr_SetString(PyExc_ValueError, "Invalid comp_rule argument");
-        goto exit;
-    }

-    Py_BEGIN_ALLOW_THREADS
     block.pixelPtr = data_ptr + 4 * ((height - y2) * width + x1);
     block.width = x2 - x1;
     block.height = y2 - y1;
@@ -100,13 +85,8 @@ static PyObject *mpl_tk_blit(PyObject *self, PyObject *args)
     block.offset[1] = o1;
     block.offset[2] = o2;
     block.offset[3] = o3;
-    put_retval = TK_PHOTO_PUT_BLOCK(
-        interp, photo, &block, x1, height - y2, x2 - x1, y2 - y1, comp_rule);
-    Py_END_ALLOW_THREADS
-    if (put_retval == TCL_ERROR) {
-        return PyErr_NoMemory();
-    }
-
+    TK_PHOTO_PUT_BLOCK_NO_COMPOSITE(
+        photo, &block, x1, height - y2, x2 - x1, y2 - y1);
 exit:
     if (PyErr_Occurred()) {
         return NULL;
@@ -115,163 +95,48 @@ exit:
     }
 }

-#ifdef WIN32_DLL
-LRESULT CALLBACK
-DpiSubclassProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam,
-                UINT_PTR uIdSubclass, DWORD_PTR dwRefData)
-{
-    switch (uMsg) {
-    case WM_DPICHANGED:
-        // This function is a subclassed window procedure, and so is run during
-        // the Tcl/Tk event loop. Unfortunately, Tkinter has a *second* lock on
-        // Tcl threading that is not exposed publicly, but is currently taken
-        // while we're in the window procedure. So while we can take the GIL to
-        // call Python code, we must not also call *any* Tk code from Python.
-        // So stay with Tcl calls in C only.
-        {
-            // This variable naming must match the name used in
-            // lib/matplotlib/backends/_backend_tk.py:FigureManagerTk.
-            std::string var_name("window_dpi");
-            var_name += std::to_string((unsigned long long)hwnd);
-
-            // X is high word, Y is low word, but they are always equal.
-            std::string dpi = std::to_string(LOWORD(wParam));
-
-            Tcl_Interp* interp = (Tcl_Interp*)dwRefData;
-            TCL_SETVAR(interp, var_name.c_str(), dpi.c_str(), 0);
-        }
-        return 0;
-    case WM_NCDESTROY:
-        RemoveWindowSubclass(hwnd, DpiSubclassProc, uIdSubclass);
-        break;
-    }
-
-    return DefSubclassProc(hwnd, uMsg, wParam, lParam);
-}
-#endif
-
-static PyObject*
-mpl_tk_enable_dpi_awareness(PyObject* self, PyObject*const* args,
-                            Py_ssize_t nargs)
-{
-    if (nargs != 2) {
-        return PyErr_Format(PyExc_TypeError,
-                            "enable_dpi_awareness() takes 2 positional "
-                            "arguments but %zd were given",
-                            nargs);
-    }
-
-#ifdef WIN32_DLL
-    HWND frame_handle = NULL;
-    Tcl_Interp *interp = NULL;
-
-    if (!convert_voidptr(args[0], &frame_handle)) {
-        return NULL;
-    }
-    if (!convert_voidptr(args[1], &interp)) {
-        return NULL;
-    }
-
-#ifdef _DPI_AWARENESS_CONTEXTS_
-    HMODULE user32 = LoadLibrary("user32.dll");
-
-    typedef DPI_AWARENESS_CONTEXT (WINAPI *GetWindowDpiAwarenessContext_t)(HWND);
-    GetWindowDpiAwarenessContext_t GetWindowDpiAwarenessContextPtr =
-        (GetWindowDpiAwarenessContext_t)GetProcAddress(
-            user32, "GetWindowDpiAwarenessContext");
-    if (GetWindowDpiAwarenessContextPtr == NULL) {
-        FreeLibrary(user32);
-        Py_RETURN_FALSE;
-    }
-
-    typedef BOOL (WINAPI *AreDpiAwarenessContextsEqual_t)(DPI_AWARENESS_CONTEXT,
-                                                          DPI_AWARENESS_CONTEXT);
-    AreDpiAwarenessContextsEqual_t AreDpiAwarenessContextsEqualPtr =
-        (AreDpiAwarenessContextsEqual_t)GetProcAddress(
-            user32, "AreDpiAwarenessContextsEqual");
-    if (AreDpiAwarenessContextsEqualPtr == NULL) {
-        FreeLibrary(user32);
-        Py_RETURN_FALSE;
-    }
-
-    DPI_AWARENESS_CONTEXT ctx = GetWindowDpiAwarenessContextPtr(frame_handle);
-    bool per_monitor = (
-        AreDpiAwarenessContextsEqualPtr(
-            ctx, DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2) ||
-        AreDpiAwarenessContextsEqualPtr(
-            ctx, DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE));
-
-    if (per_monitor) {
-        // Per monitor aware means we need to handle WM_DPICHANGED by wrapping
-        // the Window Procedure, and the Python side needs to trace the Tk
-        // window_dpi variable stored on interp.
-        SetWindowSubclass(frame_handle, DpiSubclassProc, 0, (DWORD_PTR)interp);
-    }
-    FreeLibrary(user32);
-    return PyBool_FromLong(per_monitor);
-#endif
-#endif
-
-    Py_RETURN_NONE;
-}
-
 static PyMethodDef functions[] = {
     { "blit", (PyCFunction)mpl_tk_blit, METH_VARARGS },
-    { "enable_dpi_awareness", (PyCFunction)mpl_tk_enable_dpi_awareness,
-      METH_FASTCALL },
     { NULL, NULL } /* sentinel */
 };

-// Functions to fill global Tcl/Tk function pointers by dynamic loading.
+// Functions to fill global Tk function pointers by dynamic loading

 template <class T>
 int load_tk(T lib)
 {
-    // Try to fill Tk global vars with function pointers. Return the number of
+    // Try to fill Tk global vars with function pointers.  Return the number of
     // functions found.
     return
         !!(TK_FIND_PHOTO =
             (Tk_FindPhoto_t)dlsym(lib, "Tk_FindPhoto")) +
-        !!(TK_PHOTO_PUT_BLOCK =
-            (Tk_PhotoPutBlock_t)dlsym(lib, "Tk_PhotoPutBlock"));
+        !!(TK_PHOTO_PUT_BLOCK_NO_COMPOSITE =
+            (Tk_PhotoPutBlock_NoComposite_t)dlsym(lib, "Tk_PhotoPutBlock_NoComposite"));
 }

 #ifdef WIN32_DLL

-template <class T>
-int load_tcl(T lib)
-{
-    // Try to fill Tcl global vars with function pointers. Return the number of
-    // functions found.
-    return
-        !!(TCL_SETVAR = (Tcl_SetVar_t)dlsym(lib, "Tcl_SetVar"));
-}
-
-/* On Windows, we can't load the tkinter module to get the Tcl/Tk symbols,
- * because Windows does not load symbols into the library name-space of
- * importing modules. So, knowing that tkinter has already been imported by
- * Python, we scan all modules in the running process for the Tcl/Tk function
- * names.
+/*
+ * On Windows, we can't load the tkinter module to get the Tk symbols, because
+ * Windows does not load symbols into the library name-space of importing
+ * modules. So, knowing that tkinter has already been imported by Python, we
+ * scan all modules in the running process for the Tk function names.
  */

 void load_tkinter_funcs(void)
 {
-    // Load Tcl/Tk functions by searching all modules in current process.
+    // Load Tk functions by searching all modules in current process.
     HMODULE hMods[1024];
     HANDLE hProcess;
     DWORD cbNeeded;
     unsigned int i;
-    bool tcl_ok = false, tk_ok = false;
     // Returns pseudo-handle that does not need to be closed
     hProcess = GetCurrentProcess();
-    // Iterate through modules in this process looking for Tcl/Tk names.
+    // Iterate through modules in this process looking for Tk names.
     if (EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded)) {
         for (i = 0; i < (cbNeeded / sizeof(HMODULE)); i++) {
-            if (!tcl_ok) {
-                tcl_ok = load_tcl(hMods[i]);
-            }
-            if (!tk_ok) {
-                tk_ok = load_tk(hMods[i]);
+            if (load_tk(hMods[i])) {
+                return;
             }
         }
     }
@@ -336,7 +201,7 @@ exit:
 #endif // end not Windows

 static PyModuleDef _tkagg_module = {
-    PyModuleDef_HEAD_INIT, "_tkagg", NULL, -1, functions
+    PyModuleDef_HEAD_INIT, "_tkagg", "", -1, functions, NULL, NULL, NULL, NULL
 };

 #pragma GCC visibility push(default)
@@ -346,16 +211,11 @@ PyMODINIT_FUNC PyInit__tkagg(void)
     load_tkinter_funcs();
     if (PyErr_Occurred()) {
         return NULL;
-#ifdef WIN32_DLL
-    } else if (!TCL_SETVAR) {
-        PyErr_SetString(PyExc_RuntimeError, "Failed to load Tcl_SetVar");
-        return NULL;
-#endif
     } else if (!TK_FIND_PHOTO) {
         PyErr_SetString(PyExc_RuntimeError, "Failed to load Tk_FindPhoto");
         return NULL;
-    } else if (!TK_PHOTO_PUT_BLOCK) {
-        PyErr_SetString(PyExc_RuntimeError, "Failed to load Tk_PhotoPutBlock");
+    } else if (!TK_PHOTO_PUT_BLOCK_NO_COMPOSITE) {
+        PyErr_SetString(PyExc_RuntimeError, "Failed to load Tk_PhotoPutBlock_NoComposite");
         return NULL;
     }
     return PyModule_Create(&_tkagg_module);
diff --git a/src/_tkmini.h b/src/_tkmini.h
index be7c13fa14..d99b732919 100644
--- a/src/_tkmini.h
+++ b/src/_tkmini.h
@@ -86,25 +86,14 @@ typedef struct Tk_PhotoImageBlock
     int offset[4];
 } Tk_PhotoImageBlock;

-#define TK_PHOTO_COMPOSITE_OVERLAY     0  // apply transparency rules pixel-wise
-#define TK_PHOTO_COMPOSITE_SET         1  // set image buffer directly
-#define TCL_OK     0
-#define TCL_ERROR  1
-
 /* Typedefs derived from function signatures in Tk header */
 /* Tk_FindPhoto typedef */
 typedef Tk_PhotoHandle (*Tk_FindPhoto_t) (Tcl_Interp *interp, const char
         *imageName);
-/* Tk_PhotoPutBLock typedef */
-typedef int (*Tk_PhotoPutBlock_t) (Tcl_Interp *interp, Tk_PhotoHandle handle,
+/* Tk_PhotoPutBLock_NoComposite typedef */
+typedef void (*Tk_PhotoPutBlock_NoComposite_t) (Tk_PhotoHandle handle,
         Tk_PhotoImageBlock *blockPtr, int x, int y,
-        int width, int height, int compRule);
-
-#ifdef WIN32_DLL
-/* Typedefs derived from function signatures in Tcl header */
-typedef const char *(*Tcl_SetVar_t)(Tcl_Interp *interp, const char *varName,
-                                    const char *newValue, int flags);
-#endif
+        int width, int height);

 #ifdef __cplusplus
 }
diff --git a/src/_ttconv.cpp b/src/_ttconv.cpp
index b88edbd288..2fadb9bfa5 100644
--- a/src/_ttconv.cpp
+++ b/src/_ttconv.cpp
@@ -150,6 +150,81 @@ static PyObject *convert_ttf_to_ps(PyObject *self, PyObject *args, PyObject *kwd
     return Py_None;
 }

+class PythonDictionaryCallback : public TTDictionaryCallback
+{
+    PyObject *_dict;
+
+  public:
+    PythonDictionaryCallback(PyObject *dict)
+    {
+        _dict = dict;
+    }
+
+    virtual void add_pair(const char *a, const char *b)
+    {
+        assert(a != NULL);
+        assert(b != NULL);
+        PyObject *value = PyBytes_FromString(b);
+        if (!value) {
+            throw py::exception();
+        }
+        if (PyDict_SetItemString(_dict, a, value)) {
+            Py_DECREF(value);
+            throw py::exception();
+        }
+        Py_DECREF(value);
+    }
+};
+
+static PyObject *py_get_pdf_charprocs(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    const char *filename;
+    std::vector<int> glyph_ids;
+    PyObject *result;
+
+    static const char *kwlist[] = { "filename", "glyph_ids", NULL };
+    if (!PyArg_ParseTupleAndKeywords(args,
+                                     kwds,
+                                     "y|O&:get_pdf_charprocs",
+                                     (char **)kwlist,
+                                     &filename,
+                                     pyiterable_to_vector_int,
+                                     &glyph_ids)) {
+        return NULL;
+    }
+
+    result = PyDict_New();
+    if (!result) {
+        return NULL;
+    }
+
+    PythonDictionaryCallback dict(result);
+
+    try
+    {
+        ::get_pdf_charprocs(filename, glyph_ids, dict);
+    }
+    catch (TTException &e)
+    {
+        Py_DECREF(result);
+        PyErr_SetString(PyExc_RuntimeError, e.getMessage());
+        return NULL;
+    }
+    catch (const py::exception &)
+    {
+        Py_DECREF(result);
+        return NULL;
+    }
+    catch (...)
+    {
+        Py_DECREF(result);
+        PyErr_SetString(PyExc_RuntimeError, "Unknown C++ exception");
+        return NULL;
+    }
+
+    return result;
+}
+
 static PyMethodDef ttconv_methods[] =
 {
     {
@@ -164,12 +239,26 @@ static PyMethodDef ttconv_methods[] =
         "font data will be written to.\n"
         "fonttype may be either 3 or 42.  Type 3 is a \"raw Postscript\" font. "
         "Type 42 is an embedded Truetype font.  Glyph subsetting is not supported "
-        "for Type 42 fonts within this module (needs to be done externally).\n"
+        "for Type 42 fonts.\n"
         "glyph_ids (optional) is a list of glyph ids (integers) to keep when "
         "subsetting to a Type 3 font.  If glyph_ids is not provided or is None, "
         "then all glyphs will be included.  If any of the glyphs specified are "
         "composite glyphs, then the component glyphs will also be included."
     },
+    {
+        "get_pdf_charprocs", (PyCFunction)py_get_pdf_charprocs, METH_VARARGS | METH_KEYWORDS,
+        "get_pdf_charprocs(filename, glyph_ids)\n"
+        "\n"
+        "Given a Truetype font file, returns a dictionary containing the PDF Type 3\n"
+        "representation of its paths.  Useful for subsetting a Truetype font inside\n"
+        "of a PDF file.\n"
+        "\n"
+        "filename is the path to a TTF font file.\n"
+        "glyph_ids is a list of the numeric glyph ids to include.\n"
+        "The return value is a dictionary where the keys are glyph names and\n"
+        "the values are the stream content needed to render that glyph.  This\n"
+        "is useful to generate the CharProcs dictionary in a PDF Type 3 font.\n"
+    },
     {0, 0, 0, 0}  /* Sentinel */
 };

@@ -184,6 +273,7 @@ static PyModuleDef ttconv_module = {
     module_docstring,
     -1,
     ttconv_methods,
+    NULL, NULL, NULL, NULL
 };

 #pragma GCC visibility push(default)
@@ -191,7 +281,11 @@ static PyModuleDef ttconv_module = {
 PyMODINIT_FUNC
 PyInit__ttconv(void)
 {
-    return PyModule_Create(&ttconv_module);
+    PyObject* m;
+
+    m = PyModule_Create(&ttconv_module);
+
+    return m;
 }

 #pragma GCC visibility pop
diff --git a/src/checkdep_freetype2.c b/src/checkdep_freetype2.c
index 8d9d8ca24a..d0e8fd34fb 100644
--- a/src/checkdep_freetype2.c
+++ b/src/checkdep_freetype2.c
@@ -1,7 +1,7 @@
 #ifdef __has_include
   #if !__has_include(<ft2build.h>)
     #error "FreeType version 2.3 or higher is required. \
-You may unset the system_freetype entry in mplsetup.cfg to let Matplotlib download it."
+You may unset the system_freetype entry in setup.cfg to let Matplotlib download it."
   #endif
 #endif

@@ -15,5 +15,5 @@ You may unset the system_freetype entry in mplsetup.cfg to let Matplotlib downlo
   XSTR(FREETYPE_MAJOR) "." XSTR(FREETYPE_MINOR) "." XSTR(FREETYPE_PATCH) ".")
 #if FREETYPE_MAJOR << 16 + FREETYPE_MINOR << 8 + FREETYPE_PATCH < 0x020300
   #error "FreeType version 2.3 or higher is required. \
-You may unset the system_freetype entry in mplsetup.cfg to let Matplotlib download it."
+You may unset the system_freetype entry in setup.cfg to let Matplotlib download it."
 #endif
diff --git a/src/ft2font.cpp b/src/ft2font.cpp
index bb7fb1fa29..720d8a622d 100644
--- a/src/ft2font.cpp
+++ b/src/ft2font.cpp
@@ -20,7 +20,7 @@
  To improve the hinting of the fonts, this code uses a hack
  presented here:

- http://agg.sourceforge.net/antigrain.com/research/font_rasterization/index.html
+ http://antigrain.com/research/font_rasterization/index.html

  The idea is to limit the effect of hinting in the x-direction, while
  preserving hinting in the y-direction.  Since freetype does not
@@ -99,13 +99,13 @@ void FT2Image::draw_bitmap(FT_Bitmap *bitmap, FT_Int x, FT_Int y)
     FT_Int char_width = bitmap->width;
     FT_Int char_height = bitmap->rows;

-    FT_Int x1 = std::min(std::max(x, 0), image_width);
-    FT_Int y1 = std::min(std::max(y, 0), image_height);
-    FT_Int x2 = std::min(std::max(x + char_width, 0), image_width);
-    FT_Int y2 = std::min(std::max(y + char_height, 0), image_height);
+    FT_Int x1 = CLAMP(x, 0, image_width);
+    FT_Int y1 = CLAMP(y, 0, image_height);
+    FT_Int x2 = CLAMP(x + char_width, 0, image_width);
+    FT_Int y2 = CLAMP(y + char_height, 0, image_height);

-    FT_Int x_start = std::max(0, -x);
-    FT_Int y_offset = y1 - std::max(0, -y);
+    FT_Int x_start = MAX(0, -x);
+    FT_Int y_offset = y1 - MAX(0, -y);

     if (bitmap->pixel_mode == FT_PIXEL_MODE_GRAY) {
         for (FT_Int i = y1; i < y2; ++i) {
@@ -172,21 +172,15 @@ FT2Image::draw_rect_filled(unsigned long x0, unsigned long y0, unsigned long x1,
 static FT_UInt ft_get_char_index_or_warn(FT_Face face, FT_ULong charcode)
 {
     FT_UInt glyph_index = FT_Get_Char_Index(face, charcode);
-    if (glyph_index) {
-        return glyph_index;
-    }
-    PyObject *text_helpers = NULL, *tmp = NULL;
-    if (!(text_helpers = PyImport_ImportModule("matplotlib._text_helpers")) ||
-        !(tmp = PyObject_CallMethod(text_helpers, "warn_on_missing_glyph", "k", charcode))) {
-        goto exit;
-    }
-exit:
-    Py_XDECREF(text_helpers);
-    Py_XDECREF(tmp);
-    if (PyErr_Occurred()) {
-        throw py::exception();
+    if (!glyph_index) {
+        PyErr_WarnFormat(NULL, 1, "Glyph %lu missing from current font.", charcode);
+        // Apparently PyErr_WarnFormat returns 0 even if the exception propagates
+        // due to running with -Werror, so check the error flag directly instead.
+        if (PyErr_Occurred()) {
+            throw py::exception();
+        }
     }
-    return 0;
+    return glyph_index;
 }


@@ -209,10 +203,10 @@ ft_outline_move_to(FT_Vector const* to, void* user)
     ft_outline_decomposer* d = reinterpret_cast<ft_outline_decomposer*>(user);
     if (d->codes) {
         if (d->index) {
-            // Appending CLOSEPOLY is important to make patheffects work.
+            // Appending ENDPOLY is important to make patheffects work.
             *(d->vertices++) = 0;
             *(d->vertices++) = 0;
-            *(d->codes++) = CLOSEPOLY;
+            *(d->codes++) = ENDPOLY;
         }
         *(d->vertices++) = to->x / 64.;
         *(d->vertices++) = to->y / 64.;
@@ -292,7 +286,7 @@ FT2Font::get_path()
                      "FT_Outline_Decompose failed with error 0x%x", error);
         return NULL;
     }
-    if (!decomposer.index) {  // Don't append CLOSEPOLY to null glyphs.
+    if (!decomposer.index) {  // Don't append ENDPOLY to null glyphs.
       npy_intp vertices_dims[2] = { 0, 2 };
       numpy::array_view<double, 2> vertices(vertices_dims);
       npy_intp codes_dims[1] = { 0 };
@@ -315,7 +309,7 @@ FT2Font::get_path()
     }
     *(decomposer.vertices++) = 0;
     *(decomposer.vertices++) = 0;
-    *(decomposer.codes++) = CLOSEPOLY;
+    *(decomposer.codes++) = ENDPOLY;
     return Py_BuildValue("NN", vertices.pyobj(), codes.pyobj());
 }

diff --git a/src/ft2font_wrapper.cpp b/src/ft2font_wrapper.cpp
index ddcb8b5b0a..362df3a2d3 100644
--- a/src/ft2font_wrapper.cpp
+++ b/src/ft2font_wrapper.cpp
@@ -258,6 +258,7 @@ typedef struct
 {
     PyObject_HEAD
     FT2Font *x;
+    PyObject *fname;
     PyObject *py_file;
     FT_StreamRec stream;
     Py_ssize_t shape[2];
@@ -296,8 +297,6 @@ exit:

 static void close_file_callback(FT_Stream stream)
 {
-    PyObject *type, *value, *traceback;
-    PyErr_Fetch(&type, &value, &traceback);
     PyFT2Font *self = (PyFT2Font *)stream->descriptor.pointer;
     PyObject *close_result = NULL;
     if (!(close_result = PyObject_CallMethod(self->py_file, "close", ""))) {
@@ -309,7 +308,6 @@ exit:
     if (PyErr_Occurred()) {
         PyErr_WriteUnraisable((PyObject*)self);
     }
-    PyErr_Restore(type, value, traceback);
 }

 static PyTypeObject PyFT2FontType;
@@ -319,6 +317,7 @@ static PyObject *PyFT2Font_new(PyTypeObject *type, PyObject *args, PyObject *kwd
     PyFT2Font *self;
     self = (PyFT2Font *)type->tp_alloc(type, 0);
     self->x = NULL;
+    self->fname = NULL;
     self->py_file = NULL;
     memset(&self->stream, 0, sizeof(FT_StreamRec));
     return (PyObject *)self;
@@ -409,6 +408,9 @@ static int PyFT2Font_init(PyFT2Font *self, PyObject *args, PyObject *kwds)

     CALL_CPP_INIT("FT2Font->set_kerning_factor", (self->x->set_kerning_factor(kerning_factor)));

+    Py_INCREF(filename);
+    self->fname = filename;
+
 exit:
     return PyErr_Occurred() ? -1 : 0;
 }
@@ -417,6 +419,7 @@ static void PyFT2Font_dealloc(PyFT2Font *self)
 {
     delete self->x;
     Py_XDECREF(self->py_file);
+    Py_XDECREF(self->fname);
     Py_TYPE(self)->tp_free((PyObject *)self);
 }

@@ -1417,12 +1420,12 @@ static PyObject *PyFT2Font_underline_thickness(PyFT2Font *self, void *closure)

 static PyObject *PyFT2Font_fname(PyFT2Font *self, void *closure)
 {
-    if (self->stream.close) {  // Called passed a filename to the constructor.
-        return PyObject_GetAttrString(self->py_file, "name");
-    } else {
-        Py_INCREF(self->py_file);
-        return self->py_file;
+    if (self->fname) {
+        Py_INCREF(self->fname);
+        return self->fname;
     }
+
+    Py_RETURN_NONE;
 }

 static int PyFT2Font_get_buffer(PyFT2Font *self, Py_buffer *buf, int flags)
@@ -1530,7 +1533,17 @@ static PyTypeObject *PyFT2Font_init_type(PyObject *m, PyTypeObject *type)
     return type;
 }

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "ft2font" };
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "ft2font",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -1538,8 +1551,6 @@ PyMODINIT_FUNC PyInit_ft2font(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -1547,57 +1558,55 @@ PyMODINIT_FUNC PyInit_ft2font(void)
     }

     if (!PyFT2Image_init_type(m, &PyFT2ImageType)) {
-        Py_DECREF(m);
         return NULL;
     }

     if (!PyGlyph_init_type(m, &PyGlyphType)) {
-        Py_DECREF(m);
         return NULL;
     }

     if (!PyFT2Font_init_type(m, &PyFT2FontType)) {
-        Py_DECREF(m);
         return NULL;
     }

-    if (PyModule_AddIntConstant(m, "SCALABLE", FT_FACE_FLAG_SCALABLE) ||
-        PyModule_AddIntConstant(m, "FIXED_SIZES", FT_FACE_FLAG_FIXED_SIZES) ||
-        PyModule_AddIntConstant(m, "FIXED_WIDTH", FT_FACE_FLAG_FIXED_WIDTH) ||
-        PyModule_AddIntConstant(m, "SFNT", FT_FACE_FLAG_SFNT) ||
-        PyModule_AddIntConstant(m, "HORIZONTAL", FT_FACE_FLAG_HORIZONTAL) ||
-        PyModule_AddIntConstant(m, "VERTICAL", FT_FACE_FLAG_VERTICAL) ||
-        PyModule_AddIntConstant(m, "KERNING", FT_FACE_FLAG_KERNING) ||
-        PyModule_AddIntConstant(m, "FAST_GLYPHS", FT_FACE_FLAG_FAST_GLYPHS) ||
-        PyModule_AddIntConstant(m, "MULTIPLE_MASTERS", FT_FACE_FLAG_MULTIPLE_MASTERS) ||
-        PyModule_AddIntConstant(m, "GLYPH_NAMES", FT_FACE_FLAG_GLYPH_NAMES) ||
-        PyModule_AddIntConstant(m, "EXTERNAL_STREAM", FT_FACE_FLAG_EXTERNAL_STREAM) ||
-        PyModule_AddIntConstant(m, "ITALIC", FT_STYLE_FLAG_ITALIC) ||
-        PyModule_AddIntConstant(m, "BOLD", FT_STYLE_FLAG_BOLD) ||
-        PyModule_AddIntConstant(m, "KERNING_DEFAULT", FT_KERNING_DEFAULT) ||
-        PyModule_AddIntConstant(m, "KERNING_UNFITTED", FT_KERNING_UNFITTED) ||
-        PyModule_AddIntConstant(m, "KERNING_UNSCALED", FT_KERNING_UNSCALED) ||
-        PyModule_AddIntConstant(m, "LOAD_DEFAULT", FT_LOAD_DEFAULT) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_SCALE", FT_LOAD_NO_SCALE) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_HINTING", FT_LOAD_NO_HINTING) ||
-        PyModule_AddIntConstant(m, "LOAD_RENDER", FT_LOAD_RENDER) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_BITMAP", FT_LOAD_NO_BITMAP) ||
-        PyModule_AddIntConstant(m, "LOAD_VERTICAL_LAYOUT", FT_LOAD_VERTICAL_LAYOUT) ||
-        PyModule_AddIntConstant(m, "LOAD_FORCE_AUTOHINT", FT_LOAD_FORCE_AUTOHINT) ||
-        PyModule_AddIntConstant(m, "LOAD_CROP_BITMAP", FT_LOAD_CROP_BITMAP) ||
-        PyModule_AddIntConstant(m, "LOAD_PEDANTIC", FT_LOAD_PEDANTIC) ||
-        PyModule_AddIntConstant(m, "LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH", FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_RECURSE", FT_LOAD_NO_RECURSE) ||
-        PyModule_AddIntConstant(m, "LOAD_IGNORE_TRANSFORM", FT_LOAD_IGNORE_TRANSFORM) ||
-        PyModule_AddIntConstant(m, "LOAD_MONOCHROME", FT_LOAD_MONOCHROME) ||
-        PyModule_AddIntConstant(m, "LOAD_LINEAR_DESIGN", FT_LOAD_LINEAR_DESIGN) ||
-        PyModule_AddIntConstant(m, "LOAD_NO_AUTOHINT", (unsigned long)FT_LOAD_NO_AUTOHINT) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_NORMAL", (unsigned long)FT_LOAD_TARGET_NORMAL) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_LIGHT", (unsigned long)FT_LOAD_TARGET_LIGHT) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_MONO", (unsigned long)FT_LOAD_TARGET_MONO) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_LCD", (unsigned long)FT_LOAD_TARGET_LCD) ||
-        PyModule_AddIntConstant(m, "LOAD_TARGET_LCD_V", (unsigned long)FT_LOAD_TARGET_LCD_V)) {
-        Py_DECREF(m);
+    PyObject *d = PyModule_GetDict(m);
+
+    if (add_dict_int(d, "SCALABLE", FT_FACE_FLAG_SCALABLE) ||
+        add_dict_int(d, "FIXED_SIZES", FT_FACE_FLAG_FIXED_SIZES) ||
+        add_dict_int(d, "FIXED_WIDTH", FT_FACE_FLAG_FIXED_WIDTH) ||
+        add_dict_int(d, "SFNT", FT_FACE_FLAG_SFNT) ||
+        add_dict_int(d, "HORIZONTAL", FT_FACE_FLAG_HORIZONTAL) ||
+        add_dict_int(d, "VERTICAL", FT_FACE_FLAG_VERTICAL) ||
+        add_dict_int(d, "KERNING", FT_FACE_FLAG_KERNING) ||
+        add_dict_int(d, "FAST_GLYPHS", FT_FACE_FLAG_FAST_GLYPHS) ||
+        add_dict_int(d, "MULTIPLE_MASTERS", FT_FACE_FLAG_MULTIPLE_MASTERS) ||
+        add_dict_int(d, "GLYPH_NAMES", FT_FACE_FLAG_GLYPH_NAMES) ||
+        add_dict_int(d, "EXTERNAL_STREAM", FT_FACE_FLAG_EXTERNAL_STREAM) ||
+        add_dict_int(d, "ITALIC", FT_STYLE_FLAG_ITALIC) ||
+        add_dict_int(d, "BOLD", FT_STYLE_FLAG_BOLD) ||
+        add_dict_int(d, "KERNING_DEFAULT", FT_KERNING_DEFAULT) ||
+        add_dict_int(d, "KERNING_UNFITTED", FT_KERNING_UNFITTED) ||
+        add_dict_int(d, "KERNING_UNSCALED", FT_KERNING_UNSCALED) ||
+        add_dict_int(d, "LOAD_DEFAULT", FT_LOAD_DEFAULT) ||
+        add_dict_int(d, "LOAD_NO_SCALE", FT_LOAD_NO_SCALE) ||
+        add_dict_int(d, "LOAD_NO_HINTING", FT_LOAD_NO_HINTING) ||
+        add_dict_int(d, "LOAD_RENDER", FT_LOAD_RENDER) ||
+        add_dict_int(d, "LOAD_NO_BITMAP", FT_LOAD_NO_BITMAP) ||
+        add_dict_int(d, "LOAD_VERTICAL_LAYOUT", FT_LOAD_VERTICAL_LAYOUT) ||
+        add_dict_int(d, "LOAD_FORCE_AUTOHINT", FT_LOAD_FORCE_AUTOHINT) ||
+        add_dict_int(d, "LOAD_CROP_BITMAP", FT_LOAD_CROP_BITMAP) ||
+        add_dict_int(d, "LOAD_PEDANTIC", FT_LOAD_PEDANTIC) ||
+        add_dict_int(d, "LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH", FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH) ||
+        add_dict_int(d, "LOAD_NO_RECURSE", FT_LOAD_NO_RECURSE) ||
+        add_dict_int(d, "LOAD_IGNORE_TRANSFORM", FT_LOAD_IGNORE_TRANSFORM) ||
+        add_dict_int(d, "LOAD_MONOCHROME", FT_LOAD_MONOCHROME) ||
+        add_dict_int(d, "LOAD_LINEAR_DESIGN", FT_LOAD_LINEAR_DESIGN) ||
+        add_dict_int(d, "LOAD_NO_AUTOHINT", (unsigned long)FT_LOAD_NO_AUTOHINT) ||
+        add_dict_int(d, "LOAD_TARGET_NORMAL", (unsigned long)FT_LOAD_TARGET_NORMAL) ||
+        add_dict_int(d, "LOAD_TARGET_LIGHT", (unsigned long)FT_LOAD_TARGET_LIGHT) ||
+        add_dict_int(d, "LOAD_TARGET_MONO", (unsigned long)FT_LOAD_TARGET_MONO) ||
+        add_dict_int(d, "LOAD_TARGET_LCD", (unsigned long)FT_LOAD_TARGET_LCD) ||
+        add_dict_int(d, "LOAD_TARGET_LCD_V", (unsigned long)FT_LOAD_TARGET_LCD_V)) {
         return NULL;
     }

@@ -1606,7 +1615,6 @@ PyMODINIT_FUNC PyInit_ft2font(void)

     if (error) {
         PyErr_SetString(PyExc_RuntimeError, "Could not initialize the freetype2 library");
-        Py_DECREF(m);
         return NULL;
     }

@@ -1617,16 +1625,16 @@ PyMODINIT_FUNC PyInit_ft2font(void)
         FT_Library_Version(_ft2Library, &major, &minor, &patch);
         sprintf(version_string, "%d.%d.%d", major, minor, patch);
         if (PyModule_AddStringConstant(m, "__freetype_version__", version_string)) {
-            Py_DECREF(m);
             return NULL;
         }
     }

     if (PyModule_AddStringConstant(m, "__freetype_build_type__", STRINGIFY(FREETYPE_BUILD_TYPE))) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/src/mplutils.cpp b/src/mplutils.cpp
new file mode 100644
index 0000000000..237def047d
--- /dev/null
+++ b/src/mplutils.cpp
@@ -0,0 +1,21 @@
+/* -*- mode: c++; c-basic-offset: 4 -*- */
+
+#include "mplutils.h"
+
+int add_dict_int(PyObject *dict, const char *key, long val)
+{
+    PyObject *valobj;
+    valobj = PyLong_FromLong(val);
+    if (valobj == NULL) {
+        return 1;
+    }
+
+    if (PyDict_SetItemString(dict, key, valobj)) {
+        Py_DECREF(valobj);
+        return 1;
+    }
+
+    Py_DECREF(valobj);
+
+    return 0;
+}
diff --git a/src/mplutils.h b/src/mplutils.h
index bcdcdf68e6..925ec32c08 100644
--- a/src/mplutils.h
+++ b/src/mplutils.h
@@ -29,21 +29,28 @@

 #include <Python.h>

+#undef CLAMP
+#define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
+
+#undef MAX
+#define MAX(a, b) (((a) > (b)) ? (a) : (b))
+
 inline double mpl_round(double v)
 {
     return (double)(int)(v + ((v >= 0.0) ? 0.5 : -0.5));
 }

-// 'kind' codes for paths.
 enum {
     STOP = 0,
     MOVETO = 1,
     LINETO = 2,
     CURVE3 = 3,
     CURVE4 = 4,
-    CLOSEPOLY = 0x4f
+    ENDPOLY = 0x4f
 };

 const size_t NUM_VERTICES[] = { 1, 1, 1, 2, 3, 1 };

+extern "C" int add_dict_int(PyObject *dict, const char *key, long val);
+
 #endif
diff --git a/src/path_converters.h b/src/path_converters.h
index 6cbbf9c141..5a1d289646 100644
--- a/src/path_converters.h
+++ b/src/path_converters.h
@@ -162,22 +162,16 @@ class PathNanRemover : protected EmbeddedQueue<4>
 {
     VertexSource *m_source;
     bool m_remove_nans;
-    bool m_has_codes;
+    bool m_has_curves;
     bool valid_segment_exists;
-    bool m_last_segment_valid;
-    bool m_was_broken;
-    double m_initX;
-    double m_initY;

   public:
-    /* has_codes should be true if the path contains bezier curve segments, or
-     * closed loops, as this requires a slower algorithm to remove the NaNs.
-     * When in doubt, set to true.
+    /* has_curves should be true if the path contains bezier curve
+       segments, as this requires a slower algorithm to remove the
+       NaNs.  When in doubt, set to true.
      */
-    PathNanRemover(VertexSource &source, bool remove_nans, bool has_codes)
-        : m_source(&source), m_remove_nans(remove_nans), m_has_codes(has_codes),
-          m_last_segment_valid(false), m_was_broken(false),
-          m_initX(nan("")), m_initY(nan(""))
+    PathNanRemover(VertexSource &source, bool remove_nans, bool has_curves)
+        : m_source(&source), m_remove_nans(remove_nans), m_has_curves(has_curves)
     {
         // ignore all close/end_poly commands until after the first valid
         // (nan-free) command is encountered
@@ -198,9 +192,8 @@ class PathNanRemover : protected EmbeddedQueue<4>
             return m_source->vertex(x, y);
         }

-        if (m_has_codes) {
-            /* This is the slow method for when there might be curves or closed
-             * loops. */
+        if (m_has_curves) {
+            /* This is the slow method for when there might be curves. */
             if (queue_pop(&code, x, y)) {
                 return code;
             }
@@ -212,41 +205,14 @@ class PathNanRemover : protected EmbeddedQueue<4>
                    are found along the way, the queue is emptied, and
                    the next curve segment is handled. */
                 code = m_source->vertex(x, y);
-                /* The vertices attached to STOP and CLOSEPOLY are never used,
-                 * so we leave them as-is even if NaN. */
-                if (code == agg::path_cmd_stop) {
+                /* The vertices attached to STOP and CLOSEPOLY left are never
+                   used, so we leave them as-is even if NaN. However, CLOSEPOLY
+                   only makes sense if a valid MOVETO command has already been
+                   emitted. */
+                if (code == agg::path_cmd_stop ||
+                    (code == (agg::path_cmd_end_poly | agg::path_flags_close) &&
+                     valid_segment_exists)) {
                     return code;
-                } else if (code == (agg::path_cmd_end_poly |
-                                    agg::path_flags_close) &&
-                           valid_segment_exists) {
-                    /* However, CLOSEPOLY only makes sense if a valid MOVETO
-                     * command has already been emitted. But if a NaN was
-                     * removed in the path, then we cannot close it as it is no
-                     * longer a loop. We must emulate that by inserting a
-                     * LINETO instead. */
-                    if (m_was_broken) {
-                        if (m_last_segment_valid && (
-                                std::isfinite(m_initX) &&
-                                std::isfinite(m_initY))) {
-                            /* Join to start if both ends are valid. */
-                            queue_push(agg::path_cmd_line_to, m_initX, m_initY);
-                            break;
-                        } else {
-                            /* Skip the close, in case there are additional
-                             * subpaths. */
-                            continue;
-                        }
-                        m_was_broken = false;
-                        break;
-                    } else {
-                        return code;
-                    }
-                } else if (code == agg::path_cmd_move_to) {
-                    /* Save the initial point in order to produce the last
-                     * segment closing a loop, *if* we broke the loop. */
-                    m_initX = *x;
-                    m_initY = *y;
-                    m_was_broken = false;
                 }

                 if (needs_move_to) {
@@ -254,24 +220,22 @@ class PathNanRemover : protected EmbeddedQueue<4>
                 }

                 size_t num_extra_points = num_extra_points_map[code & 0xF];
-                m_last_segment_valid = (std::isfinite(*x) && std::isfinite(*y));
+                bool has_nan = (!(std::isfinite(*x) && std::isfinite(*y)));
                 queue_push(code, *x, *y);

                 /* Note: this test can not be short-circuited, since we need to
                    advance through the entire curve no matter what */
                 for (size_t i = 0; i < num_extra_points; ++i) {
                     m_source->vertex(x, y);
-                    m_last_segment_valid = m_last_segment_valid &&
-                        (std::isfinite(*x) && std::isfinite(*y));
+                    has_nan = has_nan || !(std::isfinite(*x) && std::isfinite(*y));
                     queue_push(code, *x, *y);
                 }

-                if (m_last_segment_valid) {
+                if (!has_nan) {
                     valid_segment_exists = true;
                     break;
                 }

-                m_was_broken = true;
                 queue_clear();

                 /* If the last point is finite, we use that for the
@@ -290,9 +254,9 @@ class PathNanRemover : protected EmbeddedQueue<4>
             } else {
                 return agg::path_cmd_stop;
             }
-        } else // !m_has_codes
+        } else // !m_has_curves
         {
-            /* This is the fast path for when we know we have no codes. */
+            /* This is the fast path for when we know we have no curves */
             code = m_source->vertex(x, y);

             if (code == agg::path_cmd_stop ||
@@ -336,7 +300,6 @@ class PathClipper : public EmbeddedQueue<3>
     double m_initX;
     double m_initY;
     bool m_has_init;
-    bool m_was_clipped;

   public:
     PathClipper(VertexSource &source, bool do_clipping, double width, double height)
@@ -348,8 +311,7 @@ class PathClipper : public EmbeddedQueue<3>
           m_moveto(true),
           m_initX(nan("")),
           m_initY(nan("")),
-          m_has_init(false),
-          m_was_clipped(false)
+          m_has_init(false)
     {
         // empty
     }
@@ -363,8 +325,7 @@ class PathClipper : public EmbeddedQueue<3>
           m_moveto(true),
           m_initX(nan("")),
           m_initY(nan("")),
-          m_has_init(false),
-          m_was_clipped(false)
+          m_has_init(false)
     {
         m_cliprect.x1 -= 1.0;
         m_cliprect.y1 -= 1.0;
@@ -375,29 +336,21 @@ class PathClipper : public EmbeddedQueue<3>
     inline void rewind(unsigned path_id)
     {
         m_has_init = false;
-        m_was_clipped = false;
         m_moveto = true;
         m_source->rewind(path_id);
     }

-    int draw_clipped_line(double x0, double y0, double x1, double y1,
-                          bool closed=false)
+    int draw_clipped_line(double x0, double y0, double x1, double y1)
     {
         unsigned moved = agg::clip_line_segment(&x0, &y0, &x1, &y1, m_cliprect);
         // moved >= 4 - Fully clipped
         // moved & 1 != 0 - First point has been moved
         // moved & 2 != 0 - Second point has been moved
-        m_was_clipped = m_was_clipped || (moved != 0);
         if (moved < 4) {
             if (moved & 1 || m_moveto) {
                 queue_push(agg::path_cmd_move_to, x0, y0);
             }
             queue_push(agg::path_cmd_line_to, x1, y1);
-            if (closed && !m_was_clipped) {
-                // Close the path only if the end point hasn't moved.
-                queue_push(agg::path_cmd_end_poly | agg::path_flags_close,
-                           x1, y1);
-            }

             m_moveto = false;
             return 1;
@@ -411,91 +364,75 @@ class PathClipper : public EmbeddedQueue<3>
         unsigned code;
         bool emit_moveto = false;

-        if (!m_do_clipping) {
-            // If not doing any clipping, just pass along the vertices verbatim
-            return m_source->vertex(x, y);
-        }
-
-        /* This is the slow path where we actually do clipping */
+        if (m_do_clipping) {
+            /* This is the slow path where we actually do clipping */

-        if (queue_pop(&code, x, y)) {
-            return code;
-        }
+            if (queue_pop(&code, x, y)) {
+                return code;
+            }

-        while ((code = m_source->vertex(x, y)) != agg::path_cmd_stop) {
-            emit_moveto = false;
+            while ((code = m_source->vertex(x, y)) != agg::path_cmd_stop) {
+                emit_moveto = false;

-            switch (code) {
-            case (agg::path_cmd_end_poly | agg::path_flags_close):
-                if (m_has_init) {
-                    // Queue the line from last point to the initial point, and
-                    // if never clipped, add a close code.
-                    draw_clipped_line(m_lastX, m_lastY, m_initX, m_initY,
-                                      true);
-                } else {
-                    // An empty path that is immediately closed.
+                switch (code) {
+                case (agg::path_cmd_end_poly | agg::path_flags_close):
+                    if (m_has_init) {
+                        draw_clipped_line(m_lastX, m_lastY, m_initX, m_initY);
+                    }
                     queue_push(
                         agg::path_cmd_end_poly | agg::path_flags_close,
                         m_lastX, m_lastY);
-                }
-                // If paths were not clipped, then the above code queued
-                // something, and we should exit the loop. Otherwise, continue
-                // to the next point, as there may be a new subpath.
-                if (queue_nonempty()) {
-                    goto exit_loop;
-                }
-                break;
-
-            case agg::path_cmd_move_to:
-
-                // was the last command a moveto (and we have
-                // seen at least one command ?
-                // if so, shove it in the queue if in clip box
-                if (m_moveto && m_has_init &&
-                    m_lastX >= m_cliprect.x1 &&
-                    m_lastX <= m_cliprect.x2 &&
-                    m_lastY >= m_cliprect.y1 &&
-                    m_lastY <= m_cliprect.y2) {
-                    // push the last moveto onto the queue
-                    queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
-                    // flag that we need to emit it
-                    emit_moveto = true;
-                }
-                // update the internal state for this moveto
-                m_initX = m_lastX = *x;
-                m_initY = m_lastY = *y;
-                m_has_init = true;
-                m_moveto = true;
-                m_was_clipped = false;
-                // if the last command was moveto exit the loop to emit the code
-                if (emit_moveto) {
                     goto exit_loop;
-                }
-                // else, break and get the next point
-                break;

-            case agg::path_cmd_line_to:
-                if (draw_clipped_line(m_lastX, m_lastY, *x, *y)) {
+                case agg::path_cmd_move_to:
+
+                    // was the last command a moveto (and we have
+                    // seen at least one command ?
+                    // if so, shove it in the queue if in clip box
+                    if (m_moveto && m_has_init &&
+                        m_lastX >= m_cliprect.x1 &&
+                        m_lastX <= m_cliprect.x2 &&
+                        m_lastY >= m_cliprect.y1 &&
+                        m_lastY <= m_cliprect.y2) {
+                        // push the last moveto onto the queue
+                        queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
+                        // flag that we need to emit it
+                        emit_moveto = true;
+                    }
+                    // update the internal state for this moveto
+                    m_initX = m_lastX = *x;
+                    m_initY = m_lastY = *y;
+                    m_has_init = true;
+                    m_moveto = true;
+                    // if the last command was moveto exit the loop to emit the code
+                    if (emit_moveto) {
+                        goto exit_loop;
+                    }
+                    // else, break and get the next point
+                    break;
+
+                case agg::path_cmd_line_to:
+                    if (draw_clipped_line(m_lastX, m_lastY, *x, *y)) {
+                        m_lastX = *x;
+                        m_lastY = *y;
+                        goto exit_loop;
+                    }
+                    m_lastX = *x;
+                    m_lastY = *y;
+                    break;
+
+                default:
+                    if (m_moveto) {
+                        queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
+                        m_moveto = false;
+                    }
+
+                    queue_push(code, *x, *y);
                     m_lastX = *x;
                     m_lastY = *y;
                     goto exit_loop;
                 }
-                m_lastX = *x;
-                m_lastY = *y;
-                break;
-
-            default:
-                if (m_moveto) {
-                    queue_push(agg::path_cmd_move_to, m_lastX, m_lastY);
-                    m_moveto = false;
-                }
-
-                queue_push(code, *x, *y);
-                m_lastX = *x;
-                m_lastY = *y;
-                goto exit_loop;
             }
-        }

         exit_loop:

@@ -515,6 +452,11 @@ class PathClipper : public EmbeddedQueue<3>
             }

             return agg::path_cmd_stop;
+        } else {
+            // If not doing any clipping, just pass along the vertices
+            // verbatim
+            return m_source->vertex(x, y);
+        }
     }
 };

diff --git a/src/py_adaptors.h b/src/py_adaptors.h
index 7722137dc6..912c93c8bf 100644
--- a/src/py_adaptors.h
+++ b/src/py_adaptors.h
@@ -175,7 +175,7 @@ class PathIterator
         return m_simplify_threshold;
     }

-    inline bool has_codes() const
+    inline bool has_curves() const
     {
         return m_codes != NULL;
     }
@@ -194,7 +194,12 @@ class PathGenerator
   public:
     typedef PathIterator path_iterator;

-    PathGenerator() : m_paths(NULL), m_npaths(0) {}
+    PathGenerator(PyObject *obj) : m_paths(NULL), m_npaths(0)
+    {
+        if (!set(obj)) {
+            throw py::exception();
+        }
+    }

     ~PathGenerator()
     {
@@ -207,7 +212,6 @@ class PathGenerator
             return 0;
         }

-        Py_XDECREF(m_paths);
         m_paths = obj;
         Py_INCREF(m_paths);

diff --git a/src/py_converters.cpp b/src/py_converters.cpp
index d2c53c553c..a4c0b19099 100644
--- a/src/py_converters.cpp
+++ b/src/py_converters.cpp
@@ -212,13 +212,33 @@ int convert_dashes(PyObject *dashobj, void *dashesp)
 {
     Dashes *dashes = (Dashes *)dashesp;

+    if (dashobj == NULL && dashobj == Py_None) {
+        return 1;
+    }
+
+    PyObject *dash_offset_obj = NULL;
     double dash_offset = 0.0;
     PyObject *dashes_seq = NULL;

-    if (!PyArg_ParseTuple(dashobj, "dO:dashes", &dash_offset, &dashes_seq)) {
+    if (!PyArg_ParseTuple(dashobj, "OO:dashes", &dash_offset_obj, &dashes_seq)) {
         return 0;
     }

+    if (dash_offset_obj != Py_None) {
+        dash_offset = PyFloat_AsDouble(dash_offset_obj);
+        if (PyErr_Occurred()) {
+            return 0;
+        }
+    } else {
+        if (PyErr_WarnEx(PyExc_FutureWarning,
+                         "Passing the dash offset as None is deprecated since "
+                         "Matplotlib 3.3 and will be removed in Matplotlib 3.5; "
+                         "pass it as zero instead.",
+                         1)) {
+            return 0;
+        }
+    }
+
     if (dashes_seq == Py_None) {
         return 1;
     }
@@ -395,16 +415,6 @@ exit:
     return status;
 }

-int convert_pathgen(PyObject *obj, void *pathgenp)
-{
-    py::PathGenerator *paths = (py::PathGenerator *)pathgenp;
-    if (!paths->set(obj)) {
-        PyErr_SetString(PyExc_TypeError, "Not an iterable of paths");
-        return 0;
-    }
-    return 1;
-}
-
 int convert_clippath(PyObject *clippath_tuple, void *clippathp)
 {
     ClipPath *clippath = (ClipPath *)clippathp;
@@ -482,6 +492,22 @@ int convert_gcagg(PyObject *pygc, void *gcp)
     return 1;
 }

+int convert_offset_position(PyObject *obj, void *offsetp)
+{
+    e_offset_position *offset = (e_offset_position *)offsetp;
+    const char *names[] = {"data", NULL};
+    int values[] = {OFFSET_POSITION_DATA};
+    int result = (int)OFFSET_POSITION_FIGURE;
+
+    if (!convert_string_enum(obj, "offset_position", names, values, &result)) {
+        PyErr_Clear();
+    }
+
+    *offset = (e_offset_position)result;
+
+    return 1;
+}
+
 int convert_face(PyObject *color, GCAgg &gc, agg::rgba *rgba)
 {
     if (!convert_rgba(color, rgba)) {
diff --git a/src/py_converters.h b/src/py_converters.h
index 2c9dc6d1b8..2c19acdaaf 100644
--- a/src/py_converters.h
+++ b/src/py_converters.h
@@ -32,9 +32,9 @@ int convert_dashes(PyObject *dashobj, void *gcp);
 int convert_dashes_vector(PyObject *obj, void *dashesp);
 int convert_trans_affine(PyObject *obj, void *transp);
 int convert_path(PyObject *obj, void *pathp);
-int convert_pathgen(PyObject *obj, void *pathgenp);
 int convert_clippath(PyObject *clippath_tuple, void *clippathp);
 int convert_snap(PyObject *obj, void *snapp);
+int convert_offset_position(PyObject *obj, void *offsetp);
 int convert_sketch_params(PyObject *obj, void *sketchp);
 int convert_gcagg(PyObject *pygc, void *gcp);
 int convert_points(PyObject *pygc, void *pointsp);
diff --git a/src/qhull_wrap.cpp b/src/qhull_wrap.c
similarity index 54%
rename from src/qhull_wrap.cpp
rename to src/qhull_wrap.c
index f219f88b4b..0f7b393829 100644
--- a/src/qhull_wrap.cpp
+++ b/src/qhull_wrap.c
@@ -7,18 +7,9 @@
  */
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
-#include "numpy_cpp.h"
-#ifdef _MSC_VER
-/* The Qhull header does not declare this as extern "C", but only MSVC seems to
- * do name mangling on global variables. We thus need to declare this before
- * the header so that it treats it correctly, and doesn't mangle the name. */
-extern "C" {
-extern const char qh_version[];
-}
-#endif
+#include "numpy/ndarrayobject.h"
 #include "libqhull_r/qhull_ra.h"
-#include <cstdio>
-#include <vector>
+#include <stdio.h>


 #ifndef MPL_DEVNULL
@@ -44,104 +35,88 @@ static void
 get_facet_vertices(qhT* qh, const facetT* facet, int indices[3])
 {
     vertexT *vertex, **vertexp;
-    FOREACHvertex_(facet->vertices) {
+    FOREACHvertex_(facet->vertices)
         *indices++ = qh_pointid(qh, vertex->point);
-    }
 }

 /* Return the indices of the 3 triangles that are neighbors of the specified
  * facet (triangle). */
 static void
-get_facet_neighbours(const facetT* facet, std::vector<int>& tri_indices,
+get_facet_neighbours(const facetT* facet, const int* tri_indices,
                      int indices[3])
 {
     facetT *neighbor, **neighborp;
-    FOREACHneighbor_(facet) {
+    FOREACHneighbor_(facet)
         *indices++ = (neighbor->upperdelaunay ? -1 : tri_indices[neighbor->id]);
-    }
 }

-/* Return true if the specified points arrays contain at least 3 unique points,
- * or false otherwise. */
-static bool
-at_least_3_unique_points(npy_intp npoints, const double* x, const double* y)
+/* Return 1 if the specified points arrays contain at least 3 unique points,
+ * or 0 otherwise. */
+static int
+at_least_3_unique_points(int npoints, const double* x, const double* y)
 {
     int i;
     const int unique1 = 0;  /* First unique point has index 0. */
     int unique2 = 0;        /* Second unique point index is 0 until set. */

-    if (npoints < 3) {
-        return false;
-    }
+    if (npoints < 3)
+        return 0;

     for (i = 1; i < npoints; ++i) {
         if (unique2 == 0) {
             /* Looking for second unique point. */
-            if (x[i] != x[unique1] || y[i] != y[unique1]) {
+            if (x[i] != x[unique1] || y[i] != y[unique1])
                 unique2 = i;
-            }
         }
         else {
             /* Looking for third unique point. */
             if ( (x[i] != x[unique1] || y[i] != y[unique1]) &&
                  (x[i] != x[unique2] || y[i] != y[unique2]) ) {
                 /* 3 unique points found, with indices 0, unique2 and i. */
-                return true;
+                return 1;
             }
         }
     }

     /* Run out of points before 3 unique points found. */
-    return false;
+    return 0;
 }

-/* Holds on to info from Qhull so that it can be destructed automatically. */
-class QhullInfo {
-public:
-    QhullInfo(FILE *error_file, qhT* qh) {
-        this->error_file = error_file;
-        this->qh = qh;
-    }
-
-    ~QhullInfo() {
-        qh_freeqhull(this->qh, !qh_ALL);
-        int curlong, totlong;  /* Memory remaining. */
-        qh_memfreeshort(this->qh, &curlong, &totlong);
-        if (curlong || totlong) {
-            PyErr_WarnEx(PyExc_RuntimeWarning,
-                         "Qhull could not free all allocated memory", 1);
-        }
-
-        if (this->error_file != stderr) {
-            fclose(error_file);
-        }
-    }
-
-private:
-    FILE* error_file;
-    qhT* qh;
-};
-
-/* Delaunay implementation method.
- * If hide_qhull_errors is true then qhull error messages are discarded;
- * if it is false then they are written to stderr. */
+/* Delaunay implementation methyod.  If hide_qhull_errors is 1 then qhull error
+ * messages are discarded; if it is 0 then they are written to stderr. */
 static PyObject*
-delaunay_impl(npy_intp npoints, const double* x, const double* y,
-              bool hide_qhull_errors)
+delaunay_impl(int npoints, const double* x, const double* y,
+              int hide_qhull_errors)
 {
-    qhT qh_qh;                  /* qh variable type and name must be like */
-    qhT* qh = &qh_qh;           /* this for Qhull macros to work correctly. */
+       qhT qh_qh;                  /* qh variable type and name must be like */
+       qhT* qh = &qh_qh;           /* this for Qhull macros to work correctly. */
+    coordT* points = NULL;
     facetT* facet;
     int i, ntri, max_facet_id;
+    FILE* error_file = NULL;    /* qhull expects a FILE* to write errors to. */
     int exitcode;               /* Value returned from qh_new_qhull(). */
+    int* tri_indices = NULL;    /* Maps qhull facet id to triangle index. */
+    int indices[3];
+    int curlong, totlong;       /* Memory remaining after qh_memfreeshort. */
+    PyObject* tuple;            /* Return tuple (triangles, neighbors). */
     const int ndim = 2;
+    npy_intp dims[2];
+    PyArrayObject* triangles = NULL;
+    PyArrayObject* neighbors = NULL;
+    int* triangles_ptr;
+    int* neighbors_ptr;
     double x_mean = 0.0;
     double y_mean = 0.0;

     QHULL_LIB_CHECK

     /* Allocate points. */
-    std::vector<coordT> points(npoints * ndim);
+    points = (coordT*)malloc(npoints*ndim*sizeof(coordT));
+    if (points == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate points array in qhull.delaunay");
+        goto error_before_qhull;
+    }

     /* Determine mean x, y coordinates. */
     for (i = 0; i < npoints; ++i) {
@@ -158,14 +133,15 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
     }

     /* qhull expects a FILE* to write errors to. */
-    FILE* error_file = NULL;
     if (hide_qhull_errors) {
         /* qhull errors are ignored by writing to OS-equivalent of /dev/null.
          * Rather than have OS-specific code here, instead it is determined by
          * setupext.py and passed in via the macro MPL_DEVNULL. */
         error_file = fopen(STRINGIFY(MPL_DEVNULL), "w");
         if (error_file == NULL) {
-            throw std::runtime_error("Could not open devnull");
+            PyErr_SetString(PyExc_RuntimeError,
+                            "Could not open devnull in qhull.delaunay");
+            goto error_before_qhull;
         }
     }
     else {
@@ -174,16 +150,15 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
     }

     /* Perform Delaunay triangulation. */
-    QhullInfo info(error_file, qh);
     qh_zero(qh, error_file);
-    exitcode = qh_new_qhull(qh, ndim, (int)npoints, points.data(), False,
-                            (char*)"qhull d Qt Qbb Qc Qz", NULL, error_file);
+    exitcode = qh_new_qhull(qh, ndim, npoints, points, False,
+                            "qhull d Qt Qbb Qc Qz", NULL, error_file);
     if (exitcode != qh_ERRnone) {
         PyErr_Format(PyExc_RuntimeError,
                      "Error in qhull Delaunay triangulation calculation: %s (exitcode=%d)%s",
                      qhull_error_msg[exitcode], exitcode,
                      hide_qhull_errors ? "; use python verbose option (-v) to see original qhull error." : "");
-        return NULL;
+        goto error;
     }

     /* Split facets so that they only have 3 points each. */
@@ -193,44 +168,57 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
        Note that libqhull uses macros to iterate through collections. */
     ntri = 0;
     FORALLfacets {
-        if (!facet->upperdelaunay) {
+        if (!facet->upperdelaunay)
             ++ntri;
-        }
     }

     max_facet_id = qh->facet_id - 1;

     /* Create array to map facet id to triangle index. */
-    std::vector<int> tri_indices(max_facet_id+1);
+    tri_indices = (int*)malloc((max_facet_id+1)*sizeof(int));
+    if (tri_indices == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate triangle map in qhull.delaunay");
+        goto error;
+    }

-    /* Allocate Python arrays to return. */
-    npy_intp dims[2] = {ntri, 3};
-    numpy::array_view<int, ndim> triangles(dims);
-    int* triangles_ptr = triangles.data();
+    /* Allocate python arrays to return. */
+    dims[0] = ntri;
+    dims[1] = 3;
+    triangles = (PyArrayObject*)PyArray_SimpleNew(ndim, dims, NPY_INT);
+    if (triangles == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate triangles array in qhull.delaunay");
+        goto error;
+    }

-    numpy::array_view<int, ndim> neighbors(dims);
-    int* neighbors_ptr = neighbors.data();
+    neighbors = (PyArrayObject*)PyArray_SimpleNew(ndim, dims, NPY_INT);
+    if (neighbors == NULL) {
+        PyErr_SetString(PyExc_MemoryError,
+                        "Could not allocate neighbors array in qhull.delaunay");
+        goto error;
+    }
+
+    triangles_ptr = (int*)PyArray_DATA(triangles);
+    neighbors_ptr = (int*)PyArray_DATA(neighbors);

     /* Determine triangles array and set tri_indices array. */
     i = 0;
     FORALLfacets {
         if (!facet->upperdelaunay) {
-            int indices[3];
             tri_indices[facet->id] = i++;
             get_facet_vertices(qh, facet, indices);
             *triangles_ptr++ = (facet->toporient ? indices[0] : indices[2]);
             *triangles_ptr++ = indices[1];
             *triangles_ptr++ = (facet->toporient ? indices[2] : indices[0]);
         }
-        else {
+        else
             tri_indices[facet->id] = -1;
-        }
     }

     /* Determine neighbors array. */
     FORALLfacets {
         if (!facet->upperdelaunay) {
-            int indices[3];
             get_facet_neighbours(facet, tri_indices, indices);
             *neighbors_ptr++ = (facet->toporient ? indices[2] : indices[0]);
             *neighbors_ptr++ = (facet->toporient ? indices[0] : indices[2]);
@@ -238,58 +226,95 @@ delaunay_impl(npy_intp npoints, const double* x, const double* y,
         }
     }

-    PyObject* tuple = PyTuple_New(2);
-    if (tuple == 0) {
-        throw std::runtime_error("Failed to create Python tuple");
-    }
-
-    PyTuple_SET_ITEM(tuple, 0, triangles.pyobj());
-    PyTuple_SET_ITEM(tuple, 1, neighbors.pyobj());
+    /* Clean up. */
+    qh_freeqhull(qh, !qh_ALL);
+    qh_memfreeshort(qh, &curlong, &totlong);
+    if (curlong || totlong)
+        PyErr_WarnEx(PyExc_RuntimeWarning,
+                     "Qhull could not free all allocated memory", 1);
+    if (hide_qhull_errors)
+        fclose(error_file);
+    free(tri_indices);
+    free(points);
+
+    tuple = PyTuple_New(2);
+    PyTuple_SetItem(tuple, 0, (PyObject*)triangles);
+    PyTuple_SetItem(tuple, 1, (PyObject*)neighbors);
     return tuple;
+
+error:
+    /* Clean up. */
+    Py_XDECREF(triangles);
+    Py_XDECREF(neighbors);
+    qh_freeqhull(qh, !qh_ALL);
+    qh_memfreeshort(qh, &curlong, &totlong);
+    /* Don't bother checking curlong and totlong as raising error anyway. */
+    if (hide_qhull_errors)
+        fclose(error_file);
+    free(tri_indices);
+
+error_before_qhull:
+    free(points);
+
+    return NULL;
 }

-/* Process Python arguments and call Delaunay implementation method. */
+/* Process python arguments and call Delaunay implementation method. */
 static PyObject*
 delaunay(PyObject *self, PyObject *args)
 {
-    numpy::array_view<double, 1> xarray;
-    numpy::array_view<double, 1> yarray;
+    PyObject* xarg;
+    PyObject* yarg;
+    PyArrayObject* xarray;
+    PyArrayObject* yarray;
     PyObject* ret;
-    npy_intp npoints;
+    int npoints;
     const double* x;
     const double* y;

-    if (!PyArg_ParseTuple(args, "O&O&",
-                          &xarray.converter_contiguous, &xarray,
-                          &yarray.converter_contiguous, &yarray)) {
+    if (!PyArg_ParseTuple(args, "OO", &xarg, &yarg)) {
+        PyErr_SetString(PyExc_ValueError, "expecting x and y arrays");
         return NULL;
     }

-    npoints = xarray.dim(0);
-    if (npoints != yarray.dim(0)) {
+    xarray = (PyArrayObject*)PyArray_ContiguousFromObject(xarg, NPY_DOUBLE,
+                                                          1, 1);
+    yarray = (PyArrayObject*)PyArray_ContiguousFromObject(yarg, NPY_DOUBLE,
+                                                          1, 1);
+    if (xarray == 0 || yarray == 0 ||
+        PyArray_DIM(xarray,0) != PyArray_DIM(yarray, 0)) {
+        Py_XDECREF(xarray);
+        Py_XDECREF(yarray);
         PyErr_SetString(PyExc_ValueError,
                         "x and y must be 1D arrays of the same length");
         return NULL;
     }

+    npoints = PyArray_DIM(xarray, 0);
+
     if (npoints < 3) {
+        Py_XDECREF(xarray);
+        Py_XDECREF(yarray);
         PyErr_SetString(PyExc_ValueError,
                         "x and y arrays must have a length of at least 3");
         return NULL;
     }

-    x = xarray.data();
-    y = yarray.data();
+    x = (const double*)PyArray_DATA(xarray);
+    y = (const double*)PyArray_DATA(yarray);

     if (!at_least_3_unique_points(npoints, x, y)) {
+        Py_XDECREF(xarray);
+        Py_XDECREF(yarray);
         PyErr_SetString(PyExc_ValueError,
                         "x and y arrays must consist of at least 3 unique points");
         return NULL;
     }

-    CALL_CPP("qhull.delaunay",
-             (ret = delaunay_impl(npoints, x, y, Py_VerboseFlag == 0)));
+    ret = delaunay_impl(npoints, x, y, Py_VerboseFlag == 0);

+    Py_XDECREF(xarray);
+    Py_XDECREF(yarray);
     return ret;
 }

@@ -308,7 +333,11 @@ static PyMethodDef qhull_methods[] = {

 static struct PyModuleDef qhull_module = {
     PyModuleDef_HEAD_INIT,
-    "qhull", "Computing Delaunay triangulations.\n", -1, qhull_methods
+    "qhull",
+    "Computing Delaunay triangulations.\n",
+    -1,
+    qhull_methods,
+    NULL, NULL, NULL, NULL
 };

 #pragma GCC visibility push(default)
@@ -316,8 +345,17 @@ static struct PyModuleDef qhull_module = {
 PyMODINIT_FUNC
 PyInit__qhull(void)
 {
+    PyObject* m;
+
+    m = PyModule_Create(&qhull_module);
+
+    if (m == NULL) {
+        return NULL;
+    }
+
     import_array();
-    return PyModule_Create(&qhull_module);
+
+    return m;
 }

 #pragma GCC visibility pop
diff --git a/src/tri/_tri.cpp b/src/tri/_tri.cpp
index b7a87783de..075ab76583 100644
--- a/src/tri/_tri.cpp
+++ b/src/tri/_tri.cpp
@@ -7,12 +7,15 @@
  */
 #define NO_IMPORT_ARRAY

-#include "../mplutils.h"
 #include "_tri.h"

 #include <algorithm>
 #include <set>

+#define MOVETO 1
+#define LINETO 2
+
+

 TriEdge::TriEdge()
     : tri(-1), edge(-1)
@@ -597,88 +600,31 @@ void TriContourGenerator::clear_visited_flags(bool include_boundaries)
     }
 }

-PyObject* TriContourGenerator::contour_line_to_segs_and_kinds(const Contour& contour)
-{
-    // Convert all of the lines generated by a call to create_contour() into
-    // their Python equivalents for return to the calling function.
-    // A line is either a closed line loop (in which case the last point is
-    // identical to the first) or an open line strip.  Two NumPy arrays are
-    // created for each line:
-    //   vertices is a double array of shape (npoints, 2) containing the (x, y)
-    //     coordinates of the points in the line
-    //   codes is a uint8 array of shape (npoints,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are appended to the Python lists vertices_list and codes_list
-    // respectively for return to the Python calling function.
-
-    PyObject* vertices_list = PyList_New(contour.size());
-    if (vertices_list == 0)
-        throw std::runtime_error("Failed to create Python list");
-
-    PyObject* codes_list = PyList_New(contour.size());
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
-        throw std::runtime_error("Failed to create Python list");
-    }
-
+PyObject* TriContourGenerator::contour_to_segs(const Contour& contour)
+{
+    PyObject* segs = PyList_New(contour.size());
     for (Contour::size_type i = 0; i < contour.size(); ++i) {
-        const ContourLine& contour_line = contour[i];
-        npy_intp npoints = static_cast<npy_intp>(contour_line.size());
-
-        npy_intp segs_dims[2] = {npoints, 2};
-        numpy::array_view<double, 2> segs(segs_dims);
-        double* segs_ptr = segs.data();
-
-        npy_intp codes_dims[1] = {npoints};
-        numpy::array_view<unsigned char, 1> codes(codes_dims);
-        unsigned char* codes_ptr = codes.data();
-
-        for (ContourLine::const_iterator it = contour_line.begin();
-             it != contour_line.end(); ++it) {
-            *segs_ptr++ = it->x;
-            *segs_ptr++ = it->y;
-            *codes_ptr++ = (it == contour_line.begin() ? MOVETO : LINETO);
+        const ContourLine& line = contour[i];
+        npy_intp dims[2] = {static_cast<npy_intp>(line.size()),2};
+        PyArrayObject* py_line = (PyArrayObject*)PyArray_SimpleNew(
+                                                     2, dims, NPY_DOUBLE);
+        double* p = (double*)PyArray_DATA(py_line);
+        for (ContourLine::const_iterator it = line.begin(); it != line.end(); ++it) {
+            *p++ = it->x;
+            *p++ = it->y;
+        }
+        if (PyList_SetItem(segs, i, (PyObject*)py_line)) {
+            Py_XDECREF(segs);
+            PyErr_SetString(PyExc_RuntimeError,
+                            "Unable to set contour segments");
+            return NULL;
         }
-
-        // Closed line loop has identical first and last (x, y) points.
-        if (contour_line.size() > 1 &&
-            contour_line.front() == contour_line.back())
-            *(codes_ptr-1) = CLOSEPOLY;
-
-        PyList_SET_ITEM(vertices_list, i, segs.pyobj());
-        PyList_SET_ITEM(codes_list, i, codes.pyobj());
-    }
-
-    PyObject* result = PyTuple_New(2);
-    if (result == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Failed to create Python tuple");
     }
-
-    // No error checking here as filling in a brand new pre-allocated result.
-    PyTuple_SET_ITEM(result, 0, vertices_list);
-    PyTuple_SET_ITEM(result, 1, codes_list);
-
-    return result;
+    return segs;
 }

 PyObject* TriContourGenerator::contour_to_segs_and_kinds(const Contour& contour)
 {
-    // Convert all of the polygons generated by a call to
-    // create_filled_contour() into their Python equivalents for return to the
-    // calling function.  All of the polygons' points and kinds codes are
-    // combined into single NumPy arrays for each; this avoids having
-    // to determine which polygons are holes as this will be determined by the
-    // renderer.  If there are ntotal points in all of the polygons, the two
-    // NumPy arrays created are:
-    //   vertices is a double array of shape (ntotal, 2) containing the (x, y)
-    //     coordinates of the points in the polygons
-    //   codes is a uint8 array of shape (ntotal,) containing the 'kind codes'
-    //     which are defined in the Path class
-    // and they are returned in the Python lists vertices_list and codes_list
-    // respectively.
-
     Contour::const_iterator line;
     ContourLine::const_iterator point;

@@ -689,50 +635,32 @@ PyObject* TriContourGenerator::contour_to_segs_and_kinds(const Contour& contour)

     // Create segs array for point coordinates.
     npy_intp segs_dims[2] = {n_points, 2};
-    numpy::array_view<double, 2> segs(segs_dims);
-    double* segs_ptr = segs.data();
+    PyArrayObject* segs = (PyArrayObject*)PyArray_SimpleNew(
+                                                2, segs_dims, NPY_DOUBLE);
+    double* segs_ptr = (double*)PyArray_DATA(segs);

     // Create kinds array for code types.
-    npy_intp codes_dims[1] = {n_points};
-    numpy::array_view<unsigned char, 1> codes(codes_dims);
-    unsigned char* codes_ptr = codes.data();
+    npy_intp kinds_dims[1] = {n_points};
+    PyArrayObject* kinds = (PyArrayObject*)PyArray_SimpleNew(
+                                                1, kinds_dims, NPY_UBYTE);
+    unsigned char* kinds_ptr = (unsigned char*)PyArray_DATA(kinds);

     for (line = contour.begin(); line != contour.end(); ++line) {
         for (point = line->begin(); point != line->end(); point++) {
             *segs_ptr++ = point->x;
             *segs_ptr++ = point->y;
-            *codes_ptr++ = (point == line->begin() ? MOVETO : LINETO);
+            *kinds_ptr++ = (point == line->begin() ? MOVETO : LINETO);
         }
     }

-    PyObject* vertices_list = PyList_New(0);
-    if (vertices_list == 0)
-        throw std::runtime_error("Failed to create Python list");
-
-    PyObject* codes_list = PyList_New(0);
-    if (codes_list == 0) {
-        Py_XDECREF(vertices_list);
-        throw std::runtime_error("Failed to create Python list");
-    }
-
-    if (PyList_Append(vertices_list, segs.pyobj_steal()) ||
-        PyList_Append(codes_list, codes.pyobj_steal())) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Unable to add contour to vertices and codes lists");
-    }
-
     PyObject* result = PyTuple_New(2);
-    if (result == 0) {
-        Py_XDECREF(vertices_list);
-        Py_XDECREF(codes_list);
-        throw std::runtime_error("Failed to create Python tuple");
+    if (PyTuple_SetItem(result, 0, (PyObject*)segs) ||
+        PyTuple_SetItem(result, 1, (PyObject*)kinds)) {
+        Py_XDECREF(result);
+        PyErr_SetString(PyExc_RuntimeError,
+                        "Unable to set contour segments and kinds");
+        return NULL;
     }
-
-    // No error checking here as filling in a brand new pre-allocated tuple.
-    PyTuple_SET_ITEM(result, 0, vertices_list);
-    PyTuple_SET_ITEM(result, 1, codes_list);
-
     return result;
 }

@@ -744,7 +672,7 @@ PyObject* TriContourGenerator::create_contour(const double& level)
     find_boundary_lines(contour, level);
     find_interior_lines(contour, level, false, false);

-    return contour_line_to_segs_and_kinds(contour);
+    return contour_to_segs(contour);
 }

 PyObject* TriContourGenerator::create_filled_contour(const double& lower_level,
diff --git a/src/tri/_tri.h b/src/tri/_tri.h
index 28c8e07933..13aad01fb6 100644
--- a/src/tri/_tri.h
+++ b/src/tri/_tri.h
@@ -363,16 +363,13 @@ private:
     void clear_visited_flags(bool include_boundaries);

     /* Convert a non-filled Contour from C++ to Python.
-     * Returns new python tuple ([segs0, segs1, ...], [kinds0, kinds1...])
-     * where
-     *   segs0: double array of shape (n_points,2) of point coordinates of first
-     *   contour line, etc.
-     *   kinds0: ubyte array of shape (n_points) of kinds codes of first contour
-     *   line, etc. */
-    PyObject* contour_line_to_segs_and_kinds(const Contour& contour);
+     * Returns new python list [segs0, segs1, ...] where
+     *   segs0: double array of shape (?,2) of point coordinates of first
+     *   contour line, etc. */
+    PyObject* contour_to_segs(const Contour& contour);

     /* Convert a filled Contour from C++ to Python.
-     * Returns new python tuple ([segs], [kinds]) where
+     * Returns new python tuple (segs, kinds) where
      *   segs: double array of shape (n_points,2) of all point coordinates,
      *   kinds: ubyte array of shape (n_points) of all point code types. */
     PyObject* contour_to_segs_and_kinds(const Contour& contour);
diff --git a/src/tri/_tri_wrapper.cpp b/src/tri/_tri_wrapper.cpp
index 391d817570..fcf155721e 100644
--- a/src/tri/_tri_wrapper.cpp
+++ b/src/tri/_tri_wrapper.cpp
@@ -489,7 +489,20 @@ static PyTypeObject* PyTrapezoidMapTriFinder_init_type(PyObject* m, PyTypeObject
     return type;
 }

-static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, "_tri" };
+
+/* Module */
+
+static struct PyModuleDef moduledef = {
+    PyModuleDef_HEAD_INIT,
+    "_tri",
+    NULL,
+    0,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
+};

 #pragma GCC visibility push(default)

@@ -497,8 +510,6 @@ PyMODINIT_FUNC PyInit__tri(void)
 {
     PyObject *m;

-    import_array();
-
     m = PyModule_Create(&moduledef);

     if (m == NULL) {
@@ -506,18 +517,17 @@ PyMODINIT_FUNC PyInit__tri(void)
     }

     if (!PyTriangulation_init_type(m, &PyTriangulationType)) {
-        Py_DECREF(m);
         return NULL;
     }
     if (!PyTriContourGenerator_init_type(m, &PyTriContourGeneratorType)) {
-        Py_DECREF(m);
         return NULL;
     }
     if (!PyTrapezoidMapTriFinder_init_type(m, &PyTrapezoidMapTriFinderType)) {
-        Py_DECREF(m);
         return NULL;
     }

+    import_array();
+
     return m;
 }

diff --git a/tools/boilerplate.py b/tools/boilerplate.py
index 46c8d36563..cf013ef0db 100644
--- a/tools/boilerplate.py
+++ b/tools/boilerplate.py
@@ -138,13 +138,7 @@ def generate_function(name, called_fullname, template, **kwargs):
     class_name, called_name = called_fullname.split('.')
     class_ = {'Axes': Axes, 'Figure': Figure}[class_name]

-    meth = getattr(class_, called_name)
-    decorator = _api.deprecation.DECORATORS.get(meth)
-    # Generate the wrapper with the non-kwonly signature, as it will get
-    # redecorated with make_keyword_only by _copy_docstring_and_deprecators.
-    if decorator and decorator.func is _api.make_keyword_only:
-        meth = meth.__wrapped__
-    signature = inspect.signature(meth)
+    signature = inspect.signature(getattr(class_, called_name))
     # Replace self argument.
     params = list(signature.parameters.values())[1:]
     signature = str(signature.replace(parameters=[
@@ -208,7 +202,6 @@ def boilerplate_gen():
         'ginput',
         'subplots_adjust',
         'suptitle',
-        'tight_layout',
         'waitforbuttonpress',
     )

diff --git a/tools/cache_zenodo_svg.py b/tools/cache_zenodo_svg.py
index fac396d53f..e00f4eb3d1 100644
--- a/tools/cache_zenodo_svg.py
+++ b/tools/cache_zenodo_svg.py
@@ -50,8 +50,7 @@ def _get_xdg_cache_dir():
     """
     Return the XDG cache directory.

-    See
-    https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
+    See https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
     """
     cache_dir = os.environ.get("XDG_CACHE_HOME")
     if not cache_dir:
@@ -63,7 +62,6 @@ def _get_xdg_cache_dir():

 if __name__ == "__main__":
     data = {
-        "v3.4.3": "5194481",
         "v3.4.2": "4743323",
         "v3.4.1": "4649959",
         "v3.4.0": "4638398",
@@ -106,7 +104,7 @@ if __name__ == "__main__":
     }
     doc_dir = Path(__file__).parent.parent.absolute() / "doc"
     target_dir = doc_dir / "_static/zenodo_cache"
-    citing = doc_dir / "users/project/citing.rst"
+    citing = doc_dir / "citing.rst"
     target_dir.mkdir(exist_ok=True, parents=True)
     header = []
     footer = []
@@ -134,7 +132,7 @@ if __name__ == "__main__":
             fout.write(
                 f"""
 {version}
-   .. image:: ../../_static/zenodo_cache/{doi}.svg
+   .. image:: _static/zenodo_cache/{doi}.svg
       :target:  https://doi.org/10.5281/zenodo.{doi}"""
             )
         fout.write("\n\n")
diff --git a/tools/github_stats.py b/tools/github_stats.py
index f6e1903241..3b9a4cbb53 100755
--- a/tools/github_stats.py
+++ b/tools/github_stats.py
@@ -78,8 +78,8 @@ def issues_closed_since(period=timedelta(days=365), project="matplotlib/matplotl
     filtered = [ i for i in allclosed if _parse_datetime(i['closed_at']) > since ]
     if pulls:
         filtered = [ i for i in filtered if _parse_datetime(i['merged_at']) > since ]
-        # filter out PRs not against main (backports)
-        filtered = [ i for i in filtered if i['base']['ref'] == 'main' ]
+        # filter out PRs not against master (backports)
+        filtered = [ i for i in filtered if i['base']['ref'] == 'master' ]
     else:
         filtered = [ i for i in filtered if not is_pull_request(i) ]

@@ -172,18 +172,17 @@ if __name__ == "__main__":

     n_issues, n_pulls = map(len, (issues, pulls))
     n_total = n_issues + n_pulls
-    since_day = since.strftime("%Y/%m/%d")
-    today = datetime.today()

     # Print summary report we can directly include into release notes.
     print('.. _github-stats:')
     print()
-    title = 'GitHub statistics ' + today.strftime('(%b %d, %Y)')
-    print(title)
-    print('=' * len(title))
+    print('GitHub Stats')
+    print('============')

     print()
-    print("GitHub statistics for %s (tag: %s) - %s" % (since_day, tag, today.strftime("%Y/%m/%d"), ))
+    since_day = since.strftime("%Y/%m/%d")
+    today = datetime.today().strftime("%Y/%m/%d")
+    print("GitHub stats for %s - %s (tag: %s)" % (since_day, today, tag))
     print()
     print("These lists are automatically generated, and may be incomplete or contain duplicates.")
     print()
@@ -230,9 +229,8 @@ if __name__ == "__main__":
         report(issues, show_urls)
     print()
     print()
-    print("""\
-Previous GitHub statistics
---------------------------
+    print("""Previous GitHub Stats
+---------------------


 .. toctree::
diff --git a/tools/subset.py b/tools/subset.py
index 53e8d5fd94..5b1494f1b5 100644
--- a/tools/subset.py
+++ b/tools/subset.py
@@ -9,7 +9,7 @@
 #   you may not use this file except in compliance with the License.
 #   You may obtain a copy of the License at
 #
-#       https://www.apache.org/licenses/LICENSE-2.0.txt
+#       http://www.apache.org/licenses/LICENSE-2.0
 #
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
@@ -21,10 +21,8 @@
 #
 # A script for subsetting a font, using FontForge. See README for details.

-# TODO 2013-04-08 ensure the menu files are as compact as possible by default,
-# similar to subset.pl
-# TODO 2013-05-22 in Arimo, the latin subset doesn't include ; but the greek
-# does. why on earth is this happening?
+# TODO 2013-04-08 ensure the menu files are as compact as possible by default, similar to subset.pl
+# TODO 2013-05-22 in Arimo, the latin subset doesn't include ; but the greek does. why on earth is this happening?

 import getopt
 import os
@@ -37,23 +35,21 @@ import fontforge

 def log_namelist(nam, unicode):
     if nam and isinstance(unicode, int):
-        print(f"0x{unicode:04X}", fontforge.nameFromUnicode(unicode), file=nam)
+        print("0x%0.4X" % unicode, fontforge.nameFromUnicode(unicode), file=nam)

-
-def select_with_refs(font, unicode, newfont, pe=None, nam=None):
+def select_with_refs(font, unicode, newfont, pe = None, nam = None):
     newfont.selection.select(('more', 'unicode'), unicode)
     log_namelist(nam, unicode)
     if pe:
-        print(f"SelectMore({unicode})", file=pe)
+        print("SelectMore(%d)" % unicode, file=pe)
     try:
         for ref in font[unicode].references:
             newfont.selection.select(('more',), ref[0])
             log_namelist(nam, ref[0])
             if pe:
-                print(f'SelectMore("{ref[0]}")', file=pe)
+                print('SelectMore("%s")' % ref[0], file=pe)
     except Exception:
-        print(f'Resolving references on u+{unicode:04x} failed')
-
+        print('Resolving references on u+%04x failed' % unicode)

 def subset_font_raw(font_in, font_out, unicodes, opts):
     if '--namelist' in opts:
@@ -61,7 +57,7 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         # change getopt.gnu_getopt from namelist to namelist=
         # and invert comments on following 2 lines
         # nam_fn = opts['--namelist']
-        nam_fn = f'{font_out}.nam'
+        nam_fn = font_out + '.nam'
         nam = open(nam_fn, 'w')
     else:
         nam = None
@@ -72,7 +68,7 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         pe = None
     font = fontforge.open(font_in)
     if pe:
-        print(f'Open("{font_in}")', file=pe)
+        print('Open("' + font_in + '")', file=pe)
         extract_vert_to_script(font_in, pe)
     for i in unicodes:
         select_with_refs(font, i, font, pe, nam)
@@ -87,10 +83,9 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
     for glyph in addl_glyphs:
         font.selection.select(('more',), glyph)
         if nam:
-            print(f"0x{fontforge.unicodeFromName(glyph):0.4X}", glyph,
-                  file=nam)
+            print("0x%0.4X" % fontforge.unicodeFromName(glyph), glyph, file=nam)
         if pe:
-            print(f'SelectMore("{glyph}")', file=pe)
+            print('SelectMore("%s")' % glyph, file=pe)

     flags = ()

@@ -154,11 +149,11 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         nam.close()

     if pe:
-        print(f'Generate("{font_out}")', file=pe)
+        print('Generate("' + font_out + '")', file=pe)
         pe.close()
         subprocess.call(["fontforge", "-script", pe_fn])
     else:
-        font.generate(font_out, flags=flags)
+        font.generate(font_out, flags = flags)
     font.close()

     if '--roundtrip' in opts:
@@ -166,8 +161,7 @@ def subset_font_raw(font_in, font_out, unicodes, opts):
         # the advanceWidthMax in the hhea table, and a workaround is to open
         # and re-generate
         font2 = fontforge.open(font_out)
-        font2.generate(font_out, flags=flags)
-
+        font2.generate(font_out, flags = flags)

 def subset_font(font_in, font_out, unicodes, opts):
     font_out_raw = font_out
@@ -179,70 +173,59 @@ def subset_font(font_in, font_out, unicodes, opts):
 # 2011-02-14 DC this needs to only happen with --namelist is used
 #        os.rename(font_out_raw + '.nam', font_out + '.nam')

-
 def getsubset(subset, font_in):
     subsets = subset.split('+')

-    quotes = [
-        0x2013,  # endash
-        0x2014,  # emdash
-        0x2018,  # quoteleft
-        0x2019,  # quoteright
-        0x201A,  # quotesinglbase
-        0x201C,  # quotedblleft
-        0x201D,  # quotedblright
-        0x201E,  # quotedblbase
-        0x2022,  # bullet
-        0x2039,  # guilsinglleft
-        0x203A,  # guilsinglright
-    ]
-
-    latin = [
-        *range(0x20, 0x7f),  # Basic Latin (A-Z, a-z, numbers)
-        *range(0xa0, 0x100),  # Western European symbols and diacritics
-        0x20ac,  # Euro
-        0x0152,  # OE
-        0x0153,  # oe
-        0x003b,  # semicolon
-        0x00b7,  # periodcentered
-        0x0131,  # dotlessi
-        0x02c6,  # circumflex
-        0x02da,  # ring
-        0x02dc,  # tilde
-        0x2074,  # foursuperior
-        0x2215,  # division slash
-        0x2044,  # fraction slash
-        0xe0ff,  # PUA: Font logo
-        0xeffd,  # PUA: Font version number
-        0xf000,  # PUA: font ppem size indicator: run
-                 # `ftview -f 1255 10 Ubuntu-Regular.ttf` to see it in action!
-    ]
+    quotes  = [0x2013] # endash
+    quotes += [0x2014] # emdash
+    quotes += [0x2018] # quoteleft
+    quotes += [0x2019] # quoteright
+    quotes += [0x201A] # quotesinglbase
+    quotes += [0x201C] # quotedblleft
+    quotes += [0x201D] # quotedblright
+    quotes += [0x201E] # quotedblbase
+    quotes += [0x2022] # bullet
+    quotes += [0x2039] # guilsinglleft
+    quotes += [0x203A] # guilsinglright
+
+    latin  = range(0x20, 0x7f) # Basic Latin (A-Z, a-z, numbers)
+    latin += range(0xa0, 0x100) # Western European symbols and diacritics
+    latin += [0x20ac] # Euro
+    latin += [0x0152] # OE
+    latin += [0x0153] # oe
+    latin += [0x003b] # semicolon
+    latin += [0x00b7] # periodcentered
+    latin += [0x0131] # dotlessi
+    latin += [0x02c6] # circumflex
+    latin += [0x02da] # ring
+    latin += [0x02dc] # tilde
+    latin += [0x2074] # foursuperior
+    latin += [0x2215] # division slash
+    latin += [0x2044] # fraction slash
+    latin += [0xe0ff] # PUA: Font logo
+    latin += [0xeffd] # PUA: Font version number
+    latin += [0xf000] # PUA: font ppem size indicator: run `ftview -f 1255 10 Ubuntu-Regular.ttf` to see it in action!

     result = quotes

     if 'menu' in subset:
         font = fontforge.open(font_in)
-        result = [
-            *map(ord, font.familyname),
-            0x0020,
-        ]
+        result = map(ord, font.familyname)
+        result += [0x0020]

     if 'latin' in subset:
         result += latin
     if 'latin-ext' in subset:
         # These ranges include Extended A, B, C, D, and Additional with the
         # exception of Vietnamese, which is a separate range
-        result += [
-            *range(0x100, 0x370),
-            *range(0x1d00, 0x1ea0),
-            *range(0x1ef2, 0x1f00),
-            *range(0x2070, 0x20d0),
-            *range(0x2c60, 0x2c80),
-            *range(0xa700, 0xa800),
-        ]
+        result += (range(0x100, 0x370) +
+                   range(0x1d00, 0x1ea0) +
+                   range(0x1ef2, 0x1f00) +
+                   range(0x2070, 0x20d0) +
+                   range(0x2c60, 0x2c80) +
+                   range(0xa700, 0xa800))
     if 'vietnamese' in subset:
-        # 2011-07-16 DC: Charset from
-        # http://vietunicode.sourceforge.net/charset/ + U+1ef9 from Fontaine
+        # 2011-07-16 DC: Charset from http://vietunicode.sourceforge.net/charset/ + U+1ef9 from Fontaine
         result += [0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00C8, 0x00C9,
                    0x00CA, 0x00CC, 0x00CD, 0x00D2, 0x00D3, 0x00D4,
                    0x00D5, 0x00D9, 0x00DA, 0x00DD, 0x00E0, 0x00E1,
@@ -250,26 +233,21 @@ def getsubset(subset, font_in):
                    0x00ED, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F9,
                    0x00FA, 0x00FD, 0x0102, 0x0103, 0x0110, 0x0111,
                    0x0128, 0x0129, 0x0168, 0x0169, 0x01A0, 0x01A1,
-                   0x01AF, 0x01B0, 0x20AB, *range(0x1EA0, 0x1EFA)]
+                   0x01AF, 0x01B0, 0x20AB] + range(0x1EA0, 0x1EFA)
     if 'greek' in subset:
-        # Could probably be more aggressive here and exclude archaic
-        # characters, but lack data
-        result += [*range(0x370, 0x400)]
+        # Could probably be more aggressive here and exclude archaic characters,
+        # but lack data
+        result += range(0x370, 0x400)
     if 'greek-ext' in subset:
-        result += [*range(0x370, 0x400), *range(0x1f00, 0x2000)]
+        result += range(0x370, 0x400) + range(0x1f00, 0x2000)
     if 'cyrillic' in subset:
         # Based on character frequency analysis
-        result += [*range(0x400, 0x460), 0x490, 0x491, 0x4b0, 0x4b1, 0x2116]
+        result += range(0x400, 0x460) + [0x490, 0x491, 0x4b0, 0x4b1, 0x2116]
     if 'cyrillic-ext' in subset:
-        result += [
-            *range(0x400, 0x530),
-            0x20b4,
-            # 0x2116 is the russian No, a number abbreviation similar to the
-            # latin #, suggested by Alexei Vanyashin
-            0x2116,
-            *range(0x2de0, 0x2e00),
-            *range(0xa640, 0xa6a0),
-        ]
+        result += (range(0x400, 0x530) +
+                   [0x20b4, 0x2116] + # 0x2116 is the russian No, a number abbreviation similar to the latin #, suggested by Alexei Vanyashin
+                   range(0x2de0, 0x2e00) +
+                   range(0xa640, 0xa6a0))
     if 'arabic' in subset:
         # Based on Droid Arabic Kufi 1.0
         result += [0x000D, 0x0020, 0x0621, 0x0627, 0x062D,
@@ -317,8 +295,7 @@ def getsubset(subset, font_in):
                    0x06C8, 0x06C9, 0x06CA, 0x06CB, 0x06CF, 0x06CE,
                    0x06D0, 0x06D1, 0x06D4, 0x06FA, 0x06DD, 0x06DE,
                    0x06E0, 0x06E9, 0x060D, 0xFD3E, 0xFD3F, 0x25CC,
-                   # Added from
-                   # https://groups.google.com/d/topic/googlefontdirectory-discuss/MwlMWMPNCXs/discussion
+                   # Added from https://groups.google.com/d/topic/googlefontdirectory-discuss/MwlMWMPNCXs/discussion
                    0x063b, 0x063c, 0x063d, 0x063e, 0x063f, 0x0620,
                    0x0674, 0x0674, 0x06EC]

@@ -331,48 +308,42 @@ def getsubset(subset, font_in):

     return result

-
 # code for extracting vertical metrics from a TrueType font
+
 class Sfnt:
     def __init__(self, data):
         version, numTables, _, _, _ = struct.unpack('>IHHHH', data[:12])
         self.tables = {}
         for i in range(numTables):
-            tag, checkSum, offset, length = struct.unpack(
-                '>4sIII', data[12 + 16 * i: 28 + 16 * i])
+            tag, checkSum, offset, length = struct.unpack('>4sIII', data[12 + 16 * i: 28 + 16 * i])
             self.tables[tag] = data[offset: offset + length]

     def hhea(self):
         r = {}
         d = self.tables['hhea']
-        r['Ascender'], r['Descender'], r['LineGap'] = struct.unpack(
-            '>hhh', d[4:10])
+        r['Ascender'], r['Descender'], r['LineGap'] = struct.unpack('>hhh', d[4:10])
         return r

     def os2(self):
         r = {}
         d = self.tables['OS/2']
         r['fsSelection'], = struct.unpack('>H', d[62:64])
-        r['sTypoAscender'], r['sTypoDescender'], r['sTypoLineGap'] = \
-            struct.unpack('>hhh', d[68:74])
-        r['usWinAscender'], r['usWinDescender'] = struct.unpack(
-            '>HH', d[74:78])
+        r['sTypoAscender'], r['sTypoDescender'], r['sTypoLineGap'] = struct.unpack('>hhh', d[68:74])
+        r['usWinAscender'], r['usWinDescender'] = struct.unpack('>HH', d[74:78])
         return r

-
 def set_os2(pe, name, val):
-    print(f'SetOS2Value("{name}", {val:d})', file=pe)
-
+    print('SetOS2Value("' + name + '", %d)' % val, file=pe)

 def set_os2_vert(pe, name, val):
     set_os2(pe, name + 'IsOffset', 0)
     set_os2(pe, name, val)

-
 # Extract vertical metrics data directly out of font file, and emit
 # script code to set the values in the generated font. This is a (rather
 # ugly) workaround for the issue described in:
-# https://sourceforge.net/p/fontforge/mailman/fontforge-users/thread/20100906085718.GB1907@khaled-laptop/
+# http://sourceforge.net/mailarchive/forum.php?thread_name=20100906085718.GB1907%40khaled-laptop&forum_name=fontforge-users
+
 def extract_vert_to_script(font_in, pe):
     with open(font_in, 'rb') as in_file:
         data = in_file.read()
@@ -386,12 +357,11 @@ def extract_vert_to_script(font_in, pe):
     set_os2_vert(pe, "HHeadAscent", hhea['Ascender'])
     set_os2_vert(pe, "HHeadDescent", hhea['Descender'])

-
 def main(argv):
-    optlist, args = getopt.gnu_getopt(argv, '', [
-        'string=', 'strip_names', 'opentype-features', 'simplify', 'new',
-        'script', 'nmr', 'roundtrip', 'subset=', 'namelist', 'null', 'nd',
-        'move-display'])
+    optlist, args = getopt.gnu_getopt(argv, '', ['string=', 'strip_names', 'opentype-features',
+                                                 'simplify', 'new', 'script',
+                                                 'nmr', 'roundtrip', 'subset=',
+                                                 'namelist', 'null', 'nd', 'move-display'])

     font_in, font_out = args
     opts = dict(optlist)
@@ -401,6 +371,5 @@ def main(argv):
         subset = getsubset(opts.get('--subset', 'latin'), font_in)
     subset_font(font_in, font_out, subset, opts)

-
 if __name__ == '__main__':
     main(sys.argv[1:])
diff --git a/tools/triage_tests.py b/tools/triage_tests.py
index 0fd1c76109..02b8f60076 100644
--- a/tools/triage_tests.py
+++ b/tools/triage_tests.py
@@ -30,7 +30,6 @@ import shutil
 import sys

 from matplotlib.backends.qt_compat import QtCore, QtGui, QtWidgets
-from matplotlib.backends.qt_compat import _enum, _exec


 # matplotlib stores the baseline images under two separate subtrees,
@@ -62,13 +61,13 @@ class Thumbnail(QtWidgets.QFrame):
         layout = QtWidgets.QVBoxLayout()

         label = QtWidgets.QLabel(name)
-        label.setAlignment(_enum('QtCore.Qt.AlignmentFlag').AlignHCenter |
-                           _enum('QtCore.Qt.AlignmentFlag').AlignVCenter)
+        label.setAlignment(QtCore.Qt.AlignHCenter |
+                           QtCore.Qt.AlignVCenter)
         layout.addWidget(label, 0)

         self.image = QtWidgets.QLabel()
-        self.image.setAlignment(_enum('QtCore.Qt.AlignmentFlag').AlignHCenter |
-                                _enum('QtCore.Qt.AlignmentFlag').AlignVCenter)
+        self.image.setAlignment(QtCore.Qt.AlignHCenter |
+                                QtCore.Qt.AlignVCenter)
         self.image.setMinimumSize(800 // 3, 600 // 3)
         layout.addWidget(self.image)
         self.setLayout(layout)
@@ -86,7 +85,7 @@ class EventFilter(QtCore.QObject):
         self.window = window

     def eventFilter(self, receiver, event):
-        if event.type() == _enum('QtCore.QEvent.Type').KeyPress:
+        if event.type() == QtCore.QEvent.KeyPress:
             self.window.keyPressEvent(event)
             return True
         else:
@@ -126,9 +125,8 @@ class Dialog(QtWidgets.QDialog):
         images_layout = QtWidgets.QVBoxLayout()
         images_box = QtWidgets.QWidget()
         self.image_display = QtWidgets.QLabel()
-        self.image_display.setAlignment(
-            _enum('QtCore.Qt.AlignmentFlag').AlignHCenter |
-            _enum('QtCore.Qt.AlignmentFlag').AlignVCenter)
+        self.image_display.setAlignment(QtCore.Qt.AlignHCenter |
+                                        QtCore.Qt.AlignVCenter)
         self.image_display.setMinimumSize(800, 600)
         images_layout.addWidget(self.image_display, 6)
         images_box.setLayout(images_layout)
@@ -166,9 +164,8 @@ class Dialog(QtWidgets.QDialog):
         for fname, thumbnail in zip(entry.thumbnails, self.thumbnails):
             pixmap = QtGui.QPixmap(os.fspath(fname))
             scaled_pixmap = pixmap.scaled(
-                thumbnail.size(),
-                _enum('QtCore.Qt.AspectRatioMode').KeepAspectRatio,
-                _enum('QtCore.Qt.TransformationMode').SmoothTransformation)
+                thumbnail.size(), QtCore.Qt.KeepAspectRatio,
+                QtCore.Qt.SmoothTransformation)
             thumbnail.image.setPixmap(scaled_pixmap)
             self.pixmaps.append(scaled_pixmap)

@@ -176,15 +173,13 @@ class Dialog(QtWidgets.QDialog):
         self.filelist.setCurrentRow(self.current_entry)

     def set_large_image(self, index):
-        self.thumbnails[self.current_thumbnail].setFrameShape(
-            _enum('QtWidgets.QFrame.Shape').NoFrame)
+        self.thumbnails[self.current_thumbnail].setFrameShape(0)
         self.current_thumbnail = index
         pixmap = QtGui.QPixmap(os.fspath(
             self.entries[self.current_entry]
             .thumbnails[self.current_thumbnail]))
         self.image_display.setPixmap(pixmap)
-        self.thumbnails[self.current_thumbnail].setFrameShape(
-            _enum('QtWidgets.QFrame.Shape').Box)
+        self.thumbnails[self.current_thumbnail].setFrameShape(1)

     def accept_test(self):
         entry = self.entries[self.current_entry]
@@ -209,17 +204,17 @@ class Dialog(QtWidgets.QDialog):
         self.set_entry(min((self.current_entry + 1), len(self.entries) - 1))

     def keyPressEvent(self, e):
-        if e.key() == _enum('QtCore.Qt.Key').Key_Left:
+        if e.key() == QtCore.Qt.Key_Left:
             self.set_large_image((self.current_thumbnail - 1) % 3)
-        elif e.key() == _enum('QtCore.Qt.Key').Key_Right:
+        elif e.key() == QtCore.Qt.Key_Right:
             self.set_large_image((self.current_thumbnail + 1) % 3)
-        elif e.key() == _enum('QtCore.Qt.Key').Key_Up:
+        elif e.key() == QtCore.Qt.Key_Up:
             self.set_entry(max(self.current_entry - 1, 0))
-        elif e.key() == _enum('QtCore.Qt.Key').Key_Down:
+        elif e.key() == QtCore.Qt.Key_Down:
             self.set_entry(min(self.current_entry + 1, len(self.entries) - 1))
-        elif e.key() == _enum('QtCore.Qt.Key').Key_A:
+        elif e.key() == QtCore.Qt.Key_A:
             self.accept_test()
-        elif e.key() == _enum('QtCore.Qt.Key').Key_R:
+        elif e.key() == QtCore.Qt.Key_R:
             self.reject_test()
         else:
             super().keyPressEvent(e)
@@ -238,8 +233,8 @@ class Entry:

         basename = self.diff[:-len('-failed-diff.png')]
         for ext in exts:
-            if basename.endswith(f'_{ext}'):
-                display_extension = f'_{ext}'
+            if basename.endswith('_' + ext):
+                display_extension = '_' + ext
                 extension = ext
                 basename = basename[:-4]
                 break
@@ -249,10 +244,11 @@ class Entry:

         self.basename = basename
         self.extension = extension
-        self.generated = f'{basename}.{extension}'
-        self.expected = f'{basename}-expected.{extension}'
-        self.expected_display = f'{basename}-expected{display_extension}.png'
-        self.generated_display = f'{basename}{display_extension}.png'
+        self.generated = basename + '.' + extension
+        self.expected = basename + '-expected.' + extension
+        self.expected_display = (basename + '-expected' + display_extension +
+                                 '.png')
+        self.generated_display = basename + display_extension + '.png'
         self.name = self.reldir / self.basename
         self.destdir = self.get_dest_dir(self.reldir)

@@ -281,7 +277,7 @@ class Entry:
             path = self.source / baseline_dir / reldir
             if path.is_dir():
                 return path
-        raise ValueError(f"Can't find baseline dir for {reldir}")
+        raise ValueError("Can't find baseline dir for {}".format(reldir))

     @property
     def display(self):
@@ -296,7 +292,7 @@ class Entry:
             'autogen': '\N{WHITE SQUARE CONTAINING BLACK SMALL SQUARE}',
         }
         box = status_map[self.status]
-        return f'{box} {self.name} [{self.extension}]'
+        return '{} {} [{}]'.format(box, self.name, self.extension)

     def accept(self):
         """
@@ -309,9 +305,7 @@ class Entry:
         """
         Reject this test by copying the expected result to the source tree.
         """
-        expected = self.dir / self.expected
-        if not expected.is_symlink():
-            copy_file(expected, self.destdir / self.generated)
+        copy_file(self.dir / self.expected, self.destdir / self.generated)
         self.status = 'reject'


@@ -345,7 +339,7 @@ def launch(result_images, source):
     dialog.show()
     filter = EventFilter(dialog)
     app.installEventFilter(filter)
-    sys.exit(_exec(app))
+    sys.exit(app.exec_())


 if __name__ == '__main__':
diff --git a/tutorials/advanced/blitting.py b/tutorials/advanced/blitting.py
index 5481e533ca..868b48a497 100644
--- a/tutorials/advanced/blitting.py
+++ b/tutorials/advanced/blitting.py
@@ -7,7 +7,7 @@ Faster rendering by using blitting
 <https://en.wikipedia.org/wiki/Bit_blit>`__ in raster graphics that,
 in the context of Matplotlib, can be used to (drastically) improve
 performance of interactive figures. For example, the
-:mod:`.animation` and :mod:`.widgets` modules use blitting
+:mod:`~.animation` and :mod:`~.widgets` modules use blitting
 internally. Here, we demonstrate how to implement your own blitting, outside
 of these classes.

diff --git a/tutorials/colors/colormap-manipulation.py b/tutorials/colors/colormap-manipulation.py
index 9c68dfb25b..7273ca25b0 100644
--- a/tutorials/colors/colormap-manipulation.py
+++ b/tutorials/colors/colormap-manipulation.py
@@ -48,7 +48,7 @@ print(viridis(0.56))
 # ListedColormap
 # --------------
 #
-# `.ListedColormap`\s store their color values in a ``.colors`` attribute.
+# `.ListedColormap` s store their color values in a ``.colors`` attribute.
 # The list of colors that comprise the colormap can be directly accessed using
 # the ``colors`` property,
 # or it can be accessed indirectly by calling  ``viridis`` with an array
@@ -68,7 +68,7 @@ print('viridis(np.linspace(0, 1, 12))', viridis(np.linspace(0, 1, 12)))
 ##############################################################################
 # LinearSegmentedColormap
 # -----------------------
-# `.LinearSegmentedColormap`\s do not have a ``.colors`` attribute.
+# `.LinearSegmentedColormap` s do not have a ``.colors`` attribute.
 # However, one may still call the colormap with an integer array, or with a
 # float array between 0 and 1.

@@ -114,7 +114,7 @@ plot_examples([cmap])

 ##############################################################################
 # In fact, that list may contain any valid
-# :doc:`Matplotlib color specification </tutorials/colors/colors>`.
+# :doc:`matplotlib color specification </tutorials/colors/colors>`.
 # Particularly useful for creating custom colormaps are Nx4 numpy arrays.
 # Because with the variety of numpy operations that we can do on a such an
 # array, carpentry of new colormaps from existing colormaps become quite
@@ -168,7 +168,7 @@ plot_examples([viridis, newcmp])
 # Creating linear segmented colormaps
 # ===================================
 #
-# The `.LinearSegmentedColormap` class specifies colormaps using anchor points
+# `.LinearSegmentedColormap` class specifies colormaps using anchor points
 # between which RGB(A) values are interpolated.
 #
 # The format to specify these colormaps allows discontinuities at the anchor
@@ -177,7 +177,7 @@ plot_examples([viridis, newcmp])
 # ``yleft[i]`` and ``yright[i]`` are the values of the color on either
 # side of the anchor point.
 #
-# If there are no discontinuities, then ``yleft[i] == yright[i]``:
+# If there are no discontinuities, then ``yleft[i]=yright[i]``:

 cdict = {'red':   [[0.0,  0.0, 0.0],
                    [0.5,  1.0, 1.0],
@@ -221,10 +221,9 @@ plot_linearmap(cdict)
 #
 # In the example below there is a discontinuity in red at 0.5.  The
 # interpolation between 0 and 0.5 goes from 0.3 to 1, and between 0.5 and 1
-# it goes from 0.9 to 1.  Note that ``red[0, 1]``, and ``red[2, 2]`` are both
-# superfluous to the interpolation because ``red[0, 1]`` (i.e., ``yleft[0]``)
-# is the value to the left of 0, and ``red[2, 2]`` (i.e., ``yright[2]``) is the
-# value to the right of 1, which are outside the color mapping domain.
+# it goes from 0.9 to 1.  Note that red[0, 1], and red[2, 2] are both
+# superfluous to the interpolation because red[0, 1] is the value to the
+# left of 0, and red[2, 2] is the value to the right of 1.0.

 cdict['red'] = [[0.0,  0.0, 0.3],
                 [0.5,  1.0, 0.9],
@@ -235,7 +234,7 @@ plot_linearmap(cdict)
 # Directly creating a segmented colormap from a list
 # --------------------------------------------------
 #
-# The approach described above is very versatile, but admittedly a bit
+# The above described is a very versatile approach, but admittedly a bit
 # cumbersome to implement. For some basic cases, the use of
 # `.LinearSegmentedColormap.from_list` may be easier. This creates a segmented
 # colormap with equal spacings from a supplied list of colors.
@@ -244,8 +243,8 @@ colors = ["darkorange", "gold", "lawngreen", "lightseagreen"]
 cmap1 = LinearSegmentedColormap.from_list("mycmap", colors)

 #############################################################################
-# If desired, the nodes of the colormap can be given as numbers between 0 and
-# 1. For example, one could have the reddish part take more space in the
+# If desired, the nodes of the colormap can be given as numbers
+# between 0 and 1. E.g. one could have the reddish part take more space in the
 # colormap.

 nodes = [0.0, 0.4, 0.8, 1.0]
diff --git a/tutorials/colors/colormapnorms.py b/tutorials/colors/colormapnorms.py
index ae3ac88256..41aa631094 100644
--- a/tutorials/colors/colormapnorms.py
+++ b/tutorials/colors/colormapnorms.py
@@ -277,8 +277,7 @@ pcm = ax.pcolormesh(longitude, latitude, topo, rasterized=True, norm=divnorm,
 # longitude depends on latitude.
 ax.set_aspect(1 / np.cos(np.deg2rad(49)))
 ax.set_title('TwoSlopeNorm(x)')
-cb = fig.colorbar(pcm, shrink=0.6)
-cb.set_ticks([-500, 0, 1000, 2000, 3000, 4000])
+fig.colorbar(pcm, shrink=0.6)
 plt.show()


@@ -313,8 +312,7 @@ plt.show()
 # ----------------------------------------------------------
 #
 # The `.TwoSlopeNorm` described above makes a useful example for
-# defining your own norm.  Note for the colorbar to work, you must
-# define an inverse for your norm:
+# defining your own norm.


 class MidpointNormalize(colors.Normalize):
@@ -325,14 +323,8 @@ class MidpointNormalize(colors.Normalize):
     def __call__(self, value, clip=None):
         # I'm ignoring masked values and all kinds of edge cases to make a
         # simple example...
-        # Note also that we must extrapolate beyond vmin/vmax
-        x, y = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1.]
-        return np.ma.masked_array(np.interp(value, x, y,
-                                            left=-np.inf, right=np.inf))
-
-    def inverse(self, value):
-        y, x = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1]
-        return np.interp(value, x, y, left=-np.inf, right=np.inf)
+        x, y = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1]
+        return np.ma.masked_array(np.interp(value, x, y))


 fig, ax = plt.subplots()
@@ -342,7 +334,5 @@ pcm = ax.pcolormesh(longitude, latitude, topo, rasterized=True, norm=midnorm,
                     cmap=terrain_map, shading='auto')
 ax.set_aspect(1 / np.cos(np.deg2rad(49)))
 ax.set_title('Custom norm')
-cb = fig.colorbar(pcm, shrink=0.6, extend='both')
-cb.set_ticks([-500, 0, 1000, 2000, 3000, 4000])
-
+fig.colorbar(pcm, shrink=0.6, extend='both')
 plt.show()
diff --git a/tutorials/colors/colormaps.py b/tutorials/colors/colormaps.py
index 97cf8b8f28..f8764a6a73 100644
--- a/tutorials/colors/colormaps.py
+++ b/tutorials/colors/colormaps.py
@@ -4,9 +4,8 @@ Choosing Colormaps in Matplotlib
 ********************************

 Matplotlib has a number of built-in colormaps accessible via
-`.matplotlib.cm.get_cmap`.  There are also external libraries that
-have many extra colormaps, which can be viewed in the
-`Third-party colormaps`_ section of the Matplotlib documentation.
+`.matplotlib.cm.get_cmap`.  There are also external libraries like
+[palettable]_ and [colorcet]_ that have many extra colormaps.
 Here we briefly discuss how to choose between the many options.  For
 help on creating your own colormaps, see
 :doc:`/tutorials/colors/colormap-manipulation`.
@@ -33,9 +32,8 @@ steps in the color space. Researchers have found that the human brain
 perceives changes in the lightness parameter as changes in the data
 much better than, for example, changes in hue. Therefore, colormaps
 which have monotonically increasing lightness through the colormap
-will be better interpreted by the viewer. Wonderful examples of
-perceptually uniform colormaps can be found in the
-`Third-party colormaps`_ section as well.
+will be better interpreted by the viewer. A wonderful example of
+perceptually uniform colormaps is [colorcet]_.

 Color can be represented in 3D space in various ways. One way to represent color
 is using CIELAB. In CIELAB, color space is represented by lightness,
@@ -47,8 +45,6 @@ An excellent starting resource for learning about human perception of colormaps
 is from [IBM]_.


-.. _color-colormaps_reference:
-
 Classes of colormaps
 ====================

@@ -82,40 +78,9 @@ import matplotlib as mpl
 import matplotlib.pyplot as plt
 from matplotlib import cm
 from colorspacious import cspace_converter
+from collections import OrderedDict

-
-###############################################################################
-#
-# First, we'll show the range of each colormap. Note that some seem
-# to change more "quickly" than others.
-
-cmaps = {}
-
-gradient = np.linspace(0, 1, 256)
-gradient = np.vstack((gradient, gradient))
-
-
-def plot_color_gradients(category, cmap_list):
-    # Create figure and adjust figure height to number of colormaps
-    nrows = len(cmap_list)
-    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22
-    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
-    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh,
-                        left=0.2, right=0.99)
-    axs[0].set_title(f'{category} colormaps', fontsize=14)
-
-    for ax, name in zip(axs, cmap_list):
-        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))
-        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
-                transform=ax.transAxes)
-
-    # Turn off *all* ticks & spines, not just the ones with colormaps.
-    for ax in axs:
-        ax.set_axis_off()
-
-    # Save colormap list for later.
-    cmaps[category] = cmap_list
-
+cmaps = OrderedDict()

 ###############################################################################
 # Sequential
@@ -129,15 +94,13 @@ def plot_color_gradients(category, cmap_list):
 # amongst the colormaps: some are approximately linear in :math:`L^*` and others
 # are more curved.

-plot_color_gradients('Perceptually Uniform Sequential',
-                     ['viridis', 'plasma', 'inferno', 'magma', 'cividis'])
-
-###############################################################################
+cmaps['Perceptually Uniform Sequential'] = [
+            'viridis', 'plasma', 'inferno', 'magma', 'cividis']

-plot_color_gradients('Sequential',
-                     ['Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
-                      'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
-                      'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])
+cmaps['Sequential'] = [
+            'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
+            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
+            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn']

 ###############################################################################
 # Sequential2
@@ -151,10 +114,10 @@ plot_color_gradients('Sequential',
 # banding of the data in those values in the colormap (see [mycarta-banding]_ for
 # an excellent example of this).

-plot_color_gradients('Sequential (2)',
-                     ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone',
-                      'pink', 'spring', 'summer', 'autumn', 'winter', 'cool',
-                      'Wistia', 'hot', 'afmhot', 'gist_heat', 'copper'])
+cmaps['Sequential (2)'] = [
+            'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',
+            'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',
+            'hot', 'afmhot', 'gist_heat', 'copper']

 ###############################################################################
 # Diverging
@@ -167,9 +130,9 @@ plot_color_gradients('Sequential (2)',
 # measures, BrBG and RdBu are good options. coolwarm is a good option, but it
 # doesn't span a wide range of :math:`L^*` values (see grayscale section below).

-plot_color_gradients('Diverging',
-                     ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',
-                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])
+cmaps['Diverging'] = [
+            'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',
+            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic']

 ###############################################################################
 # Cyclic
@@ -189,7 +152,7 @@ plot_color_gradients('Diverging',
 # for viewers to see perceptually. See an extension on this idea at
 # [mycarta-jet]_.

-plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])
+cmaps['Cyclic'] = ['twilight', 'twilight_shifted', 'hsv']

 ###############################################################################
 # Qualitative
@@ -200,10 +163,9 @@ plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])
 # the place throughout the colormap, and are clearly not monotonically increasing.
 # These would not be good options for use as perceptual colormaps.

-plot_color_gradients('Qualitative',
-                     ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2',
-                      'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b',
-                      'tab20c'])
+cmaps['Qualitative'] = ['Pastel1', 'Pastel2', 'Paired', 'Accent',
+                        'Dark2', 'Set1', 'Set2', 'Set3',
+                        'tab10', 'tab20', 'tab20b', 'tab20c']

 ###############################################################################
 # Miscellaneous
@@ -225,12 +187,43 @@ plot_color_gradients('Qualitative',
 # poor choice for representing data for viewers to see perceptually. See an
 # extension on this idea at [mycarta-jet]_ and [turbo]_.

+cmaps['Miscellaneous'] = [
+            'flag', 'prism', 'ocean', 'gist_earth', 'terrain', 'gist_stern',
+            'gnuplot', 'gnuplot2', 'CMRmap', 'cubehelix', 'brg',
+            'gist_rainbow', 'rainbow', 'jet', 'turbo', 'nipy_spectral',
+            'gist_ncar']
+
+###############################################################################
+# .. _color-colormaps_reference:
+#
+# First, we'll show the range of each colormap. Note that some seem
+# to change more "quickly" than others.
+
+gradient = np.linspace(0, 1, 256)
+gradient = np.vstack((gradient, gradient))
+
+
+def plot_color_gradients(cmap_category, cmap_list):
+    # Create figure and adjust figure height to number of colormaps
+    nrows = len(cmap_list)
+    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22
+    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
+    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh,
+                        left=0.2, right=0.99)
+    axs[0].set_title(cmap_category + ' colormaps', fontsize=14)
+
+    for ax, name in zip(axs, cmap_list):
+        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))
+        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
+                transform=ax.transAxes)

-plot_color_gradients('Miscellaneous',
-                     ['flag', 'prism', 'ocean', 'gist_earth', 'terrain',
-                      'gist_stern', 'gnuplot', 'gnuplot2', 'CMRmap',
-                      'cubehelix', 'brg', 'gist_rainbow', 'rainbow', 'jet',
-                      'turbo', 'nipy_spectral', 'gist_ncar'])
+    # Turn off *all* ticks & spines, not just the ones with colormaps.
+    for ax in axs:
+        ax.set_axis_off()
+
+
+for cmap_category, cmap_list in cmaps.items():
+    plot_color_gradients(cmap_category, cmap_list)

 plt.show()

@@ -283,7 +276,7 @@ for cmap_category, cmap_list in cmaps.items():
             # Plot colormap L values.  Do separately for each category
             # so each plot can be pretty.  To make scatter markers change
             # color along plot:
-            # https://stackoverflow.com/q/8202605/
+            # http://stackoverflow.com/questions/8202605/

             if cmap_category == 'Sequential':
                 # These colormaps all start at high lightness but we want them
@@ -421,14 +414,15 @@ for cmap_category, cmap_list in cmaps.items():
 # References
 # ==========
 #
-# .. _Third-party colormaps: https://matplotlib.org/mpl-third-party/#colormaps-and-styles
+# .. [colorcet] https://colorcet.pyviz.org
 # .. [Ware] http://ccom.unh.edu/sites/default/files/publications/Ware_1988_CGA_Color_sequences_univariate_maps.pdf
 # .. [Moreland] http://www.kennethmoreland.com/color-maps/ColorMapsExpanded.pdf
 # .. [list-colormaps] https://gist.github.com/endolith/2719900#id7
 # .. [mycarta-banding] https://mycarta.wordpress.com/2012/10/14/the-rainbow-is-deadlong-live-the-rainbow-part-4-cie-lab-heated-body/
 # .. [mycarta-jet] https://mycarta.wordpress.com/2012/10/06/the-rainbow-is-deadlong-live-the-rainbow-part-3/
 # .. [kovesi-colormaps] https://arxiv.org/abs/1509.03700
-# .. [bw] https://tannerhelland.com/3643/grayscale-image-algorithm-vb6/
+# .. [bw] http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/
 # .. [colorblindness] http://www.color-blindness.com/
 # .. [IBM] https://doi.org/10.1109/VISUAL.1995.480803
+# .. [palettable] https://jiffyclub.github.io/palettable/
 # .. [turbo] https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html
diff --git a/tutorials/colors/colors.py b/tutorials/colors/colors.py
index f5e36cfc90..dac7b800e4 100644
--- a/tutorials/colors/colors.py
+++ b/tutorials/colors/colors.py
@@ -3,7 +3,8 @@
 Specifying Colors
 *****************

-Matplotlib recognizes the following formats to specify a color.
+Matplotlib recognizes the following formats in the table below to specify a
+color.

 +--------------------------------------+--------------------------------------+
 | Format                               | Example                              |
@@ -19,20 +20,18 @@ Matplotlib recognizes the following formats to specify a color.
 | equivalent hex shorthand of          | - ``'#fb1'`` as ``'#ffbb11'``        |
 | duplicated characters.               |                                      |
 +--------------------------------------+--------------------------------------+
-| String representation of float value | - ``'0'`` as black                   |
-| in closed interval ``[0, 1]`` for    | - ``'1'`` as white                   |
-| grayscale values.                    | - ``'0.8'`` as light gray            |
+| String representation of float value | - ``'0.8'`` as light gray            |
+| in closed interval ``[0, 1]`` for    | - ``'0'`` as black                   |
+| black and white, respectively.       | - ``'1'`` as white                   |
 +--------------------------------------+--------------------------------------+
 | Single character shorthand notation  | - ``'b'`` as blue                    |
-| for some basic colors.               | - ``'g'`` as green                   |
+| for shades of colors.                | - ``'g'`` as green                   |
 |                                      | - ``'r'`` as red                     |
-| .. note::                            | - ``'c'`` as cyan                    |
-|    The colors green, cyan, magenta,  | - ``'m'`` as magenta                 |
-|    and yellow do not coincide with   | - ``'y'`` as yellow                  |
-|    X11/CSS4 colors. Their particular | - ``'k'`` as black                   |
-|    shades were chosen for better     | - ``'w'`` as white                   |
-|    visibility of colored lines       |                                      |
-|    against typical backgrounds.      |                                      |
+| .. note:: The colors green, cyan,    | - ``'c'`` as cyan                    |
+|           magenta, and yellow do not | - ``'m'`` as magenta                 |
+|           coincide with X11/CSS4     | - ``'y'`` as yellow                  |
+|           colors.                    | - ``'k'`` as black                   |
+|                                      | - ``'w'`` as white                   |
 +--------------------------------------+--------------------------------------+
 | Case-insensitive X11/CSS4 color name | - ``'aquamarine'``                   |
 | with no spaces.                      | - ``'mediumseagreen'``               |
@@ -160,11 +159,11 @@ demo('seaborn')
 # The visual below shows name collisions. Color names where color values agree
 # are in bold.

-import matplotlib.colors as mcolors
+import matplotlib._color_data as mcd
 import matplotlib.patches as mpatch

-overlap = {name for name in mcolors.CSS4_COLORS
-           if f'xkcd:{name}' in mcolors.XKCD_COLORS}
+overlap = {name for name in mcd.CSS4_COLORS
+           if "xkcd:" + name in mcd.XKCD_COLORS}

 fig = plt.figure(figsize=[9, 5])
 ax = fig.add_axes([0, 0, 1, 1])
@@ -173,30 +172,23 @@ n_groups = 3
 n_rows = len(overlap) // n_groups + 1

 for j, color_name in enumerate(sorted(overlap)):
-    css4 = mcolors.CSS4_COLORS[color_name]
-    xkcd = mcolors.XKCD_COLORS[f'xkcd:{color_name}'].upper()
-
-    # Pick text colour based on perceived luminance.
-    rgba = mcolors.to_rgba_array([css4, xkcd])
-    luma = 0.299 * rgba[:, 0] + 0.587 * rgba[:, 1] + 0.114 * rgba[:, 2]
-    css4_text_color = 'k' if luma[0] > 0.5 else 'w'
-    xkcd_text_color = 'k' if luma[1] > 0.5 else 'w'
+    css4 = mcd.CSS4_COLORS[color_name]
+    xkcd = mcd.XKCD_COLORS["xkcd:" + color_name].upper()

     col_shift = (j // n_rows) * 3
     y_pos = j % n_rows
-    text_args = dict(fontsize=10, weight='bold' if css4 == xkcd else None)
+    text_args = dict(va='center', fontsize=10,
+                     weight='bold' if css4 == xkcd else None)
     ax.add_patch(mpatch.Rectangle((0 + col_shift, y_pos), 1, 1, color=css4))
     ax.add_patch(mpatch.Rectangle((1 + col_shift, y_pos), 1, 1, color=xkcd))
-    ax.text(0.5 + col_shift, y_pos + .7, css4,
-            color=css4_text_color, ha='center', **text_args)
-    ax.text(1.5 + col_shift, y_pos + .7, xkcd,
-            color=xkcd_text_color, ha='center', **text_args)
-    ax.text(2 + col_shift, y_pos + .7, f'  {color_name}', **text_args)
+    ax.text(0 + col_shift, y_pos + .5, '  ' + css4, alpha=0.5, **text_args)
+    ax.text(1 + col_shift, y_pos + .5, '  ' + xkcd, alpha=0.5, **text_args)
+    ax.text(2 + col_shift, y_pos + .5, '  ' + color_name, **text_args)

 for g in range(n_groups):
     ax.hlines(range(n_rows), 3*g, 3*g + 2.8, color='0.7', linewidth=1)
-    ax.text(0.5 + 3*g, -0.3, 'X11/CSS4', ha='center')
-    ax.text(1.5 + 3*g, -0.3, 'xkcd', ha='center')
+    ax.text(0.5 + 3*g, -0.5, 'X11', ha='center', va='center')
+    ax.text(1.5 + 3*g, -0.5, 'xkcd', ha='center', va='center')

 ax.set_xlim(0, 3 * n_groups)
 ax.set_ylim(n_rows, -1)
diff --git a/tutorials/intermediate/artists.py b/tutorials/intermediate/artists.py
index 07c0e43cc8..1df2544caf 100644
--- a/tutorials/intermediate/artists.py
+++ b/tutorials/intermediate/artists.py
@@ -313,7 +313,7 @@ plt.show()
 # directly from the Axes list, but rather use the
 # :meth:`~matplotlib.figure.Figure.add_subplot` and
 # :meth:`~matplotlib.figure.Figure.add_axes` methods to insert, and the
-# `Axes.remove <matplotlib.artist.Artist.remove>` method to delete.  You are
+# :meth:`~matplotlib.figure.Figure.delaxes` method to delete.  You are
 # free however, to iterate over the list of Axes or index into it to get
 # access to ``Axes`` instances you want to customize.  Here is an
 # example which turns all the Axes grids on::
diff --git a/tutorials/intermediate/autoscale.py b/tutorials/intermediate/autoscale.py
index b585eb8511..64cc2e22f0 100644
--- a/tutorials/intermediate/autoscale.py
+++ b/tutorials/intermediate/autoscale.py
@@ -71,7 +71,7 @@ ax[1].set_title("margins(0.2)")
 # `~matplotlib.axes.Axes.use_sticky_edges`.
 # Artists have a property `.Artist.sticky_edges`, and the values of
 # sticky edges can be changed by writing to ``Artist.sticky_edges.x`` or
-# ``Artist.sticky_edges.y``.
+# ``.Artist.sticky_edges.y``.
 #
 # The following example shows how overriding works and when it is needed.

diff --git a/tutorials/intermediate/constrainedlayout_guide.py b/tutorials/intermediate/constrainedlayout_guide.py
index 7b296f9930..3458667aef 100644
--- a/tutorials/intermediate/constrainedlayout_guide.py
+++ b/tutorials/intermediate/constrainedlayout_guide.py
@@ -22,8 +22,7 @@ a figure. Two ways of doing so are

       plt.subplots(constrained_layout=True)

-* activate it via :ref:`rcParams<customizing-with-dynamic-rc-settings>`,
-  like::
+* activate it via :ref:`rcParams<matplotlib-rcparams>`, like::

       plt.rcParams['figure.constrained_layout.use'] = True

@@ -72,15 +71,15 @@ def example_plot(ax, fontsize=12, hide_labels=False):
         ax.set_ylabel('y-label', fontsize=fontsize)
         ax.set_title('Title', fontsize=fontsize)

+
 fig, ax = plt.subplots(constrained_layout=False)
 example_plot(ax, fontsize=24)

 ###############################################################################
 # To prevent this, the location of axes needs to be adjusted. For
-# subplots, this can be done manually by adjusting the subplot parameters
-# using `.Figure.subplots_adjust`. However, specifying your figure with the
-# # ``constrained_layout=True`` keyword argument will do the adjusting
-# # automatically.
+# subplots, this can be done by adjusting the subplot params
+# (:ref:`howto-subplots-adjust`). However, specifying your figure with the
+# ``constrained_layout=True`` kwarg will do the adjusting automatically.

 fig, ax = plt.subplots(constrained_layout=True)
 example_plot(ax, fontsize=24)
@@ -113,7 +112,7 @@ for ax in axs.flat:
 #
 # .. note::
 #
-#   For the `~.axes.Axes.pcolormesh` keyword arguments (``pc_kwargs``) we use a
+#   For the `~.axes.Axes.pcolormesh` kwargs (``pc_kwargs``) we use a
 #   dictionary. Below we will assign one colorbar to a number of axes each
 #   containing a `~.cm.ScalarMappable`; specifying the norm and colormap
 #   ensures the colorbar is accurate for all the axes.
@@ -296,8 +295,8 @@ pads = [0, 0.05, 0.1, 0.2]
 for pad, ax in zip(pads, axs.flat):
     pc = ax.pcolormesh(arr, **pc_kwargs)
     fig.colorbar(pc, ax=ax, shrink=0.6, pad=pad)
-    ax.set_xticklabels([])
-    ax.set_yticklabels([])
+    ax.set_xticklabels('')
+    ax.set_yticklabels('')
     ax.set_title(f'pad: {pad}')
 fig.set_constrained_layout_pads(w_pad=2 / 72, h_pad=2 / 72, hspace=0.2,
                                 wspace=0.2)
@@ -306,9 +305,9 @@ fig.set_constrained_layout_pads(w_pad=2 / 72, h_pad=2 / 72, hspace=0.2,
 # rcParams
 # ========
 #
-# There are five :ref:`rcParams<customizing-with-dynamic-rc-settings>`
-# that can be set, either in a script or in the :file:`matplotlibrc`
-# file. They all have the prefix ``figure.constrained_layout``:
+# There are five :ref:`rcParams<matplotlib-rcparams>` that can be set,
+# either in a script or in the :file:`matplotlibrc` file.
+# They all have the prefix ``figure.constrained_layout``:
 #
 # - *use*: Whether to use constrained_layout. Default is False
 # - *w_pad*, *h_pad*:    Padding around axes objects.
@@ -509,7 +508,6 @@ example_plot(ax2)
 example_plot(ax3)
 example_plot(ax4)
 fig.suptitle('subplot2grid')
-plt.show()

 ###############################################################################
 # Other Caveats
@@ -557,7 +555,7 @@ plt.show()
 # has some complexity due to the complex ways we can layout a figure.
 #
 # Layout in Matplotlib is carried out with gridspecs
-# via the `.GridSpec` class. A gridspec is a logical division of the figure
+# via the `~.GridSpec` class. A gridspec is a logical division of the figure
 # into rows and columns, with the relative width of the Axes in those
 # rows and columns set by *width_ratios* and *height_ratios*.
 #
@@ -590,7 +588,7 @@ from matplotlib._layoutgrid import plot_children

 fig, ax = plt.subplots(constrained_layout=True)
 example_plot(ax, fontsize=24)
-plot_children(fig)
+plot_children(fig, fig._layoutgrid)

 #######################################################################
 # Simple case: two Axes
@@ -605,7 +603,7 @@ plot_children(fig)
 fig, ax = plt.subplots(1, 2, constrained_layout=True)
 example_plot(ax[0], fontsize=32)
 example_plot(ax[1], fontsize=8)
-plot_children(fig, printit=False)
+plot_children(fig, fig._layoutgrid, printit=False)

 #######################################################################
 # Two Axes and colorbar
@@ -618,7 +616,7 @@ fig, ax = plt.subplots(1, 2, constrained_layout=True)
 im = ax[0].pcolormesh(arr, **pc_kwargs)
 fig.colorbar(im, ax=ax[0], shrink=0.6)
 im = ax[1].pcolormesh(arr, **pc_kwargs)
-plot_children(fig)
+plot_children(fig, fig._layoutgrid)

 #######################################################################
 # Colorbar associated with a Gridspec
@@ -631,7 +629,7 @@ fig, axs = plt.subplots(2, 2, constrained_layout=True)
 for ax in axs.flat:
     im = ax.pcolormesh(arr, **pc_kwargs)
 fig.colorbar(im, ax=axs, shrink=0.6)
-plot_children(fig, printit=False)
+plot_children(fig, fig._layoutgrid, printit=False)

 #######################################################################
 # Uneven sized Axes
@@ -656,7 +654,7 @@ ax = fig.add_subplot(gs[0, 1])
 im = ax.pcolormesh(arr, **pc_kwargs)
 ax = fig.add_subplot(gs[1, 1])
 im = ax.pcolormesh(arr, **pc_kwargs)
-plot_children(fig, printit=False)
+plot_children(fig, fig._layoutgrid, printit=False)

 #######################################################################
 # One case that requires finessing is if margins do not have any artists
@@ -671,5 +669,4 @@ ax00 = fig.add_subplot(gs[0, 0:2])
 ax01 = fig.add_subplot(gs[0, 2:])
 ax10 = fig.add_subplot(gs[1, 1:3])
 example_plot(ax10, fontsize=14)
-plot_children(fig)
-plt.show()
+plot_children(fig, fig._layoutgrid)
diff --git a/tutorials/intermediate/gridspec.py b/tutorials/intermediate/gridspec.py
index d9c5f10bd4..d1d469ac02 100644
--- a/tutorials/intermediate/gridspec.py
+++ b/tutorials/intermediate/gridspec.py
@@ -5,24 +5,27 @@ Customizing Figure Layouts Using GridSpec and Other Functions

 How to create grid-shaped combinations of axes.

-`~matplotlib.pyplot.subplots`
-    The primary function used to create figures and axes.  It is similar to
-    `.pyplot.subplot`, but creates and places all axes on the figure at once.
-    See also `.Figure.subplots`.
-
-`~matplotlib.gridspec.GridSpec`
-    Specifies the geometry of the grid that a subplot will be
-    placed. The number of rows and number of columns of the grid
-    need to be set. Optionally, the subplot layout parameters
-    (e.g., left, right, etc.) can be tuned.
-
-`~matplotlib.gridspec.SubplotSpec`
-    Specifies the location of the subplot in the given `.GridSpec`.
-
-`~matplotlib.pyplot.subplot2grid`
-    A helper function that is similar to `.pyplot.subplot`,
-    but uses 0-based indexing and let subplot to occupy multiple cells.
-    This function is not covered in this tutorial.
+    :func:`~matplotlib.pyplot.subplots`
+        Perhaps the primary function used to create figures and axes.
+        It's also similar to :func:`.matplotlib.pyplot.subplot`,
+        but creates and places all axes on the figure at once.  See also
+        `matplotlib.figure.Figure.subplots`.
+
+    :class:`~matplotlib.gridspec.GridSpec`
+        Specifies the geometry of the grid that a subplot will be
+        placed. The number of rows and number of columns of the grid
+        need to be set. Optionally, the subplot layout parameters
+        (e.g., left, right, etc.) can be tuned.
+
+    :class:`~matplotlib.gridspec.SubplotSpec`
+        Specifies the location of the subplot in the given *GridSpec*.
+
+    :func:`~matplotlib.pyplot.subplot2grid`
+        A helper function that is similar to
+        :func:`~matplotlib.pyplot.subplot`,
+        but uses 0-based indexing and let subplot to occupy multiple cells.
+        This function is not covered in this tutorial.
+
 """

 import matplotlib.pyplot as plt
@@ -61,7 +64,7 @@ f2_ax4 = fig2.add_subplot(spec2[1, 1])
 #############################################################################
 # The power of gridspec comes in being able to create subplots that span
 # rows and columns.  Note the `NumPy slice syntax
-# <https://numpy.org/doc/stable/reference/arrays.indexing.html>`_
+# <https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html>`_
 # for selecting the part of the gridspec each subplot will occupy.
 #
 # Note that we have also used the convenience method `.Figure.add_gridspec`
diff --git a/tutorials/intermediate/imshow_extent.py b/tutorials/intermediate/imshow_extent.py
index 8065a06714..e1e87eb253 100644
--- a/tutorials/intermediate/imshow_extent.py
+++ b/tutorials/intermediate/imshow_extent.py
@@ -2,18 +2,18 @@
 *origin* and *extent* in `~.Axes.imshow`
 ========================================

-:meth:`~.Axes.imshow` allows you to render an image (either a 2D array which
-will be color-mapped (based on *norm* and *cmap*) or a 3D RGB(A) array which
-will be used as-is) to a rectangular region in data space.  The orientation of
-the image in the final rendering is controlled by the *origin* and *extent*
-keyword arguments (and attributes on the resulting `.AxesImage` instance) and
-the data limits of the axes.
-
-The *extent* keyword arguments controls the bounding box in data coordinates
-that the image will fill specified as ``(left, right, bottom, top)`` in **data
-coordinates**, the *origin* keyword argument controls how the image fills that
-bounding box, and the orientation in the final rendered image is also affected
-by the axes limits.
+:meth:`~.Axes.imshow` allows you to render an image (either a 2D array
+which will be color-mapped (based on *norm* and *cmap*) or a 3D RGB(A)
+array which will be used as-is) to a rectangular region in data space.
+The orientation of the image in the final rendering is controlled by
+the *origin* and *extent* kwargs (and attributes on the resulting
+`~.AxesImage` instance) and the data limits of the axes.
+
+The *extent* kwarg controls the bounding box in data coordinates that
+the image will fill specified as ``(left, right, bottom, top)`` in
+**data coordinates**, the *origin* kwarg controls how the image fills
+that bounding box, and the orientation in the final rendered image is
+also affected by the axes limits.

 .. hint:: Most of the code below is used for adding labels and informative
    text to the plots. The described effects of *origin* and *extent* can be
diff --git a/tutorials/intermediate/legend_guide.py b/tutorials/intermediate/legend_guide.py
index 746a442614..c62a59d9c4 100644
--- a/tutorials/intermediate/legend_guide.py
+++ b/tutorials/intermediate/legend_guide.py
@@ -53,18 +53,16 @@ Those artists with an empty string as label or with a label starting with
 For full control of what is being added to the legend, it is common to pass
 the appropriate handles directly to :func:`legend`::

-    fig, ax = plt.subplots()
-    line_up, = ax.plot([1, 2, 3], label='Line 2')
-    line_down, = ax.plot([3, 2, 1], label='Line 1')
-    ax.legend(handles=[line_up, line_down])
+    line_up, = plt.plot([1, 2, 3], label='Line 2')
+    line_down, = plt.plot([3, 2, 1], label='Line 1')
+    plt.legend(handles=[line_up, line_down])

 In some cases, it is not possible to set the label of the handle, so it is
 possible to pass through the list of labels to :func:`legend`::

-    fig, ax = plt.subplots()
-    line_up, = ax.plot([1, 2, 3], label='Line 2')
-    line_down, = ax.plot([3, 2, 1], label='Line 1')
-    ax.legend([line_up, line_down], ['Line Up', 'Line Down'])
+    line_up, = plt.plot([1, 2, 3], label='Line 2')
+    line_down, = plt.plot([3, 2, 1], label='Line 1')
+    plt.legend([line_up, line_down], ['Line Up', 'Line Down'])


 .. _proxy_legend_handles:
@@ -83,9 +81,8 @@ is represented by a red color:
 import matplotlib.patches as mpatches
 import matplotlib.pyplot as plt

-fig, ax = plt.subplots()
 red_patch = mpatches.Patch(color='red', label='The red data')
-ax.legend(handles=[red_patch])
+plt.legend(handles=[red_patch])

 plt.show()

@@ -95,10 +92,9 @@ plt.show()

 import matplotlib.lines as mlines

-fig, ax = plt.subplots()
 blue_line = mlines.Line2D([], [], color='blue', marker='*',
                           markersize=15, label='Blue stars')
-ax.legend(handles=[blue_line])
+plt.legend(handles=[blue_line])

 plt.show()

@@ -114,25 +110,25 @@ plt.show()
 # figure's top right-hand corner instead of the axes' corner, simply specify
 # the corner's location and the coordinate system of that location::
 #
-#     ax.legend(bbox_to_anchor=(1, 1),
-#               bbox_transform=fig.transFigure)
+#     plt.legend(bbox_to_anchor=(1, 1),
+#                bbox_transform=plt.gcf().transFigure)
 #
 # More examples of custom legend placement:

-fig, ax_dict = plt.subplot_mosaic([['top', 'top'], ['bottom', 'BLANK']],
-                                  empty_sentinel="BLANK")
-ax_dict['top'].plot([1, 2, 3], label="test1")
-ax_dict['top'].plot([3, 2, 1], label="test2")
+plt.subplot(211)
+plt.plot([1, 2, 3], label="test1")
+plt.plot([3, 2, 1], label="test2")
+
 # Place a legend above this subplot, expanding itself to
 # fully use the given bounding box.
-ax_dict['top'].legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',
-                      ncol=2, mode="expand", borderaxespad=0.)
+plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',
+           ncol=2, mode="expand", borderaxespad=0.)

-ax_dict['bottom'].plot([1, 2, 3], label="test1")
-ax_dict['bottom'].plot([3, 2, 1], label="test2")
+plt.subplot(223)
+plt.plot([1, 2, 3], label="test1")
+plt.plot([3, 2, 1], label="test2")
 # Place a legend to the right of this smaller subplot.
-ax_dict['bottom'].legend(bbox_to_anchor=(1.05, 1),
-                         loc='upper left', borderaxespad=0.)
+plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)

 plt.show()

@@ -148,18 +144,17 @@ plt.show()
 # handles on the Axes. To keep old legend instances, we must add them
 # manually to the Axes:

-fig, ax = plt.subplots()
-line1, = ax.plot([1, 2, 3], label="Line 1", linestyle='--')
-line2, = ax.plot([3, 2, 1], label="Line 2", linewidth=4)
+line1, = plt.plot([1, 2, 3], label="Line 1", linestyle='--')
+line2, = plt.plot([3, 2, 1], label="Line 2", linewidth=4)

 # Create a legend for the first line.
-first_legend = ax.legend(handles=[line1], loc='upper right')
+first_legend = plt.legend(handles=[line1], loc='upper right')

-# Add the legend manually to the Axes.
-ax.add_artist(first_legend)
+# Add the legend manually to the current Axes.
+plt.gca().add_artist(first_legend)

 # Create another legend for the second line.
-ax.legend(handles=[line2], loc='lower right')
+plt.legend(handles=[line2], loc='lower right')

 plt.show()

@@ -193,16 +188,15 @@ plt.show()

 from matplotlib.legend_handler import HandlerLine2D

-fig, ax = plt.subplots()
-line1, = ax.plot([3, 2, 1], marker='o', label='Line 1')
-line2, = ax.plot([1, 2, 3], marker='o', label='Line 2')
+line1, = plt.plot([3, 2, 1], marker='o', label='Line 1')
+line2, = plt.plot([1, 2, 3], marker='o', label='Line 2')

-ax.legend(handler_map={line1: HandlerLine2D(numpoints=4)})
+plt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})

 ###############################################################################
 # As you can see, "Line 1" now has 4 marker points, where "Line 2" has 2 (the
 # default). Try the above code, only change the map's key from ``line1`` to
-# ``type(line1)``. Notice how now both `.Line2D` instances get 4 markers.
+# ``type(line1)``. Notice how now both `~.Line2D` instances get 4 markers.
 #
 # Along with handlers for complex plot types such as errorbars, stem plots
 # and histograms, the default ``handler_map`` has a special ``tuple`` handler
@@ -214,12 +208,11 @@ from numpy.random import randn

 z = randn(10)

-fig, ax = plt.subplots()
-red_dot, = ax.plot(z, "ro", markersize=15)
+red_dot, = plt.plot(z, "ro", markersize=15)
 # Put a white cross over some of the data.
-white_cross, = ax.plot(z[:5], "w+", markeredgewidth=3, markersize=15)
+white_cross, = plt.plot(z[:5], "w+", markeredgewidth=3, markersize=15)

-ax.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])
+plt.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])

 ###############################################################################
 # The `.legend_handler.HandlerTuple` class can also be used to
@@ -227,12 +220,11 @@ ax.legend([red_dot, (red_dot, white_cross)], ["Attr A", "Attr A+B"])

 from matplotlib.legend_handler import HandlerLine2D, HandlerTuple

-fig, ax = plt.subplots()
-p1, = ax.plot([1, 2.5, 3], 'r-d')
-p2, = ax.plot([3, 2, 1], 'k-o')
+p1, = plt.plot([1, 2.5, 3], 'r-d')
+p2, = plt.plot([3, 2, 1], 'k-o')

-l = ax.legend([(p1, p2)], ['Two keys'], numpoints=1,
-              handler_map={tuple: HandlerTuple(ndivide=None)})
+l = plt.legend([(p1, p2)], ['Two keys'], numpoints=1,
+               handler_map={tuple: HandlerTuple(ndivide=None)})

 ###############################################################################
 # Implementing a custom legend handler
@@ -261,10 +253,9 @@ class AnyObjectHandler:
         handlebox.add_artist(patch)
         return patch

-fig, ax = plt.subplots()

-ax.legend([AnyObject()], ['My first handler'],
-          handler_map={AnyObject: AnyObjectHandler()})
+plt.legend([AnyObject()], ['My first handler'],
+           handler_map={AnyObject: AnyObjectHandler()})

 ###############################################################################
 # Alternatively, had we wanted to globally accept ``AnyObject`` instances
@@ -295,9 +286,7 @@ class HandlerEllipse(HandlerPatch):

 c = mpatches.Circle((0.5, 0.5), 0.25, facecolor="green",
                     edgecolor="red", linewidth=3)
+plt.gca().add_patch(c)

-fig, ax = plt.subplots()
-
-ax.add_patch(c)
-ax.legend([c], ["An ellipse, not a rectangle"],
-          handler_map={mpatches.Circle: HandlerEllipse()})
+plt.legend([c], ["An ellipse, not a rectangle"],
+           handler_map={mpatches.Circle: HandlerEllipse()})
diff --git a/tutorials/intermediate/tight_layout_guide.py b/tutorials/intermediate/tight_layout_guide.py
index 4bc92b49c1..bafd50e4ec 100644
--- a/tutorials/intermediate/tight_layout_guide.py
+++ b/tutorials/intermediate/tight_layout_guide.py
@@ -46,9 +46,9 @@ example_plot(ax, fontsize=24)

 ###############################################################################
 # To prevent this, the location of axes needs to be adjusted. For
-# subplots, this can be done manually by adjusting the subplot parameters
-# using `.Figure.subplots_adjust`. `.Figure.tight_layout` does this
-# automatically.
+# subplots, this can be done by adjusting the subplot params
+# (:ref:`howto-subplots-adjust`). Matplotlib v1.1 introduced
+# `.Figure.tight_layout` that does this automatically for you.

 fig, ax = plt.subplots()
 example_plot(ax, fontsize=24)
diff --git a/tutorials/introductory/customizing.py b/tutorials/introductory/customizing.py
index 9e74016c82..993692bc8d 100644
--- a/tutorials/introductory/customizing.py
+++ b/tutorials/introductory/customizing.py
@@ -1,113 +1,32 @@
 """
 .. redirect-from:: /users/customizing

-=====================================================
 Customizing Matplotlib with style sheets and rcParams
 =====================================================

 Tips for customizing the properties and default styles of Matplotlib.

-There are three ways to customize Matplotlib:
-
-    1. :ref:`Setting rcParams at runtime<customizing-with-dynamic-rc-settings>`.
-    2. :ref:`Using style sheets<customizing-with-style-sheets>`.
-    3. :ref:`Changing your matplotlibrc file<customizing-with-matplotlibrc-files>`.
-
-Setting rcParams at runtime takes precedence over style sheets, style
-sheets take precedence over :file:`matplotlibrc` files.
+Using style sheets
+------------------

-.. _customizing-with-dynamic-rc-settings:
+The :mod:`.style` package adds support for easy-to-switch plotting
+"styles" with the same parameters as a :ref:`matplotlib rc
+<customizing-with-matplotlibrc-files>` file (which is read at startup to
+configure Matplotlib).

-Runtime rc settings
-===================
-
-You can dynamically change the default rc (runtime configuration)
-settings in a python script or interactively from the python shell. All
-rc settings are stored in a dictionary-like variable called
-:data:`matplotlib.rcParams`, which is global to the matplotlib package.
-See `matplotlib.rcParams` for a full list of configurable rcParams.
-rcParams can be modified directly, for example:
+There are a number of pre-defined styles :doc:`provided by Matplotlib
+</gallery/style_sheets/style_sheets_reference>`. For
+example, there's a pre-defined style called "ggplot", which emulates the
+aesthetics of ggplot_ (a popular plotting package for R_). To use this style,
+just add:
 """

 import numpy as np
 import matplotlib.pyplot as plt
 import matplotlib as mpl
 from cycler import cycler
-mpl.rcParams['lines.linewidth'] = 2
-mpl.rcParams['lines.linestyle'] = '--'
-data = np.random.randn(50)
-plt.plot(data)
-
-###############################################################################
-# Note, that in order to change the usual `~.Axes.plot` color you have to
-# change the *prop_cycle* property of *axes*:
-
-mpl.rcParams['axes.prop_cycle'] = cycler(color=['r', 'g', 'b', 'y'])
-plt.plot(data)  # first color is red
-
-###############################################################################
-# Matplotlib also provides a couple of convenience functions for modifying rc
-# settings. `matplotlib.rc` can be used to modify multiple
-# settings in a single group at once, using keyword arguments:
-
-mpl.rc('lines', linewidth=4, linestyle='-.')
-plt.plot(data)
-
-###############################################################################
-# Temporary rc settings
-# ---------------------
-#
-# The :data:`matplotlib.rcParams` object can also be changed temporarily using
-# the `matplotlib.rc_context` context manager:
-
-with mpl.rc_context({'lines.linewidth': 2, 'lines.linestyle': ':'}):
-    plt.plot(data)
-
-###############################################################################
-# `matplotlib.rc_context` can also be used as a decorator to modify the
-# defaults within a function:
-
-
-@mpl.rc_context({'lines.linewidth': 3, 'lines.linestyle': '-'})
-def plotting_function():
-    plt.plot(data)
-
-plotting_function()
-
-###############################################################################
-# `matplotlib.rcdefaults` will restore the standard Matplotlib
-# default settings.
-#
-# There is some degree of validation when setting the values of rcParams, see
-# :mod:`matplotlib.rcsetup` for details.
-
-###############################################################################
-# .. _customizing-with-style-sheets:
-#
-# Using style sheets
-# ==================
-#
-# Another way to change the visual appearance of plots is to set the
-# rcParams in a so-called style sheet and import that style sheet with
-# `matplotlib.style.use`. In this way you can switch easily between
-# different styles by simply changing the imported style sheet. A style
-# sheets looks the same as a :ref:`matplotlibrc<matplotlibrc-sample>`
-# file, but in a style sheet you can only set rcParams that are related
-# to the actual style of a plot. Other rcParams, like *backend*, will be
-# ignored. :file:`matplotlibrc` files support all rcParams. The
-# rationale behind this is to make style sheets portable between
-# different machines without having to worry about dependencies which
-# might or might not be installed on another machine. For a full list of
-# rcParams see `matplotlib.rcParams`. For a list of rcParams that are
-# ignored in style sheets see `matplotlib.style.use`.
-#
-# There are a number of pre-defined styles :doc:`provided by Matplotlib
-# </gallery/style_sheets/style_sheets_reference>`. For
-# example, there's a pre-defined style called "ggplot", which emulates the
-# aesthetics of ggplot_ (a popular plotting package for R_). To use this
-# style, add:
-
 plt.style.use('ggplot')
+data = np.random.randn(50)

 ###############################################################################
 # To list all available styles, use:
@@ -185,18 +104,59 @@ with plt.style.context('dark_background'):
 plt.show()

 ###############################################################################
+# .. _matplotlib-rcparams:
+#
+# Matplotlib rcParams
+# ===================
+#
+# .. _customizing-with-dynamic-rc-settings:
+#
+# Dynamic rc settings
+# -------------------
+#
+# You can also dynamically change the default rc settings in a python script or
+# interactively from the python shell. All of the rc settings are stored in a
+# dictionary-like variable called :data:`matplotlib.rcParams`, which is global to
+# the matplotlib package. rcParams can be modified directly, for example:
+
+mpl.rcParams['lines.linewidth'] = 2
+mpl.rcParams['lines.linestyle'] = '--'
+plt.plot(data)
+
+###############################################################################
+# Note, that in order to change the usual `~.Axes.plot` color you have to
+# change the *prop_cycle* property of *axes*:
+
+mpl.rcParams['axes.prop_cycle'] = cycler(color=['r', 'g', 'b', 'y'])
+plt.plot(data)  # first color is red
+
+###############################################################################
+# Matplotlib also provides a couple of convenience functions for modifying rc
+# settings. `matplotlib.rc` can be used to modify multiple
+# settings in a single group at once, using keyword arguments:
+
+mpl.rc('lines', linewidth=4, linestyle='-.')
+plt.plot(data)
+
+###############################################################################
+# `matplotlib.rcdefaults` will restore the standard Matplotlib
+# default settings.
+#
+# There is some degree of validation when setting the values of rcParams, see
+# :mod:`matplotlib.rcsetup` for details.
+#
 # .. _customizing-with-matplotlibrc-files:
 #
 # The :file:`matplotlibrc` file
-# =============================
+# -----------------------------
 #
 # Matplotlib uses :file:`matplotlibrc` configuration files to customize all
 # kinds of properties, which we call 'rc settings' or 'rc parameters'. You can
 # control the defaults of almost every property in Matplotlib: figure size and
 # DPI, line width, color and style, axes, axis and grid properties, text and
-# font properties and so on. The :file:`matplotlibrc` is read at startup to
-# configure Matplotlib. Matplotlib looks for :file:`matplotlibrc` in four
-# locations, in the following order:
+# font properties and so on. When a URL or path is not specified with a call to
+# ``style.use('<path>/<style-name>.mplstyle')``, Matplotlib looks for
+# :file:`matplotlibrc` in four locations, in the following order:
 #
 # 1. :file:`matplotlibrc` in the current working directory, usually used for
 #    specific customizations that you do not want to apply elsewhere.
@@ -223,12 +183,8 @@ plt.show()
 #    your customizations to be saved, please move this file to your
 #    user-specific matplotlib directory.
 #
-# Once a :file:`matplotlibrc` file has been found, it will *not* search
-# any of the other paths. When a
-# :ref:`style sheet<customizing-with-style-sheets>` is given with
-# ``style.use('<path>/<style-name>.mplstyle')``, settings specified in
-# the style sheet take precedence over settings in the
-# :file:`matplotlibrc` file.
+# Once a :file:`matplotlibrc` file has been found, it will *not* search any of
+# the other paths.
 #
 # To display where the currently active :file:`matplotlibrc` file was
 # loaded from, one can do the following::
@@ -237,15 +193,14 @@ plt.show()
 #   >>> matplotlib.matplotlib_fname()
 #   '/home/foo/.config/matplotlib/matplotlibrc'
 #
-# See below for a sample :ref:`matplotlibrc file<matplotlibrc-sample>`
-# and see `matplotlib.rcParams` for a full list of configurable rcParams.
+# See below for a sample :ref:`matplotlibrc file<matplotlibrc-sample>`.
 #
 # .. _matplotlibrc-sample:
 #
-# The default :file:`matplotlibrc` file
-# -------------------------------------
+# A sample matplotlibrc file
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
 #
-# .. literalinclude:: ../../../lib/matplotlib/mpl-data/matplotlibrc
+# .. literalinclude:: ../../../matplotlibrc.template
 #
 #
 # .. _ggplot: https://ggplot2.tidyverse.org/
diff --git a/tutorials/introductory/images.py b/tutorials/introductory/images.py
index 02470a35bb..858c3ccd26 100644
--- a/tutorials/introductory/images.py
+++ b/tutorials/introductory/images.py
@@ -33,7 +33,7 @@ This turns on inline plotting, where plot graphics will appear in your
 notebook.  This has important implications for interactivity.  For inline plotting, commands in
 cells below the cell that outputs a plot will not affect the plot.  For example,
 changing the colormap is not possible from cells below the cell that creates a plot.
-However, for other backends, such as Qt, that open a separate window,
+However, for other backends, such as Qt5, that open a separate window,
 cells below those that create the plot will change the plot - it is a
 live object in memory.

@@ -69,7 +69,7 @@ import matplotlib.image as mpimg
 # on where you get your data, the other kinds of image that you'll most
 # likely encounter are RGBA images, which allow for transparency, or
 # single-channel grayscale (luminosity) images.  Download `stinkbug.png
-# <https://raw.githubusercontent.com/matplotlib/matplotlib/main/doc/_static/stinkbug.png>`_
+# <https://raw.githubusercontent.com/matplotlib/matplotlib/master/doc/_static/stinkbug.png>`_
 # to your computer for the rest of this tutorial.
 #
 # And here we go...
@@ -132,7 +132,7 @@ imgplot = plt.imshow(img)
 lum_img = img[:, :, 0]

 # This is array slicing.  You can read more in the `Numpy tutorial
-# <https://numpy.org/doc/stable/user/quickstart.html>`_.
+# <https://docs.scipy.org/doc/numpy/user/quickstart.html>`_.

 plt.imshow(lum_img)

diff --git a/tutorials/introductory/lifecycle.py b/tutorials/introductory/lifecycle.py
index 4f30a4d085..00732d4aca 100644
--- a/tutorials/introductory/lifecycle.py
+++ b/tutorials/introductory/lifecycle.py
@@ -13,8 +13,7 @@ to highlight some neat features and best-practices using Matplotlib.
 .. note::

     This tutorial is based on
-    `this excellent blog post
-    <https://pbpython.com/effective-matplotlib.html>`_
+    `this excellent blog post <http://pbpython.com/effective-matplotlib.html>`_
     by Chris Moffitt. It was transformed into this tutorial by Chris Holdgraf.

 A note on the Object-Oriented API vs. Pyplot
@@ -170,14 +169,14 @@ ax.set(xlim=[-10000, 140000], xlabel='Total Revenue', ylabel='Company',

 ###############################################################################
 # We can also adjust the size of this plot using the :func:`pyplot.subplots`
-# function. We can do this with the *figsize* keyword argument.
+# function. We can do this with the ``figsize`` kwarg.
 #
 # .. note::
 #
-#    While indexing in NumPy follows the form (row, column), the *figsize*
-#    keyword argument follows the form (width, height). This follows
-#    conventions in visualization, which unfortunately are different from those
-#    of linear algebra.
+#    While indexing in NumPy follows the form (row, column), the figsize
+#    kwarg follows the form (width, height). This follows conventions in
+#    visualization, which unfortunately are different from those of linear
+#    algebra.

 fig, ax = plt.subplots(figsize=(8, 4))
 ax.barh(group_names, group_data)
@@ -199,7 +198,7 @@ ax.set(xlim=[-10000, 140000], xlabel='Total Revenue', ylabel='Company',


 def currency(x, pos):
-    """The two arguments are the value and tick position"""
+    """The two args are the value and tick position"""
     if x >= 1e6:
         s = '${:1.1f}M'.format(x*1e-6)
     else:
diff --git a/tutorials/introductory/pyplot.py b/tutorials/introductory/pyplot.py
index 994bbb50d6..1a8167c061 100644
--- a/tutorials/introductory/pyplot.py
+++ b/tutorials/introductory/pyplot.py
@@ -77,7 +77,7 @@ plt.show()
 #
 # If matplotlib were limited to working with lists, it would be fairly
 # useless for numeric processing.  Generally, you will use `numpy
-# <https://numpy.org/>`_ arrays.  In fact, all sequences are
+# <http://www.numpy.org>`_ arrays.  In fact, all sequences are
 # converted to numpy arrays internally.  The example below illustrates
 # plotting several lines with different format styles in one function call
 # using arrays.
@@ -150,7 +150,7 @@ plt.show()
 # antialiased, etc; see `matplotlib.lines.Line2D`.  There are
 # several ways to set line properties
 #
-# * Use keyword arguments::
+# * Use keyword args::
 #
 #       plt.plot(x, y, linewidth=2.0)
 #
@@ -171,7 +171,7 @@ plt.show()
 #   MATLAB-style string/value pairs::
 #
 #       lines = plt.plot(x1, y1, x2, y2)
-#       # use keyword arguments
+#       # use keyword args
 #       plt.setp(lines, color='r', linewidth=2.0)
 #       # or MATLAB style string value pairs
 #       plt.setp(lines, 'color', 'r', 'linewidth', 2.0)
@@ -273,9 +273,10 @@ plt.show()
 # which allows you to specify the location as ``axes([left, bottom,
 # width, height])`` where all values are in fractional (0 to 1)
 # coordinates.  See :doc:`/gallery/subplots_axes_and_figures/axes_demo` for an example of
-# placing axes manually and :doc:`/gallery/subplots_axes_and_figures/subplot` for an
+# placing axes manually and :doc:`/gallery/subplots_axes_and_figures/subplot_demo` for an
 # example with lots of subplots.
 #
+#
 # You can create multiple figures by using multiple
 # `~.pyplot.figure` calls with an increasing figure
 # number.  Of course, each figure can contain as many axes and subplots
@@ -460,5 +461,5 @@ plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
 plt.show()

 ###############################################################################
-# It is also possible to add your own scale, see `matplotlib.scale` for
+# It is also possible to add your own scale, see :ref:`adding-new-scales` for
 # details.
diff --git a/tutorials/introductory/sample_plots.py b/tutorials/introductory/sample_plots.py
index 84dd92d328..67091ad1b4 100644
--- a/tutorials/introductory/sample_plots.py
+++ b/tutorials/introductory/sample_plots.py
@@ -17,6 +17,9 @@ Here's how to create a line plot with text labels using
 .. figure:: ../../gallery/lines_bars_and_markers/images/sphx_glr_simple_plot_001.png
    :target: ../../gallery/lines_bars_and_markers/simple_plot.html
    :align: center
+   :scale: 50
+
+   Simple Plot

 .. _screenshots_subplot_demo:

@@ -29,6 +32,9 @@ Multiple axes (i.e. subplots) are created with the
 .. figure:: ../../gallery/subplots_axes_and_figures/images/sphx_glr_subplot_001.png
    :target: ../../gallery/subplots_axes_and_figures/subplot.html
    :align: center
+   :scale: 50
+
+   Subplot

 .. _screenshots_images_demo:

@@ -41,8 +47,9 @@ horizontal dimensions) using the :func:`~matplotlib.pyplot.imshow` function.
 .. figure:: ../../gallery/images_contours_and_fields/images/sphx_glr_image_demo_003.png
    :target: ../../gallery/images_contours_and_fields/image_demo.html
    :align: center
+   :scale: 50

-   Example of using :func:`~matplotlib.pyplot.imshow` to display an MRI
+   Example of using :func:`~matplotlib.pyplot.imshow` to display a CT scan

 .. _screenshots_pcolormesh_demo:

@@ -59,6 +66,9 @@ the same data:
 .. figure:: ../../gallery/images_contours_and_fields/images/sphx_glr_pcolormesh_levels_001.png
    :target: ../../gallery/images_contours_and_fields/pcolormesh_levels.html
    :align: center
+   :scale: 50
+
+   Example comparing :func:`~matplotlib.pyplot.pcolormesh` and :func:`~matplotlib.pyplot.contour` for plotting two-dimensional data

 .. _screenshots_histogram_demo:

@@ -71,6 +81,10 @@ histograms and returns the bin counts or probabilities:
 .. figure:: ../../gallery/statistics/images/sphx_glr_histogram_features_001.png
    :target: ../../gallery/statistics/histogram_features.html
    :align: center
+   :scale: 50
+
+   Histogram Features
+

 .. _screenshots_path_demo:

@@ -83,19 +97,25 @@ You can add arbitrary paths in Matplotlib using the
 .. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_path_patch_001.png
    :target: ../../gallery/shapes_and_collections/path_patch.html
    :align: center
+   :scale: 50
+
+   Path Patch

 .. _screenshots_mplot3d_surface:

 Three-dimensional plotting
 ==========================

-The mplot3d toolkit (see :doc:`/tutorials/toolkits/mplot3d` and
+The mplot3d toolkit (see :ref:`toolkit_mplot3d-tutorial` and
 :ref:`mplot3d-examples-index`) has support for simple 3D graphs
 including surface, wireframe, scatter, and bar charts.

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_surface3d_001.png
    :target: ../../gallery/mplot3d/surface3d.html
    :align: center
+   :scale: 50
+
+   Surface3d

 Thanks to John Porter, Jonathon Taylor, Reinier Heeres, and Ben Root for
 the `.mplot3d` toolkit. This toolkit is included with all standard Matplotlib
@@ -115,6 +135,7 @@ such as the speed or local intensity of the vector field.
 .. figure:: ../../gallery/images_contours_and_fields/images/sphx_glr_plot_streamplot_001.png
    :target: ../../gallery/images_contours_and_fields/plot_streamplot.html
    :align: center
+   :scale: 50

    Streamplot with various plotting options.

@@ -126,7 +147,7 @@ streamplot function.
 Ellipses
 ========

-In support of the `Phoenix <https://www.jpl.nasa.gov/news/phoenix/main.php>`_
+In support of the `Phoenix <http://www.jpl.nasa.gov/news/phoenix/main.php>`_
 mission to Mars (which used Matplotlib to display ground tracking of
 spacecraft), Michael Droettboom built on work by Charlie Moad to provide
 an extremely accurate 8-spline approximation to elliptical arcs (see
@@ -135,6 +156,9 @@ an extremely accurate 8-spline approximation to elliptical arcs (see
 .. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_ellipse_demo_001.png
    :target: ../../gallery/shapes_and_collections/ellipse_demo.html
    :align: center
+   :scale: 50
+
+   Ellipse Demo

 .. _screenshots_barchart_demo:

@@ -147,6 +171,9 @@ includes customizations such as error bars:
 .. figure:: ../../gallery/statistics/images/sphx_glr_barchart_demo_001.png
    :target: ../../gallery/statistics/barchart_demo.html
    :align: center
+   :scale: 50
+
+   Barchart Demo

 You can also create stacked bars
 (`bar_stacked.py <../../gallery/lines_bars_and_markers/bar_stacked.html>`_),
@@ -168,6 +195,9 @@ a few lines of code.
 .. figure:: ../../gallery/pie_and_polar_charts/images/sphx_glr_pie_features_001.png
    :target: ../../gallery/pie_and_polar_charts/pie_features.html
    :align: center
+   :scale: 50
+
+   Pie Features

 .. _screenshots_table_demo:

@@ -180,9 +210,14 @@ to an axes.
 .. figure:: ../../gallery/misc/images/sphx_glr_table_demo_001.png
    :target: ../../gallery/misc/table_demo.html
    :align: center
+   :scale: 50
+
+   Table Demo
+

 .. _screenshots_scatter_demo:

+
 Scatter plots
 =============

@@ -195,6 +230,10 @@ alpha attribute is used to make semitransparent circle markers.
 .. figure:: ../../gallery/lines_bars_and_markers/images/sphx_glr_scatter_demo2_001.png
    :target: ../../gallery/lines_bars_and_markers/scatter_demo2.html
    :align: center
+   :scale: 50
+
+   Scatter Demo2
+

 .. _screenshots_slider_demo:

@@ -209,6 +248,7 @@ and widgets.  See :mod:`matplotlib.widgets` and the
 .. figure:: ../../gallery/widgets/images/sphx_glr_slider_demo_001.png
    :target: ../../gallery/widgets/slider_demo.html
    :align: center
+   :scale: 50

    Slider and radio-button GUI.

@@ -224,6 +264,9 @@ plot filled curves and polygons:
 .. figure:: ../../gallery/lines_bars_and_markers/images/sphx_glr_fill_001.png
    :target: ../../gallery/lines_bars_and_markers/fill.html
    :align: center
+   :scale: 50
+
+   Fill

 Thanks to Andrew Straw for adding this function.

@@ -238,6 +281,9 @@ tick formatters for both.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_date_001.png
    :target: ../../gallery/text_labels_and_annotations/date.html
    :align: center
+   :scale: 50
+
+   Date

 See :mod:`matplotlib.ticker` and :mod:`matplotlib.dates` for details and usage.

@@ -255,6 +301,9 @@ logarithmic plots.
 .. figure:: ../../gallery/scales/images/sphx_glr_log_demo_001.png
    :target: ../../gallery/scales/log_demo.html
    :align: center
+   :scale: 50
+
+   Log Demo

 Thanks to Andrew Straw, Darren Dale and Gregory Lielens for contributions
 log-scaling infrastructure.
@@ -269,6 +318,9 @@ The :func:`~matplotlib.pyplot.polar` function generates polar plots.
 .. figure:: ../../gallery/pie_and_polar_charts/images/sphx_glr_polar_demo_001.png
    :target: ../../gallery/pie_and_polar_charts/polar_demo.html
    :align: center
+   :scale: 50
+
+   Polar Demo

 .. _screenshots_legend_demo:

@@ -283,6 +335,9 @@ functions.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_legend_001.png
    :target: ../../gallery/text_labels_and_annotations/legend.html
    :align: center
+   :scale: 50
+
+   Legend

 Thanks to Charles Twardy for input on the legend function.

@@ -300,6 +355,9 @@ fonts.  See the :mod:`matplotlib.mathtext` module for additional details.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_mathtext_examples_001.png
    :target: ../../gallery/text_labels_and_annotations/mathtext_examples.html
    :align: center
+   :scale: 50
+
+   Mathtext Examples

 Matplotlib's mathtext infrastructure is an independent implementation and
 does not require TeX or any external packages installed on your computer. See
@@ -318,6 +376,9 @@ rendering of strings with the *usetex* option.
 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png
    :target: ../../gallery/text_labels_and_annotations/tex_demo.html
    :align: center
+   :scale: 50
+
+   Tex Demo

 .. _screenshots_eeg_demo:

@@ -329,14 +390,12 @@ Here is a screenshot of an EEG viewer called `pbrain
 <https://github.com/nipy/pbrain>`__.

 .. image:: ../../_static/eeg_small.png
-   :align: center

 The lower axes uses :func:`~matplotlib.pyplot.specgram`
 to plot the spectrogram of one of the EEG channels.

 For examples of how to embed Matplotlib in different toolkits, see:

-   * :doc:`/gallery/user_interfaces/embedding_in_gtk4_sgskip`
    * :doc:`/gallery/user_interfaces/embedding_in_gtk3_sgskip`
    * :doc:`/gallery/user_interfaces/embedding_in_wx2_sgskip`
    * :doc:`/gallery/user_interfaces/mpl_with_glade3_sgskip`
@@ -347,11 +406,14 @@ XKCD-style sketch plots
 =======================

 Just for fun, Matplotlib supports plotting in the style of `xkcd
-<https://xkcd.com/>`_.
+<https://www.xkcd.com/>`_.

 .. figure:: ../../gallery/showcase/images/sphx_glr_xkcd_001.png
    :target: ../../gallery/showcase/xkcd.html
    :align: center
+   :scale: 50
+
+   xkcd

 Subplot example
 ===============
diff --git a/tutorials/introductory/usage.py b/tutorials/introductory/usage.py
index fc265883c6..5f234e366c 100644
--- a/tutorials/introductory/usage.py
+++ b/tutorials/introductory/usage.py
@@ -3,7 +3,7 @@
 Usage Guide
 ***********

-This tutorial covers some basic usage patterns and best practices to
+This tutorial covers some basic usage patterns and best-practices to
 help you get started with Matplotlib.
 """

@@ -16,10 +16,10 @@ import numpy as np
 # A simple example
 # ================
 #
-# Matplotlib graphs your data on `~.figure.Figure`\s (e.g., windows, Jupyter
-# widgets, etc.), each of which can contain one or more `~.axes.Axes`, an
+# Matplotlib graphs your data on `~.figure.Figure`\s (i.e., windows, Jupyter
+# widgets, etc.), each of which can contain one or more `~.axes.Axes` (i.e., an
 # area where points can be specified in terms of x-y coordinates, or theta-r
-# in a polar plot, x-y-z in a 3D plot, etc.  The simplest way of
+# in a polar plot, or x-y-z in a 3D plot, etc.).  The simplest way of
 # creating a figure with an axes is using `.pyplot.subplots`. We can then use
 # `.Axes.plot` to draw some data on the axes:

@@ -50,7 +50,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # Parts of a Figure
 # =================
 #
-# Here is a more detailed layout of the components of a Matplotlib figure.
+# Now, let's have a deeper look at the components of a Matplotlib figure.
 #
 # .. image:: ../../_static/anatomy.png
 #
@@ -58,11 +58,11 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # ----------------------------------
 #
 # The **whole** figure.  The figure keeps
-# track of all the child :class:`~matplotlib.axes.Axes`, a group of
+# track of all the child :class:`~matplotlib.axes.Axes`, a smattering of
 # 'special' artists (titles, figure legends, etc), and the **canvas**.
-# (The canvas is not the primary focus. It is crucial as it is the
-# object that actually does the drawing to get you your plot, but as
-# the user, it is mostly invisible to you).  A figure can contain any
+# (Don't worry too much about the canvas, it is crucial as it is the
+# object that actually does the drawing to get you your plot, but as the
+# user it is more-or-less invisible to you).  A figure can contain any
 # number of :class:`~matplotlib.axes.Axes`, but will typically have
 # at least one.
 #
@@ -78,7 +78,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # :class:`~matplotlib.axes.Axes`
 # ------------------------------
 #
-# This is what you think of as 'a plot'. It is the region of the image
+# This is what you think of as 'a plot', it is the region of the image
 # with the data space. A given figure
 # can contain many Axes, but a given :class:`~matplotlib.axes.Axes`
 # object can only be in one :class:`~matplotlib.figure.Figure`.  The
@@ -97,8 +97,8 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # :class:`~matplotlib.axis.Axis`
 # ------------------------------
 #
-# These are the objects most similar to a number line.
-# They set graph limits and generate ticks (the marks
+# These are the number-line-like objects. They take
+# care of setting the graph limits and generating the ticks (the marks
 # on the axis) and ticklabels (strings labeling the ticks).  The location of
 # the ticks is determined by a `~matplotlib.ticker.Locator` object and the
 # ticklabel strings are formatted by a `~matplotlib.ticker.Formatter`.  The
@@ -108,10 +108,10 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # :class:`~matplotlib.artist.Artist`
 # ----------------------------------
 #
-# Basically, everything visible on the figure is an artist (even
+# Basically, everything you can see on the figure is an artist (even the
 # `.Figure`, `Axes <.axes.Axes>`, and `~.axis.Axis` objects).  This includes
 # `.Text` objects, `.Line2D` objects, :mod:`.collections` objects, `.Patch`
-# objects, etc... When the figure is rendered, all of the
+# objects ... (you get the idea).  When the figure is rendered, all of the
 # artists are drawn to the **canvas**.  Most Artists are tied to an Axes; such
 # an Artist cannot be shared by multiple Axes, or moved from one to another.
 #
@@ -121,9 +121,9 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 # =====================================
 #
 # All of plotting functions expect `numpy.array` or `numpy.ma.masked_array` as
-# input.  Classes that are similar to arrays ('array-like') such as `pandas`
-# data objects and `numpy.matrix` may not work as intended.  Common convention
-# is to convert these to `numpy.array` objects prior to plotting.
+# input.  Classes that are 'array-like' such as `pandas` data objects
+# and `numpy.matrix` may or may not work as intended.  It is best to
+# convert these to `numpy.array` objects prior to plotting.
 #
 # For example, to convert a `pandas.DataFrame` ::
 #
@@ -149,7 +149,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 2, 3])  # Matplotlib plot.
 #
 # So one can do (OO-style)

-x = np.linspace(0, 2, 100)  # Sample data.
+x = np.linspace(0, 2, 100)

 # Note that even in the OO-style, we use `.pyplot.figure` to create the figure.
 fig, ax = plt.subplots()  # Create a figure and an axes.
@@ -164,7 +164,7 @@ ax.legend()  # Add a legend.
 ###############################################################################
 # or (pyplot-style)

-x = np.linspace(0, 2, 100)  # Sample data.
+x = np.linspace(0, 2, 100)

 plt.plot(x, x, label='linear')  # Plot some data on the (implicit) axes.
 plt.plot(x, x**2, label='quadratic')  # etc.
@@ -182,7 +182,7 @@ plt.legend()
 #
 # Matplotlib's documentation and examples use both the OO and the pyplot
 # approaches (which are equally powerful), and you should feel free to use
-# either (however, it is preferable to pick one of them and stick to it, instead
+# either (however, it is preferable pick one of them and stick to it, instead
 # of mixing them).  In general, we suggest to restrict pyplot to interactive
 # plotting (e.g., in a Jupyter notebook), and to prefer the OO-style for
 # non-interactive plotting (in functions and scripts that are intended to be
@@ -203,8 +203,10 @@ plt.legend()
 #    nowadays and deprecated. It is only mentioned here because you may still
 #    encounter it in the wild.
 #
-# If you need to make the same plots over and over
-# again with different data sets, use the recommended signature function below.
+# Typically one finds oneself making the same plots over and over
+# again, but with different data sets, which leads to needing to write
+# specialized functions to do the plotting.  The recommended function
+# signature is something like:


 def my_plotter(ax, data1, data2, param_dict):
@@ -223,7 +225,7 @@ def my_plotter(ax, data1, data2, param_dict):
        The y data

     param_dict : dict
-       Dictionary of keyword arguments to pass to ax.plot
+       Dictionary of kwargs to pass to ax.plot

     Returns
     -------
@@ -241,11 +243,549 @@ fig, ax = plt.subplots(1, 1)
 my_plotter(ax, data1, data2, {'marker': 'x'})

 ###############################################################################
-# or if you wanted to have two sub-plots:
+# or if you wanted to have 2 sub-plots:

 fig, (ax1, ax2) = plt.subplots(1, 2)
 my_plotter(ax1, data1, data2, {'marker': 'x'})
 my_plotter(ax2, data3, data4, {'marker': 'o'})

 ###############################################################################
-# These examples provide convenience for more complex graphs.
+# For these simple examples this style seems like overkill, however
+# once the graphs get slightly more complex it pays off.
+#
+#
+# .. _backends:
+#
+# Backends
+# ========
+#
+# .. _what-is-a-backend:
+#
+# What is a backend?
+# ------------------
+#
+# A lot of documentation on the website and in the mailing lists refers
+# to the "backend" and many new users are confused by this term.
+# Matplotlib targets many different use cases and output formats.  Some
+# people use Matplotlib interactively from the python shell and have
+# plotting windows pop up when they type commands.  Some people run
+# `Jupyter <https://jupyter.org>`_ notebooks and draw inline plots for
+# quick data analysis. Others embed Matplotlib into graphical user
+# interfaces like PyQt or PyGObject to build rich applications.  Some
+# people use Matplotlib in batch scripts to generate postscript images
+# from numerical simulations, and still others run web application
+# servers to dynamically serve up graphs.
+#
+# To support all of these use cases, Matplotlib can target different
+# outputs, and each of these capabilities is called a backend; the
+# "frontend" is the user facing code, i.e., the plotting code, whereas the
+# "backend" does all the hard work behind-the-scenes to make the figure.
+# There are two types of backends: user interface backends (for use in
+# PyQt/PySide, PyGObject, Tkinter, wxPython, or macOS/Cocoa); also referred to
+# as "interactive backends") and hardcopy backends to make image files
+# (PNG, SVG, PDF, PS; also referred to as "non-interactive backends").
+#
+# Selecting a backend
+# -------------------
+#
+# There are three ways to configure your backend:
+#
+# 1. The :rc:`backend` parameter in your :file:`matplotlibrc` file
+# 2. The :envvar:`MPLBACKEND` environment variable
+# 3. The function :func:`matplotlib.use`
+#
+# A more detailed description is given below.
+#
+# If multiple of these are configurations are present, the last one from the
+# list takes precedence; e.g. calling :func:`matplotlib.use()` will override
+# the setting in your :file:`matplotlibrc`.
+#
+# If no backend is explicitly set, Matplotlib automatically detects a usable
+# backend based on what is available on your system and on whether a GUI event
+# loop is already running. On Linux, if the environment variable
+# :envvar:`DISPLAY` is unset, the "event loop" is identified as "headless",
+# which causes a fallback to a noninteractive backend (agg); in all other
+# cases, an interactive backend is preferred (usually, at least tkagg will be
+# available).
+#
+# Here is a detailed description of the configuration methods:
+#
+# #. Setting :rc:`backend` in your :file:`matplotlibrc` file::
+#
+#        backend : qt5agg   # use pyqt5 with antigrain (agg) rendering
+#
+#    See also :doc:`/tutorials/introductory/customizing`.
+#
+# #. Setting the :envvar:`MPLBACKEND` environment variable:
+#
+#    You can set the environment variable either for your current shell or for
+#    a single script.
+#
+#    On Unix::
+#
+#         > export MPLBACKEND=qt5agg
+#         > python simple_plot.py
+#
+#         > MPLBACKEND=qt5agg python simple_plot.py
+#
+#    On Windows, only the former is possible::
+#
+#         > set MPLBACKEND=qt5agg
+#         > python simple_plot.py
+#
+#    Setting this environment variable will override the ``backend`` parameter
+#    in *any* :file:`matplotlibrc`, even if there is a :file:`matplotlibrc` in
+#    your current working directory. Therefore, setting :envvar:`MPLBACKEND`
+#    globally, e.g. in your :file:`.bashrc` or :file:`.profile`, is discouraged
+#    as it might lead to counter-intuitive behavior.
+#
+# #. If your script depends on a specific backend you can use the function
+#    :func:`matplotlib.use`::
+#
+#       import matplotlib
+#       matplotlib.use('qt5agg')
+#
+#    This should be done before any figure is created, otherwise Matplotlib may
+#    fail to switch the backend and raise an ImportError.
+#
+#    Using `~matplotlib.use` will require changes in your code if users want to
+#    use a different backend.  Therefore, you should avoid explicitly calling
+#    `~matplotlib.use` unless absolutely necessary.
+#
+# .. _the-builtin-backends:
+#
+# The builtin backends
+# --------------------
+#
+# By default, Matplotlib should automatically select a default backend which
+# allows both interactive work and plotting from scripts, with output to the
+# screen and/or to a file, so at least initially, you will not need to worry
+# about the backend.  The most common exception is if your Python distribution
+# comes without :mod:`tkinter` and you have no other GUI toolkit installed.
+# This happens on certain Linux distributions, where you need to install a
+# Linux package named ``python-tk`` (or similar).
+#
+# If, however, you want to write graphical user interfaces, or a web
+# application server
+# (:doc:`/gallery/user_interfaces/web_application_server_sgskip`), or need a
+# better understanding of what is going on, read on. To make things a little
+# more customizable for graphical user interfaces, Matplotlib separates
+# the concept of the renderer (the thing that actually does the drawing)
+# from the canvas (the place where the drawing goes).  The canonical
+# renderer for user interfaces is ``Agg`` which uses the `Anti-Grain
+# Geometry`_ C++ library to make a raster (pixel) image of the figure; it
+# is used by the ``Qt5Agg``, ``Qt4Agg``, ``GTK3Agg``, ``wxAgg``, ``TkAgg``, and
+# ``macosx`` backends.  An alternative renderer is based on the Cairo library,
+# used by ``Qt5Cairo``, ``Qt4Cairo``, etc.
+#
+# For the rendering engines, one can also distinguish between `vector
+# <https://en.wikipedia.org/wiki/Vector_graphics>`_ or `raster
+# <https://en.wikipedia.org/wiki/Raster_graphics>`_ renderers.  Vector
+# graphics languages issue drawing commands like "draw a line from this
+# point to this point" and hence are scale free, and raster backends
+# generate a pixel representation of the line whose accuracy depends on a
+# DPI setting.
+#
+# Here is a summary of the Matplotlib renderers (there is an eponymous
+# backend for each; these are *non-interactive backends*, capable of
+# writing to a file):
+#
+# ========  =========  =======================================================
+# Renderer  Filetypes  Description
+# ========  =========  =======================================================
+# AGG       png        raster_ graphics -- high quality images using the
+#                      `Anti-Grain Geometry`_ engine
+# PDF       pdf        vector_ graphics -- `Portable Document Format`_
+# PS        ps, eps    vector_ graphics -- Postscript_ output
+# SVG       svg        vector_ graphics -- `Scalable Vector Graphics`_
+# PGF       pgf, pdf   vector_ graphics -- using the pgf_ package
+# Cairo     png, ps,   raster_ or vector_ graphics -- using the Cairo_ library
+#           pdf, svg
+# ========  =========  =======================================================
+#
+# To save plots using the non-interactive backends, use the
+# ``matplotlib.pyplot.savefig('filename')`` method.
+#
+# And here are the user interfaces and renderer combinations supported;
+# these are *interactive backends*, capable of displaying to the screen
+# and of using appropriate renderers from the table above to write to
+# a file:
+#
+# ========= ================================================================
+# Backend   Description
+# ========= ================================================================
+# Qt5Agg    Agg rendering in a Qt5_ canvas (requires PyQt5_).  This
+#           backend can be activated in IPython with ``%matplotlib qt5``.
+# ipympl    Agg rendering embedded in a Jupyter widget.  (requires ipympl).
+#           This backend can be enabled in a Jupyter notebook with
+#           ``%matplotlib ipympl``.
+# GTK3Agg   Agg rendering to a GTK_ 3.x canvas (requires PyGObject_,
+#           and pycairo_ or cairocffi_).  This backend can be activated in
+#           IPython with ``%matplotlib gtk3``.
+# macosx    Agg rendering into a Cocoa canvas in OSX.  This backend can be
+#           activated in IPython with ``%matplotlib osx``.
+# TkAgg     Agg rendering to a Tk_ canvas (requires TkInter_). This
+#           backend can be activated in IPython with ``%matplotlib tk``.
+# nbAgg     Embed an interactive figure in a Jupyter classic notebook.  This
+#           backend can be enabled in Jupyter notebooks via
+#           ``%matplotlib notebook``.
+# WebAgg    On ``show()`` will start a tornado server with an interactive
+#           figure.
+# GTK3Cairo Cairo rendering to a GTK_ 3.x canvas (requires PyGObject_,
+#           and pycairo_ or cairocffi_).
+# Qt4Agg    Agg rendering to a Qt4_ canvas (requires PyQt4_ or
+#           ``pyside``).  This backend can be activated in IPython with
+#           ``%matplotlib qt4``.
+# wxAgg     Agg rendering to a wxWidgets_ canvas (requires wxPython_ 4).
+#           This backend can be activated in IPython with ``%matplotlib wx``.
+# ========= ================================================================
+#
+# .. note::
+#    The names of builtin backends case-insensitive; e.g., 'Qt5Agg' and
+#    'qt5agg' are equivalent.
+#
+# .. _`Anti-Grain Geometry`: http://antigrain.com/
+# .. _`Portable Document Format`: https://en.wikipedia.org/wiki/Portable_Document_Format
+# .. _Postscript: https://en.wikipedia.org/wiki/PostScript
+# .. _`Scalable Vector Graphics`: https://en.wikipedia.org/wiki/Scalable_Vector_Graphics
+# .. _pgf: https://ctan.org/pkg/pgf
+# .. _Cairo: https://www.cairographics.org
+# .. _PyGObject: https://wiki.gnome.org/action/show/Projects/PyGObject
+# .. _pycairo: https://www.cairographics.org/pycairo/
+# .. _cairocffi: https://pythonhosted.org/cairocffi/
+# .. _wxPython: https://www.wxpython.org/
+# .. _TkInter: https://docs.python.org/3/library/tk.html
+# .. _PyQt4: https://riverbankcomputing.com/software/pyqt/intro
+# .. _PyQt5: https://riverbankcomputing.com/software/pyqt/intro
+# .. _Qt5: https://doc.qt.io/qt-5/index.html
+# .. _GTK: https://www.gtk.org/
+# .. _Tk: https://www.tcl.tk/
+# .. _Qt4: https://doc.qt.io/archives/qt-4.8/index.html
+# .. _wxWidgets: https://www.wxwidgets.org/
+#
+# ipympl
+# ^^^^^^
+#
+# The Jupyter widget ecosystem is moving too fast to support directly in
+# Matplotlib.  To install ipympl
+#
+# .. code-block:: bash
+#
+#    pip install ipympl
+#    jupyter nbextension enable --py --sys-prefix ipympl
+#
+# or
+#
+# .. code-block:: bash
+#
+#    conda install ipympl -c conda-forge
+#
+# See `jupyter-matplotlib <https://github.com/matplotlib/jupyter-matplotlib>`__
+# for more details.
+#
+# .. _QT_API-usage:
+#
+# How do I select PyQt4 or PySide?
+# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+#
+# The :envvar:`QT_API` environment variable can be set to either ``pyqt`` or
+# ``pyside`` to use ``PyQt4`` or ``PySide``, respectively.
+#
+# Since the default value for the bindings to be used is ``PyQt4``, Matplotlib
+# first tries to import it. If the import fails, it tries to import ``PySide``.
+#
+# Using non-builtin backends
+# --------------------------
+# More generally, any importable backend can be selected by using any of the
+# methods above. If ``name.of.the.backend`` is the module containing the
+# backend, use ``module://name.of.the.backend`` as the backend name, e.g.
+# ``matplotlib.use('module://name.of.the.backend')``.
+#
+#
+# .. _interactive-mode:
+#
+# What is interactive mode?
+# =========================
+#
+# Use of an interactive backend (see :ref:`what-is-a-backend`)
+# permits--but does not by itself require or ensure--plotting
+# to the screen.  Whether and when plotting to the screen occurs,
+# and whether a script or shell session continues after a plot
+# is drawn on the screen, depends on the functions and methods
+# that are called, and on a state variable that determines whether
+# Matplotlib is in "interactive mode".  The default Boolean value is set
+# by the :file:`matplotlibrc` file, and may be customized like any other
+# configuration parameter (see :doc:`/tutorials/introductory/customizing`).  It
+# may also be set via :func:`matplotlib.interactive`, and its
+# value may be queried via :func:`matplotlib.is_interactive`.  Turning
+# interactive mode on and off in the middle of a stream of plotting
+# commands, whether in a script or in a shell, is rarely needed
+# and potentially confusing. In the following, we will assume all
+# plotting is done with interactive mode either on or off.
+#
+# .. note::
+#    Major changes related to interactivity, and in particular the
+#    role and behavior of :func:`~matplotlib.pyplot.show`, were made in the
+#    transition to Matplotlib version 1.0, and bugs were fixed in
+#    1.0.1.  Here we describe the version 1.0.1 behavior for the
+#    primary interactive backends, with the partial exception of
+#    *macosx*.
+#
+# Interactive mode may also be turned on via :func:`matplotlib.pyplot.ion`,
+# and turned off via :func:`matplotlib.pyplot.ioff`.
+#
+# .. note::
+#    Interactive mode works with suitable backends in ipython and in
+#    the ordinary python shell, but it does *not* work in the IDLE IDE.
+#    If the default backend does not support interactivity, an interactive
+#    backend can be explicitly activated using any of the methods discussed
+#    in `What is a backend?`_.
+#
+#
+# Interactive example
+# --------------------
+#
+# From an ordinary python prompt, or after invoking ipython with no options,
+# try this::
+#
+#     import matplotlib.pyplot as plt
+#     plt.ion()
+#     plt.plot([1.6, 2.7])
+#
+# This will pop up a plot window. Your terminal prompt will remain active, so
+# that you can type additional commands such as::
+#
+#     plt.title("interactive test")
+#     plt.xlabel("index")
+#
+# On most interactive backends, the figure window will also be updated if you
+# change it via the object-oriented interface. E.g. get a reference to the
+# `~matplotlib.axes.Axes` instance, and call a method of that instance::
+#
+#     ax = plt.gca()
+#     ax.plot([3.1, 2.2])
+#
+# If you are using certain backends (like ``macosx``), or an older version
+# of Matplotlib, you may not see the new line added to the plot immediately.
+# In this case, you need to explicitly call :func:`~matplotlib.pyplot.draw`
+# in order to update the plot::
+#
+#     plt.draw()
+#
+#
+# Non-interactive example
+# -----------------------
+#
+# Start a fresh session as in the previous example, but now
+# turn interactive mode off::
+#
+#     import matplotlib.pyplot as plt
+#     plt.ioff()
+#     plt.plot([1.6, 2.7])
+#
+# Nothing happened--or at least nothing has shown up on the
+# screen (unless you are using *macosx* backend, which is
+# anomalous).  To make the plot appear, you need to do this::
+#
+#     plt.show()
+#
+# Now you see the plot, but your terminal command line is
+# unresponsive; `.pyplot.show()` *blocks* the input
+# of additional commands until you manually kill the plot
+# window.
+#
+# What good is this--being forced to use a blocking function?
+# Suppose you need a script that plots the contents of a file
+# to the screen.  You want to look at that plot, and then end
+# the script.  Without some blocking command such as ``show()``, the
+# script would flash up the plot and then end immediately,
+# leaving nothing on the screen.
+#
+# In addition, non-interactive mode delays all drawing until
+# ``show()`` is called; this is more efficient than redrawing
+# the plot each time a line in the script adds a new feature.
+#
+# Prior to version 1.0, ``show()`` generally could not be called
+# more than once in a single script (although sometimes one
+# could get away with it); for version 1.0.1 and above, this
+# restriction is lifted, so one can write a script like this::
+#
+#     import numpy as np
+#     import matplotlib.pyplot as plt
+#
+#     plt.ioff()
+#     for i in range(3):
+#         plt.plot(np.random.rand(10))
+#         plt.show()
+#
+# This makes three plots, one at a time. I.e., the second plot will show up
+# once the first plot is closed.
+#
+# Summary
+# -------
+#
+# In interactive mode, pyplot functions automatically draw
+# to the screen.
+#
+# When plotting interactively, if using
+# object method calls in addition to pyplot functions, then
+# call :func:`~matplotlib.pyplot.draw` whenever you want to
+# refresh the plot.
+#
+# Use non-interactive mode in scripts in which you want to
+# generate one or more figures and display them before ending
+# or generating a new set of figures.  In that case, use
+# :func:`~matplotlib.pyplot.show` to display the figure(s) and
+# to block execution until you have manually destroyed them.
+#
+# .. _performance:
+#
+# Performance
+# ===========
+#
+# Whether exploring data in interactive mode or programmatically
+# saving lots of plots, rendering performance can be a painful
+# bottleneck in your pipeline. Matplotlib provides a couple
+# ways to greatly reduce rendering time at the cost of a slight
+# change (to a settable tolerance) in your plot's appearance.
+# The methods available to reduce rendering time depend on the
+# type of plot that is being created.
+#
+# Line segment simplification
+# ---------------------------
+#
+# For plots that have line segments (e.g. typical line plots, outlines
+# of polygons, etc.), rendering performance can be controlled by
+# :rc:`path.simplify` and :rc:`path.simplify_threshold`, which
+# can be defined e.g. in the :file:`matplotlibrc` file (see
+# :doc:`/tutorials/introductory/customizing` for more information about
+# the :file:`matplotlibrc` file). :rc:`path.simplify` is a boolean
+# indicating whether or not line segments are simplified at all.
+# :rc:`path.simplify_threshold` controls how much line segments are simplified;
+# higher thresholds result in quicker rendering.
+#
+# The following script will first display the data without any
+# simplification, and then display the same data with simplification.
+# Try interacting with both of them::
+#
+#   import numpy as np
+#   import matplotlib.pyplot as plt
+#   import matplotlib as mpl
+#
+#   # Setup, and create the data to plot
+#   y = np.random.rand(100000)
+#   y[50000:] *= 2
+#   y[np.geomspace(10, 50000, 400).astype(int)] = -1
+#   mpl.rcParams['path.simplify'] = True
+#
+#   mpl.rcParams['path.simplify_threshold'] = 0.0
+#   plt.plot(y)
+#   plt.show()
+#
+#   mpl.rcParams['path.simplify_threshold'] = 1.0
+#   plt.plot(y)
+#   plt.show()
+#
+# Matplotlib currently defaults to a conservative simplification
+# threshold of ``1/9``. If you want to change your default settings
+# to use a different value, you can change your :file:`matplotlibrc`
+# file.  Alternatively, you could create a new style for
+# interactive plotting (with maximal simplification) and another
+# style for publication quality plotting (with minimal
+# simplification) and activate them as necessary. See
+# :doc:`/tutorials/introductory/customizing` for
+# instructions on how to perform these actions.
+#
+# The simplification works by iteratively merging line segments
+# into a single vector until the next line segment's perpendicular
+# distance to the vector (measured in display-coordinate space)
+# is greater than the ``path.simplify_threshold`` parameter.
+#
+# .. note::
+#   Changes related to how line segments are simplified were made
+#   in version 2.1. Rendering time will still be improved by these
+#   parameters prior to 2.1, but rendering time for some kinds of
+#   data will be vastly improved in versions 2.1 and greater.
+#
+# Marker simplification
+# ---------------------
+#
+# Markers can also be simplified, albeit less robustly than
+# line segments. Marker simplification is only available
+# to :class:`~matplotlib.lines.Line2D` objects (through the
+# ``markevery`` property). Wherever
+# :class:`~matplotlib.lines.Line2D` construction parameters
+# are passed through, such as
+# :func:`matplotlib.pyplot.plot` and
+# :meth:`matplotlib.axes.Axes.plot`, the ``markevery``
+# parameter can be used::
+#
+#   plt.plot(x, y, markevery=10)
+#
+# The ``markevery`` argument allows for naive subsampling, or an
+# attempt at evenly spaced (along the *x* axis) sampling. See the
+# :doc:`/gallery/lines_bars_and_markers/markevery_demo`
+# for more information.
+#
+# Splitting lines into smaller chunks
+# -----------------------------------
+#
+# If you are using the Agg backend (see :ref:`what-is-a-backend`),
+# then you can make use of :rc:`agg.path.chunksize`
+# This allows you to specify a chunk size, and any lines with
+# greater than that many vertices will be split into multiple
+# lines, each of which has no more than ``agg.path.chunksize``
+# many vertices. (Unless ``agg.path.chunksize`` is zero, in
+# which case there is no chunking.) For some kind of data,
+# chunking the line up into reasonable sizes can greatly
+# decrease rendering time.
+#
+# The following script will first display the data without any
+# chunk size restriction, and then display the same data with
+# a chunk size of 10,000. The difference can best be seen when
+# the figures are large, try maximizing the GUI and then
+# interacting with them::
+#
+#   import numpy as np
+#   import matplotlib.pyplot as plt
+#   import matplotlib as mpl
+#   mpl.rcParams['path.simplify_threshold'] = 1.0
+#
+#   # Setup, and create the data to plot
+#   y = np.random.rand(100000)
+#   y[50000:] *= 2
+#   y[np.geomspace(10, 50000, 400).astype(int)] = -1
+#   mpl.rcParams['path.simplify'] = True
+#
+#   mpl.rcParams['agg.path.chunksize'] = 0
+#   plt.plot(y)
+#   plt.show()
+#
+#   mpl.rcParams['agg.path.chunksize'] = 10000
+#   plt.plot(y)
+#   plt.show()
+#
+# Legends
+# -------
+#
+# The default legend behavior for axes attempts to find the location
+# that covers the fewest data points (``loc='best'``). This can be a
+# very expensive computation if there are lots of data points. In
+# this case, you may want to provide a specific location.
+#
+# Using the *fast* style
+# ----------------------
+#
+# The *fast* style can be used to automatically set
+# simplification and chunking parameters to reasonable
+# settings to speed up plotting large amounts of data.
+# It can be used simply by running::
+#
+#   import matplotlib.style as mplstyle
+#   mplstyle.use('fast')
+#
+# It is very lightweight, so it plays nicely with other
+# styles, just make sure the fast style is applied last
+# so that other styles do not overwrite the settings::
+#
+#   mplstyle.use(['dark_background', 'ggplot', 'fast'])
diff --git a/tutorials/text/annotations.py b/tutorials/text/annotations.py
index 113ff40a04..878835b2f7 100644
--- a/tutorials/text/annotations.py
+++ b/tutorials/text/annotations.py
@@ -6,502 +6,570 @@ Annotating text with Matplotlib.

 .. contents:: Table of Contents
    :depth: 3
-"""

-from matplotlib import pyplot as plt
-
-###############################################################################
-# .. _annotations-tutorial:
-#
-# Basic annotation
-# ----------------
-#
-# The uses of the basic :func:`~matplotlib.pyplot.text` will place text
-# at an arbitrary position on the Axes.  A common use case of text is to
-# annotate some feature of the plot, and the
-# :func:`~matplotlib.axes.Axes.annotate` method provides helper functionality
-# to make annotations easy.  In an annotation, there are two points to
-# consider: the location being annotated represented by the argument
-# *xy* and the location of the text *xytext*.  Both of these
-# arguments are ``(x, y)`` tuples.
-#
-# .. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_basic_001.png
-#    :target: ../../gallery/pyplots/annotation_basic.html
-#    :align: center
-#
-# In this example, both the *xy* (arrow tip) and *xytext* locations
-# (text location) are in data coordinates.  There are a variety of other
-# coordinate systems one can choose -- you can specify the coordinate
-# system of *xy* and *xytext* with one of the following strings for
-# *xycoords* and *textcoords* (default is 'data')
-#
-# ==================  ========================================================
-# argument            coordinate system
-# ==================  ========================================================
-# 'figure points'     points from the lower left corner of the figure
-# 'figure pixels'     pixels from the lower left corner of the figure
-# 'figure fraction'   (0, 0) is lower left of figure and (1, 1) is upper right
-# 'axes points'       points from lower left corner of axes
-# 'axes pixels'       pixels from lower left corner of axes
-# 'axes fraction'     (0, 0) is lower left of axes and (1, 1) is upper right
-# 'data'              use the axes data coordinate system
-# ==================  ========================================================
-#
-# For example to place the text coordinates in fractional axes
-# coordinates, one could do::
-#
-#     ax.annotate('local max', xy=(3, 1),  xycoords='data',
-#                 xytext=(0.8, 0.95), textcoords='axes fraction',
-#                 arrowprops=dict(facecolor='black', shrink=0.05),
-#                 horizontalalignment='right', verticalalignment='top',
-#                 )
-#
-# For physical coordinate systems (points or pixels) the origin is the
-# bottom-left of the figure or axes.
-#
-# Optionally, you can enable drawing of an arrow from the text to the annotated
-# point by giving a dictionary of arrow properties in the optional keyword
-# argument *arrowprops*.
-#
-#
-# ==================== =====================================================
-# *arrowprops* key     description
-# ==================== =====================================================
-# width                the width of the arrow in points
-# frac                 the fraction of the arrow length occupied by the head
-# headwidth            the width of the base of the arrow head in points
-# shrink               move the tip and base some percent away from
-#                      the annotated point and text
-#
-# \*\*kwargs           any key for :class:`matplotlib.patches.Polygon`,
-#                      e.g., ``facecolor``
-# ==================== =====================================================
-#
-#
-# In the example below, the *xy* point is in native coordinates
-# (*xycoords* defaults to 'data').  For a polar axes, this is in
-# (theta, radius) space.  The text in this example is placed in the
-# fractional figure coordinate system. :class:`matplotlib.text.Text`
-# keyword arguments like *horizontalalignment*, *verticalalignment* and
-# *fontsize* are passed from `~matplotlib.axes.Axes.annotate` to the
-# ``Text`` instance.
-#
-# .. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_polar_001.png
-#    :target: ../../gallery/pyplots/annotation_polar.html
-#    :align: center
-#
-# For more on all the wild and wonderful things you can do with
-# annotations, including fancy arrows, see :ref:`plotting-guide-annotation`
-# and :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
-#
-#
-# Do not proceed unless you have already read :ref:`annotations-tutorial`,
-# :func:`~matplotlib.pyplot.text` and :func:`~matplotlib.pyplot.annotate`!
-#
-#
-# .. _plotting-guide-annotation:
-#
-# Advanced Annotations
-# --------------------
-#
-# Annotating with Text with Box
-# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# Let's start with a simple example.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_text_arrow_001.png
-#    :target: ../../gallery/userdemo/annotate_text_arrow.html
-#    :align: center
-#
-# `~.Axes.text` takes a *bbox* keyword argument, which draws a box around the
-# text::
-#
-#     t = ax.text(
-#         0, 0, "Direction", ha="center", va="center", rotation=45, size=15,
-#         bbox=dict(boxstyle="rarrow,pad=0.3", fc="cyan", ec="b", lw=2))
-#
-# The patch object associated with the text can be accessed by::
-#
-#     bb = t.get_bbox_patch()
-#
-# The return value is a `.FancyBboxPatch`; patch properties
-# (facecolor, edgewidth, etc.) can be accessed and modified as usual.
-# `.FancyBboxPatch.set_boxstyle` sets the box shape::
-#
-#   bb.set_boxstyle("rarrow", pad=0.6)
-#
-# The arguments are the name of the box style with its attributes as
-# keyword arguments. Currently, following box styles are implemented.
-#
-#   ==========   ==============   ==========================
-#   Class        Name             Attrs
-#   ==========   ==============   ==========================
-#   Circle       ``circle``       pad=0.3
-#   DArrow       ``darrow``       pad=0.3
-#   LArrow       ``larrow``       pad=0.3
-#   RArrow       ``rarrow``       pad=0.3
-#   Round        ``round``        pad=0.3,rounding_size=None
-#   Round4       ``round4``       pad=0.3,rounding_size=None
-#   Roundtooth   ``roundtooth``   pad=0.3,tooth_size=None
-#   Sawtooth     ``sawtooth``     pad=0.3,tooth_size=None
-#   Square       ``square``       pad=0.3
-#   ==========   ==============   ==========================
-#
-# .. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_fancybox_demo_001.png
-#    :target: ../../gallery/shapes_and_collections/fancybox_demo.html
-#    :align: center
-#
-# Note that the attribute arguments can be specified within the style
-# name with separating comma (this form can be used as "boxstyle" value
-# of bbox argument when initializing the text instance) ::
-#
-#    bb.set_boxstyle("rarrow,pad=0.6")
-#
-# Annotating with Arrow
-# ~~~~~~~~~~~~~~~~~~~~~
-#
-# `~.Axes.annotate` draws an arrow connecting two points in an axes::
-#
-#     ax.annotate("Annotation",
-#                 xy=(x1, y1), xycoords='data',
-#                 xytext=(x2, y2), textcoords='offset points',
-#                 )
-#
-# This annotates a point at *xy* in the given coordinate (*xycoords*)
-# with the text at *xytext* given in *textcoords*. Often, the
-# annotated point is specified in the *data* coordinate and the annotating
-# text in *offset points*.
-# See `~.Axes.annotate` for available coordinate systems.
-#
-# An arrow connecting *xy* to *xytext* can be optionally drawn by
-# specifying the *arrowprops* argument. To draw only an arrow, use
-# empty string as the first argument. ::
-#
-#     ax.annotate("",
-#                 xy=(0.2, 0.2), xycoords='data',
-#                 xytext=(0.8, 0.8), textcoords='data',
-#                 arrowprops=dict(arrowstyle="->",
-#                                 connectionstyle="arc3"),
-#                 )
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple01_001.png
-#    :target: ../../gallery/userdemo/annotate_simple01.html
-#    :align: center
-#
-# The arrow is drawn as follows:
-#
-# 1. A path connecting the two points is created, as specified by the
-#    *connectionstyle* parameter.
-# 2. The path is clipped to avoid patches *patchA* and *patchB*, if these are
-#    set.
-# 3. The path is further shrunk by *shrinkA* and *shrinkB* (in pixels).
-# 4. The path is transmuted to an arrow patch, as specified by the *arrowstyle*
-#    parameter.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_explain_001.png
-#    :target: ../../gallery/userdemo/annotate_explain.html
-#    :align: center
-#
-# The creation of the connecting path between two points is controlled by
-# ``connectionstyle`` key and the following styles are available.
-#
-#    ==========   =============================================
-#    Name         Attrs
-#    ==========   =============================================
-#    ``angle``    angleA=90,angleB=0,rad=0.0
-#    ``angle3``   angleA=90,angleB=0
-#    ``arc``      angleA=0,angleB=0,armA=None,armB=None,rad=0.0
-#    ``arc3``     rad=0.0
-#    ``bar``      armA=0.0,armB=0.0,fraction=0.3,angle=None
-#    ==========   =============================================
-#
-# Note that "3" in ``angle3`` and ``arc3`` is meant to indicate that the
-# resulting path is a quadratic spline segment (three control
-# points). As will be discussed below, some arrow style options can only
-# be used when the connecting path is a quadratic spline.
-#
-# The behavior of each connection style is (limitedly) demonstrated in the
-# example below. (Warning: The behavior of the ``bar`` style is currently not
-# well defined, it may be changed in the future).
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_connectionstyle_demo_001.png
-#    :target: ../../gallery/userdemo/connectionstyle_demo.html
-#    :align: center
-#
-# The connecting path (after clipping and shrinking) is then mutated to
-# an arrow patch, according to the given ``arrowstyle``.
-#
-#     ==========   =============================================
-#     Name         Attrs
-#     ==========   =============================================
-#     ``-``        None
-#     ``->``       head_length=0.4,head_width=0.2
-#     ``-[``       widthB=1.0,lengthB=0.2,angleB=None
-#     ``|-|``      widthA=1.0,widthB=1.0
-#     ``-|>``      head_length=0.4,head_width=0.2
-#     ``<-``       head_length=0.4,head_width=0.2
-#     ``<->``      head_length=0.4,head_width=0.2
-#     ``<|-``      head_length=0.4,head_width=0.2
-#     ``<|-|>``    head_length=0.4,head_width=0.2
-#     ``fancy``    head_length=0.4,head_width=0.4,tail_width=0.4
-#     ``simple``   head_length=0.5,head_width=0.5,tail_width=0.2
-#     ``wedge``    tail_width=0.3,shrink_factor=0.5
-#     ==========   =============================================
-#
-# .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_fancyarrow_demo_001.png
-#    :target: ../../gallery/text_labels_and_annotations/fancyarrow_demo.html
-#    :align: center
-#
-# Some arrowstyles only work with connection styles that generate a
-# quadratic-spline segment. They are ``fancy``, ``simple``, and ``wedge``.
-# For these arrow styles, you must use the "angle3" or "arc3" connection
-# style.
-#
-# If the annotation string is given, the patchA is set to the bbox patch
-# of the text by default.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple02_001.png
-#    :target: ../../gallery/userdemo/annotate_simple02.html
-#    :align: center
-#
-# As with `~.Axes.text`, a box around the text can be drawn using the *bbox*
-# argument.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple03_001.png
-#    :target: ../../gallery/userdemo/annotate_simple03.html
-#    :align: center
-#
-# By default, the starting point is set to the center of the text
-# extent.  This can be adjusted with ``relpos`` key value. The values
-# are normalized to the extent of the text. For example, (0, 0) means
-# lower-left corner and (1, 1) means top-right.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple04_001.png
-#    :target: ../../gallery/userdemo/annotate_simple04.html
-#    :align: center
-#
-# Placing Artist at anchored Axes locations
-# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# There are classes of artists that can be placed at an anchored
-# location in the Axes.  A common example is the legend.  This type
-# of artist can be created by using the `.OffsetBox` class. A few
-# predefined classes are available in :mod:`matplotlib.offsetbox` and in
-# :mod:`mpl_toolkits.axes_grid1.anchored_artists`.
-
-from matplotlib.offsetbox import AnchoredText
-
-fig, ax = plt.subplots()
-at = AnchoredText(
-    "Figure 1a", prop=dict(size=15), frameon=True, loc='upper left')
-at.patch.set_boxstyle("round,pad=0.,rounding_size=0.2")
-ax.add_artist(at)
-
-###############################################################################
-# The *loc* keyword has same meaning as in the legend command.
-#
-# A simple application is when the size of the artist (or collection of
-# artists) is known in pixel size during the time of creation. For
-# example, If you want to draw a circle with fixed size of 20 pixel x 20
-# pixel (radius = 10 pixel), you can utilize
-# ``AnchoredDrawingArea``. The instance is created with a size of the
-# drawing area (in pixels), and arbitrary artists can added to the
-# drawing area. Note that the extents of the artists that are added to
-# the drawing area are not related to the placement of the drawing
-# area itself. Only the initial size matters.
-#
-# The artists that are added to the drawing area should not have a
-# transform set (it will be overridden) and the dimensions of those
-# artists are interpreted as a pixel coordinate, i.e., the radius of the
-# circles in above example are 10 pixels and 5 pixels, respectively.
-
-from matplotlib.patches import Circle
-from mpl_toolkits.axes_grid1.anchored_artists import AnchoredDrawingArea
-
-fig, ax = plt.subplots()
-ada = AnchoredDrawingArea(40, 20, 0, 0,
-                          loc='upper right', pad=0., frameon=False)
-p1 = Circle((10, 10), 10)
-ada.drawing_area.add_artist(p1)
-p2 = Circle((30, 10), 5, fc="r")
-ada.drawing_area.add_artist(p2)
-ax.add_artist(ada)
-
-###############################################################################
-# Sometimes, you want your artists to scale with the data coordinate (or
-# coordinates other than canvas pixels). You can use
-# ``AnchoredAuxTransformBox`` class. This is similar to
-# ``AnchoredDrawingArea`` except that the extent of the artist is
-# determined during the drawing time respecting the specified transform.
-#
-# The ellipse in the example below will have width and height
-# corresponding to 0.1 and 0.4 in data coordinates and will be
-# automatically scaled when the view limits of the axes change.
-
-from matplotlib.patches import Ellipse
-from mpl_toolkits.axes_grid1.anchored_artists import AnchoredAuxTransformBox
-
-fig, ax = plt.subplots()
-box = AnchoredAuxTransformBox(ax.transData, loc='upper left')
-el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)  # in data coordinates!
-box.drawing_area.add_artist(el)
-ax.add_artist(box)
-
-###############################################################################
-# As in the legend, the bbox_to_anchor argument can be set.  Using the
-# HPacker and VPacker, you can have an arrangement(?) of artist as in the
-# legend (as a matter of fact, this is how the legend is created).
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box04_001.png
-#    :target: ../../gallery/userdemo/anchored_box04.html
-#    :align: center
-#
-# Note that unlike the legend, the ``bbox_transform`` is set
-# to IdentityTransform by default.
-#
-# Coordinate systems for Annotations
-# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# The Annotation in matplotlib supports several types of coordinates as
-# described in :ref:`annotations-tutorial`. For an advanced user who wants
-# more control, it supports a few other options.
-#
-# 1. A `.Transform` instance.  For example, ::
-#
-#      ax.annotate("Test", xy=(0.5, 0.5), xycoords=ax.transAxes)
-#
-#    is identical to ::
-#
-#      ax.annotate("Test", xy=(0.5, 0.5), xycoords="axes fraction")
-#
-#    This allows annotating a point in another axes::
-#
-#      fig, (ax1, ax2) = plt.subplots(1, 2)
-#      ax2.annotate("Test", xy=(0.5, 0.5), xycoords=ax1.transData,
-#                   xytext=(0.5, 0.5), textcoords=ax2.transData,
-#                   arrowprops=dict(arrowstyle="->"))
-#
-# 2. An `.Artist` instance. The *xy* value (or *xytext*) is interpreted as a
-#    fractional coordinate of the bbox (return value of *get_window_extent*) of
-#    the artist::
-#
-#      an1 = ax.annotate("Test 1", xy=(0.5, 0.5), xycoords="data",
-#                        va="center", ha="center",
-#                        bbox=dict(boxstyle="round", fc="w"))
-#      an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,  # (1, 0.5) of the an1's bbox
-#                        xytext=(30, 0), textcoords="offset points",
-#                        va="center", ha="left",
-#                        bbox=dict(boxstyle="round", fc="w"),
-#                        arrowprops=dict(arrowstyle="->"))
-#
-#    .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord01_001.png
-#       :target: ../../gallery/userdemo/annotate_simple_coord01.html
-#       :align: center
-#
-#    Note that you must ensure that the extent of the coordinate artist (*an1* in
-#    above example) is determined before *an2* gets drawn. Usually, this means
-#    that *an2* needs to be drawn after *an1*.
-#
-# 3. A callable object that takes the renderer instance as single argument, and
-#    returns either a `.Transform` or a `.BboxBase`.  The return value is then
-#    handled as in (1), for transforms, or in (2), for bboxes.  For example, ::
-#
-#      an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,
-#                        xytext=(30, 0), textcoords="offset points")
-#
-#    is identical to::
-#
-#      an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1.get_window_extent,
-#                        xytext=(30, 0), textcoords="offset points")
-#
-# 4. A pair of coordinate specifications -- the first for the x-coordinate, and
-#    the second is for the y-coordinate; e.g. ::
-#
-#      annotate("Test", xy=(0.5, 1), xycoords=("data", "axes fraction"))
-#
-#    Here, 0.5 is in data coordinates, and 1 is in normalized axes coordinates.
-#    Each of the coordinate specifications can also be an artist or a transform.
-#    For example,
-#
-#    .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord02_001.png
-#       :target: ../../gallery/userdemo/annotate_simple_coord02.html
-#       :align: center
-#
-# 5. Sometimes, you want your annotation with some "offset points", not from the
-#    annotated point but from some other point.  `.text.OffsetFrom` is a helper
-#    for such cases.
-#
-#    .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord03_001.png
-#       :target: ../../gallery/userdemo/annotate_simple_coord03.html
-#       :align: center
-#
-#    You may take a look at this example
-#    :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
-#
-# Using ConnectionPatch
-# ~~~~~~~~~~~~~~~~~~~~~
-#
-# ConnectionPatch is like an annotation without text. While `~.Axes.annotate`
-# is sufficient in most situations, ConnectionPatch is useful when you want to
-# connect points in different axes. ::
-#
-#   from matplotlib.patches import ConnectionPatch
-#   xy = (0.2, 0.2)
-#   con = ConnectionPatch(xyA=xy, coordsA=ax1.transData,
-#                         xyB=xy, coordsB=ax2.transData)
-#   fig.add_artist(con)
-#
-# The above code connects point *xy* in the data coordinates of ``ax1`` to
-# point *xy* in the data coordinates of ``ax2``. Here is a simple example.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_connect_simple01_001.png
-#    :target: ../../gallery/userdemo/connect_simple01.html
-#    :align: center
-#
-# Here, we added the ConnectionPatch to the *figure* (with `~.Figure.add_artist`)
-# rather than to either axes: this ensures that it is drawn on top of both axes,
-# and is also necessary if using :doc:`constrained_layout
-# </tutorials/intermediate/constrainedlayout_guide>` for positioning the axes.
-#
-# Advanced Topics
-# ---------------
-#
-# Zoom effect between Axes
-# ~~~~~~~~~~~~~~~~~~~~~~~~
-#
-# ``mpl_toolkits.axes_grid1.inset_locator`` defines some patch classes useful for
-# interconnecting two axes. Understanding the code requires some knowledge of
-# Matplotlib's transform system.
-#
-# .. figure:: ../../gallery/subplots_axes_and_figures/images/sphx_glr_axes_zoom_effect_001.png
-#    :target: ../../gallery/subplots_axes_and_figures/axes_zoom_effect.html
-#    :align: center
-#
-# Define Custom BoxStyle
-# ~~~~~~~~~~~~~~~~~~~~~~
-#
-# You can use a custom box style. The value for the ``boxstyle`` can be a
-# callable object in the following forms.::
-#
-#         def __call__(self, x0, y0, width, height, mutation_size,
-#                      aspect_ratio=1.):
-#             '''
-#             Given the location and size of the box, return the path of
-#             the box around it.
-#
-#               - *x0*, *y0*, *width*, *height* : location and size of the box
-#               - *mutation_size* : a reference scale for the mutation.
-#               - *aspect_ratio* : aspect-ratio for the mutation.
-#             '''
-#             path = ...
-#             return path
-#
-# Here is a complete example.
-#
-# .. figure:: ../../gallery/userdemo/images/sphx_glr_custom_boxstyle01_001.png
-#    :target: ../../gallery/userdemo/custom_boxstyle01.html
-#    :align: center
-#
-# Similarly, you can define a custom ConnectionStyle and a custom ArrowStyle.
-# See the source code of ``lib/matplotlib/patches.py`` and check
-# how each style class is defined.
+.. _annotations-tutorial:
+
+Basic annotation
+----------------
+
+The uses of the basic :func:`~matplotlib.pyplot.text` will place text
+at an arbitrary position on the Axes.  A common use case of text is to
+annotate some feature of the plot, and the
+:func:`~matplotlib.axes.Axes.annotate` method provides helper functionality
+to make annotations easy.  In an annotation, there are two points to
+consider: the location being annotated represented by the argument
+*xy* and the location of the text *xytext*.  Both of these
+arguments are ``(x, y)`` tuples.
+
+.. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_basic_001.png
+   :target: ../../gallery/pyplots/annotation_basic.html
+   :align: center
+   :scale: 50
+
+   Annotation Basic
+
+In this example, both the *xy* (arrow tip) and *xytext* locations
+(text location) are in data coordinates.  There are a variety of other
+coordinate systems one can choose -- you can specify the coordinate
+system of *xy* and *xytext* with one of the following strings for
+*xycoords* and *textcoords* (default is 'data')
+
+==================  ========================================================
+argument            coordinate system
+==================  ========================================================
+'figure points'     points from the lower left corner of the figure
+'figure pixels'     pixels from the lower left corner of the figure
+'figure fraction'   (0, 0) is lower left of figure and (1, 1) is upper right
+'axes points'       points from lower left corner of axes
+'axes pixels'       pixels from lower left corner of axes
+'axes fraction'     (0, 0) is lower left of axes and (1, 1) is upper right
+'data'              use the axes data coordinate system
+==================  ========================================================
+
+For example to place the text coordinates in fractional axes
+coordinates, one could do::
+
+    ax.annotate('local max', xy=(3, 1),  xycoords='data',
+                xytext=(0.8, 0.95), textcoords='axes fraction',
+                arrowprops=dict(facecolor='black', shrink=0.05),
+                horizontalalignment='right', verticalalignment='top',
+                )
+
+For physical coordinate systems (points or pixels) the origin is the
+bottom-left of the figure or axes.
+
+Optionally, you can enable drawing of an arrow from the text to the annotated
+point by giving a dictionary of arrow properties in the optional keyword
+argument *arrowprops*.
+
+
+==================== =====================================================
+*arrowprops* key     description
+==================== =====================================================
+width                the width of the arrow in points
+frac                 the fraction of the arrow length occupied by the head
+headwidth            the width of the base of the arrow head in points
+shrink               move the tip and base some percent away from
+                     the annotated point and text
+
+\*\*kwargs           any key for :class:`matplotlib.patches.Polygon`,
+                     e.g., ``facecolor``
+==================== =====================================================
+
+
+In the example below, the *xy* point is in native coordinates
+(*xycoords* defaults to 'data').  For a polar axes, this is in
+(theta, radius) space.  The text in this example is placed in the
+fractional figure coordinate system. :class:`matplotlib.text.Text`
+keyword arguments like *horizontalalignment*, *verticalalignment* and
+*fontsize* are passed from `~matplotlib.axes.Axes.annotate` to the
+``Text`` instance.
+
+.. figure:: ../../gallery/pyplots/images/sphx_glr_annotation_polar_001.png
+   :target: ../../gallery/pyplots/annotation_polar.html
+   :align: center
+   :scale: 50
+
+   Annotation Polar
+
+For more on all the wild and wonderful things you can do with
+annotations, including fancy arrows, see :ref:`plotting-guide-annotation`
+and :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
+
+
+Do not proceed unless you have already read :ref:`annotations-tutorial`,
+:func:`~matplotlib.pyplot.text` and :func:`~matplotlib.pyplot.annotate`!
+
+
+.. _plotting-guide-annotation:
+
+Advanced Annotations
+--------------------
+
+Annotating with Text with Box
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Let's start with a simple example.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_text_arrow_001.png
+   :target: ../../gallery/userdemo/annotate_text_arrow.html
+   :align: center
+   :scale: 50
+
+   Annotate Text Arrow
+
+`~.Axes.text` takes a *bbox* keyword argument, which draws a box around the
+text::
+
+    t = ax.text(
+        0, 0, "Direction", ha="center", va="center", rotation=45, size=15,
+        bbox=dict(boxstyle="rarrow,pad=0.3", fc="cyan", ec="b", lw=2))
+
+The patch object associated with the text can be accessed by::
+
+    bb = t.get_bbox_patch()
+
+The return value is a `.FancyBboxPatch`; patch properties
+(facecolor, edgewidth, etc.) can be accessed and modified as usual.
+`.FancyBboxPatch.set_boxstyle` sets the box shape::
+
+  bb.set_boxstyle("rarrow", pad=0.6)
+
+The arguments are the name of the box style with its attributes as
+keyword arguments. Currently, following box styles are implemented.
+
+  ==========   ==============   ==========================
+  Class        Name             Attrs
+  ==========   ==============   ==========================
+  Circle       ``circle``       pad=0.3
+  DArrow       ``darrow``       pad=0.3
+  LArrow       ``larrow``       pad=0.3
+  RArrow       ``rarrow``       pad=0.3
+  Round        ``round``        pad=0.3,rounding_size=None
+  Round4       ``round4``       pad=0.3,rounding_size=None
+  Roundtooth   ``roundtooth``   pad=0.3,tooth_size=None
+  Sawtooth     ``sawtooth``     pad=0.3,tooth_size=None
+  Square       ``square``       pad=0.3
+  ==========   ==============   ==========================
+
+.. figure:: ../../gallery/shapes_and_collections/images/sphx_glr_fancybox_demo_001.png
+   :target: ../../gallery/shapes_and_collections/fancybox_demo.html
+   :align: center
+   :scale: 50
+
+   Fancybox Demo
+
+Note that the attribute arguments can be specified within the style
+name with separating comma (this form can be used as "boxstyle" value
+of bbox argument when initializing the text instance) ::
+
+   bb.set_boxstyle("rarrow,pad=0.6")
+
+Annotating with Arrow
+~~~~~~~~~~~~~~~~~~~~~
+
+`~.Axes.annotate` draws an arrow connecting two points in an axes::
+
+    ax.annotate("Annotation",
+                xy=(x1, y1), xycoords='data',
+                xytext=(x2, y2), textcoords='offset points',
+                )
+
+This annotates a point at *xy* in the given coordinate (*xycoords*)
+with the text at *xytext* given in *textcoords*. Often, the
+annotated point is specified in the *data* coordinate and the annotating
+text in *offset points*.
+See `~.Axes.annotate` for available coordinate systems.
+
+An arrow connecting *xy* to *xytext* can be optionally drawn by
+specifying the *arrowprops* argument. To draw only an arrow, use
+empty string as the first argument. ::
+
+    ax.annotate("",
+                xy=(0.2, 0.2), xycoords='data',
+                xytext=(0.8, 0.8), textcoords='data',
+                arrowprops=dict(arrowstyle="->",
+                                connectionstyle="arc3"),
+                )
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple01_001.png
+   :target: ../../gallery/userdemo/annotate_simple01.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple01
+
+The arrow is drawn as follows:
+
+1. A path connecting the two points is created, as specified by the
+   *connectionstyle* parameter.
+2. The path is clipped to avoid patches *patchA* and *patchB*, if these are
+   set.
+3. The path is further shrunk by *shrinkA* and *shrinkB* (in pixels).
+4. The path is transmuted to an arrow patch, as specified by the *arrowstyle*
+   parameter.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_explain_001.png
+   :target: ../../gallery/userdemo/annotate_explain.html
+   :align: center
+   :scale: 50
+
+   Annotate Explain
+
+
+The creation of the connecting path between two points is controlled by
+``connectionstyle`` key and the following styles are available.
+
+   ==========   =============================================
+   Name         Attrs
+   ==========   =============================================
+   ``angle``    angleA=90,angleB=0,rad=0.0
+   ``angle3``   angleA=90,angleB=0
+   ``arc``      angleA=0,angleB=0,armA=None,armB=None,rad=0.0
+   ``arc3``     rad=0.0
+   ``bar``      armA=0.0,armB=0.0,fraction=0.3,angle=None
+   ==========   =============================================
+
+Note that "3" in ``angle3`` and ``arc3`` is meant to indicate that the
+resulting path is a quadratic spline segment (three control
+points). As will be discussed below, some arrow style options can only
+be used when the connecting path is a quadratic spline.
+
+The behavior of each connection style is (limitedly) demonstrated in the
+example below. (Warning: The behavior of the ``bar`` style is currently not
+well defined, it may be changed in the future).
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_connectionstyle_demo_001.png
+   :target: ../../gallery/userdemo/connectionstyle_demo.html
+   :align: center
+   :scale: 50
+
+   Connectionstyle Demo
+
+
+The connecting path (after clipping and shrinking) is then mutated to
+an arrow patch, according to the given ``arrowstyle``.
+
+    ==========   =============================================
+    Name         Attrs
+    ==========   =============================================
+    ``-``        None
+    ``->``       head_length=0.4,head_width=0.2
+    ``-[``       widthB=1.0,lengthB=0.2,angleB=None
+    ``|-|``      widthA=1.0,widthB=1.0
+    ``-|>``      head_length=0.4,head_width=0.2
+    ``<-``       head_length=0.4,head_width=0.2
+    ``<->``      head_length=0.4,head_width=0.2
+    ``<|-``      head_length=0.4,head_width=0.2
+    ``<|-|>``    head_length=0.4,head_width=0.2
+    ``fancy``    head_length=0.4,head_width=0.4,tail_width=0.4
+    ``simple``   head_length=0.5,head_width=0.5,tail_width=0.2
+    ``wedge``    tail_width=0.3,shrink_factor=0.5
+    ==========   =============================================
+
+.. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_fancyarrow_demo_001.png
+   :target: ../../gallery/text_labels_and_annotations/fancyarrow_demo.html
+   :align: center
+   :scale: 50
+
+   Fancyarrow Demo
+
+Some arrowstyles only work with connection styles that generate a
+quadratic-spline segment. They are ``fancy``, ``simple``, and ``wedge``.
+For these arrow styles, you must use the "angle3" or "arc3" connection
+style.
+
+If the annotation string is given, the patchA is set to the bbox patch
+of the text by default.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple02_001.png
+   :target: ../../gallery/userdemo/annotate_simple02.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple02
+
+As with `~.Axes.text`, a box around the text can be drawn using the *bbox*
+argument.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple03_001.png
+   :target: ../../gallery/userdemo/annotate_simple03.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple03
+
+By default, the starting point is set to the center of the text
+extent.  This can be adjusted with ``relpos`` key value. The values
+are normalized to the extent of the text. For example, (0, 0) means
+lower-left corner and (1, 1) means top-right.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple04_001.png
+   :target: ../../gallery/userdemo/annotate_simple04.html
+   :align: center
+   :scale: 50
+
+   Annotate Simple04
+
+
+Placing Artist at the anchored location of the Axes
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+There are classes of artists that can be placed at an anchored
+location in the Axes.  A common example is the legend.  This type
+of artist can be created by using the `.OffsetBox` class. A few
+predefined classes are available in :mod:`matplotlib.offsetbox` and in
+:mod:`mpl_toolkits.axes_grid1.anchored_artists`. ::
+
+    from matplotlib.offsetbox import AnchoredText
+    at = AnchoredText("Figure 1a",
+                      prop=dict(size=15), frameon=True,
+                      loc='upper left',
+                      )
+    at.patch.set_boxstyle("round,pad=0.,rounding_size=0.2")
+    ax.add_artist(at)
+
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box01_001.png
+   :target: ../../gallery/userdemo/anchored_box01.html
+   :align: center
+   :scale: 50
+
+   Anchored Box01
+
+
+The *loc* keyword has same meaning as in the legend command.
+
+A simple application is when the size of the artist (or collection of
+artists) is known in pixel size during the time of creation. For
+example, If you want to draw a circle with fixed size of 20 pixel x 20
+pixel (radius = 10 pixel), you can utilize
+``AnchoredDrawingArea``. The instance is created with a size of the
+drawing area (in pixels), and arbitrary artists can added to the
+drawing area. Note that the extents of the artists that are added to
+the drawing area are not related to the placement of the drawing
+area itself. Only the initial size matters. ::
+
+    from mpl_toolkits.axes_grid1.anchored_artists import AnchoredDrawingArea
+
+    ada = AnchoredDrawingArea(20, 20, 0, 0,
+                              loc='upper right', pad=0., frameon=False)
+    p1 = Circle((10, 10), 10)
+    ada.drawing_area.add_artist(p1)
+    p2 = Circle((30, 10), 5, fc="r")
+    ada.drawing_area.add_artist(p2)
+
+The artists that are added to the drawing area should not have a
+transform set (it will be overridden) and the dimensions of those
+artists are interpreted as a pixel coordinate, i.e., the radius of the
+circles in above example are 10 pixels and 5 pixels, respectively.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box02_001.png
+   :target: ../../gallery/userdemo/anchored_box02.html
+   :align: center
+   :scale: 50
+
+   Anchored Box02
+
+Sometimes, you want your artists to scale with the data coordinate (or
+coordinates other than canvas pixels). You can use
+``AnchoredAuxTransformBox`` class. This is similar to
+``AnchoredDrawingArea`` except that the extent of the artist is
+determined during the drawing time respecting the specified transform. ::
+
+  from mpl_toolkits.axes_grid1.anchored_artists import AnchoredAuxTransformBox
+
+  box = AnchoredAuxTransformBox(ax.transData, loc='upper left')
+  el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)  # in data coordinates!
+  box.drawing_area.add_artist(el)
+
+The ellipse in the above example will have width and height
+corresponding to 0.1 and 0.4 in data coordinates and will be
+automatically scaled when the view limits of the axes change.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box03_001.png
+   :target: ../../gallery/userdemo/anchored_box03.html
+   :align: center
+   :scale: 50
+
+   Anchored Box03
+
+As in the legend, the bbox_to_anchor argument can be set.  Using the
+HPacker and VPacker, you can have an arrangement(?) of artist as in the
+legend (as a matter of fact, this is how the legend is created).
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_anchored_box04_001.png
+   :target: ../../gallery/userdemo/anchored_box04.html
+   :align: center
+   :scale: 50
+
+   Anchored Box04
+
+Note that unlike the legend, the ``bbox_transform`` is set
+to IdentityTransform by default.
+
+Using Complex Coordinates with Annotations
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The Annotation in matplotlib supports several types of coordinates as
+described in :ref:`annotations-tutorial`. For an advanced user who wants
+more control, it supports a few other options.
+
+1. A `.Transform` instance.  For example, ::
+
+     ax.annotate("Test", xy=(0.5, 0.5), xycoords=ax.transAxes)
+
+   is identical to ::
+
+     ax.annotate("Test", xy=(0.5, 0.5), xycoords="axes fraction")
+
+   This allows annotating a point in another axes::
+
+     fig, (ax1, ax2) = plt.subplots(1, 2)
+     ax2.annotate("Test", xy=(0.5, 0.5), xycoords=ax1.transData,
+                  xytext=(0.5, 0.5), textcoords=ax2.transData,
+                  arrowprops=dict(arrowstyle="->"))
+
+2. An `.Artist` instance. The *xy* value (or *xytext*) is interpreted as a
+   fractional coordinate of the bbox (return value of *get_window_extent*) of
+   the artist::
+
+     an1 = ax.annotate("Test 1", xy=(0.5, 0.5), xycoords="data",
+                       va="center", ha="center",
+                       bbox=dict(boxstyle="round", fc="w"))
+     an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,  # (1, 0.5) of the an1's bbox
+                       xytext=(30, 0), textcoords="offset points",
+                       va="center", ha="left",
+                       bbox=dict(boxstyle="round", fc="w"),
+                       arrowprops=dict(arrowstyle="->"))
+
+   .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord01_001.png
+      :target: ../../gallery/userdemo/annotate_simple_coord01.html
+      :align: center
+      :scale: 50
+
+      Annotation with Simple Coordinates
+
+   Note that you must ensure that the extent of the coordinate artist (*an1* in
+   above example) is determined before *an2* gets drawn. Usually, this means
+   that *an2* needs to be drawn after *an1*.
+
+3. A callable object that takes the renderer instance as single argument, and
+   returns either a `.Transform` or a `.BboxBase`.  The return value is then
+   handled as in (1), for transforms, or in (2), for bboxes.  For example, ::
+
+     an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1,
+                       xytext=(30, 0), textcoords="offset points")
+
+   is identical to::
+
+     an2 = ax.annotate("Test 2", xy=(1, 0.5), xycoords=an1.get_window_extent,
+                       xytext=(30, 0), textcoords="offset points")
+
+4. A pair of coordinate specifications -- the first for the x-coordinate, and
+   the second is for the y-coordinate; e.g. ::
+
+     annotate("Test", xy=(0.5, 1), xycoords=("data", "axes fraction"))
+
+   Here, 0.5 is in data coordinates, and 1 is in normalized axes coordinates.
+   Each of the coordinate specifications can also be an artist or a transform.
+   For example,
+
+   .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord02_001.png
+      :target: ../../gallery/userdemo/annotate_simple_coord02.html
+      :align: center
+      :scale: 50
+
+      Annotation with Simple Coordinates 2
+
+5. Sometimes, you want your annotation with some "offset points", not from the
+   annotated point but from some other point.  `.text.OffsetFrom` is a helper
+   for such cases.
+
+   .. figure:: ../../gallery/userdemo/images/sphx_glr_annotate_simple_coord03_001.png
+      :target: ../../gallery/userdemo/annotate_simple_coord03.html
+      :align: center
+      :scale: 50
+
+      Annotation with Simple Coordinates 3
+
+   You may take a look at this example
+   :doc:`/gallery/text_labels_and_annotations/annotation_demo`.
+
+Using ConnectionPatch
+~~~~~~~~~~~~~~~~~~~~~
+
+ConnectionPatch is like an annotation without text. While `~.Axes.annotate`
+is sufficient in most situations, ConnectionPatch is useful when you want to
+connect points in different axes. ::
+
+  from matplotlib.patches import ConnectionPatch
+  xy = (0.2, 0.2)
+  con = ConnectionPatch(xyA=xy, coordsA=ax1.transData,
+                        xyB=xy, coordsB=ax2.transData)
+  fig.add_artist(con)
+
+The above code connects point *xy* in the data coordinates of ``ax1`` to
+point *xy* in the data coordinates of ``ax2``. Here is a simple example.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_connect_simple01_001.png
+   :target: ../../gallery/userdemo/connect_simple01.html
+   :align: center
+   :scale: 50
+
+   Connect Simple01
+
+Here, we added the ConnectionPatch to the *figure* (with `~.Figure.add_artist`)
+rather than to either axes: this ensures that it is drawn on top of both axes,
+and is also necessary if using :doc:`constrained_layout
+</tutorials/intermediate/constrainedlayout_guide>` for positioning the axes.
+
+Advanced Topics
+---------------
+
+Zoom effect between Axes
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+``mpl_toolkits.axes_grid1.inset_locator`` defines some patch classes useful for
+interconnecting two axes. Understanding the code requires some knowledge of
+Matplotlib's transform system.
+
+.. figure:: ../../gallery/subplots_axes_and_figures/images/sphx_glr_axes_zoom_effect_001.png
+   :target: ../../gallery/subplots_axes_and_figures/axes_zoom_effect.html
+   :align: center
+   :scale: 50
+
+   Axes Zoom Effect
+
+Define Custom BoxStyle
+~~~~~~~~~~~~~~~~~~~~~~
+
+You can use a custom box style. The value for the ``boxstyle`` can be a
+callable object in the following forms.::
+
+        def __call__(self, x0, y0, width, height, mutation_size,
+                     aspect_ratio=1.):
+            '''
+            Given the location and size of the box, return the path of
+            the box around it.
+
+              - *x0*, *y0*, *width*, *height* : location and size of the box
+              - *mutation_size* : a reference scale for the mutation.
+              - *aspect_ratio* : aspect-ratio for the mutation.
+            '''
+            path = ...
+            return path
+
+Here is a complete example.
+
+.. figure:: ../../gallery/userdemo/images/sphx_glr_custom_boxstyle01_001.png
+   :target: ../../gallery/userdemo/custom_boxstyle01.html
+   :align: center
+   :scale: 50
+
+   Custom Boxstyle01
+
+Similarly, you can define a custom ConnectionStyle and a custom ArrowStyle.
+See the source code of ``lib/matplotlib/patches.py`` and check
+how each style class is defined.
+"""
diff --git a/tutorials/text/mathtext.py b/tutorials/text/mathtext.py
index 9e9abfc523..3663d27f5f 100644
--- a/tutorials/text/mathtext.py
+++ b/tutorials/text/mathtext.py
@@ -1,14 +1,15 @@
 r"""
 Writing mathematical expressions
 ================================
+An introduction to writing mathematical expressions in Matplotlib.

-You can use a subset of TeX markup in any Matplotlib text string by placing it
+You can use a subset TeX markup in any matplotlib text string by placing it
 inside a pair of dollar signs ($).

 Note that you do not need to have TeX installed, since Matplotlib ships
 its own TeX expression parser, layout engine, and fonts.  The layout engine
 is a fairly direct adaptation of the layout algorithms in Donald Knuth's
-TeX, so the quality is quite good (Matplotlib also provides a ``usetex``
+TeX, so the quality is quite good (matplotlib also provides a ``usetex``
 option for those who do want to call out to TeX to generate their text (see
 :doc:`/tutorials/text/usetex`).

@@ -111,7 +112,7 @@ small::

     r'$(\frac{5 - \frac{1}{x}}{4})$'

-.. math::
+.. math ::

     (\frac{5 - \frac{1}{x}}{4})

@@ -120,7 +121,7 @@ the parser that those brackets encompass the entire object.::

     r'$\left(\frac{5 - \frac{1}{x}}{4}\right)$'

-.. math::
+.. math ::

     \left(\frac{5 - \frac{1}{x}}{4}\right)

@@ -130,7 +131,7 @@ Radicals can be produced with the ``\sqrt[]{}`` command.  For example::

     r'$\sqrt{2}$'

-.. math::
+.. math ::

     \sqrt{2}

@@ -140,7 +141,7 @@ fractions or sub/superscripts::

     r'$\sqrt[3]{x}$'

-.. math::
+.. math ::

     \sqrt[3]{x}

@@ -308,10 +309,8 @@ long and short forms for some of them.
     ``\acute a`` or ``\'a``        :mathmpl:`\acute a`
     ``\bar a``                     :mathmpl:`\bar a`
     ``\breve a``                   :mathmpl:`\breve a`
-    ``\dot a`` or ``\.a``          :mathmpl:`\dot a`
     ``\ddot a`` or ``\''a``        :mathmpl:`\ddot a`
-    ``\dddot a``                   :mathmpl:`\dddot a`
-    ``\ddddot a``                  :mathmpl:`\ddddot a`
+    ``\dot a`` or ``\.a``          :mathmpl:`\dot a`
     ``\grave a`` or ``\`a``        :mathmpl:`\grave a`
     ``\hat a`` or ``\^a``          :mathmpl:`\hat a`
     ``\tilde a`` or ``\~a``        :mathmpl:`\tilde a`
@@ -357,4 +356,7 @@ Here is an example illustrating many of these features in context.
 .. figure:: ../../gallery/pyplots/images/sphx_glr_pyplot_mathtext_001.png
    :target: ../../gallery/pyplots/pyplot_mathtext.html
    :align: center
+   :scale: 50
+
+   Pyplot Mathtext
 """
diff --git a/tutorials/text/pgf.py b/tutorials/text/pgf.py
index caedf394f3..43e7a96289 100644
--- a/tutorials/text/pgf.py
+++ b/tutorials/text/pgf.py
@@ -1,6 +1,6 @@
 r"""
 *********************************
-Typesetting with XeLaTeX/LuaLaTeX
+Typesetting With XeLaTeX/LuaLaTeX
 *********************************

 How to typeset text with the ``pgf`` backend in Matplotlib.
@@ -150,6 +150,11 @@ Troubleshooting
   executables. See :ref:`environment-variables` and
   :ref:`setting-windows-environment-variables` for details.

+* A limitation on Windows causes the backend to keep file handles that have
+  been opened by your application open. As a result, it may not be possible
+  to delete the corresponding files until the application closes (see
+  `#1324 <https://github.com/matplotlib/matplotlib/issues/1324>`_).
+
 * Sometimes the font rendering in figures that are saved to png images is
   very bad. This happens when the pdftocairo tool is not available and
   ghostscript is used for the pdf to png conversion.
@@ -170,7 +175,7 @@ Troubleshooting
   alternatively make the fonts available to your OS. See this
   `tex.stackexchange.com question`__ for more details.

-  __ https://tex.stackexchange.com/q/43642/
+  __ http://tex.stackexchange.com/questions/43642

 * If the font configuration used by Matplotlib differs from the font setting
   in yout LaTeX document, the alignment of text elements in imported figures
@@ -182,17 +187,11 @@ Troubleshooting
   big scatter graphs.  In an extreme case this can cause TeX to run out of
   memory: "TeX capacity exceeded, sorry"  You can configure latex to increase
   the amount of memory available to generate the ``.pdf`` image as discussed on
-  `tex.stackexchange.com <https://tex.stackexchange.com/q/7953/>`_.
+  `tex.stackexchange.com <http://tex.stackexchange.com/questions/7953>`_.
   Another way would be to "rasterize" parts of the graph causing problems
   using either the ``rasterized=True`` keyword, or ``.set_rasterized(True)`` as
   per :doc:`this example </gallery/misc/rasterization_demo>`.

-* Various math fonts are compiled and rendered only if corresponding font
-  packages are loaded. Specifically, when using ``\mathbf{}`` on Greek letters,
-  the default computer modern font may not contain them, in which case the
-  letter is not rendered. In such scenarios, the ``lmodern`` package should be
-  loaded.
-
 * If you still need help, please see :ref:`reporting-problems`

 .. _LaTeX: http://www.tug.org
diff --git a/tutorials/text/text_intro.py b/tutorials/text/text_intro.py
index 1f2a7a1a28..10432971e1 100644
--- a/tutorials/text/text_intro.py
+++ b/tutorials/text/text_intro.py
@@ -153,7 +153,7 @@ plt.show()
 # *position*, via which we can manually specify the label positions.  Here we
 # put the xlabel to the far left of the axis.  Note, that the y-coordinate of
 # this position has no effect - to adjust the y-position we need to use the
-# *labelpad* keyword argument.
+# *labelpad* kwarg.

 fig, ax = plt.subplots(figsize=(5, 3))
 fig.subplots_adjust(bottom=0.15, left=0.2)
@@ -165,8 +165,8 @@ plt.show()

 ##############################################################################
 # All the labelling in this tutorial can be changed by manipulating the
-# `matplotlib.font_manager.FontProperties` method, or by named keyword
-# arguments to `~matplotlib.axes.Axes.set_xlabel`
+# `matplotlib.font_manager.FontProperties` method, or by named kwargs to
+# `~matplotlib.axes.Axes.set_xlabel`

 from matplotlib.font_manager import FontProperties

diff --git a/tutorials/text/text_props.py b/tutorials/text/text_props.py
index fba757979c..95dd8b54fc 100644
--- a/tutorials/text/text_props.py
+++ b/tutorials/text/text_props.py
@@ -149,9 +149,9 @@ plt.show()
 # +---------------------+----------------------------------------------------+
 # | rcParam             | usage                                              |
 # +=====================+====================================================+
-# | ``'font.family'``   | List of font families (installed on user's machine)|
-# |                     | and/or ``{'cursive', 'fantasy', 'monospace',       |
-# |                     | 'sans', 'sans serif', 'sans-serif', 'serif'}``.    |
+# | ``'font.family'``   | List of either names of font or ``{'cursive',      |
+# |                     | 'fantasy', 'monospace', 'sans', 'sans serif',      |
+# |                     | 'sans-serif', 'serif'}``.                          |
 # |                     |                                                    |
 # +---------------------+----------------------------------------------------+
 # |  ``'font.style'``   | The default style, ex ``'normal'``,                |
@@ -174,18 +174,13 @@ plt.show()
 # |                     | this size.                                         |
 # +---------------------+----------------------------------------------------+
 #
-# Matplotlib can use font families installed on the user's computer, i.e.
-# Helvetica, Times, etc. Font families can also be specified with
-# generic-family aliases like (``{'cursive', 'fantasy', 'monospace',
-# 'sans', 'sans serif', 'sans-serif', 'serif'}``).
-#
-# The mapping between the generic family aliases and actual font families
-# (mentioned at :doc:`default rcParams </tutorials/introductory/customizing>`)
+# The mapping between the family aliases (``{'cursive', 'fantasy',
+# 'monospace', 'sans', 'sans serif', 'sans-serif', 'serif'}``) and actual font names
 # is controlled by the following rcParams:
 #
 #
 # +------------------------------------------+--------------------------------+
-# | CSS-based generic-family alias           | rcParam with mappings          |
+# | family alias                             | rcParam with mappings          |
 # +==========================================+================================+
 # | ``'serif'``                              | ``'font.serif'``               |
 # +------------------------------------------+--------------------------------+
@@ -199,15 +194,7 @@ plt.show()
 # +------------------------------------------+--------------------------------+
 #
 #
-# If any of generic family names appear in ``'font.family'``, we replace that entry
-# by all the entries in the corresponding rcParam mapping.
-# For example: ::
-#
-#    matplotlib.rcParams['font.family'] = ['Family1', 'serif', 'Family2']
-#    matplotlib.rcParams['font.serif'] = ['SerifFamily1', 'SerifFamily2']
-#
-#    # This is effectively translated to:
-#    matplotlib.rcParams['font.family'] = ['Family1', 'SerifFamily1', 'SerifFamily2', 'Family2']
+# which are lists of font names.
 #
 # Text with non-latin glyphs
 # ==========================
@@ -217,29 +204,17 @@ plt.show()
 # Korean, or Japanese.
 #
 # To set the default font to be one that supports the code points you
-# need, prepend the font name to ``'font.family'`` (recommended), or to the
-# desired alias lists. ::
-#
-#    # first method
-#    matplotlib.rcParams['font.family'] = ['Source Han Sans TW', 'sans-serif']
-#
-#    # second method
-#    matplotlib.rcParams['font.family'] = ['sans-serif']
-#    matplotlib.rcParams['sans-serif'] = ['Source Han Sans TW', ...]
-#
-# The generic family alias lists contain fonts that are either shipped
-# alongside Matplotlib (so they have 100% chance of being found), or fonts
-# which have a very high probability of being present in most systems.
+# need, prepend the font name to ``'font.family'`` or the desired alias
+# lists ::
 #
-# A good practice when setting custom font families is to append
-# a generic-family to the font-family list as a last resort.
+#    matplotlib.rcParams['font.sans-serif'] = ['Source Han Sans TW', 'sans-serif']
 #
-# You can also set it in your :file:`.matplotlibrc` file::
+# or set it in your :file:`.matplotlibrc` file::
 #
-#    font.family: Source Han Sans TW, Arial, sans-serif
+#    font.sans-serif: Source Han Sans TW, Arial, sans-serif
 #
-# To control the font used on per-artist basis use the *name*, *fontname* or
-# *fontproperties* keyword arguments documented :doc:`above
+# To control the font used on per-artist basis use the ``'name'``,
+# ``'fontname'`` or ``'fontproperties'`` kwargs documented :doc:`above
 # </tutorials/text/text_props>`.
 #
 #
diff --git a/tutorials/text/usetex.py b/tutorials/text/usetex.py
index 6082084149..3dc4e377a7 100644
--- a/tutorials/text/usetex.py
+++ b/tutorials/text/usetex.py
@@ -1,6 +1,6 @@
 r"""
 *************************
-Text rendering with LaTeX
+Text rendering With LaTeX
 *************************

 Matplotlib can use LaTeX to render text.  This is activated by setting
@@ -11,13 +11,10 @@ is more flexible, since different LaTeX packages (font packages, math packages,
 etc.) can be used. The results can be striking, especially when you take care
 to use the same fonts in your figures as in the main document.

-Matplotlib's LaTeX support requires a working LaTeX_ installation.  For
-the \*Agg backends, dvipng_ is additionally required; for the PS backend,
-PSfrag_, dvips_ and Ghostscript_ are additionally required.  For the PDF
-and SVG backends, if LuaTeX is present, it will be used to speed up some
-post-processing steps, but note that it is not used to parse the TeX string
-itself (only LaTeX is supported).  The executables for these external
-dependencies must all be located on your :envvar:`PATH`.
+Matplotlib's LaTeX support requires a working LaTeX_ installation.  For the
+\*Agg backends, dvipng_ is additionally required; for the PS backend, psfrag_,
+dvips_ and Ghostscript_ are additionally required.  The executables for these
+external dependencies must all be located on your :envvar:`PATH`.

 There are a couple of options to mention, which can be changed using
 :doc:`rc settings </tutorials/introductory/customizing>`. Here is an example
@@ -51,34 +48,14 @@ matplotlibrc use::
       "font.family": "serif",
       "font.serif": ["Palatino"],
   })
-  # It's also possible to use the reduced notation by directly setting font.family:
-  plt.rcParams.update({
-    "text.usetex": True,
-    "font.family": "Helvetica"
-  })
-
-Currently, the supported fonts are:
-
-================= ============================================================
-family            fonts
-================= ============================================================
-``'serif'``         ``'New Century Schoolbook'``, ``'Bookman'``, ``'Times'``,
-                    ``'Palatino'``, ``'Charter'``, ``'Computer Modern Roman'``
-
-``'sans-serif'``  ``'Helvetica'``, ``'Avant Garde'``, ``'Computer Modern
-                  Serif'``
-
-``'cursive'``     ``'Zapf Chancery'``
-
-``'monospace'``   ``'Courier'``, ``'Computer Modern Typewriter'``
-================= ============================================================

 Here is the standard example,
-:doc:`/gallery/text_labels_and_annotations/tex_demo`:
+:file:`/gallery/text_labels_and_annotations/tex_demo`:

 .. figure:: ../../gallery/text_labels_and_annotations/images/sphx_glr_tex_demo_001.png
    :target: ../../gallery/text_labels_and_annotations/tex_demo.html
    :align: center
+   :scale: 50

 Note that display math mode (``$$ e=mc^2 $$``) is not supported, but adding the
 command ``\displaystyle``, as in the above demo, will produce the same results.
@@ -125,13 +102,13 @@ Possible hangups

 * On Ubuntu and Gentoo, the base texlive install does not ship with
   the type1cm package. You may need to install some of the extra
-  packages to get all the goodies that come bundled with other LaTeX
+  packages to get all the goodies that come bundled with other latex
   distributions.

-* Some progress has been made so Matplotlib uses the dvi files
-  directly for text layout. This allows LaTeX to be used for text
+* Some progress has been made so matplotlib uses the dvi files
+  directly for text layout. This allows latex to be used for text
   layout with the pdf and svg backends, as well as the \*Agg and PS
-  backends. In the future, a LaTeX installation may be the only
+  backends. In the future, a latex installation may be the only
   external dependency.

 .. _usetex-troubleshooting:
@@ -154,7 +131,7 @@ Troubleshooting
   problems. Please disable this option before reporting problems to
   the mailing list.

-* If you still need help, please see :ref:`reporting-problems`.
+* If you still need help, please see :ref:`reporting-problems`

 .. _dvipng: http://www.nongnu.org/dvipng/
 .. _dvips: https://tug.org/texinfohtml/dvips.html
@@ -163,6 +140,6 @@ Troubleshooting
 .. _LaTeX: http://www.tug.org
 .. _Poppler: https://poppler.freedesktop.org/
 .. _PSNFSS: http://www.ctan.org/tex-archive/macros/latex/required/psnfss/psnfss2e.pdf
-.. _PSfrag: https://ctan.org/pkg/psfrag
+.. _psfrag: https://ctan.org/pkg/psfrag
 .. _Xpdf: http://www.xpdfreader.com/
 """
diff --git a/tutorials/toolkits/axes_grid.py b/tutorials/toolkits/axes_grid.py
index 97c09c22a6..e55555a4aa 100644
--- a/tutorials/toolkits/axes_grid.py
+++ b/tutorials/toolkits/axes_grid.py
@@ -1,24 +1,38 @@
 r"""
+==============================
+Overview of axes_grid1 toolkit
+==============================
+
+Controlling the layout of plots with the
+:mod:`mpl_toolkits.axes_grid1` toolkit.
+
 .. _axes_grid1_users-guide-index:

-==========================================
-Overview of :mod:`mpl_toolkits.axes_grid1`
-==========================================

-:mod:`.axes_grid1` provides the following features:
+What is axes_grid1 toolkit?
+===========================

-- Helper classes (ImageGrid_, RGBAxes_, AxesDivider_) to ease the layout of
-  axes displaying images with a fixed aspect ratio while satisfying additional
-  constraints (matching the heights of a colorbar and an image, or fixing the
-  padding between images);
-- ParasiteAxes_ (twinx/twiny-like features so that you can plot different data
-  (e.g., different y-scale) in a same Axes);
-- AnchoredArtists_ (custom artists which are placed at an anchored position,
-  similarly to legends).
+:mod:`mpl_toolkits.axes_grid1` is a collection of helper classes to ease
+displaying (multiple) images with matplotlib. In matplotlib, the axes location
+(and size) is specified in the normalized figure coordinates, which
+may not be ideal for displaying images that needs to have a given
+aspect ratio.  For example, it helps if you have a colorbar whose
+height always matches that of the image.  `ImageGrid`_, `RGB Axes`_ and
+`AxesDivider`_ are helper classes that deal with adjusting the
+location of (multiple) Axes.  They provides a framework to adjust the
+position of multiple axes at the drawing time. `ParasiteAxes`_
+provides twinx(or twiny)-like features so that you can plot different
+data (e.g., different y-scale) in a same Axes. `AnchoredArtists`_
+includes custom artists which are placed at some anchored position,
+like the legend.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_demo_axes_grid_001.png
    :target: ../../gallery/axes_grid1/demo_axes_grid.html
    :align: center
+   :scale: 50
+
+   Demo Axes Grid
+

 axes_grid1
 ==========
@@ -26,62 +40,87 @@ axes_grid1
 ImageGrid
 ---------

-In Matplotlib, axes location and size are usually specified in normalized
-figure coordinates (0 = bottom left, 1 = top right), which makes
-it difficult to achieve a fixed (absolute) padding between images.
-`~.axes_grid1.axes_grid.ImageGrid` can be used to achieve such a padding; see
-its docs for detailed API information.
+A grid of Axes.
+
+In Matplotlib, the axes location (and size) is specified in normalized
+figure coordinates. This may not be ideal for images that needs to be
+displayed with a given aspect ratio; for example, it is difficult to
+display multiple images of a same size with some fixed padding between
+them.  `~.axes_grid1.axes_grid.ImageGrid` can be used in such a case; see its
+docs for a detailed list of the parameters it accepts.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axesgrid_001.png
    :target: ../../gallery/axes_grid1/simple_axesgrid.html
    :align: center
+   :scale: 50
+
+   Simple Axesgrid

 * The position of each axes is determined at the drawing time (see
-  AxesDivider_), so that the size of the entire grid fits in the
+  `AxesDivider`_), so that the size of the entire grid fits in the
   given rectangle (like the aspect of axes). Note that in this example,
   the paddings between axes are fixed even if you changes the figure
   size.

-* Axes in the same column share their x-axis, and axes in the same row share
-  their y-axis (in the sense of `~.Axes.sharex`, `~.Axes.sharey`).
-  Additionally, Axes in the same column all have the same width, and axes in
-  the same row all have the same height.  These widths and heights are scaled
-  in proportion to the axes' view limits (xlim or ylim).
+* axes in the same column has a same axes width (in figure
+  coordinate), and similarly, axes in the same row has a same
+  height. The widths (height) of the axes in the same row (column) are
+  scaled according to their view limits (xlim or ylim).

   .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axesgrid2_001.png
      :target: ../../gallery/axes_grid1/simple_axesgrid2.html
      :align: center
+     :scale: 50
+
+     Simple Axes Grid
+
+* xaxis are shared among axes in a same column. Similarly, yaxis are
+  shared among axes in a same row. Therefore, changing axis properties
+  (view limits, tick location, etc. either by plot commands or using
+  your mouse in interactive backends) of one axes will affect all
+  other shared axes.

 The examples below show what you can do with ImageGrid.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_demo_axes_grid_001.png
    :target: ../../gallery/axes_grid1/demo_axes_grid.html
    :align: center
+   :scale: 50
+
+   Demo Axes Grid
+

 AxesDivider Class
 -----------------

-Behind the scenes, ImageGrid (and RGBAxes, described below) rely on
-`~.axes_grid1.axes_divider.AxesDivider`, whose role is to calculate the
-location of the axes at drawing time.
-
-Users typically do not need to directly instantiate dividers
-by calling `~.axes_grid1.axes_divider.AxesDivider`; instead,
-`~.axes_grid1.axes_divider.make_axes_locatable` can be used to create a divider
-for an axes::
+Behind the scene, the ImageGrid class and the RGBAxes class utilize the
+`~.axes_grid1.axes_divider.AxesDivider` class, whose role is to calculate the
+location of the axes at drawing time. Direct use of the
+AxesDivider class will not be necessary for most users. The
+axes_divider module provides a helper function
+`~.axes_grid1.axes_divider.make_axes_locatable`, which can be useful.
+It takes a existing axes instance and create a divider for it. ::

   ax = subplot(1, 1, 1)
   divider = make_axes_locatable(ax)

-`.AxesDivider.append_axes` can then be used to create a new axes on a given
-side ("left", "right", "top", "bottom") of the original axes.
+*make_axes_locatable* returns an instance of the
+`~.axes_grid1.axes_divider.AxesDivider` class. It provides an
+`~.AxesDivider.append_axes` method that
+creates a new axes on the given side of ("top", "right", "bottom" and
+"left") of the original axes.
+

-colorbar whose height (or width) in sync with the main axes
------------------------------------------------------------
+colorbar whose height (or width) in sync with the master axes
+-------------------------------------------------------------

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_colorbar_001.png
    :target: ../../gallery/axes_grid1/simple_colorbar.html
    :align: center
+   :scale: 50
+
+   Simple Colorbar
+

 scatter_hist.py with AxesDivider
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -109,13 +148,17 @@ See the full source code below.
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_scatter_hist_locatable_axes_001.png
    :target: ../../gallery/axes_grid1/scatter_hist_locatable_axes.html
    :align: center
+   :scale: 50
+
+   Scatter Hist

 The :doc:`/gallery/axes_grid1/scatter_hist_locatable_axes` using the
-AxesDivider has some advantages over the
+AxesDivider has some advantage over the
 original :doc:`/gallery/lines_bars_and_markers/scatter_hist` in Matplotlib.
 For example, you can set the aspect ratio of the scatter plot, even with the
 x-axis or y-axis is shared accordingly.

+
 ParasiteAxes
 ------------

@@ -138,12 +181,17 @@ legend command in host, creates a legend that includes lines in the
 parasite axes.  To create a host axes, you may use *host_subplot* or
 *host_axes* command.

+
 Example 1. twinx
 ~~~~~~~~~~~~~~~~

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_parasite_simple_001.png
    :target: ../../gallery/axes_grid1/parasite_simple.html
    :align: center
+   :scale: 50
+
+   Parasite Simple
+

 Example 2. twin
 ~~~~~~~~~~~~~~~
@@ -154,79 +202,102 @@ top(or right)-axis to have different tick-locations, tick-labels, or
 tick-formatter for bottom(or left)-axis. ::

   ax2 = ax.twin() # now, ax2 is responsible for "top" axis and "right" axis
-  ax2.set_xticks([0., .5*np.pi, np.pi, 1.5*np.pi, 2*np.pi],
-                 labels=["0", r"$\frac{1}{2}\pi$",
-                         r"$\pi$", r"$\frac{3}{2}\pi$", r"$2\pi$"])
+  ax2.set_xticks([0., .5*np.pi, np.pi, 1.5*np.pi, 2*np.pi])
+  ax2.set_xticklabels(["0", r"$\frac{1}{2}\pi$",
+                       r"$\pi$", r"$\frac{3}{2}\pi$", r"$2\pi$"])
+

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axisline4_001.png
    :target: ../../gallery/axes_grid1/simple_axisline4.html
    :align: center
+   :scale: 50
+
+   Simple Axisline4

 A more sophisticated example using twin. Note that if you change the
 x-limit in the host axes, the x-limit of the parasite axes will change
 accordingly.

+
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_parasite_simple2_001.png
    :target: ../../gallery/axes_grid1/parasite_simple2.html
    :align: center
+   :scale: 50
+
+   Parasite Simple2
+

 AnchoredArtists
 ---------------

-:mod:`.axes_grid1.anchored_artists` is a collection of artists whose location
-is anchored to the (axes) bbox, similarly to legends.  These artists derive
-from `.offsetbox.OffsetBox`, and the artist need to be drawn in canvas
-coordinates.  There is limited support for arbitrary transforms.  For example,
-the ellipse in the example below will have width and height in data coordinate.
+It's a collection of artists whose location is anchored to the (axes)
+bbox, like the legend. It is derived from *OffsetBox* in Matplotlib, and
+artist need to be drawn in the canvas coordinate. But, there is a
+limited support for an arbitrary transform. For example, the ellipse
+in the example below will have width and height in the data
+coordinate.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_anchored_artists_001.png
    :target: ../../gallery/axes_grid1/simple_anchored_artists.html
    :align: center
+   :scale: 50
+
+   Simple Anchored Artists
+

 InsetLocator
 ------------

-.. seealso::
-   `.Axes.inset_axes` and `.Axes.indicate_inset_zoom` in the main library.
+:mod:`mpl_toolkits.axes_grid1.inset_locator` provides helper classes
+and functions to place your (inset) axes at the anchored position of
+the parent axes, similarly to AnchoredArtist.

-:mod:`.axes_grid1.inset_locator` provides helper classes and functions to
-place inset axes at an anchored position of the parent axes, similarly to
-AnchoredArtist.
-
-`.inset_locator.inset_axes` creates an inset axes whose size is either fixed,
-or a fixed proportion of the parent axes::
+Using :func:`mpl_toolkits.axes_grid1.inset_locator.inset_axes`, you
+can have inset axes whose size is either fixed, or a fixed proportion
+of the parent axes::

     inset_axes = inset_axes(parent_axes,
-                            width="30%",  # width = 30% of parent_bbox
-                            height=1.,  # height = 1 inch
+                            width="30%", # width = 30% of parent_bbox
+                            height=1., # height : 1 inch
                             loc='lower left')

 creates an inset axes whose width is 30% of the parent axes and whose
 height is fixed at 1 inch.

-`.inset_locator.zoomed_inset_axes` creates an inset axes whose data scale is
-that of the parent axes multiplied by some factor, e.g. ::
+You may creates your inset whose size is determined so that the data
+scale of the inset axes to be that of the parent axes multiplied by
+some factor. For example, ::

     inset_axes = zoomed_inset_axes(ax,
-                                   0.5,  # zoom = 0.5
+                                   0.5, # zoom = 0.5
                                    loc='upper right')

-creates an inset axes whose data scale is half of the parent axes.  This can be
-useful to mark the zoomed area on the parent axes:
+creates an inset axes whose data scale is half of the parent axes.
+Here is complete examples.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_inset_locator_demo_001.png
    :target: ../../gallery/axes_grid1/inset_locator_demo.html
    :align: center
+   :scale: 50
+
+   Inset Locator Demo

-`.inset_locator.mark_inset` allows marking the location of the area represented
-by the inset axes:
+For example, :func:`.zoomed_inset_axes` can be used when you want the
+inset represents the zoom-up of the small portion in the parent axes.
+And :mod:`~mpl_toolkits.axes_grid1.inset_locator` provides a helper
+function :func:`.mark_inset` to mark the location of the area
+represented by the inset axes.

 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_inset_locator_demo2_001.png
    :target: ../../gallery/axes_grid1/inset_locator_demo2.html
    :align: center
+   :scale: 50

-RGBAxes
--------
+   Inset Locator Demo2
+
+
+RGB Axes
+~~~~~~~~

 RGBAxes is a helper class to conveniently show RGB composite
 images. Like ImageGrid, the location of axes are adjusted so that the
@@ -240,9 +311,12 @@ yaxis of each axes are shared. ::
     r, g, b = get_rgb()  # r, g, b are 2D images.
     ax.imshow_rgb(r, g, b)

+
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_demo_axes_rgb_001.png
    :target: ../../gallery/axes_grid1/demo_axes_rgb.html
    :align: center
+   :scale: 50
+

 AxesDivider
 ===========
@@ -318,9 +392,10 @@ Locators that spans over multiple cells can be created with, e.g.::

 See the example,

-.. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axes_divider1_001.png
+.. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axes_divider1_002.png
    :target: ../../gallery/axes_grid1/simple_axes_divider1.html
    :align: center
+   :scale: 50

 You can also adjust the size of each axes according to its x or y
 data limits (AxesX and AxesY).
@@ -328,4 +403,5 @@ data limits (AxesX and AxesY).
 .. figure:: ../../gallery/axes_grid1/images/sphx_glr_simple_axes_divider3_001.png
    :target: ../../gallery/axes_grid1/simple_axes_divider3.html
    :align: center
+   :scale: 50
 """
diff --git a/tutorials/toolkits/axisartist.py b/tutorials/toolkits/axisartist.py
index 7040a2f6a4..6a9e6edc9f 100644
--- a/tutorials/toolkits/axisartist.py
+++ b/tutorials/toolkits/axisartist.py
@@ -20,6 +20,9 @@ curved coordinate systems.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_floating_axis_001.png
    :target: ../../gallery/axisartist/demo_floating_axis.html
    :align: center
+   :scale: 50
+
+   Demo Floating Axis

 Since it uses special artists, some Matplotlib commands that work on
 Axes.xaxis and Axes.yaxis may not work.
@@ -65,6 +68,9 @@ For example, you can hide the right and top spines using::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axisline3_001.png
    :target: ../../gallery/axisartist/simple_axisline3.html
    :align: center
+   :scale: 50
+
+   Simple Axisline3

 It is also possible to add a horizontal axis. For example, you may have an
 horizontal axis at y=0 (in data coordinate). ::
@@ -74,6 +80,9 @@ horizontal axis at y=0 (in data coordinate). ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axisartist1_001.png
    :target: ../../gallery/axisartist/simple_axisartist1.html
    :align: center
+   :scale: 50
+
+   Simple Axisartist1

 Or a fixed axis with some offset ::

@@ -97,6 +106,9 @@ Here is an example that uses ParasiteAxes.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_parasite_axes2_001.png
    :target: ../../gallery/axisartist/demo_parasite_axes2.html
    :align: center
+   :scale: 50
+
+   Demo Parasite Axes2

 Curvilinear Grid
 ----------------
@@ -107,6 +119,9 @@ and ticks.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_curvelinear_grid_001.png
    :target: ../../gallery/axisartist/demo_curvelinear_grid.html
    :align: center
+   :scale: 50
+
+   Demo CurveLinear Grid

 Floating Axes
 -------------
@@ -117,6 +132,9 @@ floating axis.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_floating_axes_001.png
    :target: ../../gallery/axisartist/demo_floating_axes.html
    :align: center
+   :scale: 50
+
+   Demo Floating Axes

 axisartist namespace
 ====================
@@ -149,6 +167,9 @@ In summary, all these changes was to support
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_floating_axis_001.png
    :target: ../../gallery/axisartist/demo_floating_axis.html
    :align: center
+   :scale: 50
+
+   Demo Floating Axis

 *mpl_toolkits.axisartist.Axes* class defines a *axis* attribute, which
 is a dictionary of AxisArtist instances. By default, the dictionary
@@ -310,6 +331,9 @@ using "set_axis_direction" method. ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axis_direction01_001.png
    :target: ../../gallery/axisartist/simple_axis_direction01.html
    :align: center
+   :scale: 50
+
+   Simple Axis Direction01

 The parameter for set_axis_direction is one of ["left", "right",
 "bottom", "top"].
@@ -335,6 +359,7 @@ You must understand some underlying concept of directions.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_axis_direction_001.png
    :target: ../../gallery/axisartist/axis_direction.html
    :align: center
+   :scale: 50

 On the other hand, there is a concept of "axis_direction". This is a
 default setting of above properties for each, "bottom", "left", "top",
@@ -360,6 +385,9 @@ direction can be more clear with curved axis.
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_axis_direction_001.png
    :target: ../../gallery/axisartist/demo_axis_direction.html
    :align: center
+   :scale: 50
+
+   Demo Axis Direction

 The axis_direction can be adjusted in the AxisArtist level, or in the
 level of its child artists, i.e., ticks, ticklabels, and axis-label. ::
@@ -391,6 +419,9 @@ default direction). ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axis_direction03_001.png
    :target: ../../gallery/axisartist/simple_axis_direction03.html
    :align: center
+   :scale: 50
+
+   Simple Axis Direction03

 So, in summary,

@@ -426,6 +457,9 @@ Alignment of TickLabels are treated specially. See below
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_ticklabel_alignment_001.png
    :target: ../../gallery/axisartist/demo_ticklabel_alignment.html
    :align: center
+   :scale: 50
+
+   Demo Ticklabel Alignment

 Adjusting pad
 -------------
@@ -441,6 +475,9 @@ Or ticklabels and axis-label ::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_simple_axis_pad_001.png
    :target: ../../gallery/axisartist/simple_axis_pad.html
    :align: center
+   :scale: 50
+
+   Simple Axis Pad

 GridHelper
 ==========
@@ -527,6 +564,9 @@ coordinates, or you may use Parasite Axes for convenience.::
 .. figure:: ../../gallery/axisartist/images/sphx_glr_demo_curvelinear_grid_001.png
    :target: ../../gallery/axisartist/demo_curvelinear_grid.html
    :align: center
+   :scale: 50
+
+   Demo CurveLinear Grid

 FloatingAxis
 ============
diff --git a/tutorials/toolkits/mplot3d.py b/tutorials/toolkits/mplot3d.py
index 86479dbabb..d5ab4f2b10 100644
--- a/tutorials/toolkits/mplot3d.py
+++ b/tutorials/toolkits/mplot3d.py
@@ -8,8 +8,12 @@ Generating 3D plots using the mplot3d toolkit.
 .. currentmodule:: mpl_toolkits.mplot3d

 .. contents::
-   :backlinks: none
+      :backlinks: none

+.. _toolkit_mplot3d-tutorial:
+
+Getting started
+---------------
 3D Axes (of class `.Axes3D`) are created by passing the ``projection="3d"``
 keyword argument to `.Figure.add_subplot`::

@@ -17,15 +21,9 @@ keyword argument to `.Figure.add_subplot`::
    fig = plt.figure()
    ax = fig.add_subplot(projection='3d')

-Multiple 3D subplots can be added on the same figure, as for 2D subplots.
-
-.. figure:: ../../gallery/mplot3d/images/sphx_glr_subplot3d_001.png
-   :target: ../../gallery/mplot3d/subplot3d.html
-   :align: center
-
 .. versionchanged:: 1.0.0
-   Prior to Matplotlib 1.0.0, only a single `.Axes3D` could be created per
-   figure; it needed to be directly instantiated as ``ax = Axes3D(fig)``.
+   Prior to Matplotlib 1.0.0, `.Axes3D` needed to be directly instantiated with
+   ``from mpl_toolkits.mplot3d import Axes3D; ax = Axes3D(fig)``.

 .. versionchanged:: 3.2.0
    Prior to Matplotlib 3.2.0, it was necessary to explicitly import the
@@ -38,79 +36,104 @@ toolkit.
 .. _plot3d:

 Line plots
-==========
+====================
+.. automethod:: Axes3D.plot

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_lines3d_001.png
    :target: ../../gallery/mplot3d/lines3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.plot
+   Lines3d

 .. _scatter3d:

 Scatter plots
 =============
+.. automethod:: Axes3D.scatter

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_scatter3d_001.png
    :target: ../../gallery/mplot3d/scatter3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.scatter
+   Scatter3d

 .. _wireframe:

 Wireframe plots
 ===============
+.. automethod:: Axes3D.plot_wireframe

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_wire3d_001.png
    :target: ../../gallery/mplot3d/wire3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.plot_wireframe
+   Wire3d

 .. _surface:

 Surface plots
 =============
+.. automethod:: Axes3D.plot_surface

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_surface3d_001.png
    :target: ../../gallery/mplot3d/surface3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.plot_surface
+   Surface3d
+
+   Surface3d 2
+
+   Surface3d 3

 .. _trisurface:

 Tri-Surface plots
 =================
+.. automethod:: Axes3D.plot_trisurf

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_trisurf3d_001.png
    :target: ../../gallery/mplot3d/trisurf3d.html
    :align: center
+   :scale: 50
+
+   Trisurf3d

-.. automethod:: Axes3D.plot_trisurf

 .. _contour3d:

 Contour plots
 =============
+.. automethod:: Axes3D.contour

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_contour3d_001.png
    :target: ../../gallery/mplot3d/contour3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.contour
+   Contour3d
+
+   Contour3d 2
+
+   Contour3d 3

 .. _contourf3d:

 Filled contour plots
 ====================
+.. automethod:: Axes3D.contourf

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_contourf3d_001.png
    :target: ../../gallery/mplot3d/contourf3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.contourf
+   Contourf3d
+
+   Contourf3d 2

 .. versionadded:: 1.1.0
    The feature demoed in the second contourf3d example was enabled as a
@@ -119,52 +142,84 @@ Filled contour plots
 .. _polygon3d:

 Polygon plots
-=============
+====================
+.. automethod:: Axes3D.add_collection3d

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_polys3d_001.png
    :target: ../../gallery/mplot3d/polys3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.add_collection3d
+   Polys3d

 .. _bar3d:

 Bar plots
-=========
+====================
+.. automethod:: Axes3D.bar

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_bars3d_001.png
    :target: ../../gallery/mplot3d/bars3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.bar
+   Bars3d

 .. _quiver3d:

 Quiver
-======
+====================
+.. automethod:: Axes3D.quiver

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_quiver3d_001.png
    :target: ../../gallery/mplot3d/quiver3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.quiver
+   Quiver3d

 .. _2dcollections3d:

 2D plots in 3D
-==============
+====================
 .. figure:: ../../gallery/mplot3d/images/sphx_glr_2dcollections3d_001.png
    :target: ../../gallery/mplot3d/2dcollections3d.html
    :align: center
+   :scale: 50
+
+   2dcollections3d

 .. _text3d:

 Text
-====
+====================
+.. automethod:: Axes3D.text

 .. figure:: ../../gallery/mplot3d/images/sphx_glr_text3d_001.png
    :target: ../../gallery/mplot3d/text3d.html
    :align: center
+   :scale: 50

-.. automethod:: Axes3D.text
+   Text3d
+
+.. _3dsubplots:
+
+Subplotting
+====================
+Having multiple 3D plots in a single figure is the same
+as it is for 2D plots. Also, you can have both 2D and 3D plots
+in the same figure.
+
+.. versionadded:: 1.0.0
+   Subplotting 3D plots was added in v1.0.0.  Earlier version can not
+   do this.
+
+.. figure:: ../../gallery/mplot3d/images/sphx_glr_subplot3d_001.png
+   :target: ../../gallery/mplot3d/subplot3d.html
+   :align: center
+   :scale: 50
+
+   Subplot3d
+
+   Mixed Subplots
 """
diff --git a/versioneer.py b/versioneer.py
new file mode 100644
index 0000000000..304372b5bf
--- /dev/null
+++ b/versioneer.py
@@ -0,0 +1,1704 @@
+
+# Version: 0.15 +matplotlib modifications to avoid the need for setup.cfg to exist.
+
+"""
+The Versioneer
+==============
+
+* like a rocketeer, but for versions!
+* https://github.com/warner/python-versioneer
+* Brian Warner
+* License: Public Domain
+* Compatible With: python2.6, 2.7, 3.2, 3.3, 3.4, and pypy
+* [![Latest Version]
+(https://pypip.in/version/versioneer/badge.svg?style=flat)
+](https://pypi.python.org/pypi/versioneer/)
+* [![Build Status]
+(https://travis-ci.org/warner/python-versioneer.png?branch=master)
+](https://travis-ci.org/warner/python-versioneer)
+
+This is a tool for managing a recorded version number in distutils-based
+python projects. The goal is to remove the tedious and error-prone "update
+the embedded version string" step from your release process. Making a new
+release should be as easy as recording a new tag in your version-control
+system, and maybe making new tarballs.
+
+
+## Quick Install
+
+* `pip install versioneer` to somewhere to your $PATH
+* add a `[versioneer]` section to your setup.cfg (see below)
+* run `versioneer install` in your source tree, commit the results
+
+## Version Identifiers
+
+Source trees come from a variety of places:
+
+* a version-control system checkout (mostly used by developers)
+* a nightly tarball, produced by build automation
+* a snapshot tarball, produced by a web-based VCS browser, like github's
+  "tarball from tag" feature
+* a release tarball, produced by "setup.py sdist", distributed through PyPI
+
+Within each source tree, the version identifier (either a string or a number,
+this tool is format-agnostic) can come from a variety of places:
+
+* ask the VCS tool itself, e.g. "git describe" (for checkouts), which knows
+  about recent "tags" and an absolute revision-id
+* the name of the directory into which the tarball was unpacked
+* an expanded VCS keyword ($Id$, etc)
+* a `_version.py` created by some earlier build step
+
+For released software, the version identifier is closely related to a VCS
+tag. Some projects use tag names that include more than just the version
+string (e.g. "myproject-1.2" instead of just "1.2"), in which case the tool
+needs to strip the tag prefix to extract the version identifier. For
+unreleased software (between tags), the version identifier should provide
+enough information to help developers recreate the same tree, while also
+giving them an idea of roughly how old the tree is (after version 1.2, before
+version 1.3). Many VCS systems can report a description that captures this,
+for example `git describe --tags --dirty --always` reports things like
+"0.7-1-g574ab98-dirty" to indicate that the checkout is one revision past the
+0.7 tag, has a unique revision id of "574ab98", and is "dirty" (it has
+uncommitted changes.
+
+The version identifier is used for multiple purposes:
+
+* to allow the module to self-identify its version: `myproject.__version__`
+* to choose a name and prefix for a 'setup.py sdist' tarball
+
+## Theory of Operation
+
+Versioneer works by adding a special `_version.py` file into your source
+tree, where your `__init__.py` can import it. This `_version.py` knows how to
+dynamically ask the VCS tool for version information at import time.
+
+`_version.py` also contains `$Revision$` markers, and the installation
+process marks `_version.py` to have this marker rewritten with a tag name
+during the `git archive` command. As a result, generated tarballs will
+contain enough information to get the proper version.
+
+To allow `setup.py` to compute a version too, a `versioneer.py` is added to
+the top level of your source tree, next to `setup.py` and the `setup.cfg`
+that configures it. This overrides several distutils/setuptools commands to
+compute the version when invoked, and changes `setup.py build` and `setup.py
+sdist` to replace `_version.py` with a small static file that contains just
+the generated version data.
+
+## Installation
+
+First, decide on values for the following configuration variables:
+
+* `VCS`: the version control system you use. Currently accepts "git".
+
+* `style`: the style of version string to be produced. See "Styles" below for
+  details. Defaults to "pep440", which looks like
+  `TAG[+DISTANCE.gSHORTHASH[.dirty]]`.
+
+* `versionfile_source`:
+
+  A project-relative pathname into which the generated version strings should
+  be written. This is usually a `_version.py` next to your project's main
+  `__init__.py` file, so it can be imported at runtime. If your project uses
+  `src/myproject/__init__.py`, this should be `src/myproject/_version.py`.
+  This file should be checked in to your VCS as usual: the copy created below
+  by `setup.py setup_versioneer` will include code that parses expanded VCS
+  keywords in generated tarballs. The 'build' and 'sdist' commands will
+  replace it with a copy that has just the calculated version string.
+
+  This must be set even if your project does not have any modules (and will
+  therefore never import `_version.py`), since "setup.py sdist" -based trees
+  still need somewhere to record the pre-calculated version strings. Anywhere
+  in the source tree should do. If there is a `__init__.py` next to your
+  `_version.py`, the `setup.py setup_versioneer` command (described below)
+  will append some `__version__`-setting assignments, if they aren't already
+  present.
+
+* `versionfile_build`:
+
+  Like `versionfile_source`, but relative to the build directory instead of
+  the source directory. These will differ when your setup.py uses
+  'package_dir='. If you have `package_dir={'myproject': 'src/myproject'}`,
+  then you will probably have `versionfile_build='myproject/_version.py'` and
+  `versionfile_source='src/myproject/_version.py'`.
+
+  If this is set to None, then `setup.py build` will not attempt to rewrite
+  any `_version.py` in the built tree. If your project does not have any
+  libraries (e.g. if it only builds a script), then you should use
+  `versionfile_build = None` and override `distutils.command.build_scripts`
+  to explicitly insert a copy of `versioneer.get_version()` into your
+  generated script.
+
+* `tag_prefix`:
+
+  a string, like 'PROJECTNAME-', which appears at the start of all VCS tags.
+  If your tags look like 'myproject-1.2.0', then you should use
+  tag_prefix='myproject-'. If you use unprefixed tags like '1.2.0', this
+  should be an empty string.
+
+* `parentdir_prefix`:
+
+  a optional string, frequently the same as tag_prefix, which appears at the
+  start of all unpacked tarball filenames. If your tarball unpacks into
+  'myproject-1.2.0', this should be 'myproject-'. To disable this feature,
+  just omit the field from your `setup.cfg`.
+
+This tool provides one script, named `versioneer`. That script has one mode,
+"install", which writes a copy of `versioneer.py` into the current directory
+and runs `versioneer.py setup` to finish the installation.
+
+To versioneer-enable your project:
+
+* 1: Modify your `setup.cfg`, adding a section named `[versioneer]` and
+  populating it with the configuration values you decided earlier (note that
+  the option names are not case-sensitive):
+
+  ````
+  [versioneer]
+  VCS = git
+  style = pep440
+  versionfile_source = src/myproject/_version.py
+  versionfile_build = myproject/_version.py
+  tag_prefix = ""
+  parentdir_prefix = myproject-
+  ````
+
+* 2: Run `versioneer install`. This will do the following:
+
+  * copy `versioneer.py` into the top of your source tree
+  * create `_version.py` in the right place (`versionfile_source`)
+  * modify your `__init__.py` (if one exists next to `_version.py`) to define
+    `__version__` (by calling a function from `_version.py`)
+  * modify your `MANIFEST.in` to include both `versioneer.py` and the
+    generated `_version.py` in sdist tarballs
+
+  `versioneer install` will complain about any problems it finds with your
+  `setup.py` or `setup.cfg`. Run it multiple times until you have fixed all
+  the problems.
+
+* 3: add a `import versioneer` to your setup.py, and add the following
+  arguments to the setup() call:
+
+        version=versioneer.get_version(),
+        cmdclass=versioneer.get_cmdclass(),
+
+* 4: commit these changes to your VCS. To make sure you won't forget,
+  `versioneer install` will mark everything it touched for addition using
+  `git add`. Don't forget to add `setup.py` and `setup.cfg` too.
+
+## Post-Installation Usage
+
+Once established, all uses of your tree from a VCS checkout should get the
+current version string. All generated tarballs should include an embedded
+version string (so users who unpack them will not need a VCS tool installed).
+
+If you distribute your project through PyPI, then the release process should
+boil down to two steps:
+
+* 1: git tag 1.0
+* 2: python setup.py register sdist upload
+
+If you distribute it through github (i.e. users use github to generate
+tarballs with `git archive`), the process is:
+
+* 1: git tag 1.0
+* 2: git push; git push --tags
+
+Versioneer will report "0+untagged.NUMCOMMITS.gHASH" until your tree has at
+least one tag in its history.
+
+## Version-String Flavors
+
+Code which uses Versioneer can learn about its version string at runtime by
+importing `_version` from your main `__init__.py` file and running the
+`get_versions()` function. From the "outside" (e.g. in `setup.py`), you can
+import the top-level `versioneer.py` and run `get_versions()`.
+
+Both functions return a dictionary with different flavors of version
+information:
+
+* `['version']`: A condensed version string, rendered using the selected
+  style. This is the most commonly used value for the project's version
+  string. The default "pep440" style yields strings like `0.11`,
+  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the "Styles" section
+  below for alternative styles.
+
+* `['full-revisionid']`: detailed revision identifier. For Git, this is the
+  full SHA1 commit id, e.g. "1076c978a8d3cfc70f408fe5974aa6c092c949ac".
+
+* `['dirty']`: a boolean, True if the tree has uncommitted changes. Note that
+  this is only accurate if run in a VCS checkout, otherwise it is likely to
+  be False or None
+
+* `['error']`: if the version string could not be computed, this will be set
+  to a string describing the problem, otherwise it will be None. It may be
+  useful to throw an exception in setup.py if this is set, to avoid e.g.
+  creating tarballs with a version string of "unknown".
+
+Some variants are more useful than others. Including `full-revisionid` in a
+bug report should allow developers to reconstruct the exact code being tested
+(or indicate the presence of local changes that should be shared with the
+developers). `version` is suitable for display in an "about" box or a CLI
+`--version` output: it can be easily compared against release notes and lists
+of bugs fixed in various releases.
+
+The installer adds the following text to your `__init__.py` to place a basic
+version in `YOURPROJECT.__version__`:
+
+    from ._version import get_versions
+    __version__ = get_versions()['version']
+    del get_versions
+
+## Styles
+
+The setup.cfg `style=` configuration controls how the VCS information is
+rendered into a version string.
+
+The default style, "pep440", produces a PEP440-compliant string, equal to the
+un-prefixed tag name for actual releases, and containing an additional "local
+version" section with more detail for in-between builds. For Git, this is
+TAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags
+--dirty --always`. For example "0.11+2.g1076c97.dirty" indicates that the
+tree is like the "1076c97" commit but has uncommitted changes (".dirty"), and
+that this commit is two revisions ("+2") beyond the "0.11" tag. For released
+software (exactly equal to a known tag), the identifier will only contain the
+stripped tag, e.g. "0.11".
+
+Other styles are available. See details.md in the Versioneer source tree for
+descriptions.
+
+## Debugging
+
+Versioneer tries to avoid fatal errors: if something goes wrong, it will tend
+to return a version of "0+unknown". To investigate the problem, run `setup.py
+version`, which will run the version-lookup code in a verbose mode, and will
+display the full contents of `get_versions()` (including the `error` string,
+which may help identify what went wrong).
+
+## Updating Versioneer
+
+To upgrade your project to a new release of Versioneer, do the following:
+
+* install the new Versioneer (`pip install -U versioneer` or equivalent)
+* edit `setup.cfg`, if necessary, to include any new configuration settings
+  indicated by the release notes
+* re-run `versioneer install` in your source tree, to replace
+  `SRC/_version.py`
+* commit any changed files
+
+### Upgrading to 0.15
+
+Starting with this version, Versioneer is configured with a `[versioneer]`
+section in your `setup.cfg` file. Earlier versions required the `setup.py` to
+set attributes on the `versioneer` module immediately after import. The new
+version will refuse to run (raising an exception during import) until you
+have provided the necessary `setup.cfg` section.
+
+In addition, the Versioneer package provides an executable named
+`versioneer`, and the installation process is driven by running `versioneer
+install`. In 0.14 and earlier, the executable was named
+`versioneer-installer` and was run without an argument.
+
+### Upgrading to 0.14
+
+0.14 changes the format of the version string. 0.13 and earlier used
+hyphen-separated strings like "0.11-2-g1076c97-dirty". 0.14 and beyond use a
+plus-separated "local version" section strings, with dot-separated
+components, like "0.11+2.g1076c97". PEP440-strict tools did not like the old
+format, but should be ok with the new one.
+
+### Upgrading from 0.11 to 0.12
+
+Nothing special.
+
+### Upgrading from 0.10 to 0.11
+
+You must add a `versioneer.VCS = "git"` to your `setup.py` before re-running
+`setup.py setup_versioneer`. This will enable the use of additional
+version-control systems (SVN, etc) in the future.
+
+## Future Directions
+
+This tool is designed to make it easily extended to other version-control
+systems: all VCS-specific components are in separate directories like
+src/git/ . The top-level `versioneer.py` script is assembled from these
+components by running make-versioneer.py . In the future, make-versioneer.py
+will take a VCS name as an argument, and will construct a version of
+`versioneer.py` that is specific to the given VCS. It might also take the
+configuration arguments that are currently provided manually during
+installation by editing setup.py . Alternatively, it might go the other
+direction and include code from all supported VCS systems, reducing the
+number of intermediate scripts.
+
+
+## License
+
+To make Versioneer easier to embed, all its code is hereby released into the
+public domain. The `_version.py` that it creates is also in the public
+domain.
+
+"""
+
+from __future__ import print_function
+try:
+    import configparser
+except ImportError:
+    import ConfigParser as configparser
+import errno
+import json
+import os
+import re
+import subprocess
+import sys
+
+
+class VersioneerConfig:
+    pass
+
+
+def get_root():
+    # we require that all commands are run from the project root, i.e. the
+    # directory that contains setup.py, setup.cfg, and versioneer.py .
+    root = os.path.realpath(os.path.abspath(os.getcwd()))
+    setup_py = os.path.join(root, "setup.py")
+    versioneer_py = os.path.join(root, "versioneer.py")
+    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):
+        # allow 'python path/to/setup.py COMMAND'
+        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))
+        setup_py = os.path.join(root, "setup.py")
+        versioneer_py = os.path.join(root, "versioneer.py")
+    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):
+        err = ("Versioneer was unable to run the project root directory. "
+               "Versioneer requires setup.py to be executed from "
+               "its immediate directory (like 'python setup.py COMMAND'), "
+               "or in a way that lets it use sys.argv[0] to find the root "
+               "(like 'python path/to/setup.py COMMAND').")
+        raise VersioneerBadRootError(err)
+    try:
+        # Certain runtime workflows (setup.py install/develop in a setuptools
+        # tree) execute all dependencies in a single python process, so
+        # "versioneer" may be imported multiple times, and python's shared
+        # module-import table will cache the first one. So we can't use
+        # os.path.dirname(__file__), as that will find whichever
+        # versioneer.py was first imported, even in later projects.
+        me = os.path.realpath(os.path.abspath(__file__))
+        if os.path.splitext(me)[0] != os.path.splitext(versioneer_py)[0]:
+            print("Warning: build in %s is using versioneer.py from %s"
+                  % (os.path.dirname(me), versioneer_py))
+    except NameError:
+        pass
+    return root
+
+
+def get_config_from_root(root):
+    # This might raise EnvironmentError (if setup.cfg is missing), or
+    # configparser.NoSectionError (if it lacks a [versioneer] section), or
+    # configparser.NoOptionError (if it lacks "VCS="). See the docstring at
+    # the top of versioneer.py for instructions on writing your setup.cfg .
+    setup_cfg = os.path.join(root, "setup.cfg")
+
+
+    parser = configparser.SafeConfigParser()
+    if os.path.exists(setup_cfg):
+        with open(setup_cfg, "r") as f:
+            parser.readfp(f)
+
+    def get(parser, name):
+        if parser.has_option("versioneer", name):
+            return parser.get("versioneer", name)
+        return None
+    cfg = VersioneerConfig()
+
+    VCS = get(parser, "VCS") or 'git'
+    cfg.VCS = VCS
+    cfg.style = get(parser, "style") or "pep440"
+    version_file =  os.path.join('lib', 'matplotlib', '_version.py')
+    cfg.versionfile_source = get(parser, "versionfile_source") or version_file
+    cfg.versionfile_build = get(parser, "versionfile_build") or os.path.join('matplotlib', '_version.py')
+    cfg.tag_prefix = get(parser, "tag_prefix") or 'v'
+    cfg.parentdir_prefix = get(parser, "parentdir_prefix") or 'matplotlib-'
+    cfg.verbose = get(parser, "verbose")
+    return cfg
+
+
+class NotThisMethod(Exception):
+    pass
+
+# these dictionaries contain VCS-specific tools
+LONG_VERSION_PY = {}
+HANDLERS = {}
+
+
+def register_vcs_handler(vcs, method):  # decorator
+    def decorate(f):
+        if vcs not in HANDLERS:
+            HANDLERS[vcs] = {}
+        HANDLERS[vcs][method] = f
+        return f
+    return decorate
+
+
+def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False):
+    assert isinstance(commands, list)
+    p = None
+    for c in commands:
+        try:
+            dispcmd = str([c] + args)
+            # remember shell=False, so use git.cmd on windows, not just git
+            p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE,
+                                 stderr=(subprocess.PIPE if hide_stderr
+                                         else None))
+            break
+        except EnvironmentError:
+            e = sys.exc_info()[1]
+            if e.errno == errno.ENOENT:
+                continue
+            if verbose:
+                print("unable to run %s" % dispcmd)
+                print(e)
+            return None
+    else:
+        if verbose:
+            print("unable to find command, tried %s" % (commands,))
+        return None
+    stdout = p.communicate()[0].strip()
+    if sys.version_info[0] >= 3:
+        stdout = stdout.decode()
+    if p.returncode != 0:
+        if verbose:
+            print("unable to run %s (error)" % dispcmd)
+        return None
+    return stdout
+LONG_VERSION_PY['git'] = r'''
+# This file helps to compute a version number in source trees obtained from
+# git-archive tarball (such as those provided by githubs download-from-tag
+# feature). Distribution tarballs (built by setup.py sdist) and build
+# directories (produced by setup.py build) will contain a much shorter file
+# that just contains the computed version number.
+
+# This file is released into the public domain. Generated by
+# versioneer-0.15 (https://github.com/warner/python-versioneer)
+
+import errno
+import os
+import re
+import subprocess
+import sys
+
+
+def get_keywords():
+    # these strings will be replaced by git during git-archive.
+    # setup.py/versioneer.py will grep for the variable names, so they must
+    # each be defined on a line of their own. _version.py will just call
+    # get_keywords().
+    git_refnames = "%(DOLLAR)sFormat:%%d%(DOLLAR)s"
+    git_full = "%(DOLLAR)sFormat:%%H%(DOLLAR)s"
+    keywords = {"refnames": git_refnames, "full": git_full}
+    return keywords
+
+
+class VersioneerConfig:
+    pass
+
+
+def get_config():
+    # these strings are filled in when 'setup.py versioneer' creates
+    # _version.py
+    cfg = VersioneerConfig()
+    cfg.VCS = "git"
+    cfg.style = "%(STYLE)s"
+    cfg.tag_prefix = "%(TAG_PREFIX)s"
+    cfg.parentdir_prefix = "%(PARENTDIR_PREFIX)s"
+    cfg.versionfile_source = "%(VERSIONFILE_SOURCE)s"
+    cfg.verbose = False
+    return cfg
+
+
+class NotThisMethod(Exception):
+    pass
+
+
+LONG_VERSION_PY = {}
+HANDLERS = {}
+
+
+def register_vcs_handler(vcs, method):  # decorator
+    def decorate(f):
+        if vcs not in HANDLERS:
+            HANDLERS[vcs] = {}
+        HANDLERS[vcs][method] = f
+        return f
+    return decorate
+
+
+def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False):
+    assert isinstance(commands, list)
+    p = None
+    for c in commands:
+        try:
+            dispcmd = str([c] + args)
+            # remember shell=False, so use git.cmd on windows, not just git
+            p = subprocess.Popen([c] + args, cwd=cwd, stdout=subprocess.PIPE,
+                                 stderr=(subprocess.PIPE if hide_stderr
+                                         else None))
+            break
+        except EnvironmentError:
+            e = sys.exc_info()[1]
+            if e.errno == errno.ENOENT:
+                continue
+            if verbose:
+                print("unable to run %%s" %% dispcmd)
+                print(e)
+            return None
+    else:
+        if verbose:
+            print("unable to find command, tried %%s" %% (commands,))
+        return None
+    stdout = p.communicate()[0].strip()
+    if sys.version_info[0] >= 3:
+        stdout = stdout.decode()
+    if p.returncode != 0:
+        if verbose:
+            print("unable to run %%s (error)" %% dispcmd)
+        return None
+    return stdout
+
+
+def versions_from_parentdir(parentdir_prefix, root, verbose):
+    # Source tarballs conventionally unpack into a directory that includes
+    # both the project name and a version string.
+    dirname = os.path.basename(root)
+    if not dirname.startswith(parentdir_prefix):
+        if verbose:
+            print("guessing rootdir is '%%s', but '%%s' doesn't start with "
+                  "prefix '%%s'" %% (root, dirname, parentdir_prefix))
+        raise NotThisMethod("rootdir doesn't start with parentdir_prefix")
+    return {"version": dirname[len(parentdir_prefix):],
+            "full-revisionid": None,
+            "dirty": False, "error": None}
+
+
+@register_vcs_handler("git", "get_keywords")
+def git_get_keywords(versionfile_abs):
+    # the code embedded in _version.py can just fetch the value of these
+    # keywords. When used from setup.py, we don't want to import _version.py,
+    # so we do it with a regexp instead. This function is not used from
+    # _version.py.
+    keywords = {}
+    try:
+        f = open(versionfile_abs, "r")
+        for line in f.readlines():
+            if line.strip().startswith("git_refnames ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["refnames"] = mo.group(1)
+            if line.strip().startswith("git_full ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["full"] = mo.group(1)
+        f.close()
+    except EnvironmentError:
+        pass
+    return keywords
+
+
+@register_vcs_handler("git", "keywords")
+def git_versions_from_keywords(keywords, tag_prefix, verbose):
+    if not keywords:
+        raise NotThisMethod("no keywords at all, weird")
+    refnames = keywords["refnames"].strip()
+    if refnames.startswith("$Format"):
+        if verbose:
+            print("keywords are unexpanded, not using")
+        raise NotThisMethod("unexpanded keywords, not a git-archive tarball")
+    refs = set([r.strip() for r in refnames.strip("()").split(",")])
+    # starting in git-1.8.3, tags are listed as "tag: foo-1.0" instead of
+    # just "foo-1.0". If we see a "tag: " prefix, prefer those.
+    TAG = "tag: "
+    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])
+    if not tags:
+        # Either we're using git < 1.8.3, or there really are no tags. We use
+        # a heuristic: assume all version tags have a digit. The old git %%d
+        # expansion behaves like git log --decorate=short and strips out the
+        # refs/heads/ and refs/tags/ prefixes that would let us distinguish
+        # between branches and tags. By ignoring refnames without digits, we
+        # filter out many common branch names like "release" and
+        # "stabilization", as well as "HEAD" and "master".
+        tags = set([r for r in refs if re.search(r'\d', r)])
+        if verbose:
+            print("discarding '%%s', no digits" %% ",".join(refs-tags))
+    if verbose:
+        print("likely tags: %%s" %% ",".join(sorted(tags)))
+    for ref in sorted(tags):
+        # sorting will prefer e.g. "2.0" over "2.0rc1"
+        if ref.startswith(tag_prefix):
+            r = ref[len(tag_prefix):]
+            if verbose:
+                print("picking %%s" %% r)
+            return {"version": r,
+                    "full-revisionid": keywords["full"].strip(),
+                    "dirty": False, "error": None
+                    }
+    # no suitable tags, so version is "0+unknown", but full hex is still there
+    if verbose:
+        print("no suitable tags, using unknown + full revision id")
+    return {"version": "0+unknown",
+            "full-revisionid": keywords["full"].strip(),
+            "dirty": False, "error": "no suitable tags"}
+
+
+@register_vcs_handler("git", "pieces_from_vcs")
+def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):
+    # this runs 'git' from the root of the source tree. This only gets called
+    # if the git-archive 'subst' keywords were *not* expanded, and
+    # _version.py hasn't already been rewritten with a short version string,
+    # meaning we're inside a checked out source tree.
+
+    if not os.path.exists(os.path.join(root, ".git")):
+        if verbose:
+            print("no .git in %%s" %% root)
+        raise NotThisMethod("no .git directory")
+
+    GITS = ["git"]
+    if sys.platform == "win32":
+        GITS = ["git.cmd", "git.exe"]
+    # if there is a tag, this yields TAG-NUM-gHEX[-dirty]
+    # if there are no tags, this yields HEX[-dirty] (no NUM)
+    describe_out = run_command(GITS, ["describe", "--tags", "--dirty",
+                                      "--always", "--long"],
+                               cwd=root)
+    # --long was added in git-1.5.5
+    if describe_out is None:
+        raise NotThisMethod("'git describe' failed")
+    describe_out = describe_out.strip()
+    full_out = run_command(GITS, ["rev-parse", "HEAD"], cwd=root)
+    if full_out is None:
+        raise NotThisMethod("'git rev-parse' failed")
+    full_out = full_out.strip()
+
+    pieces = {}
+    pieces["long"] = full_out
+    pieces["short"] = full_out[:7]  # maybe improved later
+    pieces["error"] = None
+
+    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]
+    # TAG might have hyphens.
+    git_describe = describe_out
+
+    # look for -dirty suffix
+    dirty = git_describe.endswith("-dirty")
+    pieces["dirty"] = dirty
+    if dirty:
+        git_describe = git_describe[:git_describe.rindex("-dirty")]
+
+    # now we have TAG-NUM-gHEX or HEX
+
+    if "-" in git_describe:
+        # TAG-NUM-gHEX
+        mo = re.search(r'^(.+)-(\d+)-g([0-9a-f]+)$', git_describe)
+        if not mo:
+            # unparsable. Maybe git-describe is misbehaving?
+            pieces["error"] = ("unable to parse git-describe output: '%%s'"
+                               %% describe_out)
+            return pieces
+
+        # tag
+        full_tag = mo.group(1)
+        if not full_tag.startswith(tag_prefix):
+            if verbose:
+                fmt = "tag '%%s' doesn't start with prefix '%%s'"
+                print(fmt %% (full_tag, tag_prefix))
+            pieces["error"] = ("tag '%%s' doesn't start with prefix '%%s'"
+                               %% (full_tag, tag_prefix))
+            return pieces
+        pieces["closest-tag"] = full_tag[len(tag_prefix):]
+
+        # distance: number of commits since tag
+        pieces["distance"] = int(mo.group(2))
+
+        # commit: short hex revision ID
+        pieces["short"] = mo.group(3)
+
+    else:
+        # HEX: no tags
+        pieces["closest-tag"] = None
+        count_out = run_command(GITS, ["rev-list", "HEAD", "--count"],
+                                cwd=root)
+        pieces["distance"] = int(count_out)  # total number of commits
+
+    return pieces
+
+
+def plus_or_dot(pieces):
+    if "+" in pieces.get("closest-tag", ""):
+        return "."
+    return "+"
+
+
+def render_pep440(pieces):
+    # now build up version string, with post-release "local version
+    # identifier". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you
+    # get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty
+
+    # exceptions:
+    # 1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += plus_or_dot(pieces)
+            rendered += "%%d.g%%s" %% (pieces["distance"], pieces["short"])
+            if pieces["dirty"]:
+                rendered += ".dirty"
+    else:
+        # exception #1
+        rendered = "0+untagged.%%d.g%%s" %% (pieces["distance"],
+                                          pieces["short"])
+        if pieces["dirty"]:
+            rendered += ".dirty"
+    return rendered
+
+
+def render_pep440_pre(pieces):
+    # TAG[.post.devDISTANCE] . No -dirty
+
+    # exceptions:
+    # 1: no tags. 0.post.devDISTANCE
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += ".post.dev%%d" %% pieces["distance"]
+    else:
+        # exception #1
+        rendered = "0.post.dev%%d" %% pieces["distance"]
+    return rendered
+
+
+def render_pep440_post(pieces):
+    # TAG[.postDISTANCE[.dev0]+gHEX] . The ".dev0" means dirty. Note that
+    # .dev0 sorts backwards (a dirty tree will appear "older" than the
+    # corresponding clean one), but you shouldn't be releasing software with
+    # -dirty anyways.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%%d" %% pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+            rendered += plus_or_dot(pieces)
+            rendered += "g%%s" %% pieces["short"]
+    else:
+        # exception #1
+        rendered = "0.post%%d" %% pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+        rendered += "+g%%s" %% pieces["short"]
+    return rendered
+
+
+def render_pep440_old(pieces):
+    # TAG[.postDISTANCE[.dev0]] . The ".dev0" means dirty.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%%d" %% pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+    else:
+        # exception #1
+        rendered = "0.post%%d" %% pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+    return rendered
+
+
+def render_git_describe(pieces):
+    # TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty
+    # --always'
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += "-%%d-g%%s" %% (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render_git_describe_long(pieces):
+    # TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty
+    # --always -long'. The distance/hash is unconditional.
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        rendered += "-%%d-g%%s" %% (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render(pieces, style):
+    if pieces["error"]:
+        return {"version": "unknown",
+                "full-revisionid": pieces.get("long"),
+                "dirty": None,
+                "error": pieces["error"]}
+
+    if not style or style == "default":
+        style = "pep440"  # the default
+
+    if style == "pep440":
+        rendered = render_pep440(pieces)
+    elif style == "pep440-pre":
+        rendered = render_pep440_pre(pieces)
+    elif style == "pep440-post":
+        rendered = render_pep440_post(pieces)
+    elif style == "pep440-old":
+        rendered = render_pep440_old(pieces)
+    elif style == "git-describe":
+        rendered = render_git_describe(pieces)
+    elif style == "git-describe-long":
+        rendered = render_git_describe_long(pieces)
+    else:
+        raise ValueError("unknown style '%%s'" %% style)
+
+    return {"version": rendered, "full-revisionid": pieces["long"],
+            "dirty": pieces["dirty"], "error": None}
+
+
+def get_versions():
+    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have
+    # __file__, we can work backwards from there to the root. Some
+    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which
+    # case we can only use expanded keywords.
+
+    cfg = get_config()
+    verbose = cfg.verbose
+
+    try:
+        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,
+                                          verbose)
+    except NotThisMethod:
+        pass
+
+    try:
+        root = os.path.realpath(__file__)
+        # versionfile_source is the relative path from the top of the source
+        # tree (where the .git directory might live) to this file. Invert
+        # this to find the root from __file__.
+        for i in cfg.versionfile_source.split('/'):
+            root = os.path.dirname(root)
+    except NameError:
+        return {"version": "0+unknown", "full-revisionid": None,
+                "dirty": None,
+                "error": "unable to find root of source tree"}
+
+    try:
+        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)
+        return render(pieces, cfg.style)
+    except NotThisMethod:
+        pass
+
+    try:
+        if cfg.parentdir_prefix:
+            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)
+    except NotThisMethod:
+        pass
+
+    return {"version": "0+unknown", "full-revisionid": None,
+            "dirty": None,
+            "error": "unable to compute version"}
+'''
+
+
+@register_vcs_handler("git", "get_keywords")
+def git_get_keywords(versionfile_abs):
+    # the code embedded in _version.py can just fetch the value of these
+    # keywords. When used from setup.py, we don't want to import _version.py,
+    # so we do it with a regexp instead. This function is not used from
+    # _version.py.
+    keywords = {}
+    try:
+        f = open(versionfile_abs, "r")
+        for line in f.readlines():
+            if line.strip().startswith("git_refnames ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["refnames"] = mo.group(1)
+            if line.strip().startswith("git_full ="):
+                mo = re.search(r'=\s*"(.*)"', line)
+                if mo:
+                    keywords["full"] = mo.group(1)
+        f.close()
+    except EnvironmentError:
+        pass
+    return keywords
+
+
+@register_vcs_handler("git", "keywords")
+def git_versions_from_keywords(keywords, tag_prefix, verbose):
+    if not keywords:
+        raise NotThisMethod("no keywords at all, weird")
+    refnames = keywords["refnames"].strip()
+    if refnames.startswith("$Format"):
+        if verbose:
+            print("keywords are unexpanded, not using")
+        raise NotThisMethod("unexpanded keywords, not a git-archive tarball")
+    refs = set([r.strip() for r in refnames.strip("()").split(",")])
+    # starting in git-1.8.3, tags are listed as "tag: foo-1.0" instead of
+    # just "foo-1.0". If we see a "tag: " prefix, prefer those.
+    TAG = "tag: "
+    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])
+    if not tags:
+        # Either we're using git < 1.8.3, or there really are no tags. We use
+        # a heuristic: assume all version tags have a digit. The old git %d
+        # expansion behaves like git log --decorate=short and strips out the
+        # refs/heads/ and refs/tags/ prefixes that would let us distinguish
+        # between branches and tags. By ignoring refnames without digits, we
+        # filter out many common branch names like "release" and
+        # "stabilization", as well as "HEAD" and "master".
+        tags = set([r for r in refs if re.search(r'\d', r)])
+        if verbose:
+            print("discarding '%s', no digits" % ",".join(refs-tags))
+    if verbose:
+        print("likely tags: %s" % ",".join(sorted(tags)))
+    for ref in sorted(tags):
+        # sorting will prefer e.g. "2.0" over "2.0rc1"
+        if ref.startswith(tag_prefix):
+            r = ref[len(tag_prefix):]
+            if verbose:
+                print("picking %s" % r)
+            return {"version": r,
+                    "full-revisionid": keywords["full"].strip(),
+                    "dirty": False, "error": None
+                    }
+    # no suitable tags, so version is "0+unknown", but full hex is still there
+    if verbose:
+        print("no suitable tags, using unknown + full revision id")
+    return {"version": "0+unknown",
+            "full-revisionid": keywords["full"].strip(),
+            "dirty": False, "error": "no suitable tags"}
+
+
+@register_vcs_handler("git", "pieces_from_vcs")
+def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):
+    # this runs 'git' from the root of the source tree. This only gets called
+    # if the git-archive 'subst' keywords were *not* expanded, and
+    # _version.py hasn't already been rewritten with a short version string,
+    # meaning we're inside a checked out source tree.
+
+    if not os.path.exists(os.path.join(root, ".git")):
+        if verbose:
+            print("no .git in %s" % root)
+        raise NotThisMethod("no .git directory")
+
+    GITS = ["git"]
+    if sys.platform == "win32":
+        GITS = ["git.cmd", "git.exe"]
+    # if there is a tag, this yields TAG-NUM-gHEX[-dirty]
+    # if there are no tags, this yields HEX[-dirty] (no NUM)
+    describe_out = run_command(GITS, ["describe", "--tags", "--dirty",
+                                      "--always", "--long"],
+                               cwd=root)
+    # --long was added in git-1.5.5
+    if describe_out is None:
+        raise NotThisMethod("'git describe' failed")
+    describe_out = describe_out.strip()
+    full_out = run_command(GITS, ["rev-parse", "HEAD"], cwd=root)
+    if full_out is None:
+        raise NotThisMethod("'git rev-parse' failed")
+    full_out = full_out.strip()
+
+    pieces = {}
+    pieces["long"] = full_out
+    pieces["short"] = full_out[:7]  # maybe improved later
+    pieces["error"] = None
+
+    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]
+    # TAG might have hyphens.
+    git_describe = describe_out
+
+    # look for -dirty suffix
+    dirty = git_describe.endswith("-dirty")
+    pieces["dirty"] = dirty
+    if dirty:
+        git_describe = git_describe[:git_describe.rindex("-dirty")]
+
+    # now we have TAG-NUM-gHEX or HEX
+
+    if "-" in git_describe:
+        # TAG-NUM-gHEX
+        mo = re.search(r'^(.+)-(\d+)-g([0-9a-f]+)$', git_describe)
+        if not mo:
+            # unparsable. Maybe git-describe is misbehaving?
+            pieces["error"] = ("unable to parse git-describe output: '%s'"
+                               % describe_out)
+            return pieces
+
+        # tag
+        full_tag = mo.group(1)
+        if not full_tag.startswith(tag_prefix):
+            if verbose:
+                fmt = "tag '%s' doesn't start with prefix '%s'"
+                print(fmt % (full_tag, tag_prefix))
+            pieces["error"] = ("tag '%s' doesn't start with prefix '%s'"
+                               % (full_tag, tag_prefix))
+            return pieces
+        pieces["closest-tag"] = full_tag[len(tag_prefix):]
+
+        # distance: number of commits since tag
+        pieces["distance"] = int(mo.group(2))
+
+        # commit: short hex revision ID
+        pieces["short"] = mo.group(3)
+
+    else:
+        # HEX: no tags
+        pieces["closest-tag"] = None
+        count_out = run_command(GITS, ["rev-list", "HEAD", "--count"],
+                                cwd=root)
+        pieces["distance"] = int(count_out)  # total number of commits
+
+    return pieces
+
+
+def do_vcs_install(manifest_in, versionfile_source, ipy):
+    GITS = ["git"]
+    if sys.platform == "win32":
+        GITS = ["git.cmd", "git.exe"]
+    files = [manifest_in, versionfile_source]
+    if ipy:
+        files.append(ipy)
+    try:
+        me = __file__
+        if me.endswith(".pyc") or me.endswith(".pyo"):
+            me = os.path.splitext(me)[0] + ".py"
+        versioneer_file = os.path.relpath(me)
+    except NameError:
+        versioneer_file = "versioneer.py"
+    files.append(versioneer_file)
+    present = False
+    try:
+        f = open(".gitattributes", "r")
+        for line in f.readlines():
+            if line.strip().startswith(versionfile_source):
+                if "export-subst" in line.strip().split()[1:]:
+                    present = True
+        f.close()
+    except EnvironmentError:
+        pass
+    if not present:
+        f = open(".gitattributes", "a+")
+        f.write("%s export-subst\n" % versionfile_source)
+        f.close()
+        files.append(".gitattributes")
+    run_command(GITS, ["add", "--"] + files)
+
+
+def versions_from_parentdir(parentdir_prefix, root, verbose):
+    # Source tarballs conventionally unpack into a directory that includes
+    # both the project name and a version string.
+    dirname = os.path.basename(root)
+    if not dirname.startswith(parentdir_prefix):
+        if verbose:
+            print("guessing rootdir is '%s', but '%s' doesn't start with "
+                  "prefix '%s'" % (root, dirname, parentdir_prefix))
+        raise NotThisMethod("rootdir doesn't start with parentdir_prefix")
+    return {"version": dirname[len(parentdir_prefix):],
+            "full-revisionid": None,
+            "dirty": False, "error": None}
+
+SHORT_VERSION_PY = """
+# This file was generated by 'versioneer.py' (0.15) from
+# revision-control system data, or from the parent directory name of an
+# unpacked source archive. Distribution tarballs contain a pre-generated copy
+# of this file.
+
+import json
+import sys
+
+version_json = '''
+%s
+'''  # END VERSION_JSON
+
+
+def get_versions():
+    return json.loads(version_json)
+"""
+
+
+def versions_from_file(filename):
+    try:
+        with open(filename) as f:
+            contents = f.read()
+    except EnvironmentError:
+        raise NotThisMethod("unable to read _version.py")
+    mo = re.search(r"version_json = '''\n(.*)'''  # END VERSION_JSON",
+                   contents, re.M | re.S)
+    if not mo:
+        raise NotThisMethod("no version_json in _version.py")
+    return json.loads(mo.group(1))
+
+
+def write_to_version_file(filename, versions):
+    os.unlink(filename)
+    contents = json.dumps(versions, sort_keys=True,
+                          indent=1, separators=(",", ": "))
+    with open(filename, "w") as f:
+        f.write(SHORT_VERSION_PY % contents)
+
+    print("set %s to '%s'" % (filename, versions["version"]))
+
+
+def plus_or_dot(pieces):
+    if "+" in pieces.get("closest-tag", ""):
+        return "."
+    return "+"
+
+
+def render_pep440(pieces):
+    # now build up version string, with post-release "local version
+    # identifier". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you
+    # get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty
+
+    # exceptions:
+    # 1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += plus_or_dot(pieces)
+            rendered += "%d.g%s" % (pieces["distance"], pieces["short"])
+            if pieces["dirty"]:
+                rendered += ".dirty"
+    else:
+        # exception #1
+        rendered = "0+untagged.%d.g%s" % (pieces["distance"],
+                                          pieces["short"])
+        if pieces["dirty"]:
+            rendered += ".dirty"
+    return rendered
+
+
+def render_pep440_pre(pieces):
+    # TAG[.post.devDISTANCE] . No -dirty
+
+    # exceptions:
+    # 1: no tags. 0.post.devDISTANCE
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += ".post.dev%d" % pieces["distance"]
+    else:
+        # exception #1
+        rendered = "0.post.dev%d" % pieces["distance"]
+    return rendered
+
+
+def render_pep440_post(pieces):
+    # TAG[.postDISTANCE[.dev0]+gHEX] . The ".dev0" means dirty. Note that
+    # .dev0 sorts backwards (a dirty tree will appear "older" than the
+    # corresponding clean one), but you shouldn't be releasing software with
+    # -dirty anyways.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%d" % pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+            rendered += plus_or_dot(pieces)
+            rendered += "g%s" % pieces["short"]
+    else:
+        # exception #1
+        rendered = "0.post%d" % pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+        rendered += "+g%s" % pieces["short"]
+    return rendered
+
+
+def render_pep440_old(pieces):
+    # TAG[.postDISTANCE[.dev0]] . The ".dev0" means dirty.
+
+    # exceptions:
+    # 1: no tags. 0.postDISTANCE[.dev0]
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"] or pieces["dirty"]:
+            rendered += ".post%d" % pieces["distance"]
+            if pieces["dirty"]:
+                rendered += ".dev0"
+    else:
+        # exception #1
+        rendered = "0.post%d" % pieces["distance"]
+        if pieces["dirty"]:
+            rendered += ".dev0"
+    return rendered
+
+
+def render_git_describe(pieces):
+    # TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty
+    # --always'
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        if pieces["distance"]:
+            rendered += "-%d-g%s" % (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render_git_describe_long(pieces):
+    # TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty
+    # --always -long'. The distance/hash is unconditional.
+
+    # exceptions:
+    # 1: no tags. HEX[-dirty]  (note: no 'g' prefix)
+
+    if pieces["closest-tag"]:
+        rendered = pieces["closest-tag"]
+        rendered += "-%d-g%s" % (pieces["distance"], pieces["short"])
+    else:
+        # exception #1
+        rendered = pieces["short"]
+    if pieces["dirty"]:
+        rendered += "-dirty"
+    return rendered
+
+
+def render(pieces, style):
+    if pieces["error"]:
+        return {"version": "unknown",
+                "full-revisionid": pieces.get("long"),
+                "dirty": None,
+                "error": pieces["error"]}
+
+    if not style or style == "default":
+        style = "pep440"  # the default
+
+    if style == "pep440":
+        rendered = render_pep440(pieces)
+    elif style == "pep440-pre":
+        rendered = render_pep440_pre(pieces)
+    elif style == "pep440-post":
+        rendered = render_pep440_post(pieces)
+    elif style == "pep440-old":
+        rendered = render_pep440_old(pieces)
+    elif style == "git-describe":
+        rendered = render_git_describe(pieces)
+    elif style == "git-describe-long":
+        rendered = render_git_describe_long(pieces)
+    else:
+        raise ValueError("unknown style '%s'" % style)
+
+    return {"version": rendered, "full-revisionid": pieces["long"],
+            "dirty": pieces["dirty"], "error": None}
+
+
+class VersioneerBadRootError(Exception):
+    pass
+
+
+def get_versions(verbose=False):
+    # returns dict with two keys: 'version' and 'full'
+
+    if "versioneer" in sys.modules:
+        # see the discussion in cmdclass.py:get_cmdclass()
+        del sys.modules["versioneer"]
+
+    root = get_root()
+    cfg = get_config_from_root(root)
+
+    assert cfg.VCS is not None, "please set [versioneer]VCS= in setup.cfg"
+    handlers = HANDLERS.get(cfg.VCS)
+    assert handlers, "unrecognized VCS '%s'" % cfg.VCS
+    verbose = verbose or cfg.verbose
+    assert cfg.versionfile_source is not None, \
+        "please set versioneer.versionfile_source"
+    assert cfg.tag_prefix is not None, "please set versioneer.tag_prefix"
+
+    versionfile_abs = os.path.join(root, cfg.versionfile_source)
+
+    # extract version from first of: _version.py, VCS command (e.g. 'git
+    # describe'), parentdir. This is meant to work for developers using a
+    # source checkout, for users of a tarball created by 'setup.py sdist',
+    # and for users of a tarball/zipball created by 'git archive' or github's
+    # download-from-tag feature or the equivalent in other VCSes.
+
+    get_keywords_f = handlers.get("get_keywords")
+    from_keywords_f = handlers.get("keywords")
+    if get_keywords_f and from_keywords_f:
+        try:
+            keywords = get_keywords_f(versionfile_abs)
+            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)
+            if verbose:
+                print("got version from expanded keyword %s" % ver)
+            return ver
+        except NotThisMethod:
+            pass
+
+    try:
+        ver = versions_from_file(versionfile_abs)
+        if verbose:
+            print("got version from file %s %s" % (versionfile_abs, ver))
+        return ver
+    except NotThisMethod:
+        pass
+
+    from_vcs_f = handlers.get("pieces_from_vcs")
+    if from_vcs_f:
+        try:
+            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)
+            ver = render(pieces, cfg.style)
+            if verbose:
+                print("got version from VCS %s" % ver)
+            return ver
+        except NotThisMethod:
+            pass
+
+    try:
+        if cfg.parentdir_prefix:
+            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)
+            if verbose:
+                print("got version from parentdir %s" % ver)
+            return ver
+    except NotThisMethod:
+        pass
+
+    if verbose:
+        print("unable to compute version")
+
+    return {"version": "0+unknown", "full-revisionid": None,
+            "dirty": None, "error": "unable to compute version"}
+
+
+def get_version():
+    return get_versions()["version"]
+
+
+def get_cmdclass():
+    if "versioneer" in sys.modules:
+        del sys.modules["versioneer"]
+        # this fixes the "python setup.py develop" case (also 'install' and
+        # 'easy_install .'), in which subdependencies of the main project are
+        # built (using setup.py bdist_egg) in the same python process. Assume
+        # a main project A and a dependency B, which use different versions
+        # of Versioneer. A's setup.py imports A's Versioneer, leaving it in
+        # sys.modules by the time B's setup.py is executed, causing B to run
+        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a
+        # sandbox that restores sys.modules to it's pre-build state, so the
+        # parent is protected against the child's "import versioneer". By
+        # removing ourselves from sys.modules here, before the child build
+        # happens, we protect the child from the parent's versioneer too.
+        # Also see https://github.com/warner/python-versioneer/issues/52
+
+    cmds = {}
+
+    # we add "version" to both distutils and setuptools
+    from distutils.core import Command
+
+    class cmd_version(Command):
+        description = "report generated version string"
+        user_options = []
+        boolean_options = []
+
+        def initialize_options(self):
+            pass
+
+        def finalize_options(self):
+            pass
+
+        def run(self):
+            vers = get_versions(verbose=True)
+            print("Version: %s" % vers["version"])
+            print(" full-revisionid: %s" % vers.get("full-revisionid"))
+            print(" dirty: %s" % vers.get("dirty"))
+            if vers["error"]:
+                print(" error: %s" % vers["error"])
+    cmds["version"] = cmd_version
+
+    # we override "build_py" in both distutils and setuptools
+    #
+    # most invocation pathways end up running build_py:
+    #  distutils/build -> build_py
+    #  distutils/install -> distutils/build ->..
+    #  setuptools/bdist_wheel -> distutils/install ->..
+    #  setuptools/bdist_egg -> distutils/install_lib -> build_py
+    #  setuptools/install -> bdist_egg ->..
+    #  setuptools/develop -> ?
+
+    from distutils.command.build_py import build_py as _build_py
+
+    class cmd_build_py(_build_py):
+        def run(self):
+            root = get_root()
+            cfg = get_config_from_root(root)
+            versions = get_versions()
+            _build_py.run(self)
+            # now locate _version.py in the new build/ directory and replace
+            # it with an updated value
+            if cfg.versionfile_build:
+                target_versionfile = os.path.join(self.build_lib,
+                                                  cfg.versionfile_build)
+                print("UPDATING %s" % target_versionfile)
+                write_to_version_file(target_versionfile, versions)
+    cmds["build_py"] = cmd_build_py
+
+    if "cx_Freeze" in sys.modules:  # cx_freeze enabled?
+        from cx_Freeze.dist import build_exe as _build_exe
+
+        class cmd_build_exe(_build_exe):
+            def run(self):
+                root = get_root()
+                cfg = get_config_from_root(root)
+                versions = get_versions()
+                target_versionfile = cfg.versionfile_source
+                print("UPDATING %s" % target_versionfile)
+                write_to_version_file(target_versionfile, versions)
+
+                _build_exe.run(self)
+                os.unlink(target_versionfile)
+                with open(cfg.versionfile_source, "w") as f:
+                    LONG = LONG_VERSION_PY[cfg.VCS]
+                    f.write(LONG %
+                            {"DOLLAR": "$",
+                             "STYLE": cfg.style,
+                             "TAG_PREFIX": cfg.tag_prefix,
+                             "PARENTDIR_PREFIX": cfg.parentdir_prefix,
+                             "VERSIONFILE_SOURCE": cfg.versionfile_source,
+                             })
+        cmds["build_exe"] = cmd_build_exe
+        del cmds["build_py"]
+
+    # we override different "sdist" commands for both environments
+    if "setuptools" in sys.modules:
+        from setuptools.command.sdist import sdist as _sdist
+    else:
+        from distutils.command.sdist import sdist as _sdist
+
+    class cmd_sdist(_sdist):
+        def run(self):
+            versions = get_versions()
+            self._versioneer_generated_versions = versions
+            # unless we update this, the command will keep using the old
+            # version
+            self.distribution.metadata.version = versions["version"]
+            return _sdist.run(self)
+
+        def make_release_tree(self, base_dir, files):
+            root = get_root()
+            cfg = get_config_from_root(root)
+            _sdist.make_release_tree(self, base_dir, files)
+            # now locate _version.py in the new base_dir directory
+            # (remembering that it may be a hardlink) and replace it with an
+            # updated value
+            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)
+            print("UPDATING %s" % target_versionfile)
+            write_to_version_file(target_versionfile,
+                                  self._versioneer_generated_versions)
+    cmds["sdist"] = cmd_sdist
+
+    return cmds
+
+
+CONFIG_ERROR = """
+setup.cfg is missing the necessary Versioneer configuration. You need
+a section like:
+
+ [versioneer]
+ VCS = git
+ style = pep440
+ versionfile_source = src/myproject/_version.py
+ versionfile_build = myproject/_version.py
+ tag_prefix = ""
+ parentdir_prefix = myproject-
+
+You will also need to edit your setup.py to use the results:
+
+ import versioneer
+ setup(version=versioneer.get_version(),
+       cmdclass=versioneer.get_cmdclass(), ...)
+
+Please read the docstring in ./versioneer.py for configuration instructions,
+edit setup.cfg, and re-run the installer or 'python versioneer.py setup'.
+"""
+
+SAMPLE_CONFIG = """
+# See the docstring in versioneer.py for instructions. Note that you must
+# re-run 'versioneer.py setup' after changing this section, and commit the
+# resulting files.
+
+[versioneer]
+#VCS = git
+#style = pep440
+#versionfile_source =
+#versionfile_build =
+#tag_prefix =
+#parentdir_prefix =
+
+"""
+
+INIT_PY_SNIPPET = """
+from ._version import get_versions
+__version__ = get_versions()['version']
+del get_versions
+"""
+
+
+def do_setup():
+    root = get_root()
+    try:
+        cfg = get_config_from_root(root)
+    except (EnvironmentError, configparser.NoSectionError,
+            configparser.NoOptionError) as e:
+        if isinstance(e, (EnvironmentError, configparser.NoSectionError)):
+            print("Adding sample versioneer config to setup.cfg",
+                  file=sys.stderr)
+            with open(os.path.join(root, "setup.cfg"), "a") as f:
+                f.write(SAMPLE_CONFIG)
+        print(CONFIG_ERROR, file=sys.stderr)
+        return 1
+
+    print(" creating %s" % cfg.versionfile_source)
+    with open(cfg.versionfile_source, "w") as f:
+        LONG = LONG_VERSION_PY[cfg.VCS]
+        f.write(LONG % {"DOLLAR": "$",
+                        "STYLE": cfg.style,
+                        "TAG_PREFIX": cfg.tag_prefix,
+                        "PARENTDIR_PREFIX": cfg.parentdir_prefix,
+                        "VERSIONFILE_SOURCE": cfg.versionfile_source,
+                        })
+
+    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),
+                       "__init__.py")
+    if os.path.exists(ipy):
+        try:
+            with open(ipy, "r") as f:
+                old = f.read()
+        except EnvironmentError:
+            old = ""
+        if INIT_PY_SNIPPET not in old:
+            print(" appending to %s" % ipy)
+            with open(ipy, "a") as f:
+                f.write(INIT_PY_SNIPPET)
+        else:
+            print(" %s unmodified" % ipy)
+    else:
+        print(" %s doesn't exist, ok" % ipy)
+        ipy = None
+
+    # Make sure both the top-level "versioneer.py" and versionfile_source
+    # (PKG/_version.py, used by runtime code) are in MANIFEST.in, so
+    # they'll be copied into source distributions. Pip won't be able to
+    # install the package without this.
+    manifest_in = os.path.join(root, "MANIFEST.in")
+    simple_includes = set()
+    try:
+        with open(manifest_in, "r") as f:
+            for line in f:
+                if line.startswith("include "):
+                    for include in line.split()[1:]:
+                        simple_includes.add(include)
+    except EnvironmentError:
+        pass
+    # That doesn't cover everything MANIFEST.in can do
+    # (http://docs.python.org/2/distutils/sourcedist.html#commands), so
+    # it might give some false negatives. Appending redundant 'include'
+    # lines is safe, though.
+    if "versioneer.py" not in simple_includes:
+        print(" appending 'versioneer.py' to MANIFEST.in")
+        with open(manifest_in, "a") as f:
+            f.write("include versioneer.py\n")
+    else:
+        print(" 'versioneer.py' already in MANIFEST.in")
+    if cfg.versionfile_source not in simple_includes:
+        print(" appending versionfile_source ('%s') to MANIFEST.in" %
+              cfg.versionfile_source)
+        with open(manifest_in, "a") as f:
+            f.write("include %s\n" % cfg.versionfile_source)
+    else:
+        print(" versionfile_source already in MANIFEST.in")
+
+    # Make VCS-specific changes. For git, this means creating/changing
+    # .gitattributes to mark _version.py for export-time keyword
+    # substitution.
+    do_vcs_install(manifest_in, cfg.versionfile_source, ipy)
+    return 0
+
+
+def scan_setup_py():
+    found = set()
+    setters = False
+    errors = 0
+    with open("setup.py", "r") as f:
+        for line in f.readlines():
+            if "import versioneer" in line:
+                found.add("import")
+            if "versioneer.get_cmdclass()" in line:
+                found.add("cmdclass")
+            if "versioneer.get_version()" in line:
+                found.add("get_version")
+            if "versioneer.VCS" in line:
+                setters = True
+            if "versioneer.versionfile_source" in line:
+                setters = True
+    if len(found) != 3:
+        print("")
+        print("Your setup.py appears to be missing some important items")
+        print("(but I might be wrong). Please make sure it has something")
+        print("roughly like the following:")
+        print("")
+        print(" import versioneer")
+        print(" setup( version=versioneer.get_version(),")
+        print("        cmdclass=versioneer.get_cmdclass(),  ...)")
+        print("")
+        errors += 1
+    if setters:
+        print("You should remove lines like 'versioneer.VCS = ' and")
+        print("'versioneer.versionfile_source = ' . This configuration")
+        print("now lives in setup.cfg, and should be removed from setup.py")
+        print("")
+        errors += 1
+    return errors
+
+if __name__ == "__main__":
+    cmd = sys.argv[1]
+    if cmd == "setup":
+        errors = do_setup()
+        errors += scan_setup_py()
+        if errors:
+            sys.exit(1)
--------
2025-01-17 17:04:24,459 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.pydata_s_xarray-3993. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-17 17:04:24,463 - INFO - Logging LLM completions for instance pydata__xarray-3993 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/Sky-T1-32B-Preview_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/pydata__xarray-3993
