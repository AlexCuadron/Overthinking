diff --git a/app/__init__.py b/app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/migrations/0001_initial.py b/app/migrations/0001_initial.py
new file mode 100644
index 0000000000..fc27548b8d
--- /dev/null
+++ b/app/migrations/0001_initial.py
@@ -0,0 +1,44 @@
+# Generated by Django 4.1.dev20211208193303 on 2025-01-17 09:18
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Baz',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Qux',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('bazes', models.ManyToManyField(related_name='quxes', to='app.Baz')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Foo',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('qux', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foos', to='app.qux')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Bar',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('another_foo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_bars', to='app.foo')),
+                ('baz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bars', to='app.baz')),
+                ('foo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bars', to='app.foo')),
+            ],
+        ),
+    ]
diff --git a/app/migrations/__init__.py b/app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/app/models.py b/app/models.py
new file mode 100644
index 0000000000..fe4000ca48
--- /dev/null
+++ b/app/models.py
@@ -0,0 +1,15 @@
+from django.db import models
+
+class Foo(models.Model):
+    qux = models.ForeignKey("app.Qux", on_delete=models.CASCADE, related_name="foos")
+
+class Bar(models.Model):
+    foo = models.ForeignKey("app.Foo", on_delete=models.CASCADE, related_name="bars")
+    another_foo = models.ForeignKey("app.Foo", on_delete=models.CASCADE, related_name="other_bars")
+    baz = models.ForeignKey("app.Baz", on_delete=models.CASCADE, related_name="bars")
+
+class Baz(models.Model):
+    pass
+
+class Qux(models.Model):
+    bazes = models.ManyToManyField("app.Baz", related_name="quxes")
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..e74f9f9fc6
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..4bbd297ade
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..285be96b50
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,56 @@
+from django.db import models
+from django.apps import apps
+from django.conf import settings
+from django.core.management import call_command
+import django
+
+# Set up Django
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'test.db',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'app',  # assuming the app is named 'app'
+    ],
+    MIGRATION_MODULES={
+        'app': 'app.migrations',
+    },
+)
+django.setup()
+
+# Import the models from app.models
+from app.models import Foo, Bar, Baz, Qux
+
+# Create the tables
+call_command('migrate', interactive=False)
+
+# Create some data
+qux = Qux.objects.create()
+baz1 = Baz.objects.create()
+baz2 = Baz.objects.create()
+qux.bazes.add(baz1, baz2)
+
+foo1 = Foo.objects.create(qux=qux)
+foo2 = Foo.objects.create(qux=qux)
+
+bar1 = Bar.objects.create(foo=foo1, another_foo=foo2, baz=baz1)
+bar2 = Bar.objects.create(foo=foo2, another_foo=foo1, baz=baz2)
+
+# Now perform the queries
+qs1 = qux.foos.all()
+qs2 = Foo.objects.filter(
+    models.Q(bars__baz__in=qux.bazes.all()) | models.Q(other_bars__baz__in=qux.bazes.all())
+)
+
+# This should work fine.
+print(qs2 | qs1)
+
+# This should raise an AssertionError
+try:
+    print(qs1 | qs2)
+except AssertionError as e:
+    print(f"AssertionError caught: {e}")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..75b5c51487
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,19 @@
+import os
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(os.path.dirname(__file__), 'db.sqlite3'),
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'app',
+]
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+
+MIGRATION_MODULES = {
+    'app': 'app.migrations',
+}
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..c87d2808de
Binary files /dev/null and b/test.db differ
