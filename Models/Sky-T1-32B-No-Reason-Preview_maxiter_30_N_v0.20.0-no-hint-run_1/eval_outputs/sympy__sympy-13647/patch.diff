diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 056d9bc497..7598400f90 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -79,17 +79,14 @@ def entry(i, j):
         return self._new(self.rows, self.cols - 1, entry)

     def _eval_col_insert(self, pos, other):
-        cols = self.cols
-
         def entry(i, j):
             if j < pos:
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
-            return self[i, j - pos - other.cols]
-
-        return self._new(self.rows, self.cols + other.cols,
-                         lambda i, j: entry(i, j))
+            else:
+                return self[i, j - other.cols]
+        return self._new(self.rows, self.cols + other.cols, entry)

     def _eval_col_join(self, other):
         rows = self.rows
diff --git a/test_col_insert.py b/test_col_insert.py
new file mode 100644
index 0000000000..896660224f
--- /dev/null
+++ b/test_col_insert.py
@@ -0,0 +1,40 @@
+import sympy as sm
+
+# Test case 1: Insert columns at position 3
+M = sm.eye(6)
+V = 2 * sm.ones(6, 2)
+result = M.col_insert(3, V)
+print("Test case 1:")
+print(result)
+
+# Test case 2: Insert columns at position 0
+M = sm.eye(6)
+V = sm.ones(6, 1)
+result = M.col_insert(0, V)
+print("\nTest case 2:")
+print(result)
+
+# Test case 3: Insert columns at the end
+M = sm.eye(6)
+V = sm.ones(6, 1)
+result = M.col_insert(M.cols, V)
+print("\nTest case 3:")
+print(result)
+
+# Test case 4: Insert zero columns
+M = sm.eye(6)
+V = sm.Matrix(6, 0, [])
+result = M.col_insert(3, V)
+print("\nTest case 4:")
+print(result)
+
+# Test case 5: Insert columns beyond current columns
+try:
+    M = sm.eye(6)
+    V = sm.ones(6, 1)
+    result = M.col_insert(7, V)
+except Exception as e:
+    print("\nTest case 5:")
+    print(e)
+
+print(sm.__version__)
\ No newline at end of file
