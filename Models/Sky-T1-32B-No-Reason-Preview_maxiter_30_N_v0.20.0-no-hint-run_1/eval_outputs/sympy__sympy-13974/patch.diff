diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..1f1795403d 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -268,6 +268,30 @@ def _eval_trace(self, **kwargs):
                          for idx, value in enumerate(exp.args)])


+def tensor_product_pow(base, exp):
+    """Raise a TensorProduct to a power.
+
+    Parameters
+    ==========
+
+    base : TensorProduct
+        The base tensor product.
+    exp : int
+        The exponent to raise the base to.
+
+    Returns
+    =======
+
+    TensorProduct
+        A new TensorProduct with each argument raised to the exponent.
+    """
+    if not isinstance(base, TensorProduct):
+        raise TypeError('Base must be a TensorProduct, got: %r' % base)
+    if not isinstance(exp, int):
+        raise TypeError('Exponent must be an integer, got: %r' % exp)
+    new_args = [arg**exp for arg in base.args]
+    return TensorProduct(*new_args)
+
 def tensor_product_simp_Mul(e):
     """Simplify a Mul with TensorProducts.

@@ -376,13 +400,18 @@ def tensor_product_simp(e, **hints):
     commutators and anticommutators as well:

     >>> tensor_product_simp(e**2)
-    (A*C)x(B*D)**2
+    (A*C)**2x(B*D)**2

     """
     if isinstance(e, Add):
         return Add(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, Pow):
-        return tensor_product_simp(e.base) ** e.exp
+        base = tensor_product_simp(e.base)
+        exp = e.exp
+        if isinstance(base, TensorProduct) and isinstance(exp, int):
+            return tensor_product_pow(base, exp)
+        else:
+            return base ** exp
     elif isinstance(e, Mul):
         return tensor_product_simp_Mul(e)
     elif isinstance(e, Commutator):
