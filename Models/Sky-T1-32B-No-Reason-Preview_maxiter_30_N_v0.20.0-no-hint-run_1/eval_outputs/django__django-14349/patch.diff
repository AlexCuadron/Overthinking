diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..fa114371ff 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,6 +101,12 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+
+        # Check for forbidden characters
+        forbidden_chars = {'\n', '\r', '\t'}
+        if any(char in value for char in forbidden_chars):
+            raise ValidationError(_('URLs cannot contain forbidden characters like newline, carriage return, or tab.'), code='forbidden_chars', params={'value': value})
+
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
diff --git a/edge_case_test.py b/edge_case_test.py
new file mode 100644
index 0000000000..99d1b7d52a
--- /dev/null
+++ b/edge_case_test.py
@@ -0,0 +1,5 @@
+import unittest
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+def test_edge_cases():
+    validator = URLValidator()
\ No newline at end of file
diff --git a/test_url_validator.py b/test_url_validator.py
new file mode 100644
index 0000000000..2429e5b17a
--- /dev/null
+++ b/test_url_validator.py
@@ -0,0 +1,21 @@
+import unittest
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+def test_url_validator():
+    validator = URLValidator()
+    # Test URLs that should raise ValidationError
+    failing_urls = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n',
+    ]
+    for url in failing_urls:
+        try:
+            validator(url)
+        except ValidationError:
+            pass
+        else:
+            assert False, f'ValidationError not raised for URL: {url}'
+
+if __name__ == '__main__':
+    test_url_validator()
\ No newline at end of file
