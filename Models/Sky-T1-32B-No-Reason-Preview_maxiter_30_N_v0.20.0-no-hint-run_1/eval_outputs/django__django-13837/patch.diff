diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..77e6cc5f25 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -216,18 +216,28 @@ def get_child_arguments():
     executable is reported to not have the .exe extension which can cause bugs
     on reloading.
     """
-    import django.__main__
-    django_main_path = Path(django.__main__.__file__)
-    py_script = Path(sys.argv[0])
+    import __main__
+    import sys
+    from pathlib import Path

     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
-    if py_script == django_main_path:
-        # The server was started with `python -m django runserver`.
-        args += ['-m', 'django']
+
+    if __main__.__spec__ is not None and __main__.__spec__.parent is not None:
+        # Python was started with -m pkg
+        pkg_name = __main__.__spec__.parent
+        args += ['-m', pkg_name]
         args += sys.argv[1:]
-    elif not py_script.exists():
-        # sys.argv[0] may not exist for several reasons on Windows.
-        # It may exist with a .exe extension or have a -script.py suffix.
+    else:
+        py_script = Path(sys.argv[0])
+        if not py_script.exists():
+            # Handle cases where sys.argv[0] may not exist, e.g., on Windows.
+            # This could be due to the script having a .exe extension or a -script.py suffix.
+            # For simplicity, I'll assume that if sys.argv[0] doesn't exist, we use sys.executable and sys.argv.
+            args += sys.argv
+        else:
+            args += [str(py_script)] + sys.argv[1:]
+
+    return args
         exe_entrypoint = py_script.with_suffix('.exe')
         if exe_entrypoint.exists():
             # Should be executed directly, ignoring sys.executable.
