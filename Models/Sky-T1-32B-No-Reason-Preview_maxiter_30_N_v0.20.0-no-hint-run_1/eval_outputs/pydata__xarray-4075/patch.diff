diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..97e13d1e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,8 @@
+import numpy as np
+import xarray as xr
+
+dta = xr.DataArray([1., 1., 1.])
+wgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))
+
+result = dta.weighted(wgt).mean()
+print(result)
\ No newline at end of file
diff --git a/test_weighted_mean.py b/test_weighted_mean.py
new file mode 100644
index 00000000..8e6d8aa7
--- /dev/null
+++ b/test_weighted_mean.py
@@ -0,0 +1,26 @@
+import numpy as np
+import xarray as xr
+
+# Test case 1: All weights are True
+dta1 = xr.DataArray([1., 1., 1.])
+wgt1 = xr.DataArray(np.array([True, True, True], dtype=np.bool))
+result1 = dta1.weighted(wgt1).mean()
+print("All weights True:", result1)
+
+# Test case 2: All weights are False
+dta2 = xr.DataArray([1., 1., 1.])
+wgt2 = xr.DataArray(np.array([False, False, False], dtype=np.bool))
+result2 = dta2.weighted(wgt2).mean()
+print("All weights False:", result2)
+
+# Test case 3: Mixed weights with NaN in data
+dta3 = xr.DataArray([1., np.nan, 1.])
+wgt3 = xr.DataArray(np.array([True, True, False], dtype=np.bool))
+result3 = dta3.weighted(wgt3).mean()
+print("Mixed weights with NaN:", result3)
+
+# Test case 4: Weights are not boolean
+dta4 = xr.DataArray([1., 1., 1.])
+wgt4 = xr.DataArray(np.array([1, 2, 3], dtype=np.int))
+result4 = dta4.weighted(wgt4).mean()
+print("Non-boolean weights:", result4)
\ No newline at end of file
diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py
index 996d2e4c..752b5871 100644
--- a/xarray/core/weighted.py
+++ b/xarray/core/weighted.py
@@ -132,7 +132,7 @@ class Weighted:
         # `dot` does not broadcast arrays, so this avoids creating a large
         # DataArray (if `weights` has additional dimensions)
         # maybe add fasttrack (`(da * weights).sum(dims=dim, skipna=skipna)`)
-        return dot(da, weights, dims=dim)
+        return dot(da, weights.astype(float), dims=dim)

     def _sum_of_weights(
         self, da: "DataArray", dim: Optional[Union[Hashable, Iterable[Hashable]]] = None
