diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..e2052cf22
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,23 @@
+import numpy as np
+import scipy
+from sklearn.svm import SVR
+
+# Dense training data
+x_train_dense = np.array([[0, 1, 0, 0],
+                          [0, 0, 0, 1],
+                          [0, 0, 1, 0],
+                          [0, 0, 0, 1]])
+y_train = np.array([0.04, 0.04, 0.10, 0.16])
+
+# Create SVR model
+model = SVR(C=316.227766017, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,
+            gamma=1.0, kernel='linear', max_iter=15000, shrinking=True, tol=0.001, verbose=False)
+
+# Fit with dense data (should not raise an error)
+model.fit(x_train_dense, y_train)
+
+# Convert to sparse
+x_train_sparse = scipy.sparse.csr_matrix(x_train_dense)
+
+# Fit with sparse data (should raise ZeroDivisionError)
+model.fit(x_train_sparse, y_train)
diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py
index 64cebe837..18dc34345 100644
--- a/sklearn/svm/base.py
+++ b/sklearn/svm/base.py
@@ -288,6 +288,8 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):

         dual_coef_indices = np.tile(np.arange(n_SV), n_class)
         dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,
+step = max(dual_coef_indices.size / max(n_class, 1), 1)
+step = max(dual_coef_indices.size / max(n_class, 1), 1)
                                      dual_coef_indices.size / n_class)
         self.dual_coef_ = sp.csr_matrix(
             (dual_coef_data, dual_coef_indices, dual_coef_indptr),
