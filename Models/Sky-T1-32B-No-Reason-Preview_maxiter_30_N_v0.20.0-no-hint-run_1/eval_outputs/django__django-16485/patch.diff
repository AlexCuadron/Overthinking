diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..0de06175a7 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -168,7 +168,7 @@ def floatformat(text, arg=-1):
     except (ValueError, OverflowError, InvalidOperation):
         return input_val

-    if not m and p < 0:
+    if not m and p <= 0:
         return mark_safe(
             formats.number_format(
                 "%d" % (int(d)),
@@ -178,16 +178,25 @@ def floatformat(text, arg=-1):
             )
         )

+    if p == 0:
+    exp = Decimal(0)
+else:
     exp = Decimal(1).scaleb(-abs(p))
     # Set the precision high enough to avoid an exception (#15789).
     tupl = d.as_tuple()
     units = len(tupl[1])
     units += -tupl[2] if m else tupl[2]
-    prec = abs(p) + units + 1
+    prec = max(1, abs(p) + units + 1)
+print(f"p: {p}, exp: {exp}, prec: {prec}")
+print(f"d: {d}, m: {m}, units: {units}")

     # Avoid conversion to scientific notation by accessing `sign`, `digits`,
     # and `exponent` from Decimal.as_tuple() directly.
-    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))
+    from decimal import localcontext, Decimal
+
+with localcontext() as ctx:
+    ctx.prec = max(1, ctx.prec)
+    rounded_d = d.quantize(exp, ROUND_HALF_UP)
     sign, digits, exponent = rounded_d.as_tuple()
     digits = [str(digit) for digit in reversed(digits)]
     while len(digits) <= abs(exponent):
diff --git a/output.txt b/output.txt
new file mode 100644
index 0000000000..b2bc5e804f
--- /dev/null
+++ b/output.txt
@@ -0,0 +1 @@
+Error: valid range for prec is [1, MAX_PREC]
