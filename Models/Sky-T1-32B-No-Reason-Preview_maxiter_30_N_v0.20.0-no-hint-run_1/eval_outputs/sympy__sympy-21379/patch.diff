diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..431be2d5c5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,36 @@
+from sympy import *
+from sympy.core.cache import clear_cache
+
+def main():
+    clear_cache()
+    x, y, z = symbols('x y z')
+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))
+    # This should work fine
+    print("First substitution:")
+    try:
+        result = expr.subs({1: 1.0})
+        print("Substitution successful:", result)
+    except Exception as e:
+        print("Error:", e)
+
+    clear_cache()
+    x, y, z = symbols('x y z', real=True)
+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))
+    # This should fail with "PolynomialError: Piecewise generators do not make sense"
+    print("\nSecond substitution:")
+    try:
+        result = expr.subs({1: 1.0})
+        print("Substitution successful:", result)
+    except Exception as e:
+        print("Error:", e)
+
+    # Now run it again without clearing cache
+    print("\nThird substitution (without clearing cache):")
+    try:
+        result = expr.subs({1: 1.0})
+        print("Substitution successful:", result)
+    except Exception as e:
+        print("Error:", e)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py
index 91bfceafaa..d34ec7d304 100644
--- a/sympy/functions/elementary/piecewise.py
+++ b/sympy/functions/elementary/piecewise.py
@@ -146,6 +146,14 @@ def __new__(cls, *args, **options):
     def eval(cls, *_args):
         """Either return a modified version of the args or, if no
         modifications were made, return None.
+    def _eval_subs(self, old, new):
+        from sympy.core.subs import Subs
+        if old in self.free_symbols:
+            subs_expr = [expr._subs(old, new) for expr, cond in self.args]
+            subs_cond = [cond._subs(old, new) for expr, cond in self.args]
+            return Piecewise(*zip(subs_expr, subs_cond))
+        else:
+            return Subs(self, old, new)

         Modifications that are made here:
         1) relationals are made canonical
