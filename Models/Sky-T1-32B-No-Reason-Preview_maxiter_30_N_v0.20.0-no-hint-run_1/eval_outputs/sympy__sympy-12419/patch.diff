diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index b4d759836e..b4f2272f74 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -8,6 +8,8 @@
 from sympy.core.sympify import SympifyError, sympify
 from sympy.functions import conjugate, adjoint
 from sympy.matrices import ShapeError
+from sympy.functions.special.tensor_functions import KroneckerDelta
+from sympy.functions.special.tensor_functions import KroneckerDelta
 from sympy.simplify import simplify


diff --git a/test_matrix_sum.py b/test_matrix_sum.py
new file mode 100644
index 0000000000..0b46e8ce3f
--- /dev/null
+++ b/test_matrix_sum.py
@@ -0,0 +1,30 @@
+from sympy import *
+from sympy import Q as Query
+
+n = Symbol('n', integer=True, positive=True)
+i, j = symbols('i j', integer=True)
+M = MatrixSymbol('M', n, n)
+
+e = None
+with assuming(Query.orthogonal(M)):
+    e = refine((M.T * M).doit())
+
+# Correct: M.T * M is an identity matrix.
+print(e, e[0, 0], e[0, 1], e[1, 0], e[1, 1])
+
+# Correct: The output is True True
+print(ask(Query.diagonal(e)), ask(Query.integer_elements(e)))
+
+# Correct: The sum of the diagonal elements is n
+print(Sum(e[i, i], (i, 0, n-1)).doit())
+
+# So far so good
+# Total sum of the elements is expected to be 'n' but the answer is 0!
+print("e[0,0]:", e[0,0])
+print("e[0,1]:", e[0,1])
+print("e[1,0]:", e[1,0])
+print("e[1,1]:", e[1,1])
+print("e[i,j]:", e[i,j])
+print("Expression for e[i,j]:", e[i,j].expr)
+print("Sum expression:", Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)))
+print("Evaluated sum:", Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit())
\ No newline at end of file
