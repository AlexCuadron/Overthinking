diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..4b6eab1b1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,17 @@
+from __future__ import annotations
+
+from typing import Any, Dict
+
+JSONObject = Dict[str, Any]
+
+def sphinx_doc(data: JSONObject) -> JSONObject:
+    """Does it work.\n\n    Args:\n        data: Does it args.\n\n    Returns:\n        Does it work in return.\n    """
+    return {}
+
+
+autodoc_typehints = 'description'
+autodoc_type_aliases = {
+    'JSONObject': 'types.JSONObject',
+}
+
+print(sphinx_doc({"key": "value"}))
\ No newline at end of file
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 70cbc3ba1..d05831cca 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -79,7 +79,7 @@ def insert_field_list(node: Element) -> nodes.field_list:
     return field_list


-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:
+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str] = None) -> None:
     arguments = {}  # type: Dict[str, Dict[str, bool]]
     fields = cast(Iterable[nodes.field], node)
     for field in fields:
@@ -104,6 +104,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
             arguments['return'] = {'type': True}

     for name, annotation in annotations.items():
+                if type_aliases and name in type_aliases:
+                    annotation = type_aliases[name]
         if name == 'return':
             continue

@@ -127,6 +129,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No


 def setup(app: Sphinx) -> Dict[str, Any]:
+    app.add_config_value('autodoc_type_aliases', {}, 'env')
     app.connect('autodoc-process-signature', record_typehints)
     app.connect('object-description-transform', merge_typehints)
