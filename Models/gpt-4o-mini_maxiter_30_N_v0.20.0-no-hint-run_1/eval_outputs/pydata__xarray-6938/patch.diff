diff --git a/reproduce_swap_dims_error.py b/reproduce_swap_dims_error.py
new file mode 100644
index 00000000..e25a5c8a
--- /dev/null
+++ b/reproduce_swap_dims_error.py
@@ -0,0 +1,22 @@
+import numpy as np
+import xarray as xr
+
+nz = 11
+ds = xr.Dataset(
+    data_vars={
+        "y": ("z", np.random.rand(nz)),
+        "lev": ("z", np.arange(nz) * 10),
+    },
+)
+print(f"ds\n{ds}")
+print(f"\nds, 'lev' -> dim coord\n{ds.swap_dims(z='lev')}")
+
+ds2 = (
+    ds.swap_dims(z="lev")
+    .rename_dims(lev="z")
+    .reset_index("lev")
+    .reset_coords()
+)
+print(f"\nds2\n{ds2}")
+print(f"\nds2, 'lev' -> dim coord\n{ds2.swap_dims(z='lev')}")
+print(f"\nds2 after .swap_dims() applied\n{ds2}")
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index c775d05c..78669b70 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3685,8 +3685,17 @@ class Dataset(
         )
         return self._replace(variables, coord_names, dims=dims, indexes=indexes)

-    def swap_dims(
-        self: T_Dataset, dims_dict: Mapping[Any, Hashable] = None, **dims_kwargs
+    def swap_dims(self, **dims):
+        if not isinstance(dims, dict):
+            raise ValueError("swap_dims requires a dictionary of dimensions to swap.")
+        original_dims = self.dims.copy()
+                original_dims = self.dims.copy()
+        for dim, new_dim in dims.items():
+            if dim in self.dims:
+                                self[dim] = self[new_dim]
+                                                                                                                                                        self: T_Dataset, dims_dict: Mapping[Any, Hashable] = None, **dims_kwargs
+        if not isinstance(dims, dict):
+            raise ValueError("swap_dims requires a dictionary of dimensions to swap.")
     ) -> T_Dataset:
         """Returns a new object with swapped dimensions.
