diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..de49fe26aa 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -382,14 +382,16 @@ class BaseFormSet:
         except ValidationError as e:
             self._non_form_errors = self.error_class(e.error_list)

-    def clean(self):
+                                                                                def clean(self):
         """
         Hook for doing any extra formset-wide cleaning after Form.clean() has
         been called on every form. Any ValidationError raised by this method
         will not be associated with a particular form; it will be accessible
         via formset.non_form_errors()
         """
-        pass
+        self._non_form_errors = self.error_class()
+        self.full_clean()
+        return self._non_form_errors

     def has_changed(self):
         """Return True if data in any form differs from initial."""
diff --git a/tests/formset_error_test.py b/tests/formset_error_test.py
new file mode 100644
index 0000000000..5f5492cfb5
--- /dev/null
+++ b/tests/formset_error_test.py
@@ -0,0 +1,14 @@
+from django import forms
+from django.forms import formset_factory
+from django.test import TestCase
+
+class TestForm(forms.Form):
+    name = forms.CharField(required=True)
+
+class FormSetTest(TestCase):
+    def test_non_form_errors(self):
+        FormSet = formset_factory(TestForm)
+        formset = FormSet(data={})  # No data to trigger non-form errors
+        self.assertFalse(formset.is_valid())
+        self.assertEqual(len(formset.non_form_errors()), 1)  # Expecting one non-form error
+        self.assertIn('This field is required.', formset.non_form_errors())
