diff --git a/confirm_fix.py b/confirm_fix.py
new file mode 100644
index 0000000000..20172f0d88
--- /dev/null
+++ b/confirm_fix.py
@@ -0,0 +1,7 @@
+from sympy.combinatorics import DihedralGroup
+
+G = DihedralGroup(18)
+
+S2 = G.sylow_subgroup(p=2)
+
+print('No error occurred, fix confirmed!')
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5cbfeff778
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,5 @@
+from sympy.combinatorics import DihedralGroup
+
+G = DihedralGroup(18)
+
+S2 = G.sylow_subgroup(p=2)
\ No newline at end of file
diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..72497b96e8 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -1165,7 +1165,7 @@ def coset_factor(self, g, factor_index=False):
             if beta == base[i]:
                 factors.append(beta)
                 continue
-            if beta not in basic_orbits[i]:
+            if beta not in basic_orbits[i] or len(basic_orbits[i]) == 0:
                 return []
             u = transversals[i][beta]._array_form
             h = _af_rmul(_af_invert(u), h)
@@ -2198,7 +2198,7 @@ def _number_blocks(blocks):
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
+                        if i < len(num_blocks) and i < len(blocks): del num_blocks[i], blocks[i]
                         to_remove.append(rep_blocks[i])
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
