diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..491ff983db
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,10 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                   key=monomial_key('grlex', states))
+print(monomials)
\ No newline at end of file
diff --git a/sympy/polys/orderings.py b/sympy/polys/orderings.py
index 6fe962b683..304207ebec 100644
--- a/sympy/polys/orderings.py
+++ b/sympy/polys/orderings.py
@@ -44,6 +44,16 @@ def __call__(self, monomial):
         return monomial

 class GradedLexOrder(MonomialOrder):
+    def __init__(self):
+        self.min_degrees = None
+
+    def set_min_degrees(self, min_degrees):
+        self.min_degrees = min_degrees
+
+    def __call__(self, monomial):
+        if self.min_degrees is not None and sum(monomial) < self.min_degrees:
+            return (0, monomial)
+        return (sum(monomial), monomial)
     """Graded lexicographic order of monomials. """

     alias = 'grlex'
@@ -197,7 +207,7 @@ def __hash__(self):
     'igrevlex': igrevlex
 }

-def monomial_key(order=None, gens=None):
+def monomial_key(order=None, gens=None, min_degrees=None):
     """
     Return a function defining admissible order on monomials.

@@ -232,9 +242,9 @@ def monomial_key(order=None, gens=None):
         except KeyError:
             raise ValueError("supported monomial orderings are 'lex', 'grlex' and 'grevlex', got %r" % order)
     if hasattr(order, '__call__'):
-        if gens is not None:
+        if gens is not None and min_degrees is not None:
             def _order(expr):
-                return order(expr.as_poly(*gens).degree_list())
+                return order(expr.as_poly(*gens).degree_list(), min_degrees)
             return _order
         return order
     else:
