diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..3056475593 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -495,6 +495,11 @@ def did_you_mean(s, candidates, n=3, cutoff=0.8, fix=None):


 class InheritDocstrings(type):
+    def __new__(cls, name, bases, attrs):
+        for key, value in attrs.items():
+            if isinstance(value, property):
+                value.__doc__ = attrs.get(f'__doc__') if attrs.get(f'__doc__') else ''
+        return super().__new__(cls, name, bases, attrs)
     """
     This metaclass makes methods of a class automatically have their
     docstrings filled in from the methods they override in the base
diff --git a/test_inherit_docstrings.py b/test_inherit_docstrings.py
new file mode 100644
index 0000000000..b612cf6491
--- /dev/null
+++ b/test_inherit_docstrings.py
@@ -0,0 +1,20 @@
+class TestClass:
+    @property
+    def test_property(self):
+        return 'This is a property'
+
+class InheritDocstrings(type):
+    def __new__(cls, name, bases, attrs):
+        for key, value in attrs.items():
+            if isinstance(value, property):
+                print(f'Property found: {key}')
+        return super().__new__(cls, name, bases, attrs)
+
+class Test(metaclass=InheritDocstrings):
+    @property
+    def test_property(self):
+        return 'This is a property'
+
+if __name__ == '__main__':
+    t = Test()
+    print(t.test_property)
diff --git a/test_inherit_docstrings_edgecase.py b/test_inherit_docstrings_edgecase.py
new file mode 100644
index 0000000000..708b23cea5
--- /dev/null
+++ b/test_inherit_docstrings_edgecase.py
@@ -0,0 +1,23 @@
+class TestClass:
+    @property
+    def test_property(self):
+        '''This is a property'''
+        return 'This is a property'
+
+class InheritDocstrings(type):
+    def __new__(cls, name, bases, attrs):
+        for key, value in attrs.items():
+            if isinstance(value, property):
+                print(f'Property found: {key}')
+                print(f'Docstring: {value.__doc}')
+        return super().__new__(cls, name, bases, attrs)
+
+class Test(metaclass=InheritDocstrings):
+    @property
+    def test_property(self):
+        '''This is a property'''
+        return 'This is a property'
+
+if __name__ == '__main__':
+    t = Test()
+    print(t.test_property)
