diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2e51914952..fd16d5e890 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -2483,6 +2483,14 @@ class LightSource:


 def from_levels_and_colors(levels, colors, extend='neither'):
+    if extend == 'both':
+        # Ensure the edges are drawn at the extremities
+        colors = [colors[0]] + colors + [colors[-1]]
+        levels = [levels[0] - (levels[1] - levels[0])] + levels + [levels[-1] + (levels[-1] - levels[-2])]
+
+        colors = [colors[0]] + colors + [colors[-1]]
+        levels = [levels[0] - (levels[1] - levels[0])] + levels + [levels[-1] + (levels[-1] - levels[-2])]
+
     """
     A helper routine to generate a cmap and a norm instance which
     behave similar to contourf's levels and colors arguments.
diff --git a/reproduce_colorbar_issue.py b/reproduce_colorbar_issue.py
new file mode 100644
index 0000000000..7c158a677d
--- /dev/null
+++ b/reproduce_colorbar_issue.py
@@ -0,0 +1,17 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.colors import from_levels_and_colors
+
+my_cmap = mpl.cm.viridis
+bounds = np.arange(10)
+bounds = np.arange(10)
+nb_colors = len(bounds) + 1
+colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+plt.figure(figsize=(5, 1))
+ax = plt.subplot(111)
+cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)
+plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+plt.show()
\ No newline at end of file
