diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..89c1d9d510 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -327,7 +327,8 @@ class NDArithmeticMixin:
             # will pick up the mask from the masked object:
             kwargs["mask"] = None
         elif handle_mask in ["ff", "first_found"]:
-            if self.mask is None:
+            if self.mask is None and operand.mask is None:
+                return None
                 kwargs["mask"] = deepcopy(operand.mask)
             else:
                 kwargs["mask"] = deepcopy(self.mask)
@@ -524,6 +525,10 @@ class NDArithmeticMixin:
             return deepcopy(self.mask)
         else:
             # Now lets calculate the resulting mask (operation enforces copy)
+            if self.mask is None:
+                return operand.mask
+            if operand.mask is None:
+                return self.mask
             return handle_mask(self.mask, operand.mask, **kwds)

     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6086928f92
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print(nref_mask.multiply(1., handle_mask=np.bitwise_or).mask)
+print(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)
\ No newline at end of file
