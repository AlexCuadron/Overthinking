diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..ef6c72fff
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,6 @@
+# Reproducer script for the Pytest crash
+
+import ast
+
+# This will trigger the crash in Pytest
+eval("False")
diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..f751f01e9 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -199,10 +199,13 @@ class Expression:
         :param input: The input expression - one line.
         """
         astexpr = expression(Scanner(input))
+        if input in ("None", "True", "False"):
+            raise ValueError(f"Invalid expression: {input}")
         code = compile(
             astexpr, filename="<pytest match expression>", mode="eval",
         )  # type: types.CodeType
         return Expression(code)
+        # Handle invalid expressions: 'None', 'True', or 'False'

     def evaluate(self, matcher: Callable[[str], bool]) -> bool:
         """Evaluate the match expression.
