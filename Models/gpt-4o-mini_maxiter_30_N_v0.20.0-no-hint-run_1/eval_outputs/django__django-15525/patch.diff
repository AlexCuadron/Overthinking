diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py
index 40b34bb71c..96a6305774 100644
--- a/django/conf/global_settings.py
+++ b/django/conf/global_settings.py
@@ -187,7 +187,43 @@ DEFAULT_CHARSET = "utf-8"
 SERVER_EMAIL = "root@localhost"

 # Database connection info. If left empty, will default to the dummy backend.
-DATABASES = {}
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'other_db.sqlite3'),
+    }
+}
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'other_db.sqlite3'),
+    }
+}
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'other_db.sqlite3'),
+    }
+}
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'other_db.sqlite3'),
+    }
+}

 # Classes used to implement DB routing behavior.
 DATABASE_ROUTERS = []
diff --git a/scripts/reproduce_error.py b/scripts/reproduce_error.py
new file mode 100644
index 0000000000..66686cfa5a
--- /dev/null
+++ b/scripts/reproduce_error.py
@@ -0,0 +1,23 @@
+import json
+import os
+import django
+from django.core.management import call_command
+
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+django.setup()
+
+# Load the fixture data
+with open('tests/test_utils/fixtures/should_not_be_loaded.json') as f:
+    data = json.load(f)
+
+# Create the objects in the database
+for item in data:
+    model = item['model']
+    fields = item['fields']
+    call_command('loaddata', model, format='json')
+
+# Attempt to load data into a non-default database
+try:
+    call_command('loaddata', 'tests/test_utils/fixtures/should_not_be_loaded.json', database='other')
+except Exception as e:
+    print(f'Error: {e}')
\ No newline at end of file
