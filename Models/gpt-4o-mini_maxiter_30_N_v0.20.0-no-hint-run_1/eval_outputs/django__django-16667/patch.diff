diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..fe5c2c4779 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1156,7 +1156,37 @@ class SelectDateWidget(Widget):
             input_format = get_format("DATE_INPUT_FORMATS")[0]
             input_format = formats.sanitize_strftime_format(input_format)
             try:
-                date_value = datetime.date(int(y), int(m), int(d))
+                if int(y) > sys.maxsize:
+    raise OverflowError('Year value is too large')
+if int(m) < 1 or int(m) > 12:
+    raise ValueError('Month value is out of range')
+if int(d) < 1 or int(d) > 31:
+    raise ValueError('Day value is out of range')
+    raise OverflowError('Date values are out of range')
+
+# Check for valid day and month ranges
+else:
+    if int(y) > sys.maxsize:
+    raise OverflowError('Year value is too large')
+if int(m) < 1 or int(m) > 12:
+    raise ValueError('Month value is out of range')
+if int(d) < 1 or int(d) > 31:
+    raise ValueError('Day value is out of range')
+if int(y) < 1:
+    raise ValueError('Year value must be positive')
+
+try:
+    date_value = datetime.date(int(y), int(m), int(d))
+except OverflowError:
+    raise OverflowError('Date values are out of range')
+except ValueError:
+    raise ValueError('Invalid date values')
+try:
+    date_value = datetime.date(int(y), int(m), int(d))
+except OverflowError:
+    raise OverflowError('Date values are out of range')
+except ValueError:
+    raise ValueError('Invalid date values')
             except ValueError:
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ad71226157
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,15 @@
+import datetime
+import sys
+
+def reproduce_error():
+    y = sys.maxsize + 1
+    m = 3
+    d = 4
+    try:
+        date_value = datetime.date(int(y), int(m), int(d))
+        print(f"Date created: {date_value}")
+    except OverflowError as e:
+        print(f"OverflowError: {e}")
+
+if __name__ == '__main__':
+    reproduce_error()
\ No newline at end of file
