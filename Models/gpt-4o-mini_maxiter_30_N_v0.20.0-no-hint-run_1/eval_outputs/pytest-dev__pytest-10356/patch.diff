diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..3cb39aee0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,24 @@
+import pytest
+
+class BaseMeta(type):
+    @property
+    def pytestmark(self):
+        return []
+
+class Base(metaclass=BaseMeta):
+    pass
+
+@pytest.mark.foo
+class Foo(Base):
+    pass
+
+@pytest.mark.bar
+class Bar(Base):
+    pass
+
+class TestDings(Foo, Bar):
+    def test_dings(self):
+        pass
+
+if __name__ == '__main__':
+    pytest.main([__file__])
\ No newline at end of file
diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 800a25c92..63677b5d3 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -381,6 +381,8 @@ def normalize_mark_list(


 def store_mark(obj, mark: Mark) -> None:
+    if not hasattr(obj, '_pytestmark'):
+        obj._pytestmark = []
     """Store a Mark on an object.

     This is used to implement the Mark declarations/decorators correctly.
@@ -388,7 +390,7 @@ def store_mark(obj, mark: Mark) -> None:
     assert isinstance(mark, Mark), mark
     # Always reassign name to avoid updating pytestmark in a reference that
     # was only borrowed.
-    obj.pytestmark = [*get_unpacked_marks(obj), mark]
+    setattr(obj, 'pytestmark', [*get_unpacked_marks(obj), mark])


 # Typing for builtin pytest marks. This is cheating; it gives builtin marks
