diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..a51cf87d6b 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -422,7 +422,7 @@ def __str__(self):
         s = s.replace(',', '')
         return s

-    def __init__(self, *args):
+    def __init__(self, cycles):
         """Load up a Cycle instance with the values for the cycle.

         Examples
@@ -462,6 +462,34 @@ def copy(self):
         return Cycle(self)

 class Permutation(Basic):
+    def __init__(self, cycles):
+        if not cycles:
+            raise ValueError("At least one cycle must be provided.")
+        self.cycles = [list(map(as_int, cycle)) for cycle in cycles]
+        self.size = max(max(cycle) for cycle in self.cycles) + 1
+        self._array_form = self._compute_array_form()
+
+    def _compute_array_form(self):
+        array_form = list(range(self.size))
+        for cycle in self.cycles:
+            for i in range(len(cycle)):
+                array_form[cycle[i]] = cycle[(i + 1) % len(cycle)]
+        return array_form
+
+    def __init__(self, cycles):
+        if not cycles:
+            raise ValueError("At least one cycle must be provided.")
+        self.cycles = [list(map(as_int, cycle)) for cycle in cycles]
+        self.size = max(max(cycle) for cycle in self.cycles) + 1
+        self._array_form = self._compute_array_form()
+
+    def _compute_array_form(self):
+        array_form = list(range(self.size))
+        for cycle in self.cycles:
+            for i in range(len(cycle)):
+                array_form[cycle[i]] = cycle[(i + 1) % len(cycle)]
+        return array_form
+
     """
     A permutation, alternatively known as an 'arrangement number' or 'ordering'
     is an arrangement of the elements of an ordered list into a one-to-one
