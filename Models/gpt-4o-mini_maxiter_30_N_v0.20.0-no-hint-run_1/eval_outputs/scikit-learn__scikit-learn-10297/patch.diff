diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..82bf3cdf8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,8 @@
+import numpy as np
+from sklearn import linear_model as lm
+
+n = 100
+x = np.random.randn(n, 30)
+y = np.random.normal(size=n)
+
+rr = lm.RidgeClassifierCV(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True).fit(x, y)
\ No newline at end of file
diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index 911c74ae3..0de9f03b1 100644
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -29,6 +29,7 @@ from ..utils import compute_sample_weight
 from ..utils import column_or_1d
 from ..preprocessing import LabelBinarizer
 from ..model_selection import GridSearchCV
+from ..model_selection import check_cv
 from ..externals import six
 from ..metrics.scorer import check_scoring

@@ -192,7 +193,7 @@ def _solve_svd(X, y, alpha):
     return np.dot(Vt.T, d_UT_y).T


-def ridge_regression(X, y, alpha, sample_weight=None, solver='auto',
+def ridge_regression(X, y, alpha, sample_weight=None, solver='auto', store_cv_values=False,
                      max_iter=None, tol=1e-3, verbose=0, random_state=None,
                      return_n_iter=False, return_intercept=False):
     """Solve the ridge equation by the method of normal equations.
@@ -389,6 +390,13 @@ def ridge_regression(X, y, alpha, sample_weight=None, solver='auto',
     n_iter = None
     if solver == 'sparse_cg':
         coef = _solve_sparse_cg(X, y, alpha, max_iter, tol, verbose)
+        if store_cv_values:
+            cv_values = None
+            cv_values = []
+
+            cv_values.append(None)
+
+

     elif solver == 'lsqr':
         coef, n_iter = _solve_lsqr(X, y, alpha, max_iter, tol)
@@ -448,6 +456,10 @@ def ridge_regression(X, y, alpha, sample_weight=None, solver='auto',

     if return_n_iter and return_intercept:
         return coef, n_iter, intercept
+    if store_cv_values:
+        return coef, cv_values
+    return coef
+
     elif return_intercept:
         return coef, intercept
     elif return_n_iter:
