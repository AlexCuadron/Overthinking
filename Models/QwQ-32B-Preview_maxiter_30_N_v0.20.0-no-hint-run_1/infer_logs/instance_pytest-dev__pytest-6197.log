2025-01-17 05:54:15,845 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze
2025-01-17 05:55:53,936 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze] build finished.
2025-01-17 05:55:53,945 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze] with more generic tag [oh_v0.20.0_vd0dv4kwvlfoa297]
2025-01-17 05:55:53,947 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze, oh_v0.20.0_vd0dv4kwvlfoa297] built successfully
2025-01-17 05:55:53,954 - INFO - [runtime c2ce5d28-76be-4375-8035-b8eb2c3f492b-c7666a7947dc2533] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze
2025-01-17 05:55:54,682 - INFO - [runtime c2ce5d28-76be-4375-8035-b8eb2c3f492b-c7666a7947dc2533] Container started: openhands-runtime-c2ce5d28-76be-4375-8035-b8eb2c3f492b-c7666a7947dc2533. VSCode URL: None
2025-01-17 05:55:54,683 - INFO - [runtime c2ce5d28-76be-4375-8035-b8eb2c3f492b-c7666a7947dc2533] Waiting for client to become ready at http://localhost:30860...
2025-01-17 05:56:16,740 - INFO - [runtime c2ce5d28-76be-4375-8035-b8eb2c3f492b-c7666a7947dc2533] Runtime is ready.
2025-01-17 05:56:17,374 - INFO - ------------------------------
2025-01-17 05:56:17,374 - INFO - BEGIN Runtime Initialization Fn
2025-01-17 05:56:17,374 - INFO - ------------------------------
2025-01-17 05:56:17,375 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-6197' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-17 05:56:17,998 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:17,999 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-17 05:56:18,624 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:18,624 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-17 05:56:19,249 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:19,256 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-17 05:56:19,880 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=pytest-dev__pytest-6197
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:19,880 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-17 05:56:20,505 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:20,505 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-17 05:56:21,129 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__5.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:21,129 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.2
2025-01-17 05:56:21,752 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:21,752 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-17 05:56:22,376 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at e856638ba Preparing release version 5.2.3 (#6190)
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:22,377 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-17 05:56:23,002 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:23,002 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-17 05:56:23,626 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 05:56:23,626 - INFO - ------------------------------
2025-01-17 05:56:23,627 - INFO - END Runtime Initialization Fn
2025-01-17 05:56:23,627 - INFO - ------------------------------
2025-01-17 05:56:23,628 - INFO - Function calling not enabled for model hosted_vllm/Qwen/QwQ-32B-Preview. Mocking function calling via prompting.
2025-01-17 05:56:23,632 - INFO - [runtime c2ce5d28-76be-4375-8035-b8eb2c3f492b-c7666a7947dc2533] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-17 05:56:23,649 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-17 05:56:23,649 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-17 05:57:41,132 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-17 05:59:17,982 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-17 06:01:20,016 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-17 06:02:27,750 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-17 06:03:56,991 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-17 06:05:31,748 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-17 06:06:45,023 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-17 06:07:54,857 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-17 06:09:04,303 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-17 06:09:54,684 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-17 06:10:48,957 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-17 06:11:41,395 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-17 06:12:27,975 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-17 06:13:10,814 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-17 06:14:02,313 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-17 06:15:33,031 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-17 06:17:06,277 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-17 06:18:36,105 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-17 06:19:43,653 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-17 06:21:32,273 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-17 06:23:17,381 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-17 06:24:28,978 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-17 06:25:46,103 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-17 06:27:08,152 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-17 06:28:14,819 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-17 06:29:28,237 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-17 06:30:30,426 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-17 06:31:19,975 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-17 06:32:25,559 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-17 06:33:17,764 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-17 06:33:17,764 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-17 06:33:17,766 - WARNING - Stopping agent due to traffic control
2025-01-17 06:33:17,766 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-17 06:33:17,769 - INFO - ------------------------------
2025-01-17 06:33:17,769 - INFO - BEGIN Runtime Completion Fn
2025-01-17 06:33:17,769 - INFO - ------------------------------
2025-01-17 06:33:17,769 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.2
2025-01-17 06:33:18,393 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 06:33:18,393 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-17 06:33:19,015 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 06:33:19,016 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-17 06:33:19,644 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 06:33:19,644 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached e856638ba086fcf5bebf1bebea32d5cf78de87b4
2025-01-17 06:33:20,275 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "12eda3730c8f",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/.github/PULL_REQUEST_TEMPLATE.md b/.github/PULL_REQUEST_TEMPLATE.md
index 7436f7146..f516959bc 100644
--- a/.github/PULL_REQUEST_TEMPLATE.md
+++ b/.github/PULL_REQUEST_TEMPLATE.md
@@ -2,14 +2,15 @@
 Thanks for submitting a PR, your contribution is really appreciated!

 Here is a quick checklist that should be present in PRs.
+(please delete this text from the final description, this is just a guideline)
+-->

 - [ ] Target the `master` branch for bug fixes, documentation updates and trivial changes.
 - [ ] Target the `features` branch for new features, improvements, and removals/deprecations.
 - [ ] Include documentation when adding new features.
 - [ ] Include new tests or update existing tests when applicable.

-Unless your change is trivial or a small documentation fix (e.g., a typo or reword of a small section) please:
+Unless your change is trivial or a small documentation fix (e.g.,  a typo or reword of a small section) please:

 - [ ] Create a new changelog file in the `changelog` folder, with a name like `<ISSUE NUMBER>.<TYPE>.rst`. See [changelog/README.rst](https://github.com/pytest-dev/pytest/blob/master/changelog/README.rst) for details.
-- [ ] Add yourself to `AUTHORS` in alphabetical order.
--->
+- [ ] Add yourself to `AUTHORS` in alphabetical order;
diff --git a/.travis.yml b/.travis.yml
index 1de8a3009..b77c3f595 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -60,7 +60,7 @@ jobs:
     - env: TOXENV=py37-freeze

     - env: TOXENV=py38-xdist
-      python: '3.8'
+      python: '3.8-dev'

     - stage: baseline
       env: TOXENV=py36-xdist
@@ -94,6 +94,11 @@ jobs:
           tags: true
           repo: pytest-dev/pytest

+matrix:
+  allow_failures:
+    - python: '3.8-dev'
+      env: TOXENV=py38-xdist
+
 before_script:
   - |
     # Do not (re-)upload coverage with cron runs.
diff --git a/AUTHORS b/AUTHORS
index d0e584f63..e11400c1f 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -70,7 +70,6 @@ Daniel Hahler
 Daniel Nuri
 Daniel Wandschneider
 Danielle Jenkins
-Daniil Galiev
 Dave Hunt
 David Díaz-Barquero
 David Mohr
diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 87ffb9e07..0d6b8188f 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -13,27 +13,11 @@ with advance notice in the **Deprecations** section of releases.
     file is managed by towncrier. You *may* edit previous change logs to
     fix problems like typo corrections or such.
     To add a new change log entry, please see
-    https://pip.pypa.io/en/latest/development/contributing/#news-entries
+    https://pip.pypa.io/en/latest/development/#adding-a-news-entry
     we named the news folder changelog

 .. towncrier release notes start

-pytest 5.2.3 (2019-11-14)
-=========================
-
-Bug Fixes
----------
-
-- `#5830 <https://github.com/pytest-dev/pytest/issues/5830>`_: The first test in a package (``__init__.py``) marked with ``@pytest.mark.skip`` is now correctly skipped.
-
-
-- `#6099 <https://github.com/pytest-dev/pytest/issues/6099>`_: Fix ``--trace`` when used with parametrized functions.
-
-
-- `#6183 <https://github.com/pytest-dev/pytest/issues/6183>`_: Using ``request`` as a parameter name in ``@pytest.mark.parametrize`` now produces a more
-  user-friendly error.
-
-
 pytest 5.2.2 (2019-10-24)
 =========================

@@ -63,6 +47,33 @@ Bug Fixes
 - `#5902 <https://github.com/pytest-dev/pytest/issues/5902>`_: Fix warnings about deprecated ``cmp`` attribute in ``attrs>=19.2``.


+pytest 4.6.6 (2019-10-11)
+=========================
+
+Bug Fixes
+---------
+
+- `#5523 <https://github.com/pytest-dev/pytest/issues/5523>`_: Fixed using multiple short options together in the command-line (for example ``-vs``) in Python 3.8+.
+
+
+- `#5537 <https://github.com/pytest-dev/pytest/issues/5537>`_: Replace ``importlib_metadata`` backport with ``importlib.metadata`` from the
+  standard library on Python 3.8+.
+
+
+- `#5806 <https://github.com/pytest-dev/pytest/issues/5806>`_: Fix "lexer" being used when uploading to bpaste.net from ``--pastebin`` to "text".
+
+
+- `#5902 <https://github.com/pytest-dev/pytest/issues/5902>`_: Fix warnings about deprecated ``cmp`` attribute in ``attrs>=19.2``.
+
+
+
+Trivial/Internal Changes
+------------------------
+
+- `#5801 <https://github.com/pytest-dev/pytest/issues/5801>`_: Fixes python version checks (detected by ``flake8-2020``) in case python4 becomes a thing.
+
+
+
 pytest 5.2.0 (2019-09-28)
 =========================

@@ -533,32 +544,6 @@ Improved Documentation
 - `#5416 <https://github.com/pytest-dev/pytest/issues/5416>`_: Fix PytestUnknownMarkWarning in run/skip example.


-pytest 4.6.6 (2019-10-11)
-=========================
-
-Bug Fixes
----------
-
-- `#5523 <https://github.com/pytest-dev/pytest/issues/5523>`_: Fixed using multiple short options together in the command-line (for example ``-vs``) in Python 3.8+.
-
-
-- `#5537 <https://github.com/pytest-dev/pytest/issues/5537>`_: Replace ``importlib_metadata`` backport with ``importlib.metadata`` from the
-  standard library on Python 3.8+.
-
-
-- `#5806 <https://github.com/pytest-dev/pytest/issues/5806>`_: Fix "lexer" being used when uploading to bpaste.net from ``--pastebin`` to "text".
-
-
-- `#5902 <https://github.com/pytest-dev/pytest/issues/5902>`_: Fix warnings about deprecated ``cmp`` attribute in ``attrs>=19.2``.
-
-
-
-Trivial/Internal Changes
-------------------------
-
-- `#5801 <https://github.com/pytest-dev/pytest/issues/5801>`_: Fixes python version checks (detected by ``flake8-2020``) in case python4 becomes a thing.
-
-
 pytest 4.6.5 (2019-08-05)
 =========================

diff --git a/doc/en/announce/index.rst b/doc/en/announce/index.rst
index 05530dd2e..f7a634b31 100644
--- a/doc/en/announce/index.rst
+++ b/doc/en/announce/index.rst
@@ -6,7 +6,6 @@ Release announcements
    :maxdepth: 2


-   release-5.2.3
    release-5.2.2
    release-5.2.1
    release-5.2.0
diff --git a/doc/en/announce/release-5.2.3.rst b/doc/en/announce/release-5.2.3.rst
deleted file mode 100644
index bfb62a1b8..000000000
--- a/doc/en/announce/release-5.2.3.rst
+++ /dev/null
@@ -1,28 +0,0 @@
-pytest-5.2.3
-=======================================
-
-pytest 5.2.3 has just been released to PyPI.
-
-This is a bug-fix release, being a drop-in replacement. To upgrade::
-
-  pip install --upgrade pytest
-
-The full changelog is available at https://docs.pytest.org/en/latest/changelog.html.
-
-Thanks to all who contributed to this release, among them:
-
-* Anthony Sottile
-* Brett Cannon
-* Bruno Oliveira
-* Daniel Hahler
-* Daniil Galiev
-* David Szotten
-* Florian Bruhin
-* Patrick Harmon
-* Ran Benita
-* Zac Hatfield-Dodds
-* Zak Hassan
-
-
-Happy testing,
-The pytest Development Team
diff --git a/doc/en/example/parametrize.rst b/doc/en/example/parametrize.rst
index 48ab95fda..1220cfb4d 100644
--- a/doc/en/example/parametrize.rst
+++ b/doc/en/example/parametrize.rst
@@ -475,10 +475,10 @@ Running it results in some skips if we don't have all the python interpreters in
 .. code-block:: pytest

    . $ pytest -rs -q multipython.py
-   ssssssssssss...ssssssssssss                                          [100%]
+   ssssssssssssssssssssssss...                                          [100%]
    ========================= short test summary info ==========================
    SKIPPED [12] $REGENDOC_TMPDIR/CWD/multipython.py:30: 'python3.5' not found
-   SKIPPED [12] $REGENDOC_TMPDIR/CWD/multipython.py:30: 'python3.7' not found
+   SKIPPED [12] $REGENDOC_TMPDIR/CWD/multipython.py:30: 'python3.6' not found
    3 passed, 24 skipped in 0.12s

 Indirect parametrization of optional implementations/imports
diff --git a/doc/en/example/reportingdemo.rst b/doc/en/example/reportingdemo.rst
index 1c06782f6..eb978c5ea 100644
--- a/doc/en/example/reportingdemo.rst
+++ b/doc/en/example/reportingdemo.rst
@@ -436,7 +436,7 @@ Here is a nice run of several failures and how ``pytest`` presents things:
             items = [1, 2, 3]
             print("items is {!r}".format(items))
     >       a, b = items.pop()
-    E       TypeError: 'int' object is not iterable
+    E       TypeError: cannot unpack non-iterable int object

     failure_demo.py:181: TypeError
     --------------------------- Captured stdout call ---------------------------
@@ -516,7 +516,7 @@ Here is a nice run of several failures and how ``pytest`` presents things:
         def test_z2_type_error(self):
             items = 3
     >       a, b = items
-    E       TypeError: 'int' object is not iterable
+    E       TypeError: cannot unpack non-iterable int object

     failure_demo.py:222: TypeError
     ______________________ TestMoreErrors.test_startswith ______________________
diff --git a/doc/en/example/simple.rst b/doc/en/example/simple.rst
index 05ccbc9b2..a7cd06d31 100644
--- a/doc/en/example/simple.rst
+++ b/doc/en/example/simple.rst
@@ -302,31 +302,34 @@ running from a test you can do something like this:

 .. code-block:: python

-    # content of your_module.py
+    # content of conftest.py


-    _called_from_test = False
+    def pytest_configure(config):
+        import sys

-.. code-block:: python
+        sys._called_from_test = True

-    # content of conftest.py

+    def pytest_unconfigure(config):
+        import sys

-    def pytest_configure(config):
-        your_module._called_from_test = True
+        del sys._called_from_test

-and then check for the ``your_module._called_from_test`` flag:
+and then check for the ``sys._called_from_test`` flag:

 .. code-block:: python

-    if your_module._called_from_test:
+    if hasattr(sys, "_called_from_test"):
         # called from within a test run
         ...
     else:
         # called "normally"
         ...

-accordingly in your application.
+accordingly in your application.  It's also a good idea
+to use your own application module rather than ``sys``
+for handling flag.

 Adding info to test report header
 --------------------------------------------------------------
diff --git a/doc/en/getting-started.rst b/doc/en/getting-started.rst
index 2bdd68ea3..97347f126 100644
--- a/doc/en/getting-started.rst
+++ b/doc/en/getting-started.rst
@@ -28,7 +28,7 @@ Install ``pytest``
 .. code-block:: bash

     $ pytest --version
-    This is pytest version 5.x.y, imported from $PYTHON_PREFIX/lib/python3.6/site-packages/pytest.py
+    This is pytest version 5.x.y, imported from $PYTHON_PREFIX/lib/python3.7/site-packages/pytest.py

 .. _`simpletest`:

diff --git a/doc/en/reference.rst b/doc/en/reference.rst
index 4391cfcb1..9c3a4c731 100644
--- a/doc/en/reference.rst
+++ b/doc/en/reference.rst
@@ -59,7 +59,7 @@ pytest.raises

 **Tutorial**: :ref:`assertraises`.

-.. autofunction:: pytest.raises(expected_exception: Exception [, *, match])
+.. autofunction:: pytest.raises(expected_exception: Exception, [match])
     :with: excinfo

 pytest.deprecated_call
diff --git a/setup.cfg b/setup.cfg
index 0c0cb4861..60e866562 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -57,7 +57,7 @@ upload-dir = doc/en/build/html

 [check-manifest]
 ignore =
-  src/_pytest/_version.py
+  _pytest/_version.py

 [devpi:upload]
 formats = sdist.tgz,bdist_wheel
diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py
index 19d2a0e70..534bfe2a8 100644
--- a/src/_pytest/_code/code.py
+++ b/src/_pytest/_code/code.py
@@ -4,7 +4,6 @@ import sys
 import traceback
 from inspect import CO_VARARGS
 from inspect import CO_VARKEYWORDS
-from io import StringIO
 from traceback import format_exception_only
 from types import CodeType
 from types import TracebackType
@@ -137,7 +136,7 @@ class Frame:
     def exec_(self, code, **vars):
         """ exec 'code' in the frame

-            'vars' are optional; additional local variables
+            'vars' are optiona; additional local variables
         """
         f_locals = self.f_locals.copy()
         f_locals.update(vars)
@@ -207,7 +206,7 @@ class TracebackEntry:

     @property
     def locals(self):
-        """ locals of underlying frame """
+        """ locals of underlaying frame """
         return self.frame.f_locals

     def getfirstlinesource(self):
@@ -274,7 +273,7 @@ class TracebackEntry:

     @property
     def name(self):
-        """ co_name of underlying code """
+        """ co_name of underlaying code """
         return self.frame.code.raw.co_name


@@ -302,7 +301,7 @@ class Traceback(list):
     def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):
         """ return a Traceback instance wrapping part of this Traceback

-            by providing any combination of path, lineno and firstlineno, the
+            by provding any combination of path, lineno and firstlineno, the
             first frame to start the to-be-returned traceback is determined

             this allows cutting the first part of a Traceback instance e.g.
@@ -866,7 +865,7 @@ class TerminalRepr:
     def __str__(self):
         # FYI this is called from pytest-xdist's serialization of exception
         # information.
-        io = StringIO()
+        io = py.io.TextIO()
         tw = py.io.TerminalWriter(file=io)
         self.toterminal(tw)
         return io.getvalue().strip()
@@ -1003,7 +1002,7 @@ class ReprFileLocation(TerminalRepr):

     def toterminal(self, tw):
         # filename and lineno output for each entry,
-        # using an output format that most editors understand
+        # using an output format that most editors unterstand
         msg = self.message
         i = msg.find("\n")
         if i != -1:
diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py
index d1a11d0bf..c2a4e446f 100644
--- a/src/_pytest/assertion/util.py
+++ b/src/_pytest/assertion/util.py
@@ -31,6 +31,7 @@ def format_explanation(explanation):
     for when one explanation needs to span multiple lines, e.g. when
     displaying diffs.
     """
+    explanation = explanation
     lines = _split_explanation(explanation)
     result = _format_lines(lines)
     return "\n".join(result)
diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py
index 3f3c58b16..2e3d49c37 100644
--- a/src/_pytest/debugging.py
+++ b/src/_pytest/debugging.py
@@ -1,6 +1,5 @@
 """ interactive debugging with PDB, the Python Debugger. """
 import argparse
-import functools
 import pdb
 import sys
 from doctest import UnexpectedException
@@ -275,16 +274,13 @@ class PdbTrace:
 def _test_pytest_function(pyfuncitem):
     _pdb = pytestPDB._init_pdb("runcall")
     testfunction = pyfuncitem.obj
-
-    # we can't just return `partial(pdb.runcall, testfunction)` because (on
-    # python < 3.7.4) runcall's first param is `func`, which means we'd get
-    # an exception if one of the kwargs to testfunction was called `func`
-    @functools.wraps(testfunction)
-    def wrapper(*args, **kwargs):
-        func = functools.partial(testfunction, *args, **kwargs)
-        _pdb.runcall(func)
-
-    pyfuncitem.obj = wrapper
+    pyfuncitem.obj = _pdb.runcall
+    if "func" in pyfuncitem._fixtureinfo.argnames:  # pragma: no branch
+        raise ValueError("--trace can't be used with a fixture named func!")
+    pyfuncitem.funcargs["func"] = testfunction
+    new_list = list(pyfuncitem._fixtureinfo.argnames)
+    new_list.append("func")
+    pyfuncitem._fixtureinfo.argnames = tuple(new_list)


 def _enter_pdb(node, excinfo, rep):
diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py
index fb951106f..ba0f48ed3 100644
--- a/src/_pytest/junitxml.py
+++ b/src/_pytest/junitxml.py
@@ -513,7 +513,7 @@ class LogXML:
         key = nodeid, slavenode

         if key in self.node_reporters:
-            # TODO: breaks for --dist=each
+            # TODO: breasks for --dist=each
             return self.node_reporters[key]

         reporter = _NodeReporter(nodeid, self)
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index de8576910..054bfc866 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -2,7 +2,8 @@
 import logging
 import re
 from contextlib import contextmanager
-from io import StringIO
+
+import py

 import pytest
 from _pytest.compat import nullcontext
@@ -217,7 +218,7 @@ class LogCaptureHandler(logging.StreamHandler):

     def __init__(self):
         """Creates a new log handler."""
-        logging.StreamHandler.__init__(self, StringIO())
+        logging.StreamHandler.__init__(self, py.io.TextIO())
         self.records = []

     def emit(self, record):
@@ -227,7 +228,7 @@ class LogCaptureHandler(logging.StreamHandler):

     def reset(self):
         self.records = []
-        self.stream = StringIO()
+        self.stream = py.io.TextIO()


 class LogCaptureFixture:
diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index 3c205027d..ad65ed299 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -429,7 +429,7 @@ class Session(nodes.FSCollector):
             # one or more conftests are not in use at this fspath
             proxy = FSHookProxy(fspath, pm, remove_mods)
         else:
-            # all plugins are active for this fspath
+            # all plugis are active for this fspath
             proxy = self.config.hook
         return proxy

diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py
index 53822e98f..b9f2d61f8 100644
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -28,7 +28,7 @@ class MarkEvaluator:
         self._mark_name = name

     def __bool__(self):
-        # don't cache here to prevent staleness
+        # dont cache here to prevent staleness
         return bool(self._get_marks())

     __nonzero__ = __bool__
diff --git a/src/_pytest/mark/legacy.py b/src/_pytest/mark/legacy.py
index 3721e3b02..d14ea3a82 100644
--- a/src/_pytest/mark/legacy.py
+++ b/src/_pytest/mark/legacy.py
@@ -1,6 +1,6 @@
 """
 this is a place where we put datastructures used by legacy apis
-we hope to remove
+we hope ot remove
 """
 import keyword

diff --git a/src/_pytest/pytester.py b/src/_pytest/pytester.py
index e1db9b17b..0f3460741 100644
--- a/src/_pytest/pytester.py
+++ b/src/_pytest/pytester.py
@@ -10,7 +10,6 @@ import time
 import traceback
 from collections.abc import Sequence
 from fnmatch import fnmatch
-from io import StringIO
 from weakref import WeakKeyDictionary

 import py
@@ -1219,7 +1218,7 @@ def getdecoded(out):

 class LineComp:
     def __init__(self):
-        self.stringio = StringIO()
+        self.stringio = py.io.TextIO()

     def assert_contains_lines(self, lines2):
         """Assert that lines2 are contained (linearly) in lines1.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 306e5f217..913a93bc0 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -210,8 +210,8 @@ def pytest_pycollect_makeitem(collector, name, obj):
         # mock seems to store unbound methods (issue473), normalize it
         obj = getattr(obj, "__func__", obj)
         # We need to try and unwrap the function if it's a functools.partial
-        # or a functools.wrapped.
-        # We mustn't if it's been wrapped with mock.patch (python 2 only)
+        # or a funtools.wrapped.
+        # We musn't if it's been wrapped with mock.patch (python 2 only)
         if not (inspect.isfunction(obj) or inspect.isfunction(get_real_func(obj))):
             filename, lineno = getfslineno(obj)
             warnings.warn_explicit(
@@ -251,21 +251,18 @@ class PyobjMixin(PyobjContext):
     @property
     def obj(self):
         """Underlying Python object."""
-        self._mount_obj_if_needed()
-        return self._obj
-
-    @obj.setter
-    def obj(self, value):
-        self._obj = value
-
-    def _mount_obj_if_needed(self):
         obj = getattr(self, "_obj", None)
         if obj is None:
             self._obj = obj = self._getobj()
             # XXX evil hack
             # used to avoid Instance collector marker duplication
             if self._ALLOW_MARKERS:
-                self.own_markers.extend(get_unpacked_marks(obj))
+                self.own_markers.extend(get_unpacked_marks(self.obj))
+        return obj
+
+    @obj.setter
+    def obj(self, value):
+        self._obj = value

     def _getobj(self):
         """Gets the underlying Python object. May be overwritten by subclasses."""
@@ -432,14 +429,6 @@ class PyCollector(PyobjMixin, nodes.Collector):
 class Module(nodes.File, PyCollector):
     """ Collector for test classes and functions. """

-    def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):
-        if fspath.basename == "__init__.py":
-            self._ALLOW_MARKERS = False
-
-        nodes.FSCollector.__init__(
-            self, fspath, parent=parent, config=config, session=session, nodeid=nodeid
-        )
-
     def _getobj(self):
         return self._importtestmodule()

@@ -606,7 +595,7 @@ class Package(Module):
             # one or more conftests are not in use at this fspath
             proxy = FSHookProxy(fspath, pm, remove_mods)
         else:
-            # all plugins are active for this fspath
+            # all plugis are active for this fspath
             proxy = self.config.hook
         return proxy

@@ -639,7 +628,6 @@ class Package(Module):
         return path in self.session._initialpaths

     def collect(self):
-        self._mount_obj_if_needed()
         this_path = self.fspath.dirpath()
         init_module = this_path.join("__init__.py")
         if init_module.check(file=1) and path_matches_patterns(
@@ -977,12 +965,6 @@ class Metafunc(fixtures.FuncargnamesCompatAttr):
         )
         del argvalues

-        if "request" in argnames:
-            fail(
-                "'request' is a reserved name and cannot be used in @pytest.mark.parametrize",
-                pytrace=False,
-            )
-
         if scope is None:
             scope = _find_parametrized_scope(argnames, self._arg2fixturedefs, indirect)

diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index 49eec6129..d8030b926 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -1,4 +1,3 @@
-from io import StringIO
 from pprint import pprint
 from typing import Optional
 from typing import Union
@@ -181,7 +180,7 @@ class BaseReport:

 def _report_unserialization_failure(type_name, report_class, reportdict):
     url = "https://github.com/pytest-dev/pytest/issues"
-    stream = StringIO()
+    stream = py.io.TextIO()
     pprint("-" * 100, stream=stream)
     pprint("INTERNALERROR: Unknown entry type returned: %s" % type_name, stream=stream)
     pprint("report_name: %s" % report_class, stream=stream)
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index d18f61ef4..53737816f 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -122,7 +122,7 @@ def pytest_runtest_makereport(item, call):
     outcome = yield
     rep = outcome.get_result()
     evalxfail = getattr(item, "_evalxfail", None)
-    # unittest special case, see setting of _unexpectedsuccess
+    # unitttest special case, see setting of _unexpectedsuccess
     if hasattr(item, "_unexpectedsuccess") and rep.when == "call":

         if item._unexpectedsuccess:
@@ -132,7 +132,7 @@ def pytest_runtest_makereport(item, call):
         rep.outcome = "failed"

     elif item.config.option.runxfail:
-        pass  # don't interfere
+        pass  # don't interefere
     elif call.excinfo and call.excinfo.errisinstance(xfail.Exception):
         rep.wasxfail = "reason: " + call.excinfo.value.msg
         rep.outcome = "skipped"
diff --git a/testing/freeze/runtests_script.py b/testing/freeze/runtests_script.py
index 591863016..d03bca840 100644
--- a/testing/freeze/runtests_script.py
+++ b/testing/freeze/runtests_script.py
@@ -1,6 +1,6 @@
 """
 This is the script that is actually frozen into an executable: simply executes
-pytest main().
+py.test main().
 """

 if __name__ == "__main__":
diff --git a/testing/python/collect.py b/testing/python/collect.py
index f0c12df16..e6dd3e870 100644
--- a/testing/python/collect.py
+++ b/testing/python/collect.py
@@ -1148,7 +1148,7 @@ def test_dont_collect_non_function_callable(testdir):
     """Test for issue https://github.com/pytest-dev/pytest/issues/331

     In this case an INTERNALERROR occurred trying to report the failure of
-    a test like this one because pytest failed to get the source lines.
+    a test like this one because py test failed to get the source lines.
     """
     testdir.makepyfile(
         """
diff --git a/testing/python/metafunc.py b/testing/python/metafunc.py
index 860b21ff2..4273ab796 100644
--- a/testing/python/metafunc.py
+++ b/testing/python/metafunc.py
@@ -15,7 +15,7 @@ class TestMetafunc:
     def Metafunc(self, func, config=None):
         # the unit tests of this class check if things work correctly
         # on the funcarg level, so we don't need a full blown
-        # initialization
+        # initiliazation
         class FixtureInfo:
             name2fixturedefs = None

@@ -72,19 +72,6 @@ class TestMetafunc:
         ):
             metafunc.parametrize("x", [1], scope="doggy")

-    def test_parametrize_request_name(self, testdir):
-        """Show proper error  when 'request' is used as a parameter name in parametrize (#6183)"""
-
-        def func(request):
-            raise NotImplementedError()
-
-        metafunc = self.Metafunc(func)
-        with pytest.raises(
-            pytest.fail.Exception,
-            match=r"'request' is a reserved name and cannot be used in @pytest.mark.parametrize",
-        ):
-            metafunc.parametrize("request", [1])
-
     def test_find_parametrized_scope(self):
         """unittest for _find_parametrized_scope (#3941)"""
         from _pytest.python import _find_parametrized_scope
diff --git a/testing/test_capture.py b/testing/test_capture.py
index 139655c72..f5b193597 100644
--- a/testing/test_capture.py
+++ b/testing/test_capture.py
@@ -5,9 +5,10 @@ import pickle
 import subprocess
 import sys
 import textwrap
-from io import StringIO
 from io import UnsupportedOperation

+import py
+
 import pytest
 from _pytest import capture
 from _pytest.capture import CaptureManager
@@ -891,10 +892,10 @@ def test_dupfile_on_bytesio():


 def test_dupfile_on_textio():
-    sio = StringIO()
-    f = capture.safe_text_dupfile(sio, "wb")
+    tio = py.io.TextIO()
+    f = capture.safe_text_dupfile(tio, "wb")
     f.write("hello")
-    assert sio.getvalue() == "hello"
+    assert tio.getvalue() == "hello"
     assert not hasattr(f, "name")


diff --git a/testing/test_mark.py b/testing/test_mark.py
index 764d523a3..c8d5851ac 100644
--- a/testing/test_mark.py
+++ b/testing/test_mark.py
@@ -482,7 +482,7 @@ class TestFunctional:
         items, rec = testdir.inline_genitems(p)
         base_item, sub_item, sub_item_other = items
         print(items, [x.nodeid for x in items])
-        # new api segregates
+        # new api seregates
         assert not list(base_item.iter_markers(name="b"))
         assert not list(sub_item_other.iter_markers(name="b"))
         assert list(sub_item.iter_markers(name="b"))
diff --git a/testing/test_nose.py b/testing/test_nose.py
index 8a30755c9..16d8d1fc0 100644
--- a/testing/test_nose.py
+++ b/testing/test_nose.py
@@ -229,7 +229,7 @@ def test_nose_setup_ordering(testdir):

 def test_apiwrapper_problem_issue260(testdir):
     # this would end up trying a call an optional teardown on the class
-    # for plain unittests we don't want nose behaviour
+    # for plain unittests we dont want nose behaviour
     testdir.makepyfile(
         """
         import unittest
diff --git a/testing/test_parseopt.py b/testing/test_parseopt.py
index 915747378..d39065b82 100644
--- a/testing/test_parseopt.py
+++ b/testing/test_parseopt.py
@@ -304,7 +304,7 @@ def test_argcomplete(testdir, monkeypatch):
                 shlex.quote(sys.executable)
             )
         )
-    # alternative would be extended Testdir.{run(),_run(),popen()} to be able
+    # alternative would be exteneded Testdir.{run(),_run(),popen()} to be able
     # to handle a keyword argument env that replaces os.environ in popen or
     # extends the copy, advantage: could not forget to restore
     monkeypatch.setenv("_ARGCOMPLETE", "1")
diff --git a/testing/test_pdb.py b/testing/test_pdb.py
index 55a7230f4..924c2f4af 100644
--- a/testing/test_pdb.py
+++ b/testing/test_pdb.py
@@ -581,7 +581,7 @@ class TestPDB:
         # No extra newline.
         assert child.before.endswith(b"c\r\nprint_from_foo\r\n")

-        # set_debug should not raise outcomes. Exit, if used recursively.
+        # set_debug should not raise outcomes.Exit, if used recrursively.
         child.sendline("debug 42")
         child.sendline("q")
         child.expect("LEAVING RECURSIVE DEBUGGER")
@@ -1025,51 +1025,6 @@ class TestTraceOption:
         assert "Exit: Quitting debugger" not in child.before.decode("utf8")
         TestPDB.flush(child)

-    def test_trace_with_parametrize_handles_shared_fixtureinfo(self, testdir):
-        p1 = testdir.makepyfile(
-            """
-            import pytest
-            @pytest.mark.parametrize('myparam', [1,2])
-            def test_1(myparam, request):
-                assert myparam in (1, 2)
-                assert request.function.__name__ == "test_1"
-            @pytest.mark.parametrize('func', [1,2])
-            def test_func(func, request):
-                assert func in (1, 2)
-                assert request.function.__name__ == "test_func"
-            @pytest.mark.parametrize('myparam', [1,2])
-            def test_func_kw(myparam, request, func="func_kw"):
-                assert myparam in (1, 2)
-                assert func == "func_kw"
-                assert request.function.__name__ == "test_func_kw"
-            """
-        )
-        child = testdir.spawn_pytest("--trace " + str(p1))
-        for func, argname in [
-            ("test_1", "myparam"),
-            ("test_func", "func"),
-            ("test_func_kw", "myparam"),
-        ]:
-            child.expect_exact("> PDB runcall (IO-capturing turned off) >")
-            child.expect_exact(func)
-            child.expect_exact("Pdb")
-            child.sendline("args")
-            child.expect_exact("{} = 1\r\n".format(argname))
-            child.expect_exact("Pdb")
-            child.sendline("c")
-            child.expect_exact("Pdb")
-            child.sendline("args")
-            child.expect_exact("{} = 2\r\n".format(argname))
-            child.expect_exact("Pdb")
-            child.sendline("c")
-            child.expect_exact("> PDB continue (IO-capturing resumed) >")
-        rest = child.read().decode("utf8")
-        assert "6 passed in" in rest
-        assert "reading from stdin while output" not in rest
-        # Only printed once - not on stderr.
-        assert "Exit: Quitting debugger" not in child.before.decode("utf8")
-        TestPDB.flush(child)
-

 def test_trace_after_runpytest(testdir):
     """Test that debugging's pytest_configure is re-entrant."""
@@ -1195,6 +1150,7 @@ def test_pdbcls_via_local_module(testdir):

                 def runcall(self, *args, **kwds):
                     print("runcall_called", args, kwds)
+                    assert "func" in kwds
         """,
     )
     result = testdir.runpytest(
diff --git a/testing/test_reports.py b/testing/test_reports.py
index 9f6c56186..8bac0243a 100644
--- a/testing/test_reports.py
+++ b/testing/test_reports.py
@@ -133,17 +133,17 @@ class TestReportSerialization:
         """
         reprec = testdir.inline_runsource(
             """
-            import pytest
+            import py
             def test_pass(): pass
             def test_fail(): 0/0
-            @pytest.mark.skipif("True")
+            @py.test.mark.skipif("True")
             def test_skip(): pass
             def test_skip_imperative():
-                pytest.skip("hello")
-            @pytest.mark.xfail("True")
+                py.test.skip("hello")
+            @py.test.mark.xfail("True")
             def test_xfail(): 0/0
             def test_xfail_imperative():
-                pytest.xfail("hello")
+                py.test.xfail("hello")
         """
         )
         reports = reprec.getreports("pytest_runtest_logreport")
diff --git a/testing/test_resultlog.py b/testing/test_resultlog.py
index b6f957b40..9e8f62135 100644
--- a/testing/test_resultlog.py
+++ b/testing/test_resultlog.py
@@ -1,5 +1,6 @@
 import os
-from io import StringIO
+
+import py

 import _pytest._code
 import pytest
@@ -12,7 +13,7 @@ pytestmark = pytest.mark.filterwarnings("ignore:--result-log is deprecated")

 def test_write_log_entry():
     reslog = ResultLog(None, None)
-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     reslog.write_log_entry("name", ".", "")
     entry = reslog.logfile.getvalue()
     assert entry[-1] == "\n"
@@ -20,7 +21,7 @@ def test_write_log_entry():
     assert len(entry_lines) == 1
     assert entry_lines[0] == ". name"

-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     reslog.write_log_entry("name", "s", "Skipped")
     entry = reslog.logfile.getvalue()
     assert entry[-1] == "\n"
@@ -29,7 +30,7 @@ def test_write_log_entry():
     assert entry_lines[0] == "s name"
     assert entry_lines[1] == " Skipped"

-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     reslog.write_log_entry("name", "s", "Skipped\n")
     entry = reslog.logfile.getvalue()
     assert entry[-1] == "\n"
@@ -38,7 +39,7 @@ def test_write_log_entry():
     assert entry_lines[0] == "s name"
     assert entry_lines[1] == " Skipped"

-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     longrepr = " tb1\n tb 2\nE tb3\nSome Error"
     reslog.write_log_entry("name", "F", longrepr)
     entry = reslog.logfile.getvalue()
@@ -117,7 +118,7 @@ class TestWithFunctionIntegration:
             raise ValueError
         except ValueError:
             excinfo = _pytest._code.ExceptionInfo.from_current()
-        reslog = ResultLog(None, StringIO())
+        reslog = ResultLog(None, py.io.TextIO())
         reslog.pytest_internalerror(excinfo.getrepr(style=style))
         entry = reslog.logfile.getvalue()
         entry_lines = entry.splitlines()
diff --git a/testing/test_skipping.py b/testing/test_skipping.py
index 371c3a4db..8bba479f1 100644
--- a/testing/test_skipping.py
+++ b/testing/test_skipping.py
@@ -1162,26 +1162,3 @@ def test_importorskip():
         match="^could not import 'doesnotexist': No module named .*",
     ):
         pytest.importorskip("doesnotexist")
-
-
-def test_skip_package(testdir):
-    testdir.makepyfile(
-        __init__="""
-        import pytest
-        pytestmark = pytest.mark.skip
-    """
-    )
-
-    testdir.makepyfile(
-        """
-        import pytest
-        def test_skip1():
-            assert 0
-        def test_skip2():
-            assert 0
-    """
-    )
-
-    result = testdir.inline_run()
-    _, skipped, _ = result.listoutcomes()
-    assert len(skipped) == 2
diff --git a/testing/test_stepwise.py b/testing/test_stepwise.py
index 032351e7f..f61425b6b 100644
--- a/testing/test_stepwise.py
+++ b/testing/test_stepwise.py
@@ -4,7 +4,7 @@ import pytest
 @pytest.fixture
 def stepwise_testdir(testdir):
     # Rather than having to modify our testfile between tests, we introduce
-    # a flag for whether or not the second test should fail.
+    # a flag for wether or not the second test should fail.
     testdir.makeconftest(
         """
 def pytest_addoption(parser):
diff --git a/testing/test_terminal.py b/testing/test_terminal.py
index 2cdfc6ca8..88f96f894 100644
--- a/testing/test_terminal.py
+++ b/testing/test_terminal.py
@@ -5,7 +5,6 @@ import collections
 import os
 import sys
 import textwrap
-from io import StringIO

 import pluggy
 import py
@@ -269,7 +268,7 @@ class TestTerminal:

     def test_rewrite(self, testdir, monkeypatch):
         config = testdir.parseconfig()
-        f = StringIO()
+        f = py.io.TextIO()
         monkeypatch.setattr(f, "isatty", lambda *args: True)
         tr = TerminalReporter(config, f)
         tr._tw.fullwidth = 10
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-17 06:33:20,276 - INFO - ------------------------------
2025-01-17 06:33:20,276 - INFO - END Runtime Completion Fn
2025-01-17 06:33:20,276 - INFO - ------------------------------
2025-01-17 06:33:20,276 - INFO - Got git diff for instance pytest-dev__pytest-6197:
--------
diff --git a/.github/PULL_REQUEST_TEMPLATE.md b/.github/PULL_REQUEST_TEMPLATE.md
index 7436f7146..f516959bc 100644
--- a/.github/PULL_REQUEST_TEMPLATE.md
+++ b/.github/PULL_REQUEST_TEMPLATE.md
@@ -2,14 +2,15 @@
 Thanks for submitting a PR, your contribution is really appreciated!

 Here is a quick checklist that should be present in PRs.
+(please delete this text from the final description, this is just a guideline)
+-->

 - [ ] Target the `master` branch for bug fixes, documentation updates and trivial changes.
 - [ ] Target the `features` branch for new features, improvements, and removals/deprecations.
 - [ ] Include documentation when adding new features.
 - [ ] Include new tests or update existing tests when applicable.

-Unless your change is trivial or a small documentation fix (e.g., a typo or reword of a small section) please:
+Unless your change is trivial or a small documentation fix (e.g.,  a typo or reword of a small section) please:

 - [ ] Create a new changelog file in the `changelog` folder, with a name like `<ISSUE NUMBER>.<TYPE>.rst`. See [changelog/README.rst](https://github.com/pytest-dev/pytest/blob/master/changelog/README.rst) for details.
-- [ ] Add yourself to `AUTHORS` in alphabetical order.
--->
+- [ ] Add yourself to `AUTHORS` in alphabetical order;
diff --git a/.travis.yml b/.travis.yml
index 1de8a3009..b77c3f595 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -60,7 +60,7 @@ jobs:
     - env: TOXENV=py37-freeze

     - env: TOXENV=py38-xdist
-      python: '3.8'
+      python: '3.8-dev'

     - stage: baseline
       env: TOXENV=py36-xdist
@@ -94,6 +94,11 @@ jobs:
           tags: true
           repo: pytest-dev/pytest

+matrix:
+  allow_failures:
+    - python: '3.8-dev'
+      env: TOXENV=py38-xdist
+
 before_script:
   - |
     # Do not (re-)upload coverage with cron runs.
diff --git a/AUTHORS b/AUTHORS
index d0e584f63..e11400c1f 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -70,7 +70,6 @@ Daniel Hahler
 Daniel Nuri
 Daniel Wandschneider
 Danielle Jenkins
-Daniil Galiev
 Dave Hunt
 David Díaz-Barquero
 David Mohr
diff --git a/CHANGELOG.rst b/CHANGELOG.rst
index 87ffb9e07..0d6b8188f 100644
--- a/CHANGELOG.rst
+++ b/CHANGELOG.rst
@@ -13,27 +13,11 @@ with advance notice in the **Deprecations** section of releases.
     file is managed by towncrier. You *may* edit previous change logs to
     fix problems like typo corrections or such.
     To add a new change log entry, please see
-    https://pip.pypa.io/en/latest/development/contributing/#news-entries
+    https://pip.pypa.io/en/latest/development/#adding-a-news-entry
     we named the news folder changelog

 .. towncrier release notes start

-pytest 5.2.3 (2019-11-14)
-=========================
-
-Bug Fixes
----------
-
-- `#5830 <https://github.com/pytest-dev/pytest/issues/5830>`_: The first test in a package (``__init__.py``) marked with ``@pytest.mark.skip`` is now correctly skipped.
-
-
-- `#6099 <https://github.com/pytest-dev/pytest/issues/6099>`_: Fix ``--trace`` when used with parametrized functions.
-
-
-- `#6183 <https://github.com/pytest-dev/pytest/issues/6183>`_: Using ``request`` as a parameter name in ``@pytest.mark.parametrize`` now produces a more
-  user-friendly error.
-
-
 pytest 5.2.2 (2019-10-24)
 =========================

@@ -63,6 +47,33 @@ Bug Fixes
 - `#5902 <https://github.com/pytest-dev/pytest/issues/5902>`_: Fix warnings about deprecated ``cmp`` attribute in ``attrs>=19.2``.


+pytest 4.6.6 (2019-10-11)
+=========================
+
+Bug Fixes
+---------
+
+- `#5523 <https://github.com/pytest-dev/pytest/issues/5523>`_: Fixed using multiple short options together in the command-line (for example ``-vs``) in Python 3.8+.
+
+
+- `#5537 <https://github.com/pytest-dev/pytest/issues/5537>`_: Replace ``importlib_metadata`` backport with ``importlib.metadata`` from the
+  standard library on Python 3.8+.
+
+
+- `#5806 <https://github.com/pytest-dev/pytest/issues/5806>`_: Fix "lexer" being used when uploading to bpaste.net from ``--pastebin`` to "text".
+
+
+- `#5902 <https://github.com/pytest-dev/pytest/issues/5902>`_: Fix warnings about deprecated ``cmp`` attribute in ``attrs>=19.2``.
+
+
+
+Trivial/Internal Changes
+------------------------
+
+- `#5801 <https://github.com/pytest-dev/pytest/issues/5801>`_: Fixes python version checks (detected by ``flake8-2020``) in case python4 becomes a thing.
+
+
+
 pytest 5.2.0 (2019-09-28)
 =========================

@@ -533,32 +544,6 @@ Improved Documentation
 - `#5416 <https://github.com/pytest-dev/pytest/issues/5416>`_: Fix PytestUnknownMarkWarning in run/skip example.


-pytest 4.6.6 (2019-10-11)
-=========================
-
-Bug Fixes
----------
-
-- `#5523 <https://github.com/pytest-dev/pytest/issues/5523>`_: Fixed using multiple short options together in the command-line (for example ``-vs``) in Python 3.8+.
-
-
-- `#5537 <https://github.com/pytest-dev/pytest/issues/5537>`_: Replace ``importlib_metadata`` backport with ``importlib.metadata`` from the
-  standard library on Python 3.8+.
-
-
-- `#5806 <https://github.com/pytest-dev/pytest/issues/5806>`_: Fix "lexer" being used when uploading to bpaste.net from ``--pastebin`` to "text".
-
-
-- `#5902 <https://github.com/pytest-dev/pytest/issues/5902>`_: Fix warnings about deprecated ``cmp`` attribute in ``attrs>=19.2``.
-
-
-
-Trivial/Internal Changes
-------------------------
-
-- `#5801 <https://github.com/pytest-dev/pytest/issues/5801>`_: Fixes python version checks (detected by ``flake8-2020``) in case python4 becomes a thing.
-
-
 pytest 4.6.5 (2019-08-05)
 =========================

diff --git a/doc/en/announce/index.rst b/doc/en/announce/index.rst
index 05530dd2e..f7a634b31 100644
--- a/doc/en/announce/index.rst
+++ b/doc/en/announce/index.rst
@@ -6,7 +6,6 @@ Release announcements
    :maxdepth: 2


-   release-5.2.3
    release-5.2.2
    release-5.2.1
    release-5.2.0
diff --git a/doc/en/announce/release-5.2.3.rst b/doc/en/announce/release-5.2.3.rst
deleted file mode 100644
index bfb62a1b8..000000000
--- a/doc/en/announce/release-5.2.3.rst
+++ /dev/null
@@ -1,28 +0,0 @@
-pytest-5.2.3
-=======================================
-
-pytest 5.2.3 has just been released to PyPI.
-
-This is a bug-fix release, being a drop-in replacement. To upgrade::
-
-  pip install --upgrade pytest
-
-The full changelog is available at https://docs.pytest.org/en/latest/changelog.html.
-
-Thanks to all who contributed to this release, among them:
-
-* Anthony Sottile
-* Brett Cannon
-* Bruno Oliveira
-* Daniel Hahler
-* Daniil Galiev
-* David Szotten
-* Florian Bruhin
-* Patrick Harmon
-* Ran Benita
-* Zac Hatfield-Dodds
-* Zak Hassan
-
-
-Happy testing,
-The pytest Development Team
diff --git a/doc/en/example/parametrize.rst b/doc/en/example/parametrize.rst
index 48ab95fda..1220cfb4d 100644
--- a/doc/en/example/parametrize.rst
+++ b/doc/en/example/parametrize.rst
@@ -475,10 +475,10 @@ Running it results in some skips if we don't have all the python interpreters in
 .. code-block:: pytest

    . $ pytest -rs -q multipython.py
-   ssssssssssss...ssssssssssss                                          [100%]
+   ssssssssssssssssssssssss...                                          [100%]
    ========================= short test summary info ==========================
    SKIPPED [12] $REGENDOC_TMPDIR/CWD/multipython.py:30: 'python3.5' not found
-   SKIPPED [12] $REGENDOC_TMPDIR/CWD/multipython.py:30: 'python3.7' not found
+   SKIPPED [12] $REGENDOC_TMPDIR/CWD/multipython.py:30: 'python3.6' not found
    3 passed, 24 skipped in 0.12s

 Indirect parametrization of optional implementations/imports
diff --git a/doc/en/example/reportingdemo.rst b/doc/en/example/reportingdemo.rst
index 1c06782f6..eb978c5ea 100644
--- a/doc/en/example/reportingdemo.rst
+++ b/doc/en/example/reportingdemo.rst
@@ -436,7 +436,7 @@ Here is a nice run of several failures and how ``pytest`` presents things:
             items = [1, 2, 3]
             print("items is {!r}".format(items))
     >       a, b = items.pop()
-    E       TypeError: 'int' object is not iterable
+    E       TypeError: cannot unpack non-iterable int object

     failure_demo.py:181: TypeError
     --------------------------- Captured stdout call ---------------------------
@@ -516,7 +516,7 @@ Here is a nice run of several failures and how ``pytest`` presents things:
         def test_z2_type_error(self):
             items = 3
     >       a, b = items
-    E       TypeError: 'int' object is not iterable
+    E       TypeError: cannot unpack non-iterable int object

     failure_demo.py:222: TypeError
     ______________________ TestMoreErrors.test_startswith ______________________
diff --git a/doc/en/example/simple.rst b/doc/en/example/simple.rst
index 05ccbc9b2..a7cd06d31 100644
--- a/doc/en/example/simple.rst
+++ b/doc/en/example/simple.rst
@@ -302,31 +302,34 @@ running from a test you can do something like this:

 .. code-block:: python

-    # content of your_module.py
+    # content of conftest.py


-    _called_from_test = False
+    def pytest_configure(config):
+        import sys

-.. code-block:: python
+        sys._called_from_test = True

-    # content of conftest.py

+    def pytest_unconfigure(config):
+        import sys

-    def pytest_configure(config):
-        your_module._called_from_test = True
+        del sys._called_from_test

-and then check for the ``your_module._called_from_test`` flag:
+and then check for the ``sys._called_from_test`` flag:

 .. code-block:: python

-    if your_module._called_from_test:
+    if hasattr(sys, "_called_from_test"):
         # called from within a test run
         ...
     else:
         # called "normally"
         ...

-accordingly in your application.
+accordingly in your application.  It's also a good idea
+to use your own application module rather than ``sys``
+for handling flag.

 Adding info to test report header
 --------------------------------------------------------------
diff --git a/doc/en/getting-started.rst b/doc/en/getting-started.rst
index 2bdd68ea3..97347f126 100644
--- a/doc/en/getting-started.rst
+++ b/doc/en/getting-started.rst
@@ -28,7 +28,7 @@ Install ``pytest``
 .. code-block:: bash

     $ pytest --version
-    This is pytest version 5.x.y, imported from $PYTHON_PREFIX/lib/python3.6/site-packages/pytest.py
+    This is pytest version 5.x.y, imported from $PYTHON_PREFIX/lib/python3.7/site-packages/pytest.py

 .. _`simpletest`:

diff --git a/doc/en/reference.rst b/doc/en/reference.rst
index 4391cfcb1..9c3a4c731 100644
--- a/doc/en/reference.rst
+++ b/doc/en/reference.rst
@@ -59,7 +59,7 @@ pytest.raises

 **Tutorial**: :ref:`assertraises`.

-.. autofunction:: pytest.raises(expected_exception: Exception [, *, match])
+.. autofunction:: pytest.raises(expected_exception: Exception, [match])
     :with: excinfo

 pytest.deprecated_call
diff --git a/setup.cfg b/setup.cfg
index 0c0cb4861..60e866562 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -57,7 +57,7 @@ upload-dir = doc/en/build/html

 [check-manifest]
 ignore =
-  src/_pytest/_version.py
+  _pytest/_version.py

 [devpi:upload]
 formats = sdist.tgz,bdist_wheel
diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py
index 19d2a0e70..534bfe2a8 100644
--- a/src/_pytest/_code/code.py
+++ b/src/_pytest/_code/code.py
@@ -4,7 +4,6 @@ import sys
 import traceback
 from inspect import CO_VARARGS
 from inspect import CO_VARKEYWORDS
-from io import StringIO
 from traceback import format_exception_only
 from types import CodeType
 from types import TracebackType
@@ -137,7 +136,7 @@ class Frame:
     def exec_(self, code, **vars):
         """ exec 'code' in the frame

-            'vars' are optional; additional local variables
+            'vars' are optiona; additional local variables
         """
         f_locals = self.f_locals.copy()
         f_locals.update(vars)
@@ -207,7 +206,7 @@ class TracebackEntry:

     @property
     def locals(self):
-        """ locals of underlying frame """
+        """ locals of underlaying frame """
         return self.frame.f_locals

     def getfirstlinesource(self):
@@ -274,7 +273,7 @@ class TracebackEntry:

     @property
     def name(self):
-        """ co_name of underlying code """
+        """ co_name of underlaying code """
         return self.frame.code.raw.co_name


@@ -302,7 +301,7 @@ class Traceback(list):
     def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):
         """ return a Traceback instance wrapping part of this Traceback

-            by providing any combination of path, lineno and firstlineno, the
+            by provding any combination of path, lineno and firstlineno, the
             first frame to start the to-be-returned traceback is determined

             this allows cutting the first part of a Traceback instance e.g.
@@ -866,7 +865,7 @@ class TerminalRepr:
     def __str__(self):
         # FYI this is called from pytest-xdist's serialization of exception
         # information.
-        io = StringIO()
+        io = py.io.TextIO()
         tw = py.io.TerminalWriter(file=io)
         self.toterminal(tw)
         return io.getvalue().strip()
@@ -1003,7 +1002,7 @@ class ReprFileLocation(TerminalRepr):

     def toterminal(self, tw):
         # filename and lineno output for each entry,
-        # using an output format that most editors understand
+        # using an output format that most editors unterstand
         msg = self.message
         i = msg.find("\n")
         if i != -1:
diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py
index d1a11d0bf..c2a4e446f 100644
--- a/src/_pytest/assertion/util.py
+++ b/src/_pytest/assertion/util.py
@@ -31,6 +31,7 @@ def format_explanation(explanation):
     for when one explanation needs to span multiple lines, e.g. when
     displaying diffs.
     """
+    explanation = explanation
     lines = _split_explanation(explanation)
     result = _format_lines(lines)
     return "\n".join(result)
diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py
index 3f3c58b16..2e3d49c37 100644
--- a/src/_pytest/debugging.py
+++ b/src/_pytest/debugging.py
@@ -1,6 +1,5 @@
 """ interactive debugging with PDB, the Python Debugger. """
 import argparse
-import functools
 import pdb
 import sys
 from doctest import UnexpectedException
@@ -275,16 +274,13 @@ class PdbTrace:
 def _test_pytest_function(pyfuncitem):
     _pdb = pytestPDB._init_pdb("runcall")
     testfunction = pyfuncitem.obj
-
-    # we can't just return `partial(pdb.runcall, testfunction)` because (on
-    # python < 3.7.4) runcall's first param is `func`, which means we'd get
-    # an exception if one of the kwargs to testfunction was called `func`
-    @functools.wraps(testfunction)
-    def wrapper(*args, **kwargs):
-        func = functools.partial(testfunction, *args, **kwargs)
-        _pdb.runcall(func)
-
-    pyfuncitem.obj = wrapper
+    pyfuncitem.obj = _pdb.runcall
+    if "func" in pyfuncitem._fixtureinfo.argnames:  # pragma: no branch
+        raise ValueError("--trace can't be used with a fixture named func!")
+    pyfuncitem.funcargs["func"] = testfunction
+    new_list = list(pyfuncitem._fixtureinfo.argnames)
+    new_list.append("func")
+    pyfuncitem._fixtureinfo.argnames = tuple(new_list)


 def _enter_pdb(node, excinfo, rep):
diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py
index fb951106f..ba0f48ed3 100644
--- a/src/_pytest/junitxml.py
+++ b/src/_pytest/junitxml.py
@@ -513,7 +513,7 @@ class LogXML:
         key = nodeid, slavenode

         if key in self.node_reporters:
-            # TODO: breaks for --dist=each
+            # TODO: breasks for --dist=each
             return self.node_reporters[key]

         reporter = _NodeReporter(nodeid, self)
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index de8576910..054bfc866 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -2,7 +2,8 @@
 import logging
 import re
 from contextlib import contextmanager
-from io import StringIO
+
+import py

 import pytest
 from _pytest.compat import nullcontext
@@ -217,7 +218,7 @@ class LogCaptureHandler(logging.StreamHandler):

     def __init__(self):
         """Creates a new log handler."""
-        logging.StreamHandler.__init__(self, StringIO())
+        logging.StreamHandler.__init__(self, py.io.TextIO())
         self.records = []

     def emit(self, record):
@@ -227,7 +228,7 @@ class LogCaptureHandler(logging.StreamHandler):

     def reset(self):
         self.records = []
-        self.stream = StringIO()
+        self.stream = py.io.TextIO()


 class LogCaptureFixture:
diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index 3c205027d..ad65ed299 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -429,7 +429,7 @@ class Session(nodes.FSCollector):
             # one or more conftests are not in use at this fspath
             proxy = FSHookProxy(fspath, pm, remove_mods)
         else:
-            # all plugins are active for this fspath
+            # all plugis are active for this fspath
             proxy = self.config.hook
         return proxy

diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py
index 53822e98f..b9f2d61f8 100644
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -28,7 +28,7 @@ class MarkEvaluator:
         self._mark_name = name

     def __bool__(self):
-        # don't cache here to prevent staleness
+        # dont cache here to prevent staleness
         return bool(self._get_marks())

     __nonzero__ = __bool__
diff --git a/src/_pytest/mark/legacy.py b/src/_pytest/mark/legacy.py
index 3721e3b02..d14ea3a82 100644
--- a/src/_pytest/mark/legacy.py
+++ b/src/_pytest/mark/legacy.py
@@ -1,6 +1,6 @@
 """
 this is a place where we put datastructures used by legacy apis
-we hope to remove
+we hope ot remove
 """
 import keyword

diff --git a/src/_pytest/pytester.py b/src/_pytest/pytester.py
index e1db9b17b..0f3460741 100644
--- a/src/_pytest/pytester.py
+++ b/src/_pytest/pytester.py
@@ -10,7 +10,6 @@ import time
 import traceback
 from collections.abc import Sequence
 from fnmatch import fnmatch
-from io import StringIO
 from weakref import WeakKeyDictionary

 import py
@@ -1219,7 +1218,7 @@ def getdecoded(out):

 class LineComp:
     def __init__(self):
-        self.stringio = StringIO()
+        self.stringio = py.io.TextIO()

     def assert_contains_lines(self, lines2):
         """Assert that lines2 are contained (linearly) in lines1.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 306e5f217..913a93bc0 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -210,8 +210,8 @@ def pytest_pycollect_makeitem(collector, name, obj):
         # mock seems to store unbound methods (issue473), normalize it
         obj = getattr(obj, "__func__", obj)
         # We need to try and unwrap the function if it's a functools.partial
-        # or a functools.wrapped.
-        # We mustn't if it's been wrapped with mock.patch (python 2 only)
+        # or a funtools.wrapped.
+        # We musn't if it's been wrapped with mock.patch (python 2 only)
         if not (inspect.isfunction(obj) or inspect.isfunction(get_real_func(obj))):
             filename, lineno = getfslineno(obj)
             warnings.warn_explicit(
@@ -251,21 +251,18 @@ class PyobjMixin(PyobjContext):
     @property
     def obj(self):
         """Underlying Python object."""
-        self._mount_obj_if_needed()
-        return self._obj
-
-    @obj.setter
-    def obj(self, value):
-        self._obj = value
-
-    def _mount_obj_if_needed(self):
         obj = getattr(self, "_obj", None)
         if obj is None:
             self._obj = obj = self._getobj()
             # XXX evil hack
             # used to avoid Instance collector marker duplication
             if self._ALLOW_MARKERS:
-                self.own_markers.extend(get_unpacked_marks(obj))
+                self.own_markers.extend(get_unpacked_marks(self.obj))
+        return obj
+
+    @obj.setter
+    def obj(self, value):
+        self._obj = value

     def _getobj(self):
         """Gets the underlying Python object. May be overwritten by subclasses."""
@@ -432,14 +429,6 @@ class PyCollector(PyobjMixin, nodes.Collector):
 class Module(nodes.File, PyCollector):
     """ Collector for test classes and functions. """

-    def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):
-        if fspath.basename == "__init__.py":
-            self._ALLOW_MARKERS = False
-
-        nodes.FSCollector.__init__(
-            self, fspath, parent=parent, config=config, session=session, nodeid=nodeid
-        )
-
     def _getobj(self):
         return self._importtestmodule()

@@ -606,7 +595,7 @@ class Package(Module):
             # one or more conftests are not in use at this fspath
             proxy = FSHookProxy(fspath, pm, remove_mods)
         else:
-            # all plugins are active for this fspath
+            # all plugis are active for this fspath
             proxy = self.config.hook
         return proxy

@@ -639,7 +628,6 @@ class Package(Module):
         return path in self.session._initialpaths

     def collect(self):
-        self._mount_obj_if_needed()
         this_path = self.fspath.dirpath()
         init_module = this_path.join("__init__.py")
         if init_module.check(file=1) and path_matches_patterns(
@@ -977,12 +965,6 @@ class Metafunc(fixtures.FuncargnamesCompatAttr):
         )
         del argvalues

-        if "request" in argnames:
-            fail(
-                "'request' is a reserved name and cannot be used in @pytest.mark.parametrize",
-                pytrace=False,
-            )
-
         if scope is None:
             scope = _find_parametrized_scope(argnames, self._arg2fixturedefs, indirect)

diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index 49eec6129..d8030b926 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -1,4 +1,3 @@
-from io import StringIO
 from pprint import pprint
 from typing import Optional
 from typing import Union
@@ -181,7 +180,7 @@ class BaseReport:

 def _report_unserialization_failure(type_name, report_class, reportdict):
     url = "https://github.com/pytest-dev/pytest/issues"
-    stream = StringIO()
+    stream = py.io.TextIO()
     pprint("-" * 100, stream=stream)
     pprint("INTERNALERROR: Unknown entry type returned: %s" % type_name, stream=stream)
     pprint("report_name: %s" % report_class, stream=stream)
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index d18f61ef4..53737816f 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -122,7 +122,7 @@ def pytest_runtest_makereport(item, call):
     outcome = yield
     rep = outcome.get_result()
     evalxfail = getattr(item, "_evalxfail", None)
-    # unittest special case, see setting of _unexpectedsuccess
+    # unitttest special case, see setting of _unexpectedsuccess
     if hasattr(item, "_unexpectedsuccess") and rep.when == "call":

         if item._unexpectedsuccess:
@@ -132,7 +132,7 @@ def pytest_runtest_makereport(item, call):
         rep.outcome = "failed"

     elif item.config.option.runxfail:
-        pass  # don't interfere
+        pass  # don't interefere
     elif call.excinfo and call.excinfo.errisinstance(xfail.Exception):
         rep.wasxfail = "reason: " + call.excinfo.value.msg
         rep.outcome = "skipped"
diff --git a/testing/freeze/runtests_script.py b/testing/freeze/runtests_script.py
index 591863016..d03bca840 100644
--- a/testing/freeze/runtests_script.py
+++ b/testing/freeze/runtests_script.py
@@ -1,6 +1,6 @@
 """
 This is the script that is actually frozen into an executable: simply executes
-pytest main().
+py.test main().
 """

 if __name__ == "__main__":
diff --git a/testing/python/collect.py b/testing/python/collect.py
index f0c12df16..e6dd3e870 100644
--- a/testing/python/collect.py
+++ b/testing/python/collect.py
@@ -1148,7 +1148,7 @@ def test_dont_collect_non_function_callable(testdir):
     """Test for issue https://github.com/pytest-dev/pytest/issues/331

     In this case an INTERNALERROR occurred trying to report the failure of
-    a test like this one because pytest failed to get the source lines.
+    a test like this one because py test failed to get the source lines.
     """
     testdir.makepyfile(
         """
diff --git a/testing/python/metafunc.py b/testing/python/metafunc.py
index 860b21ff2..4273ab796 100644
--- a/testing/python/metafunc.py
+++ b/testing/python/metafunc.py
@@ -15,7 +15,7 @@ class TestMetafunc:
     def Metafunc(self, func, config=None):
         # the unit tests of this class check if things work correctly
         # on the funcarg level, so we don't need a full blown
-        # initialization
+        # initiliazation
         class FixtureInfo:
             name2fixturedefs = None

@@ -72,19 +72,6 @@ class TestMetafunc:
         ):
             metafunc.parametrize("x", [1], scope="doggy")

-    def test_parametrize_request_name(self, testdir):
-        """Show proper error  when 'request' is used as a parameter name in parametrize (#6183)"""
-
-        def func(request):
-            raise NotImplementedError()
-
-        metafunc = self.Metafunc(func)
-        with pytest.raises(
-            pytest.fail.Exception,
-            match=r"'request' is a reserved name and cannot be used in @pytest.mark.parametrize",
-        ):
-            metafunc.parametrize("request", [1])
-
     def test_find_parametrized_scope(self):
         """unittest for _find_parametrized_scope (#3941)"""
         from _pytest.python import _find_parametrized_scope
diff --git a/testing/test_capture.py b/testing/test_capture.py
index 139655c72..f5b193597 100644
--- a/testing/test_capture.py
+++ b/testing/test_capture.py
@@ -5,9 +5,10 @@ import pickle
 import subprocess
 import sys
 import textwrap
-from io import StringIO
 from io import UnsupportedOperation

+import py
+
 import pytest
 from _pytest import capture
 from _pytest.capture import CaptureManager
@@ -891,10 +892,10 @@ def test_dupfile_on_bytesio():


 def test_dupfile_on_textio():
-    sio = StringIO()
-    f = capture.safe_text_dupfile(sio, "wb")
+    tio = py.io.TextIO()
+    f = capture.safe_text_dupfile(tio, "wb")
     f.write("hello")
-    assert sio.getvalue() == "hello"
+    assert tio.getvalue() == "hello"
     assert not hasattr(f, "name")


diff --git a/testing/test_mark.py b/testing/test_mark.py
index 764d523a3..c8d5851ac 100644
--- a/testing/test_mark.py
+++ b/testing/test_mark.py
@@ -482,7 +482,7 @@ class TestFunctional:
         items, rec = testdir.inline_genitems(p)
         base_item, sub_item, sub_item_other = items
         print(items, [x.nodeid for x in items])
-        # new api segregates
+        # new api seregates
         assert not list(base_item.iter_markers(name="b"))
         assert not list(sub_item_other.iter_markers(name="b"))
         assert list(sub_item.iter_markers(name="b"))
diff --git a/testing/test_nose.py b/testing/test_nose.py
index 8a30755c9..16d8d1fc0 100644
--- a/testing/test_nose.py
+++ b/testing/test_nose.py
@@ -229,7 +229,7 @@ def test_nose_setup_ordering(testdir):

 def test_apiwrapper_problem_issue260(testdir):
     # this would end up trying a call an optional teardown on the class
-    # for plain unittests we don't want nose behaviour
+    # for plain unittests we dont want nose behaviour
     testdir.makepyfile(
         """
         import unittest
diff --git a/testing/test_parseopt.py b/testing/test_parseopt.py
index 915747378..d39065b82 100644
--- a/testing/test_parseopt.py
+++ b/testing/test_parseopt.py
@@ -304,7 +304,7 @@ def test_argcomplete(testdir, monkeypatch):
                 shlex.quote(sys.executable)
             )
         )
-    # alternative would be extended Testdir.{run(),_run(),popen()} to be able
+    # alternative would be exteneded Testdir.{run(),_run(),popen()} to be able
     # to handle a keyword argument env that replaces os.environ in popen or
     # extends the copy, advantage: could not forget to restore
     monkeypatch.setenv("_ARGCOMPLETE", "1")
diff --git a/testing/test_pdb.py b/testing/test_pdb.py
index 55a7230f4..924c2f4af 100644
--- a/testing/test_pdb.py
+++ b/testing/test_pdb.py
@@ -581,7 +581,7 @@ class TestPDB:
         # No extra newline.
         assert child.before.endswith(b"c\r\nprint_from_foo\r\n")

-        # set_debug should not raise outcomes. Exit, if used recursively.
+        # set_debug should not raise outcomes.Exit, if used recrursively.
         child.sendline("debug 42")
         child.sendline("q")
         child.expect("LEAVING RECURSIVE DEBUGGER")
@@ -1025,51 +1025,6 @@ class TestTraceOption:
         assert "Exit: Quitting debugger" not in child.before.decode("utf8")
         TestPDB.flush(child)

-    def test_trace_with_parametrize_handles_shared_fixtureinfo(self, testdir):
-        p1 = testdir.makepyfile(
-            """
-            import pytest
-            @pytest.mark.parametrize('myparam', [1,2])
-            def test_1(myparam, request):
-                assert myparam in (1, 2)
-                assert request.function.__name__ == "test_1"
-            @pytest.mark.parametrize('func', [1,2])
-            def test_func(func, request):
-                assert func in (1, 2)
-                assert request.function.__name__ == "test_func"
-            @pytest.mark.parametrize('myparam', [1,2])
-            def test_func_kw(myparam, request, func="func_kw"):
-                assert myparam in (1, 2)
-                assert func == "func_kw"
-                assert request.function.__name__ == "test_func_kw"
-            """
-        )
-        child = testdir.spawn_pytest("--trace " + str(p1))
-        for func, argname in [
-            ("test_1", "myparam"),
-            ("test_func", "func"),
-            ("test_func_kw", "myparam"),
-        ]:
-            child.expect_exact("> PDB runcall (IO-capturing turned off) >")
-            child.expect_exact(func)
-            child.expect_exact("Pdb")
-            child.sendline("args")
-            child.expect_exact("{} = 1\r\n".format(argname))
-            child.expect_exact("Pdb")
-            child.sendline("c")
-            child.expect_exact("Pdb")
-            child.sendline("args")
-            child.expect_exact("{} = 2\r\n".format(argname))
-            child.expect_exact("Pdb")
-            child.sendline("c")
-            child.expect_exact("> PDB continue (IO-capturing resumed) >")
-        rest = child.read().decode("utf8")
-        assert "6 passed in" in rest
-        assert "reading from stdin while output" not in rest
-        # Only printed once - not on stderr.
-        assert "Exit: Quitting debugger" not in child.before.decode("utf8")
-        TestPDB.flush(child)
-

 def test_trace_after_runpytest(testdir):
     """Test that debugging's pytest_configure is re-entrant."""
@@ -1195,6 +1150,7 @@ def test_pdbcls_via_local_module(testdir):

                 def runcall(self, *args, **kwds):
                     print("runcall_called", args, kwds)
+                    assert "func" in kwds
         """,
     )
     result = testdir.runpytest(
diff --git a/testing/test_reports.py b/testing/test_reports.py
index 9f6c56186..8bac0243a 100644
--- a/testing/test_reports.py
+++ b/testing/test_reports.py
@@ -133,17 +133,17 @@ class TestReportSerialization:
         """
         reprec = testdir.inline_runsource(
             """
-            import pytest
+            import py
             def test_pass(): pass
             def test_fail(): 0/0
-            @pytest.mark.skipif("True")
+            @py.test.mark.skipif("True")
             def test_skip(): pass
             def test_skip_imperative():
-                pytest.skip("hello")
-            @pytest.mark.xfail("True")
+                py.test.skip("hello")
+            @py.test.mark.xfail("True")
             def test_xfail(): 0/0
             def test_xfail_imperative():
-                pytest.xfail("hello")
+                py.test.xfail("hello")
         """
         )
         reports = reprec.getreports("pytest_runtest_logreport")
diff --git a/testing/test_resultlog.py b/testing/test_resultlog.py
index b6f957b40..9e8f62135 100644
--- a/testing/test_resultlog.py
+++ b/testing/test_resultlog.py
@@ -1,5 +1,6 @@
 import os
-from io import StringIO
+
+import py

 import _pytest._code
 import pytest
@@ -12,7 +13,7 @@ pytestmark = pytest.mark.filterwarnings("ignore:--result-log is deprecated")

 def test_write_log_entry():
     reslog = ResultLog(None, None)
-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     reslog.write_log_entry("name", ".", "")
     entry = reslog.logfile.getvalue()
     assert entry[-1] == "\n"
@@ -20,7 +21,7 @@ def test_write_log_entry():
     assert len(entry_lines) == 1
     assert entry_lines[0] == ". name"

-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     reslog.write_log_entry("name", "s", "Skipped")
     entry = reslog.logfile.getvalue()
     assert entry[-1] == "\n"
@@ -29,7 +30,7 @@ def test_write_log_entry():
     assert entry_lines[0] == "s name"
     assert entry_lines[1] == " Skipped"

-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     reslog.write_log_entry("name", "s", "Skipped\n")
     entry = reslog.logfile.getvalue()
     assert entry[-1] == "\n"
@@ -38,7 +39,7 @@ def test_write_log_entry():
     assert entry_lines[0] == "s name"
     assert entry_lines[1] == " Skipped"

-    reslog.logfile = StringIO()
+    reslog.logfile = py.io.TextIO()
     longrepr = " tb1\n tb 2\nE tb3\nSome Error"
     reslog.write_log_entry("name", "F", longrepr)
     entry = reslog.logfile.getvalue()
@@ -117,7 +118,7 @@ class TestWithFunctionIntegration:
             raise ValueError
         except ValueError:
             excinfo = _pytest._code.ExceptionInfo.from_current()
-        reslog = ResultLog(None, StringIO())
+        reslog = ResultLog(None, py.io.TextIO())
         reslog.pytest_internalerror(excinfo.getrepr(style=style))
         entry = reslog.logfile.getvalue()
         entry_lines = entry.splitlines()
diff --git a/testing/test_skipping.py b/testing/test_skipping.py
index 371c3a4db..8bba479f1 100644
--- a/testing/test_skipping.py
+++ b/testing/test_skipping.py
@@ -1162,26 +1162,3 @@ def test_importorskip():
         match="^could not import 'doesnotexist': No module named .*",
     ):
         pytest.importorskip("doesnotexist")
-
-
-def test_skip_package(testdir):
-    testdir.makepyfile(
-        __init__="""
-        import pytest
-        pytestmark = pytest.mark.skip
-    """
-    )
-
-    testdir.makepyfile(
-        """
-        import pytest
-        def test_skip1():
-            assert 0
-        def test_skip2():
-            assert 0
-    """
-    )
-
-    result = testdir.inline_run()
-    _, skipped, _ = result.listoutcomes()
-    assert len(skipped) == 2
diff --git a/testing/test_stepwise.py b/testing/test_stepwise.py
index 032351e7f..f61425b6b 100644
--- a/testing/test_stepwise.py
+++ b/testing/test_stepwise.py
@@ -4,7 +4,7 @@ import pytest
 @pytest.fixture
 def stepwise_testdir(testdir):
     # Rather than having to modify our testfile between tests, we introduce
-    # a flag for whether or not the second test should fail.
+    # a flag for wether or not the second test should fail.
     testdir.makeconftest(
         """
 def pytest_addoption(parser):
diff --git a/testing/test_terminal.py b/testing/test_terminal.py
index 2cdfc6ca8..88f96f894 100644
--- a/testing/test_terminal.py
+++ b/testing/test_terminal.py
@@ -5,7 +5,6 @@ import collections
 import os
 import sys
 import textwrap
-from io import StringIO

 import pluggy
 import py
@@ -269,7 +268,7 @@ class TestTerminal:

     def test_rewrite(self, testdir, monkeypatch):
         config = testdir.parseconfig()
-        f = StringIO()
+        f = py.io.TextIO()
         monkeypatch.setattr(f, "isatty", lambda *args: True)
         tr = TerminalReporter(config, f)
         tr._tw.fullwidth = 10
--------
2025-01-17 06:33:21,266 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sphinx-doc_s_sphinx-8551. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-17 06:33:21,266 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-8551 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/QwQ-32B-Preview_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-8551
