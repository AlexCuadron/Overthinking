diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py
index 9e3bf3cb4..09a02b606 100644
--- a/sklearn/mixture/gaussian_mixture.py
+++ b/sklearn/mixture/gaussian_mixture.py
@@ -433,6 +433,23 @@ def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):

 class GaussianMixture(BaseMixture):
     """Gaussian Mixture.
+
+    def fit(self, X, y=None):
+        super().fit(X, y)
+        # Sort components based on weights in descending order
+        permutation = np.argsort(self.weights_)[::-1]
+        self.weights_ = self.weights_[permutation]
+        self.means_ = self.means_[permutation]
+        if self.covariance_type == 'full':
+            self.covariances_ = self.covariances_[permutation]
+        elif self.covariance_type == 'tied':
+            # No need to reorder, as the same covariance is shared
+            pass
+        elif self.covariance_type == 'diag':
+            self.covariances_ = self.covariances_[permutation]
+        elif self.covariance_type == 'spherical':
+            self.covariances_ = self.covariances_[permutation]
+        return self

     Representation of a Gaussian mixture model probability distribution.
     This class allows to estimate the parameters of a Gaussian mixture
diff --git a/test_gm.py b/test_gm.py
new file mode 100644
index 000000000..f6229309e
--- /dev/null
+++ b/test_gm.py
@@ -0,0 +1,17 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+np.random.seed(42)  # For reproducibility
+X = np.random.randn(1000, 5)
+
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
\ No newline at end of file
