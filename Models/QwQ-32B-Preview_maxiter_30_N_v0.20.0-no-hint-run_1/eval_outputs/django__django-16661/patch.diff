diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..05b0867599
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,78 @@
+import django
+from django.conf import settings
+from django.apps import apps
+from django.contrib.admin import ModelAdmin, site
+from django.db import models
+from django.test import RequestFactory
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+apps.populate(settings.INSTALLED_APPS)
+django.setup()
+
+class Country(models.Model):
+    name = models.CharField(max_length=256)
+
+    class Meta:
+        app_label = 'test_app'
+
+class Place(models.Model):
+    country = models.ForeignKey(Country, models.CASCADE)
+
+    class Meta:
+        app_label = 'test_app'
+
+class Restaurant(models.Model):
+    place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+    class Meta:
+        app_label = 'test_app'
+
+class Waiter(models.Model):
+    restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+
+    class Meta:
+        app_label = 'test_app'
+
+class WaiterAdmin(ModelAdmin):
+    list_filter = ['restaurant__place__country']
+
+site.register(Waiter, WaiterAdmin)
+
+# Now, attempt to access the changelist view
+
+factory = RequestFactory()
+
+# Run migrations
+from django.core.management import call_command
+call_command('migrate', interactive=False)
+
+# Create tables for the models
+from django.db import connections, DEFAULT_DB_ALIAS
+from django.db.utils import OperationalError
+
+def create_model_tables():
+    connection = connections[DEFAULT_DB_ALIAS]
+    with connection.schema_editor() as editor:
+        editor.create_model(Country)
+        editor.create_model(Place)
+        editor.create_model(Restaurant)
+        editor.create_model(Waiter)
+
+create_model_tables()
+
+# Set a dummy user with necessary permissions
+from django.contrib.auth.models import User
+User.objects.create_superuser('admin', 'admin@example.com', 'password')
+request = factory.get('/waiter/')
+request.user = User.objects.get(username='admin')
+ma = WaiterAdmin(Waiter, site)
+
+# Check lookup_allowed
+lookup_allowed = ma.lookup_allowed('restaurant__place__country', 'test_value')
+if lookup_allowed:
+    print("Lookup allowed as expected")
+else:
+    print("Lookup not allowed, but should be allowed")
\ No newline at end of file
