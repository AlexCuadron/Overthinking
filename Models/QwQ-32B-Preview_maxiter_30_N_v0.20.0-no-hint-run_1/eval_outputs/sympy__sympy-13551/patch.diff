diff --git a/sympy/functions/special/__init__.py b/sympy/functions/special/__init__.py
index f227799549..7253e7594d 100644
--- a/sympy/functions/special/__init__.py
+++ b/sympy/functions/special/__init__.py
@@ -6,6 +6,7 @@
 from . import elliptic_integrals
 from . import beta_functions
 from . import mathieu_functions
+from . import qfunctions
 from . import singularity_functions

 from . import polynomials
diff --git a/sympy/functions/special/qfunctions.py b/sympy/functions/special/qfunctions.py
new file mode 100644
index 0000000000..16e10322d4
--- /dev/null
+++ b/sympy/functions/special/qfunctions.py
@@ -0,0 +1,38 @@
+from sympy import Function, Symbol, S
+from sympy.core.function import ArgumentIndexError
+from sympy.concrete.products import Product
+
+class QPochhammer(Function):
+    """
+    The q-Pochhammer symbol.
+
+    Defined as:
+
+    (a; q)_n = \prod_{k=0}^{n-1} (1 - a q^k)
+
+    For n=oo, it is the infinite q-Pochhammer symbol.
+
+    """
+
+    def __new__(cls, a, q, n=Symbol('n')):
+        return super().__new__(cls, a, q, n)
+
+    @property
+    def a(self):
+        return self.args[0]
+
+    @property
+    def q(self):
+        return self.args[1]
+
+    @property
+    def n(self):
+        return self.args[2]
+
+    def doit(self, **hints):
+        a, q, n = self.a, self.q, self.n
+        if n.is_integer and n.is_nonnegative:
+            k = Symbol('k')
+            return Product(1 - a * q**k, (k, 0, n-1)).doit()
+        else:
+            return self
\ No newline at end of file
diff --git a/sympy/functions/special/tests/test_qfunctions.py b/sympy/functions/special/tests/test_qfunctions.py
new file mode 100644
index 0000000000..795da4947c
--- /dev/null
+++ b/sympy/functions/special/tests/test_qfunctions.py
@@ -0,0 +1,12 @@
+from sympy import symbols, qfunctions
+from sympy.functions.special.qfunctions import QPochhammer
+from sympy.testing.pytest import raises
+
+def test_qpochhammer():
+    a, q, n = symbols('a q n')
+    assert QPochhammer(a, q, n).args == (a, q, n)
+    assert QPochhammer(a, q).args == (a, q, symbols('n'))
+    assert QPochhammer(a, q, 0).doit() == 1
+    assert QPochhammer(a, q, 1).doit() == 1 - a
+    assert QPochhammer(a, q, 2).doit() == (1 - a)*(1 - a*q)
+    assert QPochhammer(a, q, 3).doit() == (1 - a)*(1 - a*q)*(1 - a*q**2)
\ No newline at end of file
