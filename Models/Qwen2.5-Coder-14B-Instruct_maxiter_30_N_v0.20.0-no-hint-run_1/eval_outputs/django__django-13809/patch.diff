diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index d9fb088350..9b8f097209 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -35,6 +35,10 @@ class Command(BaseCommand):
     server_cls = WSGIServer

     def add_arguments(self, parser):
+    parser.add_argument(
+        '--skip-checks', action='store_true', dest='skip_checks',
+        help='Tells Django to skip system checks.',
+    )
         parser.add_argument(
             'addrport', nargs='?',
             help='Optional port number, or ipaddr:port'
@@ -115,7 +119,8 @@ class Command(BaseCommand):
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'

         self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
+        if not options['skip_checks']:
+    self.check(display_num_errors=True)
         # Need to check migrations here, so can't use the
         # requires_migrations_check attribute.
         self.check_migrations()
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..90fc0c320b
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..5564cc469b
--- /dev/null
+++ b/server.log
@@ -0,0 +1,27 @@
+Traceback (most recent call last):
+  File "/workspace/django__django__4.0/manage.py", line 18, in <module>
+    main()
+  File "/workspace/django__django__4.0/manage.py", line 15, in main
+    execute_from_command_line(sys.argv)
+  File "/workspace/django__django__4.0/django/core/management/__init__.py", line 419, in execute_from_command_line
+    utility.execute()
+  File "/workspace/django__django__4.0/django/core/management/__init__.py", line 413, in execute
+    self.fetch_command(subcommand).run_from_argv(self.argv)
+  File "/workspace/django__django__4.0/django/core/management/__init__.py", line 257, in fetch_command
+    klass = load_command_class(app_name, subcommand)
+  File "/workspace/django__django__4.0/django/core/management/__init__.py", line 39, in load_command_class
+    module = import_module('%s.management.commands.%s' % (app_name, name))
+  File "/opt/miniconda3/envs/testbed/lib/python3.8/importlib/__init__.py", line 127, in import_module
+    return _bootstrap._gcd_import(name[level:], package, level)
+  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 975, in _find_and_load_unlocked
+  File "<frozen importlib._bootstrap>", line 671, in _load_unlocked
+  File "<frozen importlib._bootstrap_external>", line 839, in exec_module
+  File "<frozen importlib._bootstrap_external>", line 976, in get_code
+  File "<frozen importlib._bootstrap_external>", line 906, in source_to_code
+  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
+  File "/workspace/django__django__4.0/django/core/management/commands/runserver.py", line 38
+    parser.add_argument(
+    ^
+IndentationError: expected an indented block
