diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928aa..8b10829eb8 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,7 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True


 class Count(Aggregate):
@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):
 class Sum(FixDurationInputMixin, Aggregate):
     function = 'SUM'
     name = 'Sum'
+    allow_distinct = True


 class Variance(NumericOutputFieldMixin, Aggregate):
diff --git a/django/settings.py b/django/settings.py
new file mode 100644
index 0000000000..68fe58299b
--- /dev/null
+++ b/django/settings.py
@@ -0,0 +1,64 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'tests.apps.TestsConfig',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+SECRET_KEY = 'your-secret-key'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'django.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'django.wsgi.application'
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..90fc0c320b
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..f56e1797cb
--- /dev/null
+++ b/tests/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'tests.apps.TestsConfig'
\ No newline at end of file
diff --git a/tests/apps.py b/tests/apps.py
new file mode 100644
index 0000000000..1c2813ebc4
--- /dev/null
+++ b/tests/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestsConfig(AppConfig):
+    name = 'tests'
+    path = '/workspace/django__django__3.0/tests'
\ No newline at end of file
diff --git a/tests/test_distinct_aggregates.py b/tests/test_distinct_aggregates.py
new file mode 100644
index 0000000000..fb4527b5a9
--- /dev/null
+++ b/tests/test_distinct_aggregates.py
@@ -0,0 +1,19 @@
+from django.db import models
+from django.test import TestCase
+
+class TestModel(models.Model):
+    value = models.IntegerField()
+
+class DistinctAggregatesTest(TestCase):
+    def setUp(self):
+        TestModel.objects.create(value=1)
+        TestModel.objects.create(value=1)
+        TestModel.objects.create(value=2)
+
+    def test_distinct_avg(self):
+        avg = TestModel.objects.aggregate(avg_value=models.Avg('value', distinct=True))['avg_value']
+        self.assertEqual(avg, 1.5)
+
+    def test_distinct_sum(self):
+        total = TestModel.objects.aggregate(sum_value=models.Sum('value', distinct=True))['sum_value']
+        self.assertEqual(total, 3)
\ No newline at end of file
