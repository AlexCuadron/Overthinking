diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..065871bc54 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -126,6 +126,10 @@ class Field:
     def validate(self, value):
         if value in self.empty_values and self.required:
             raise ValidationError(self.error_messages['required'], code='required')
+        if isinstance(value, (list, tuple)):
+            for sub_value, field in zip(value, self.fields):
+                if field.required and sub_value in field.empty_values:
+                    raise ValidationError(field.error_messages['required'], code='required')

     def run_validators(self, value):
         if value in self.empty_values:
diff --git a/django_project/settings.py b/django_project/settings.py
new file mode 100644
index 0000000000..325a5be9d0
--- /dev/null
+++ b/django_project/settings.py
@@ -0,0 +1,4 @@
+# settings.py
+DEBUG = True
+SECRET_KEY = 'your-secret-key'
+INSTALLED_APPS = []
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..79eef19a23
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,47 @@
+import django
+django.setup()
+from django.forms import (
+    Form,
+    CharField,
+    MultiValueField,
+    MultiWidget,
+)
+
+class MF(MultiValueField):
+    widget = MultiWidget
+
+    def __init__(self):
+        fields = [
+            CharField(required=False),
+            CharField(required=True),
+        ]
+        widget = self.widget(widgets=[
+            f.widget
+            for f in fields
+        ], attrs={})
+        super(MF, self).__init__(
+            fields=fields,
+            widget=widget,
+            require_all_fields=False,
+            required=False,
+        )
+
+    def compress(self, value):
+        return []
+
+class F(Form):
+    mf = MF()
+
+# Test the form with empty values
+f = F({
+    'mf_0': '',
+    'mf_1': '',
+})
+print(f.is_valid())  # Expected: False
+
+# Test the form with one non-empty value
+f = F({
+    'mf_0': 'xxx',
+    'mf_1': '',
+})
+print(f.is_valid())  # Expected: False
\ No newline at end of file
