diff --git a/build.log b/build.log
new file mode 100644
index 000000000..7742001f4
--- /dev/null
+++ b/build.log
@@ -0,0 +1,5 @@
+Running Sphinx v3.4.0+/57ed10c68
+WARNING: while setting up extension sphinx.addnodes: node class 'meta' is already registered, its visitors will be overridden
+
+Extension error:
+Could not import extension reproduce_error (exception: cannot import name 'PyClassDomain' from 'sphinx.domains.python' (/testbed/sphinx/domains/python.py))
diff --git a/conf.py b/conf.py
new file mode 100644
index 000000000..749cadf4a
--- /dev/null
+++ b/conf.py
@@ -0,0 +1,13 @@
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = [
+    'reproduce_error',
+]
+
+templates_path = ['_templates']
+
+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
+
+html_theme = 'alabaster'
\ No newline at end of file
diff --git a/index.rst b/index.rst
new file mode 100644
index 000000000..b316f6938
--- /dev/null
+++ b/index.rst
@@ -0,0 +1,42 @@
+.. py:class:: mod.A
+.. py:class:: mod.submod.A
+
+.. py:function:: f()
+
+    - :py:class:`mod.A`
+    - :py:class:`mod.submod.A`
+
+    :param mod.A a:
+    :param mod.submod.A b:
+    :rtype: mod.A
+    :rtype: mod.submod.A
+
+.. py:currentmodule:: mod
+
+.. py:function:: f()
+
+    - :py:class:`A`
+    - :py:class:`mod.A`
+    - :py:class:`mod.submod.A`
+
+    :param A a:
+    :param mod.A b:
+    :param mod.submod.A c:
+    :rtype: A
+    :rtype: mod.A
+    :rtype: mod.submod.A
+
+.. py:currentmodule:: mod.submod
+
+.. py:function:: f()
+
+    - :py:class:`A`
+    - :py:class:`mod.A`
+    - :py:class:`mod.submod.A`
+
+    :param A a: BUG: links to mod.A instead of mod.submod.A
+    :param mod.A b:
+    :param mod.submod.A c:
+    :rtype: A
+    :rtype: mod.A
+    :rtype: mod.submod.A
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..7c34c213e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,61 @@
+from sphinx.domains.python import PyClassDomain, PyFunctionDomain
+from sphinx.roles import XRefRole
+from sphinx.util.docfields import Field, GroupedField
+from sphinx.util.nodes import make_refnode
+from sphinx import addnodes
+from sphinx.environment import BuildEnvironment
+from sphinx.roles import XRefRole
+from sphinx.domains import Domain, ObjType
+from sphinx.directives import ObjectDescription
+from sphinx.domains.python import PyClassDomain, PyFunctionDomain
+from sphinx.roles import XRefRole
+from sphinx.util.docfields import Field, GroupedField
+from sphinx.util.nodes import make_refnode
+from sphinx import addnodes
+from sphinx.environment import BuildEnvironment
+from sphinx.roles import XRefRole
+from sphinx.domains import Domain, ObjType
+from sphinx.directives import ObjectDescription
+
+class TestDomain(Domain):
+    name = 'test'
+    label = 'Test Domain'
+    object_types = {
+        'class': ObjType('class', 'class'),
+        'function': ObjType('function', 'func'),
+    }
+    directives = {
+        'class': ObjectDescription,
+        'function': ObjectDescription,
+    }
+    roles = {
+        'class': XRefRole(),
+        'func': XRefRole(),
+    }
+    initial_data = {
+        'objects': {},
+    }
+
+    def clear_doc(self, docname):
+        for fullname, (doc, _, _) in list(self.data['objects'].items()):
+            if doc == docname:
+                del self.data['objects'][fullname]
+
+    def merge_domaindata(self, docnames, otherdata):
+        for fullname, (doc, _, _) in otherdata['objects'].items():
+            if doc in docnames:
+                self.data['objects'][fullname] = (doc, *otherdata['objects'][fullname][1:])
+
+    def resolve_xref(self, env, fromdocname, builder, typ, target, node, contnode):
+        if typ in ('class', 'func'):
+            if target in self.data['objects']:
+                docname, objtype, _ = self.data['objects'][target]
+                return make_refnode(builder, fromdocname, docname, target, contnode, target)
+        return None
+
+    def get_objects(self):
+        for fullname, (docname, objtype, _) in self.data['objects'].items():
+            yield fullname, fullname, objtype, docname, fullname, 1
+
+def setup(app):
+    app.add_domain(TestDomain)
\ No newline at end of file
