diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7f071e88b7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,18 @@
+from sympy import *
+from sympy.physics.quantum import TensorProduct as tp
+from sympy.physics.quantum import tensor_product_simp as tps
+from sympy.physics.paulialgebra import Pauli
+a = Symbol('a', commutative=False)
+
+t1 = tp(1,1)*tp(1,1)
+print("t1:", t1)
+print("tps(t1):", tps(t1))
+print("t1.expand(tensorproduct=True):", t1.expand(tensorproduct=True))
+
+t2 = tp(1,Pauli(3))*tp(1,Pauli(3))
+print("t2:", t2)
+print("tps(t2):", tps(t2))
+print("t2.expand(tensorproduct=True):", t2.expand(tensorproduct=True))
+
+print("tps(tp(1,Pauli(3))*tp(1,a)).subs(a, 1):", tps(tp(1,Pauli(3))*tp(1,a)).subs(a, 1))
+print("tps(tp(1,Pauli(3))*tp(1,a)).subs(a, Pauli(3)):", tps(tp(1,Pauli(3))*tp(1,a)).subs(a, Pauli(3)))
\ No newline at end of file
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..5467dffe0f 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -47,6 +47,10 @@ def combined_tensor_printing(combined):


 class TensorProduct(Expr):
+    def _eval_power(self, exp):
+        if exp.is_Integer and exp > 0:
+            return TensorProduct(*[self]*exp)
+        return None
     """The tensor product of two or more arguments.

     For matrices, this uses ``matrix_tensor_product`` to compute the Kronecker
