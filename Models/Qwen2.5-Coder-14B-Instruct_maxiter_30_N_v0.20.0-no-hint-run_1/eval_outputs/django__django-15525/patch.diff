diff --git a/books.json b/books.json
new file mode 100644
index 0000000000..659e13ce99
--- /dev/null
+++ b/books.json
@@ -0,0 +1,17 @@
+[
+{
+ "model": "testbug.author",
+ "fields": {
+       "name": "JR Tolkien"
+ }
+},
+{
+ "model": "testbug.book",
+ "fields": {
+       "title": "The Ring",
+       "author": [
+        "JR Tolkien"
+       ]
+ }
+}
+]
\ No newline at end of file
diff --git a/create_author.py b/create_author.py
new file mode 100644
index 0000000000..a2d6b9a043
--- /dev/null
+++ b/create_author.py
@@ -0,0 +1,12 @@
+import os
+from django.core.management import call_command
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbug.settings')
+import django
+django.setup()
+from testbug.models import Author
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbug.settings')
+
+# Create the Author object
+author = Author.objects.using('other').create(name='JR Tolkien')
\ No newline at end of file
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..056b02b9b6
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..c6d5aeab93
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbug.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/other_db.sqlite3 b/other_db.sqlite3
new file mode 100644
index 0000000000..fabd56d6dc
Binary files /dev/null and b/other_db.sqlite3 differ
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bfa2807e05
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+import os
+import json
+from django.core.management import call_command
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbug.settings')
+
+with open('books.json', 'r') as f:
+    data = json.load(f)
+
+import subprocess
+process = subprocess.Popen(['python3', '/workspace/django__django__4.1/manage.py', 'loaddata', '--database', 'other', '--format', 'json', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+stdout, stderr = process.communicate(input=json.dumps(data).encode())
+print(stdout.decode())
+print(stderr.decode())
\ No newline at end of file
diff --git a/testbug/__init__.py b/testbug/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testbug/migrations/0001_initial.py b/testbug/migrations/0001_initial.py
new file mode 100644
index 0000000000..b03c88bc34
--- /dev/null
+++ b/testbug/migrations/0001_initial.py
@@ -0,0 +1,39 @@
+# Generated by Django 4.1.dev20220318075532 on 2025-01-25 11:30
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Author",
+            fields=[
+                ("id", models.AutoField(primary_key=True, serialize=False)),
+                ("name", models.CharField(max_length=255, unique=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Book",
+            fields=[
+                ("id", models.AutoField(primary_key=True, serialize=False)),
+                ("title", models.CharField(max_length=255)),
+                (
+                    "author",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.DO_NOTHING,
+                        related_name="books",
+                        to="testbug.author",
+                    ),
+                ),
+            ],
+            options={
+                "unique_together": {("title", "author")},
+            },
+        ),
+    ]
diff --git a/testbug/migrations/__init__.py b/testbug/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testbug/models.py b/testbug/models.py
new file mode 100644
index 0000000000..868b1966ea
--- /dev/null
+++ b/testbug/models.py
@@ -0,0 +1,37 @@
+from django.db import models
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    id = models.AutoField(primary_key=True)
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["testbug.Author"]
+
+    class Meta:
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
\ No newline at end of file
diff --git a/testbug/settings.py b/testbug/settings.py
new file mode 100644
index 0000000000..0b3c10490a
--- /dev/null
+++ b/testbug/settings.py
@@ -0,0 +1,87 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'your-secret-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'testbug',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testbug.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testbug.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'other_db.sqlite3'),
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/testbug/urls.py b/testbug/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/testbug/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/testbug/wsgi.py b/testbug/wsgi.py
new file mode 100644
index 0000000000..a5dd80daba
--- /dev/null
+++ b/testbug/wsgi.py
@@ -0,0 +1,6 @@
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbug.settings')
+
+application = get_wsgi_application()
\ No newline at end of file
