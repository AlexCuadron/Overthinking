diff --git a/foobar/__init__.py b/foobar/__init__.py
new file mode 100644
index 000000000..2cfffa40d
--- /dev/null
+++ b/foobar/__init__.py
@@ -0,0 +1 @@
+assert False
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..5a7c8a6b8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,7 @@
+import pytest
+
+def test_example():
+    assert True
+
+if __name__ == "__main__":
+    pytest.main(["-v", "foobar/__init__.py"])
\ No newline at end of file
diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index 3c205027d..954de9c89 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -281,6 +281,208 @@ def _in_venv(path):


 def pytest_ignore_collect(path, config):
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
     ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
     ignore_paths = ignore_paths or []
     excludeopt = config.getoption("ignore")
