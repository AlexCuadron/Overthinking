diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..5a29f8b8ec 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -102,6 +102,297 @@ def get_format(format_type, lang=None, use_l10n=None):
     For a specific format type, return the format for the current
     language (locale). Default to the format in the settings.
     format_type is the name of the format, e.g. 'DATE_FORMAT'.
+    """
+    if isinstance(format_type, lazy):
+        format_type = str(format_type)
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val
+
+    if use_l10n is None:
+        try:
+            use_l10n = settings._USE_L10N_INTERNAL
+        except AttributeError:
+            use_l10n = settings.USE_L10N
+    if use_l10n and lang is None:
+        lang = get_language()
+    cache_key = (format_type, lang)
+    try:
+        return _format_cache[cache_key]
+    except KeyError:
+        pass
+
+    # The requested format_type has not been cached yet. Try to find it in any
+    # of the format_modules for the given lang if l10n is enabled. If it's not
+    # there or if l10n is disabled, fall back to the project settings.
+    val = None
+    if use_l10n:
+        for module in get_format_modules(lang):
+            val = getattr(module, format_type, None)
+            if val is not None:
+                break
+    if val is None:
+        if format_type not in FORMAT_SETTINGS:
+            return format_type
+        val = getattr(settings, format_type)
+    elif format_type in ISO_INPUT_FORMATS:
+        # If a list of input formats from one of the format_modules was
+        # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
+        val = list(val)
+        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+            if iso_input not in val:
+                val.append(iso_input)
+    _format_cache[cache_key] = val
+    return val

     If use_l10n is provided and is not None, it forces the value to
     be localized (or not), overriding the value of settings.USE_L10N.
diff --git a/reproduce_error.log b/reproduce_error.log
new file mode 100644
index 0000000000..f9a14b7d2d
--- /dev/null
+++ b/reproduce_error.log
@@ -0,0 +1,15 @@
+Traceback (most recent call last):
+  File "/workspace/django__django__4.2/test_reproduce_error.py", line 16, in <module>
+    test_date_filter()
+  File "/workspace/django__django__4.2/test_reproduce_error.py", line 7, in test_date_filter
+    from django import template
+  File "/workspace/django__django__4.2/django/template/__init__.py", line 44, in <module>
+    from .engine import Engine
+  File "/workspace/django__django__4.2/django/template/engine.py", line 7, in <module>
+    from .base import Template
+  File "/workspace/django__django__4.2/django/template/base.py", line 59, in <module>
+    from django.utils.formats import localize
+  File "/workspace/django__django__4.2/django/utils/formats.py", line 397
+    If use_l10n is provided and is not None, it forces the value to
+       ^
+SyntaxError: invalid syntax
diff --git a/test_reproduce_error.py b/test_reproduce_error.py
new file mode 100644
index 0000000000..927d312344
--- /dev/null
+++ b/test_reproduce_error.py
@@ -0,0 +1,16 @@
+from django.utils.functional import lazy
+from django.utils.translation import gettext_lazy as _
+
+lazy_str = lazy(lambda: "Y-m-d", str)()
+
+def test_date_filter():
+    from django import template
+    from django.utils.formats import date_format
+
+    t = template.Template("{{ date|date:_('Y-m-d') }}")
+    c = template.Context({"date": datetime.date(2023, 10, 1)})
+    result = t.render(c)
+    print(result)
+
+if __name__ == "__main__":
+    test_date_filter()
\ No newline at end of file
