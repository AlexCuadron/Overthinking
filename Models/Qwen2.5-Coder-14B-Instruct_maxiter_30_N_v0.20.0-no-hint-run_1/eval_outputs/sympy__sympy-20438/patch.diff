diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..26a1df69b3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+from sympy import FiniteSet, ProductSet, Eq
+
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+print("b.intersection(c) == c.intersection(b):", b.intersection(c) == c.intersection(b))
+print("b.is_subset(c):", b.is_subset(c))
+print("c.is_subset(b):", c.is_subset(b))
+try:
+    print("Eq(b, c).simplify():", Eq(b, c).simplify())
+except AttributeError as e:
+    print("AttributeError:", e)
+print("b.rewrite(FiniteSet):", b.rewrite(FiniteSet))
\ No newline at end of file
diff --git a/sympy/sets/productset_patch.py b/sympy/sets/productset_patch.py
new file mode 100644
index 0000000000..d4c28c7720
--- /dev/null
+++ b/sympy/sets/productset_patch.py
@@ -0,0 +1,9 @@
+from sympy.sets.sets import Set, ProductSet
+
+class ProductSet(ProductSet):
+    def _eval_is_subset(self, other):
+        if not isinstance(other, ProductSet):
+            return None
+        if len(self.sets) != len(other.sets):
+            return False
+        return all(s.is_subset(o) for s, o in zip(self.sets, other.sets))
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..b979faf850 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -689,7 +689,15 @@ def __contains__(self, other):
         return b


-class ProductSet(Set):
+from .productset_patch import ProductSet
+
+class ProductSet(ProductSet):
+    def _eval_is_subset(self, other):
+        if not isinstance(other, ProductSet):
+            return None
+        if len(self.sets) != len(other.sets):
+            return False
+        return all(s.is_subset(o) for s, o in zip(self.sets, other.sets))
     """
     Represents a Cartesian Product of Sets.
