diff --git a/error.log b/error.log
new file mode 100644
index 000000000..d3da15798
--- /dev/null
+++ b/error.log
@@ -0,0 +1,29 @@
+Error processing line 1 of /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/distutils-precedence.pth:
+
+  Traceback (most recent call last):
+    File "/opt/miniconda3/envs/testbed/lib/python3.9/site.py", line 177, in addpackage
+      exec(line)
+    File "<string>", line 1, in <module>
+  ModuleNotFoundError: No module named '_distutils_hack'
+
+Remainder of file ignored
+Error processing line 1 of /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/distutils-precedence.pth:
+
+  Traceback (most recent call last):
+    File "/opt/miniconda3/envs/testbed/lib/python3.9/site.py", line 177, in addpackage
+      exec(line)
+    File "<string>", line 1, in <module>
+  ModuleNotFoundError: No module named '_distutils_hack'
+
+Remainder of file ignored
+************* Module /workspace/pylint-dev__pylint__3.0/pylintrc_temp
+pylintrc_temp:1:0: E0015: Unrecognized option found: bad-name-rgxs (unrecognized-option)
+************* Module foo
+foo.py:1:0: C0114: Missing module docstring (missing-module-docstring)
+foo.py:1:0: C0104: Disallowed name "foo" (disallowed-name)
+foo.py:2:0: C0116: Missing function or method docstring (missing-function-docstring)
+foo.py:2:0: C0104: Disallowed name "foo" (disallowed-name)
+
+------------------------------------------------------------------
+Your code has been rated at 0.00/10 (previous run: 0.00/10, +0.00)
+
diff --git a/foo.py b/foo.py
new file mode 100644
index 000000000..18d864389
--- /dev/null
+++ b/foo.py
@@ -0,0 +1,3 @@
+
+def foo():
+    pass
diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 30a5fd175..e97d92861 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -114,8 +114,11 @@ def _regex_transformer(value: str) -> Pattern[str]:
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions."""
     patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
-        patterns.append(_regex_transformer(pattern))
+    try:
+        patterns.append(_regex_transformer(value))
+    except re.error as e:
+        msg = f"Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}"
+        raise argparse.ArgumentTypeError(msg) from e
     return patterns


diff --git a/pylintrc_temp b/pylintrc_temp
new file mode 100644
index 000000000..fea41cadd
--- /dev/null
+++ b/pylintrc_temp
@@ -0,0 +1,3 @@
+
+[tool.pylint.basic]
+bad-name-rgxs = "(foo{1,3})"
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..44e9d9f4c
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,20 @@
+import os
+
+# Create a temporary pylintrc file
+pylintrc_content = """
+[tool.pylint.basic]
+bad-name-rgxs = "(foo{1,3})"
+"""
+with open("/workspace/pylint-dev__pylint__3.0/pylintrc_temp", "w") as f:
+    f.write(pylintrc_content)
+
+# Create a temporary Python file to test
+test_content = """
+def foo():
+    pass
+"""
+with open("/workspace/pylint-dev__pylint__3.0/foo.py", "w") as f:
+    f.write(test_content)
+
+# Run pylint with the temporary pylintrc file
+os.system("pylint --rcfile=/workspace/pylint-dev__pylint__3.0/pylintrc_temp /workspace/pylint-dev__pylint__3.0/foo.py")
\ No newline at end of file
