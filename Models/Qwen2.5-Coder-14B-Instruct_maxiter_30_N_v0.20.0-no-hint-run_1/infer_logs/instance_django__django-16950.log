2025-01-25 11:32:03,814 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_2fb0rc027fsq7dpy_1nhip1b65cn5t1ze
2025-01-25 11:32:03,817 - INFO - [runtime 38a3f406-b59b-4c7f-a366-dbd6190e93fd-2dd103bd1cba33e4] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_2fb0rc027fsq7dpy_1nhip1b65cn5t1ze
2025-01-25 11:32:04,902 - INFO - [runtime 38a3f406-b59b-4c7f-a366-dbd6190e93fd-2dd103bd1cba33e4] Container started: openhands-runtime-38a3f406-b59b-4c7f-a366-dbd6190e93fd-2dd103bd1cba33e4. VSCode URL: None
2025-01-25 11:32:04,902 - INFO - [runtime 38a3f406-b59b-4c7f-a366-dbd6190e93fd-2dd103bd1cba33e4] Waiting for client to become ready at http://localhost:30241...
2025-01-25 11:32:33,002 - INFO - [runtime 38a3f406-b59b-4c7f-a366-dbd6190e93fd-2dd103bd1cba33e4] Runtime is ready.
2025-01-25 11:32:33,645 - INFO - ------------------------------
2025-01-25 11:32:33,645 - INFO - BEGIN Runtime Initialization Fn
2025-01-25 11:32:33,645 - INFO - ------------------------------
2025-01-25 11:32:33,645 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-16950' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-25 11:32:34,273 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:34,273 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-25 11:32:34,900 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:34,900 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-25 11:32:35,526 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:35,534 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-25 11:32:36,159 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-16950
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:36,160 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-25 11:32:36,784 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:36,785 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-25 11:32:41,943 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__5.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:41,944 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__5.0
2025-01-25 11:32:42,569 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:42,570 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-25 11:32:43,702 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at f64fd47a76 Fixed #9602 -- Added AdminSite.get_model_admin().
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:43,702 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-25 11:32:44,330 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:44,330 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-25 11:32:44,956 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:32:44,956 - INFO - ------------------------------
2025-01-25 11:32:44,956 - INFO - END Runtime Initialization Fn
2025-01-25 11:32:44,956 - INFO - ------------------------------
2025-01-25 11:32:44,959 - INFO - Function calling not enabled for model hosted_vllm/Qwen/Qwen2.5-Coder-14B-Instruct. Mocking function calling via prompting.
2025-01-25 11:32:44,963 - INFO - [runtime 38a3f406-b59b-4c7f-a366-dbd6190e93fd-2dd103bd1cba33e4] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-25 11:32:44,981 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-25 11:32:44,981 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-25 11:32:57,674 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-25 11:33:27,330 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-25 11:33:41,101 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-25 11:34:26,412 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-25 11:35:09,880 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-25 11:35:32,358 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-25 11:36:02,772 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-25 11:36:33,242 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-25 11:36:45,170 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-25 11:37:10,535 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-25 11:37:28,885 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-25 11:37:43,851 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-25 11:38:02,741 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-25 11:38:15,476 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-25 11:38:26,908 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-25 11:38:50,602 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-01-25 11:38:50,633 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-01-25 11:38:50,634 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-25 11:39:19,672 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-25 11:39:20,352 - INFO - ------------------------------
2025-01-25 11:39:20,352 - INFO - BEGIN Runtime Completion Fn
2025-01-25 11:39:20,352 - INFO - ------------------------------
2025-01-25 11:39:20,352 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__5.0
2025-01-25 11:39:20,981 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:39:20,981 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-25 11:39:21,608 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:39:21,608 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-25 11:39:22,739 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:39:22,740 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached f64fd47a7627ed6ffe2df2a32ded6ee528a784eb
2025-01-25 11:39:23,399 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "7bbb17dbb827",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/bugapp/__init__.py b/bugapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bugapp/admin.py b/bugapp/admin.py
new file mode 100644
index 0000000000..49c0432d57
--- /dev/null
+++ b/bugapp/admin.py
@@ -0,0 +1,13 @@
+from django.contrib import admin
+from .models import Thing, SubThing
+
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ('name',)
+    ordering = ('pkid',)
+    inlines = (SubThingInline,)
+
+# Register your models here.
diff --git a/bugapp/apps.py b/bugapp/apps.py
new file mode 100644
index 0000000000..ca5dce0f70
--- /dev/null
+++ b/bugapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class BugappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "bugapp"
diff --git a/bugapp/migrations/0001_initial.py b/bugapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..9e650354b3
--- /dev/null
+++ b/bugapp/migrations/0001_initial.py
@@ -0,0 +1,55 @@
+# Generated by Django 5.0.dev20230707060601 on 2025-01-25 11:38
+
+import django.db.models.deletion
+import uuid
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Thing",
+            fields=[
+                (
+                    "pkid",
+                    models.BigAutoField(
+                        editable=False, primary_key=True, serialize=False
+                    ),
+                ),
+                (
+                    "id",
+                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
+                ),
+                ("name", models.CharField(max_length=191)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="SubThing",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=191)),
+                (
+                    "thing",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="subthings",
+                        to="bugapp.thing",
+                        to_field="id",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/bugapp/migrations/__init__.py b/bugapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bugapp/models.py b/bugapp/models.py
new file mode 100644
index 0000000000..685c1371e4
--- /dev/null
+++ b/bugapp/models.py
@@ -0,0 +1,24 @@
+from django.db import models
+import uuid
+
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+    class Meta:
+        abstract = True
+
+class Thing(UUIDModel):
+    class Meta:
+        app_label = 'bugapp'
+    name = models.CharField(max_length=191)
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        'bugapp.Thing',
+        to_field='id',
+        on_delete=models.CASCADE,
+        related_name='subthings',
+    )
+
+# Create your models here.
diff --git a/bugapp/tests.py b/bugapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/bugapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/bugapp/views.py b/bugapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/bugapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..15a11b8b21
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/__main__.py b/django/__main__.py
index 8b96e91ea8..7415143848 100644
--- a/django/__main__.py
+++ b/django/__main__.py
@@ -3,6 +3,7 @@ Invokes django-admin when the django module is run as a script.

 Example: python -m django check
 """
+
 from django.core import management

 if __name__ == "__main__":
diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index 197d39bf21..fd6306a488 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -5,6 +5,7 @@ Filters are specified in models with the "list_filter" option.
 Each filter subclass knows how to display a filter for a field that passes a
 certain test -- e.g. being a DateField or ForeignKey.
 """
+
 import datetime

 from django.contrib.admin.options import IncorrectLookupParameters
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index f9760664dd..1cc2572d08 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1724,9 +1724,9 @@ class ModelAdmin(BaseModelAdmin):
                 has_delete_permission = inline.has_delete_permission(request, obj)
             else:
                 # Disable all edit-permissions, and override formset settings.
-                has_add_permission = (
-                    has_change_permission
-                ) = has_delete_permission = False
+                has_add_permission = has_change_permission = has_delete_permission = (
+                    False
+                )
                 formset.extra = formset.max_num = 0
             has_view_permission = inline.has_view_permission(request, obj)
             prepopulated = dict(inline.get_prepopulated_fields(request, obj))
@@ -1861,9 +1861,11 @@ class ModelAdmin(BaseModelAdmin):
             form,
             list(fieldsets),
             # Clear prepopulated fields on a view-only form to avoid a crash.
-            self.get_prepopulated_fields(request, obj)
-            if add or self.has_change_permission(request, obj)
-            else {},
+            (
+                self.get_prepopulated_fields(request, obj)
+                if add or self.has_change_permission(request, obj)
+                else {}
+            ),
             readonly_fields,
             model_admin=self,
         )
diff --git a/django/contrib/admin/templatetags/admin_list.py b/django/contrib/admin/templatetags/admin_list.py
index 9bff84d501..24dbb820ae 100644
--- a/django/contrib/admin/templatetags/admin_list.py
+++ b/django/contrib/admin/templatetags/admin_list.py
@@ -171,9 +171,9 @@ def result_headers(cl):
             "url_primary": cl.get_query_string({ORDER_VAR: ".".join(o_list_primary)}),
             "url_remove": cl.get_query_string({ORDER_VAR: ".".join(o_list_remove)}),
             "url_toggle": cl.get_query_string({ORDER_VAR: ".".join(o_list_toggle)}),
-            "class_attrib": format_html(' class="{}"', " ".join(th_classes))
-            if th_classes
-            else "",
+            "class_attrib": (
+                format_html(' class="{}"', " ".join(th_classes)) if th_classes else ""
+            ),
         }


@@ -267,9 +267,11 @@ def items_for_result(cl, result, form):
                 link_or_text = format_html(
                     '<a href="{}"{}>{}</a>',
                     url,
-                    format_html(' data-popup-opener="{}"', value)
-                    if cl.is_popup
-                    else "",
+                    (
+                        format_html(' data-popup-opener="{}"', value)
+                        if cl.is_popup
+                        else ""
+                    ),
                     result_repr,
                 )

diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index c7a79f520b..83a166e248 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -1,6 +1,7 @@
 """
 Form Widget classes specific to the Django admin site.
 """
+
 import copy
 import json

diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index da0eac731f..386584b273 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseUser even when django.contrib.auth is
 not in INSTALLED_APPS.
 """
+
 import unicodedata
 import warnings

diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py
index ad31a6e68f..b29a980cb2 100644
--- a/django/contrib/auth/management/__init__.py
+++ b/django/contrib/auth/management/__init__.py
@@ -1,6 +1,7 @@
 """
 Creates permissions for all installed apps that need permissions.
 """
+
 import getpass
 import unicodedata

diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py
index 48994e5371..050c0b334d 100644
--- a/django/contrib/auth/management/commands/createsuperuser.py
+++ b/django/contrib/auth/management/commands/createsuperuser.py
@@ -1,6 +1,7 @@
 """
 Management utility to create superusers.
 """
+
 import getpass
 import os
 import sys
@@ -267,15 +268,19 @@ class Command(BaseCommand):
         return "%s%s%s: " % (
             capfirst(field.verbose_name),
             " (leave blank to use '%s')" % default if default else "",
-            " (%s.%s)"
-            % (
-                field.remote_field.model._meta.object_name,
-                field.m2m_target_field_name()
-                if field.many_to_many
-                else field.remote_field.field_name,
-            )
-            if field.remote_field
-            else "",
+            (
+                " (%s.%s)"
+                % (
+                    field.remote_field.model._meta.object_name,
+                    (
+                        field.m2m_target_field_name()
+                        if field.many_to_many
+                        else field.remote_field.field_name
+                    ),
+                )
+                if field.remote_field
+                else ""
+            ),
         )

     @cached_property
diff --git a/django/contrib/gis/db/backends/oracle/models.py b/django/contrib/gis/db/backends/oracle/models.py
index f06f73148e..af749c3435 100644
--- a/django/contrib/gis/db/backends/oracle/models.py
+++ b/django/contrib/gis/db/backends/oracle/models.py
@@ -7,6 +7,7 @@
  For example, the `USER_SDO_GEOM_METADATA` is used for the GeometryColumns
  model and the `SDO_COORD_REF_SYS` is used for the SpatialRefSys model.
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin

diff --git a/django/contrib/gis/db/backends/oracle/operations.py b/django/contrib/gis/db/backends/oracle/operations.py
index ed86985cf8..eb86dc39de 100644
--- a/django/contrib/gis/db/backends/oracle/operations.py
+++ b/django/contrib/gis/db/backends/oracle/operations.py
@@ -7,6 +7,7 @@
  support for an internal JVM, and Java libraries are required to use
  the WKT constructors.
 """
+
 import re

 from django.contrib.gis.db import models
diff --git a/django/contrib/gis/db/backends/postgis/adapter.py b/django/contrib/gis/db/backends/postgis/adapter.py
index c95f903253..c9715e1756 100644
--- a/django/contrib/gis/db/backends/postgis/adapter.py
+++ b/django/contrib/gis/db/backends/postgis/adapter.py
@@ -1,6 +1,7 @@
 """
  This object provides quoting for GEOS geometries into PostgreSQL/PostGIS.
 """
+
 from django.contrib.gis.db.backends.postgis.pgraster import to_pgraster
 from django.contrib.gis.geos import GEOSGeometry
 from django.db.backends.postgresql.psycopg_any import sql
diff --git a/django/contrib/gis/db/backends/postgis/const.py b/django/contrib/gis/db/backends/postgis/const.py
index 2f4393d25e..8bc16a1abb 100644
--- a/django/contrib/gis/db/backends/postgis/const.py
+++ b/django/contrib/gis/db/backends/postgis/const.py
@@ -1,6 +1,7 @@
 """
 PostGIS to GDAL conversion constant definitions
 """
+
 # Lookup to convert pixel type values from GDAL to PostGIS
 GDAL_TO_POSTGIS = [None, 4, 6, 5, 8, 7, 10, 11, None, None, None, None]

diff --git a/django/contrib/gis/db/backends/postgis/models.py b/django/contrib/gis/db/backends/postgis/models.py
index b7b568274a..e35ef75ce9 100644
--- a/django/contrib/gis/db/backends/postgis/models.py
+++ b/django/contrib/gis/db/backends/postgis/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the PostGIS backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models

diff --git a/django/contrib/gis/db/backends/spatialite/models.py b/django/contrib/gis/db/backends/spatialite/models.py
index 7cc98ae126..0f5f7b55ef 100644
--- a/django/contrib/gis/db/backends/spatialite/models.py
+++ b/django/contrib/gis/db/backends/spatialite/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the SpatiaLite backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models

diff --git a/django/contrib/gis/db/backends/spatialite/operations.py b/django/contrib/gis/db/backends/spatialite/operations.py
index 0b8b26ab6f..d39f7a9e0d 100644
--- a/django/contrib/gis/db/backends/spatialite/operations.py
+++ b/django/contrib/gis/db/backends/spatialite/operations.py
@@ -2,6 +2,7 @@
 SQL functions reference lists:
 https://www.gaia-gis.it/gaia-sins/spatialite-sql-4.3.0.html
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.operations import BaseSpatialOperations
 from django.contrib.gis.db.backends.spatialite.adapter import SpatiaLiteAdapter
diff --git a/django/contrib/gis/db/models/functions.py b/django/contrib/gis/db/models/functions.py
index 19da355d28..3f26f4c6bc 100644
--- a/django/contrib/gis/db/models/functions.py
+++ b/django/contrib/gis/db/models/functions.py
@@ -127,9 +127,11 @@ class SQLiteDecimalToFloatMixin:
         copy = self.copy()
         copy.set_source_expressions(
             [
-                Value(float(expr.value))
-                if hasattr(expr, "value") and isinstance(expr.value, Decimal)
-                else expr
+                (
+                    Value(float(expr.value))
+                    if hasattr(expr, "value") and isinstance(expr.value, Decimal)
+                    else expr
+                )
                 for expr in copy.get_source_expressions()
             ]
         )
@@ -343,9 +345,9 @@ class Distance(DistanceResultMixin, OracleToleranceMixin, GeoFunc):
     def as_sqlite(self, compiler, connection, **extra_context):
         if self.geo_field.geodetic(connection):
             # SpatiaLite returns NULL instead of zero on geodetic coordinates
-            extra_context[
-                "template"
-            ] = "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            extra_context["template"] = (
+                "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            )
             extra_context["spheroid"] = int(bool(self.spheroid))
         return super().as_sql(compiler, connection, **extra_context)

diff --git a/django/contrib/gis/db/models/proxy.py b/django/contrib/gis/db/models/proxy.py
index 4db365dc16..b415e147fc 100644
--- a/django/contrib/gis/db/models/proxy.py
+++ b/django/contrib/gis/db/models/proxy.py
@@ -5,6 +5,7 @@ objects corresponding to geographic model fields.

 Thanks to Robert Coup for providing this functionality (see #4322).
 """
+
 from django.db.models.query_utils import DeferredAttribute


diff --git a/django/contrib/gis/db/models/sql/conversion.py b/django/contrib/gis/db/models/sql/conversion.py
index be712319fb..7802b2dd1e 100644
--- a/django/contrib/gis/db/models/sql/conversion.py
+++ b/django/contrib/gis/db/models/sql/conversion.py
@@ -2,6 +2,7 @@
 This module holds simple classes to convert geospatial values from the
 database.
 """
+
 from decimal import Decimal

 from django.contrib.gis.measure import Area, Distance
diff --git a/django/contrib/gis/gdal/__init__.py b/django/contrib/gis/gdal/__init__.py
index 9ed6e31156..e63808d39d 100644
--- a/django/contrib/gis/gdal/__init__.py
+++ b/django/contrib/gis/gdal/__init__.py
@@ -25,6 +25,7 @@
  by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C
  library on your system.
 """
+
 from django.contrib.gis.gdal.datasource import DataSource
 from django.contrib.gis.gdal.driver import Driver
 from django.contrib.gis.gdal.envelope import Envelope
diff --git a/django/contrib/gis/gdal/datasource.py b/django/contrib/gis/gdal/datasource.py
index dfd043ab0c..c7ff48b8f1 100644
--- a/django/contrib/gis/gdal/datasource.py
+++ b/django/contrib/gis/gdal/datasource.py
@@ -33,6 +33,7 @@
               #  OFTReal returns floats, all else returns string.
               val = field.value
 """
+
 from ctypes import byref
 from pathlib import Path

diff --git a/django/contrib/gis/gdal/envelope.py b/django/contrib/gis/gdal/envelope.py
index 4c2c1e4a1a..05832bd7cc 100644
--- a/django/contrib/gis/gdal/envelope.py
+++ b/django/contrib/gis/gdal/envelope.py
@@ -10,6 +10,7 @@
                            |          |
  Lower left (min_x, min_y) o----------+
 """
+
 from ctypes import Structure, c_double

 from django.contrib.gis.gdal.error import GDALException
diff --git a/django/contrib/gis/gdal/geometries.py b/django/contrib/gis/gdal/geometries.py
index f74dc688b3..8ea6b5ffc4 100644
--- a/django/contrib/gis/gdal/geometries.py
+++ b/django/contrib/gis/gdal/geometries.py
@@ -38,6 +38,7 @@
   >>> print(gt1 == 3, gt1 == 'Polygon') # Equivalence works w/non-OGRGeomType objects
   True True
 """
+
 import sys
 from binascii import b2a_hex
 from ctypes import byref, c_char_p, c_double, c_ubyte, c_void_p, string_at
diff --git a/django/contrib/gis/gdal/prototypes/ds.py b/django/contrib/gis/gdal/prototypes/ds.py
index bc5250e2db..b6e9d4a0b8 100644
--- a/django/contrib/gis/gdal/prototypes/ds.py
+++ b/django/contrib/gis/gdal/prototypes/ds.py
@@ -3,6 +3,7 @@
  related data structures. OGR_Dr_*, OGR_DS_*, OGR_L_*, OGR_F_*,
  OGR_Fld_* routines are relevant here.
 """
+
 from ctypes import POINTER, c_char_p, c_double, c_int, c_long, c_void_p

 from django.contrib.gis.gdal.envelope import OGREnvelope
diff --git a/django/contrib/gis/gdal/prototypes/errcheck.py b/django/contrib/gis/gdal/prototypes/errcheck.py
index 52bb7cb083..d37e81cdf6 100644
--- a/django/contrib/gis/gdal/prototypes/errcheck.py
+++ b/django/contrib/gis/gdal/prototypes/errcheck.py
@@ -2,6 +2,7 @@
  This module houses the error-checking routines used by the GDAL
  ctypes prototypes.
 """
+
 from ctypes import c_void_p, string_at

 from django.contrib.gis.gdal.error import GDALException, SRSException, check_err
diff --git a/django/contrib/gis/gdal/prototypes/generation.py b/django/contrib/gis/gdal/prototypes/generation.py
index 230e56f665..4d34a96e70 100644
--- a/django/contrib/gis/gdal/prototypes/generation.py
+++ b/django/contrib/gis/gdal/prototypes/generation.py
@@ -2,6 +2,7 @@
  This module contains functions that generate ctypes prototypes for the
  GDAL routines.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_int64, c_void_p
 from functools import partial

diff --git a/django/contrib/gis/gdal/prototypes/raster.py b/django/contrib/gis/gdal/prototypes/raster.py
index 59b930cb02..b7871d1969 100644
--- a/django/contrib/gis/gdal/prototypes/raster.py
+++ b/django/contrib/gis/gdal/prototypes/raster.py
@@ -2,6 +2,7 @@
 This module houses the ctypes function prototypes for GDAL DataSource (raster)
 related data structures.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_void_p
 from functools import partial

diff --git a/django/contrib/gis/gdal/raster/const.py b/django/contrib/gis/gdal/raster/const.py
index dccc9cfab4..a1ab62f37a 100644
--- a/django/contrib/gis/gdal/raster/const.py
+++ b/django/contrib/gis/gdal/raster/const.py
@@ -1,6 +1,7 @@
 """
 GDAL - Constant definitions
 """
+
 from ctypes import (
     c_double,
     c_float,
diff --git a/django/contrib/gis/gdal/srs.py b/django/contrib/gis/gdal/srs.py
index cd0554eb12..85f9c0a9a4 100644
--- a/django/contrib/gis/gdal/srs.py
+++ b/django/contrib/gis/gdal/srs.py
@@ -26,6 +26,7 @@
   >>> print(srs.name)
   NAD83 / Texas South Central
 """
+
 from ctypes import byref, c_char_p, c_int
 from enum import IntEnum
 from types import NoneType
diff --git a/django/contrib/gis/geoip2/__init__.py b/django/contrib/gis/geoip2/__init__.py
index 71b71f68db..0df5827c25 100644
--- a/django/contrib/gis/geoip2/__init__.py
+++ b/django/contrib/gis/geoip2/__init__.py
@@ -11,6 +11,7 @@ downloaded from MaxMind at https://dev.maxmind.com/geoip/geoip2/geolite2/.
 Grab GeoLite2-Country.mmdb.gz and GeoLite2-City.mmdb.gz, and unzip them in the
 directory corresponding to settings.GEOIP_PATH.
 """
+
 __all__ = ["HAS_GEOIP2"]

 try:
diff --git a/django/contrib/gis/geos/__init__.py b/django/contrib/gis/geos/__init__.py
index 27de1ca8e6..f50cd19856 100644
--- a/django/contrib/gis/geos/__init__.py
+++ b/django/contrib/gis/geos/__init__.py
@@ -2,6 +2,7 @@
 The GeoDjango GEOS module.  Please consult the GeoDjango documentation
 for more details: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geos/
 """
+
 from .collections import (  # NOQA
     GeometryCollection,
     MultiLineString,
diff --git a/django/contrib/gis/geos/collections.py b/django/contrib/gis/geos/collections.py
index abfec8af3d..35262a5622 100644
--- a/django/contrib/gis/geos/collections.py
+++ b/django/contrib/gis/geos/collections.py
@@ -2,6 +2,7 @@
  This module houses the Geometry Collection objects:
  GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon
 """
+
 from django.contrib.gis.geos import prototypes as capi
 from django.contrib.gis.geos.geometry import GEOSGeometry, LinearGeometryMixin
 from django.contrib.gis.geos.libgeos import GEOM_PTR
diff --git a/django/contrib/gis/geos/coordseq.py b/django/contrib/gis/geos/coordseq.py
index 0ff4ecb2e5..15400e08fe 100644
--- a/django/contrib/gis/geos/coordseq.py
+++ b/django/contrib/gis/geos/coordseq.py
@@ -3,6 +3,7 @@
  by GEOSGeometry to house the actual coordinates of the Point,
  LineString, and LinearRing geometries.
 """
+
 from ctypes import byref, c_byte, c_double, c_uint

 from django.contrib.gis.geos import prototypes as capi
diff --git a/django/contrib/gis/geos/geometry.py b/django/contrib/gis/geos/geometry.py
index 38e5fe554c..442ae92422 100644
--- a/django/contrib/gis/geos/geometry.py
+++ b/django/contrib/gis/geos/geometry.py
@@ -2,6 +2,7 @@
  This module contains the 'base' GEOSGeometry object -- all GEOS Geometries
  inherit from this object.
 """
+
 import re
 from ctypes import addressof, byref, c_double

diff --git a/django/contrib/gis/geos/io.py b/django/contrib/gis/geos/io.py
index d7898065f0..8dd3f289e6 100644
--- a/django/contrib/gis/geos/io.py
+++ b/django/contrib/gis/geos/io.py
@@ -3,6 +3,7 @@ Module that holds classes for performing I/O operations on GEOS geometry
 objects.  Specifically, this has Python implementations of WKB/WKT
 reader and writer classes.
 """
+
 from django.contrib.gis.geos.geometry import GEOSGeometry
 from django.contrib.gis.geos.prototypes.io import (
     WKBWriter,
diff --git a/django/contrib/gis/geos/libgeos.py b/django/contrib/gis/geos/libgeos.py
index 1121b4f715..b883c6c090 100644
--- a/django/contrib/gis/geos/libgeos.py
+++ b/django/contrib/gis/geos/libgeos.py
@@ -6,6 +6,7 @@
  This module also houses GEOS Pointer utilities, including
  get_pointer_arr(), and GEOM_PTR.
 """
+
 import logging
 import os
 from ctypes import CDLL, CFUNCTYPE, POINTER, Structure, c_char_p
diff --git a/django/contrib/gis/geos/prototypes/errcheck.py b/django/contrib/gis/geos/prototypes/errcheck.py
index a527f513a7..42b24c2891 100644
--- a/django/contrib/gis/geos/prototypes/errcheck.py
+++ b/django/contrib/gis/geos/prototypes/errcheck.py
@@ -1,6 +1,7 @@
 """
  Error checking functions for GEOS ctypes prototype functions.
 """
+
 from ctypes import c_void_p, string_at

 from django.contrib.gis.geos.error import GEOSException
diff --git a/django/contrib/gis/geos/prototypes/misc.py b/django/contrib/gis/geos/prototypes/misc.py
index fccd0ecc9e..bd5859e79b 100644
--- a/django/contrib/gis/geos/prototypes/misc.py
+++ b/django/contrib/gis/geos/prototypes/misc.py
@@ -2,6 +2,7 @@
  This module is for the miscellaneous GEOS routines, particularly the
  ones that return the area, distance, and length.
 """
+
 from ctypes import POINTER, c_double, c_int

 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/predicates.py b/django/contrib/gis/geos/prototypes/predicates.py
index d2e113a734..a79d4e3187 100644
--- a/django/contrib/gis/geos/prototypes/predicates.py
+++ b/django/contrib/gis/geos/prototypes/predicates.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  unary and binary predicate operations on geometries.
 """
+
 from ctypes import c_byte, c_char_p, c_double

 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/topology.py b/django/contrib/gis/geos/prototypes/topology.py
index e61eae964a..9323bb2d16 100644
--- a/django/contrib/gis/geos/prototypes/topology.py
+++ b/django/contrib/gis/geos/prototypes/topology.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  topological operations on geometries.
 """
+
 from ctypes import c_double, c_int

 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/utils/__init__.py b/django/contrib/gis/utils/__init__.py
index 12f032c665..f42fa90226 100644
--- a/django/contrib/gis/utils/__init__.py
+++ b/django/contrib/gis/utils/__init__.py
@@ -1,6 +1,7 @@
 """
  This module contains useful utilities for GeoDjango.
 """
+
 from django.contrib.gis.utils.ogrinfo import ogrinfo
 from django.contrib.gis.utils.ogrinspect import mapping, ogrinspect
 from django.contrib.gis.utils.srs import add_srs_entry
diff --git a/django/contrib/gis/utils/ogrinspect.py b/django/contrib/gis/utils/ogrinspect.py
index 40ca0cb461..76c8bfbcfa 100644
--- a/django/contrib/gis/utils/ogrinspect.py
+++ b/django/contrib/gis/utils/ogrinspect.py
@@ -3,6 +3,7 @@ This module is for inspecting OGR data sources and generating either
 models for GeoDjango and/or mapping dictionaries for use with the
 `LayerMapping` utility.
 """
+
 from django.contrib.gis.gdal import DataSource
 from django.contrib.gis.gdal.field import (
     OFTDate,
diff --git a/django/contrib/postgres/search.py b/django/contrib/postgres/search.py
index 936709c2f8..4d279857c6 100644
--- a/django/contrib/postgres/search.py
+++ b/django/contrib/postgres/search.py
@@ -116,9 +116,11 @@ class SearchVector(SearchVectorCombinable, Func):
         clone.set_source_expressions(
             [
                 Coalesce(
-                    expression
-                    if isinstance(expression.output_field, (CharField, TextField))
-                    else Cast(expression, TextField()),
+                    (
+                        expression
+                        if isinstance(expression.output_field, (CharField, TextField))
+                        else Cast(expression, TextField())
+                    ),
                     Value(""),
                 )
                 for expression in clone.get_source_expressions()
diff --git a/django/contrib/sessions/base_session.py b/django/contrib/sessions/base_session.py
index 603d2fe12c..8809dd36f7 100644
--- a/django/contrib/sessions/base_session.py
+++ b/django/contrib/sessions/base_session.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseSession even
 when django.contrib.sessions is not in INSTALLED_APPS.
 """
+
 from django.db import models
 from django.utils.translation import gettext_lazy as _

diff --git a/django/contrib/staticfiles/views.py b/django/contrib/staticfiles/views.py
index 83d04d4cec..3fb2677322 100644
--- a/django/contrib/staticfiles/views.py
+++ b/django/contrib/staticfiles/views.py
@@ -3,6 +3,7 @@ Views and functions for serving static files. These are only to be used during
 development, and SHOULD NOT be used in a production setting.

 """
+
 import os
 import posixpath

diff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py
index eb7fa5b2e9..444d958e68 100644
--- a/django/core/cache/__init__.py
+++ b/django/core/cache/__init__.py
@@ -12,6 +12,7 @@ object.

 See docs/topics/cache.txt for information on the public API.
 """
+
 from django.core import signals
 from django.core.cache.backends.base import (
     BaseCache,
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index 2a2288ff4d..31c18ee7e1 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -1,6 +1,7 @@
 """
 Global Django exception and warning classes.
 """
+
 import operator

 from django.utils.hashable import make_hashable
diff --git a/django/core/files/images.py b/django/core/files/images.py
index 6a603f24fc..7c1532ac8f 100644
--- a/django/core/files/images.py
+++ b/django/core/files/images.py
@@ -3,6 +3,7 @@ Utility functions for handling images.

 Requires Pillow as you might imagine.
 """
+
 import struct
 import zlib

diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c0f471f87d..a7a7a22dce 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -16,6 +16,7 @@ Example Usage::
     ...     locks.lock(f, locks.LOCK_EX)
     ...     f.write('Django')
 """
+
 import os

 __all__ = ("LOCK_EX", "LOCK_SH", "LOCK_NB", "lock", "unlock")
diff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py
index b6c185e8fc..ab86f7fede 100644
--- a/django/core/files/uploadhandler.py
+++ b/django/core/files/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Base file upload handler classes, and the built-in concrete subclasses
 """
+
 import os
 from io import BytesIO

diff --git a/django/core/mail/__init__.py b/django/core/mail/__init__.py
index dc63e8702c..676326697b 100644
--- a/django/core/mail/__init__.py
+++ b/django/core/mail/__init__.py
@@ -1,6 +1,7 @@
 """
 Tools for sending email.
 """
+
 from django.conf import settings

 # Imported for backwards compatibility and for the sake
diff --git a/django/core/mail/backends/console.py b/django/core/mail/backends/console.py
index ee5dd28504..2d7c778cc1 100644
--- a/django/core/mail/backends/console.py
+++ b/django/core/mail/backends/console.py
@@ -1,6 +1,7 @@
 """
 Email backend that writes messages to console instead of sending them.
 """
+
 import sys
 import threading

diff --git a/django/core/mail/backends/smtp.py b/django/core/mail/backends/smtp.py
index 1ee48269ae..6820148ac1 100644
--- a/django/core/mail/backends/smtp.py
+++ b/django/core/mail/backends/smtp.py
@@ -1,4 +1,5 @@
 """SMTP email backend class."""
+
 import smtplib
 import ssl
 import threading
diff --git a/django/core/management/base.py b/django/core/management/base.py
index 631c761c00..4c47e1c6e5 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -2,6 +2,7 @@
 Base classes for writing management commands (named commands which can
 be executed through ``django-admin`` or ``manage.py``).
 """
+
 import argparse
 import os
 import sys
@@ -528,9 +529,11 @@ class BaseCommand:
                 if issues:
                     visible_issue_count += len(issues)
                     formatted = (
-                        self.style.ERROR(str(e))
-                        if e.is_serious()
-                        else self.style.WARNING(str(e))
+                        (
+                            self.style.ERROR(str(e))
+                            if e.is_serious()
+                            else self.style.WARNING(str(e))
+                        )
                         for e in issues
                     )
                     formatted = "\n".join(sorted(formatted))
@@ -543,11 +546,15 @@ class BaseCommand:
             if visible_issue_count:
                 footer += "\n"
             footer += "System check identified %s (%s silenced)." % (
-                "no issues"
-                if visible_issue_count == 0
-                else "1 issue"
-                if visible_issue_count == 1
-                else "%s issues" % visible_issue_count,
+                (
+                    "no issues"
+                    if visible_issue_count == 0
+                    else (
+                        "1 issue"
+                        if visible_issue_count == 1
+                        else "%s issues" % visible_issue_count
+                    )
+                ),
                 len(all_issues) - visible_issue_count,
             )

diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index 20dffac05f..1fbca9244b 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -1,6 +1,7 @@
 """
 Module for abstract serializer/unserializer base classes.
 """
+
 from io import StringIO

 from django.core.exceptions import ObjectDoesNotExist
diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py
index e0129a59bb..cfe2ac0d1e 100644
--- a/django/core/serializers/xml_serializer.py
+++ b/django/core/serializers/xml_serializer.py
@@ -1,6 +1,7 @@
 """
 XML serializer.
 """
+
 import json
 from xml.dom import pulldom
 from xml.sax import handler
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 2742748049..015cf68faa 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -712,9 +712,9 @@ class BaseDatabaseSchemaEditor:
                 namespace, _ = split_identifier(model._meta.db_table)
                 definition += " " + self.sql_create_column_inline_fk % {
                     "name": self._fk_constraint_name(model, field, constraint_suffix),
-                    "namespace": "%s." % self.quote_name(namespace)
-                    if namespace
-                    else "",
+                    "namespace": (
+                        "%s." % self.quote_name(namespace) if namespace else ""
+                    ),
                     "column": self.quote_name(field.column),
                     "to_table": self.quote_name(to_table),
                     "to_column": self.quote_name(to_column),
@@ -1850,11 +1850,13 @@ class BaseDatabaseSchemaEditor:
         """Return all constraint names matching the columns and conditions."""
         if column_names is not None:
             column_names = [
-                self.connection.introspection.identifier_converter(
-                    truncate_name(name, self.connection.ops.max_name_length())
+                (
+                    self.connection.introspection.identifier_converter(
+                        truncate_name(name, self.connection.ops.max_name_length())
+                    )
+                    if self.connection.features.truncates_names
+                    else self.connection.introspection.identifier_converter(name)
                 )
-                if self.connection.features.truncates_names
-                else self.connection.introspection.identifier_converter(name)
                 for name in column_names
             ]
         with self.connection.cursor() as cursor:
diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 412d07a993..75787ef8ab 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -2,6 +2,7 @@
 Helpers to manipulate deferred DDL statements that might need to be adjusted or
 discarded within when executing a migration.
 """
+
 from copy import deepcopy


diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 6811b10abb..521187d2d4 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -3,6 +3,7 @@ MySQL database backend for Django.

 Requires mysqlclient: https://pypi.org/project/mysqlclient/
 """
+
 from django.core.exceptions import ImproperlyConfigured
 from django.db import IntegrityError
 from django.db.backends import utils as backend_utils
diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py
index 845ab8ccf5..611a3ea75a 100644
--- a/django/db/backends/oracle/base.py
+++ b/django/db/backends/oracle/base.py
@@ -3,6 +3,7 @@ Oracle database backend for Django.

 Requires cx_Oracle: https://oracle.github.io/python-cx_Oracle/
 """
+
 import datetime
 import decimal
 import os
diff --git a/django/db/backends/oracle/creation.py b/django/db/backends/oracle/creation.py
index df773bff8c..b0a5177728 100644
--- a/django/db/backends/oracle/creation.py
+++ b/django/db/backends/oracle/creation.py
@@ -133,20 +133,20 @@ class DatabaseCreation(BaseDatabaseCreation):
         credentials in the SAVED_USER/SAVED_PASSWORD key in the settings dict.
         """
         real_settings = settings.DATABASES[self.connection.alias]
-        real_settings["SAVED_USER"] = self.connection.settings_dict[
-            "SAVED_USER"
-        ] = self.connection.settings_dict["USER"]
+        real_settings["SAVED_USER"] = self.connection.settings_dict["SAVED_USER"] = (
+            self.connection.settings_dict["USER"]
+        )
         real_settings["SAVED_PASSWORD"] = self.connection.settings_dict[
             "SAVED_PASSWORD"
         ] = self.connection.settings_dict["PASSWORD"]
         real_test_settings = real_settings["TEST"]
         test_settings = self.connection.settings_dict["TEST"]
-        real_test_settings["USER"] = real_settings["USER"] = test_settings[
-            "USER"
-        ] = self.connection.settings_dict["USER"] = parameters["user"]
-        real_settings["PASSWORD"] = self.connection.settings_dict[
-            "PASSWORD"
-        ] = parameters["password"]
+        real_test_settings["USER"] = real_settings["USER"] = test_settings["USER"] = (
+            self.connection.settings_dict["USER"]
+        ) = parameters["user"]
+        real_settings["PASSWORD"] = self.connection.settings_dict["PASSWORD"] = (
+            parameters["password"]
+        )

     def set_as_test_mirror(self, primary_settings_dict):
         """
diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py
index d92ad58710..c950a9a616 100644
--- a/django/db/backends/postgresql/base.py
+++ b/django/db/backends/postgresql/base.py
@@ -226,9 +226,11 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         server_side_binding = conn_params.pop("server_side_binding", None)
         conn_params.setdefault(
             "cursor_factory",
-            ServerBindingCursor
-            if is_psycopg3 and server_side_binding is True
-            else Cursor,
+            (
+                ServerBindingCursor
+                if is_psycopg3 and server_side_binding is True
+                else Cursor
+            ),
         )
         if settings_dict["USER"]:
             conn_params["user"] = settings_dict["USER"]
diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 40fef6660e..2bec32c7dd 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -266,9 +266,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             % {
                 "column": self.quote_name(new_field.column),
                 "type": new_type,
-                "collation": " " + self._collate_sql(new_collation)
-                if new_collation
-                else "",
+                "collation": (
+                    " " + self._collate_sql(new_collation) if new_collation else ""
+                ),
             },
             [],
         )
diff --git a/django/db/backends/sqlite3/_functions.py b/django/db/backends/sqlite3/_functions.py
index 7e86950f7d..0171b60f38 100644
--- a/django/db/backends/sqlite3/_functions.py
+++ b/django/db/backends/sqlite3/_functions.py
@@ -1,6 +1,7 @@
 """
 Implementations of SQL functions for SQLite.
 """
+
 import functools
 import random
 import statistics
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index a3a382a56b..e7205cefc9 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -1,6 +1,7 @@
 """
 SQLite backend for the sqlite3 module in the standard library.
 """
+
 import datetime
 import decimal
 import warnings
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 154ac44419..aaf40532fa 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -566,11 +566,12 @@ class MigrationAutodetector:
                                 rem_model_state.app_label,
                                 rem_model_state.name_lower,
                             )
-                            self.renamed_models_rel[
-                                renamed_models_rel_key
-                            ] = "%s.%s" % (
-                                model_state.app_label,
-                                model_state.name_lower,
+                            self.renamed_models_rel[renamed_models_rel_key] = (
+                                "%s.%s"
+                                % (
+                                    model_state.app_label,
+                                    model_state.name_lower,
+                                )
                             )
                             self.old_model_keys.remove((rem_app_label, rem_model_name))
                             self.old_model_keys.add((app_label, model_name))
@@ -971,9 +972,9 @@ class MigrationAutodetector:
                                 (rem_app_label, rem_model_name, rem_field_name)
                             )
                             old_field_keys.add((app_label, model_name, field_name))
-                            self.renamed_fields[
-                                app_label, model_name, field_name
-                            ] = rem_field_name
+                            self.renamed_fields[app_label, model_name, field_name] = (
+                                rem_field_name
+                            )
                             break

     def generate_renamed_fields(self):
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 81dcd06e04..50445f3101 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -131,11 +131,11 @@ class MigrationLoader:
                         "Migration %s in app %s has no Migration class"
                         % (migration_name, app_config.label)
                     )
-                self.disk_migrations[
-                    app_config.label, migration_name
-                ] = migration_module.Migration(
-                    migration_name,
-                    app_config.label,
+                self.disk_migrations[app_config.label, migration_name] = (
+                    migration_module.Migration(
+                        migration_name,
+                        app_config.label,
+                    )
                 )

     def get_migration(self, app_label, name_prefix):
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index b18ef55369..98d563d26a 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -55,11 +55,11 @@ class CreateModel(ModelOperation):
         _check_for_duplicates(
             "bases",
             (
-                base._meta.label_lower
-                if hasattr(base, "_meta")
-                else base.lower()
-                if isinstance(base, str)
-                else base
+                (
+                    base._meta.label_lower
+                    if hasattr(base, "_meta")
+                    else base.lower() if isinstance(base, str) else base
+                )
                 for base in self.bases
             ),
         )
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..bb2a19edbb 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -525,11 +525,11 @@ class ProjectState:
             if model_state.options.get("proxy"):
                 proxy_models[model_key] = model_state
                 # Find a concrete model for the proxy.
-                concrete_models_mapping[
-                    model_key
-                ] = self._find_concrete_model_from_proxy(
-                    proxy_models,
-                    model_state,
+                concrete_models_mapping[model_key] = (
+                    self._find_concrete_model_from_proxy(
+                        proxy_models,
+                        model_state,
+                    )
                 )
             else:
                 concrete_models_mapping[model_key] = model_key
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index a778cd413b..0cbffacd1b 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -1,6 +1,7 @@
 """
 Classes to represent the definitions of aggregate functions.
 """
+
 from django.core.exceptions import FieldError, FullResultSet
 from django.db.models.expressions import Case, Func, Star, Value, When
 from django.db.models.fields import IntegerField
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0711ec0d61..9634ddaa20 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -2217,9 +2217,11 @@ class Model(AltersData, metaclass=ModelBase):
         opts = cls._meta
         valid_fields = set(
             chain.from_iterable(
-                (f.name, f.attname)
-                if not (f.auto_created and not f.concrete)
-                else (f.field.related_query_name(),)
+                (
+                    (f.name, f.attname)
+                    if not (f.auto_created and not f.concrete)
+                    else (f.field.related_query_name(),)
+                )
                 for f in chain(opts.fields, opts.related_objects)
             )
         )
diff --git a/django/db/models/constants.py b/django/db/models/constants.py
index a0c99c95fc..cec1b9b90f 100644
--- a/django/db/models/constants.py
+++ b/django/db/models/constants.py
@@ -1,6 +1,7 @@
 """
 Constants used across the ORM in general.
 """
+
 from enum import Enum

 # Separator used to split filter strings apart.
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 280cb967b4..530b788a06 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -203,9 +203,11 @@ class BaseExpression:

     def _parse_expressions(self, *expressions):
         return [
-            arg
-            if hasattr(arg, "resolve_expression")
-            else (F(arg) if isinstance(arg, str) else Value(arg))
+            (
+                arg
+                if hasattr(arg, "resolve_expression")
+                else (F(arg) if isinstance(arg, str) else Value(arg))
+            )
             for arg in expressions
         ]

@@ -277,9 +279,11 @@ class BaseExpression:
         c.is_summary = summarize
         c.set_source_expressions(
             [
-                expr.resolve_expression(query, allow_joins, reuse, summarize)
-                if expr
-                else None
+                (
+                    expr.resolve_expression(query, allow_joins, reuse, summarize)
+                    if expr
+                    else None
+                )
                 for expr in c.get_source_expressions()
             ]
         )
@@ -358,22 +362,16 @@ class BaseExpression:
         field = self.output_field
         internal_type = field.get_internal_type()
         if internal_type == "FloatField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else float(value)
+            return lambda value, expression, connection: (
+                None if value is None else float(value)
             )
         elif internal_type.endswith("IntegerField"):
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else int(value)
+            return lambda value, expression, connection: (
+                None if value is None else int(value)
             )
         elif internal_type == "DecimalField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else Decimal(value)
+            return lambda value, expression, connection: (
+                None if value is None else Decimal(value)
             )
         return self._convert_value_noop

@@ -419,9 +417,11 @@ class BaseExpression:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                F(f"{prefix}{expr.name}")
-                if isinstance(expr, F)
-                else expr.prefix_references(prefix)
+                (
+                    F(f"{prefix}{expr.name}")
+                    if isinstance(expr, F)
+                    else expr.prefix_references(prefix)
+                )
                 for expr in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index c74e92ba89..144cce6142 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -8,6 +8,7 @@ in the ``remote_field`` attribute of the field.
 They also act as reverse fields for the purposes of the Meta API because
 they're the closest concept currently available.
 """
+
 import warnings

 from django.core import exceptions
diff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py
index 108d904712..72a5925823 100644
--- a/django/db/models/functions/comparison.py
+++ b/django/db/models/functions/comparison.py
@@ -1,4 +1,5 @@
 """Database functions that do comparisons or type conversions."""
+
 from django.db import NotSupportedError
 from django.db.models.expressions import Func, Value
 from django.db.models.fields import TextField
diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index eb5332ecc0..09447e9fb3 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -318,9 +318,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate DateField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         elif isinstance(field, TimeField) and (
@@ -331,9 +333,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate TimeField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         return copy
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 460143ba5a..5fa4654a84 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -47,9 +47,11 @@ class ATan2(NumericOutputFieldMixin, Func):
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, FloatField())
-                if isinstance(expression.output_field, IntegerField)
-                else expression
+                (
+                    Cast(expression, FloatField())
+                    if isinstance(expression.output_field, IntegerField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()[::-1]
             ]
         )
diff --git a/django/db/models/functions/mixins.py b/django/db/models/functions/mixins.py
index caf20e131d..d983df7725 100644
--- a/django/db/models/functions/mixins.py
+++ b/django/db/models/functions/mixins.py
@@ -14,9 +14,11 @@ class FixDecimalInputMixin:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, output_field)
-                if isinstance(expression.output_field, FloatField)
-                else expression
+                (
+                    Cast(expression, output_field)
+                    if isinstance(expression.output_field, FloatField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/indexes.py b/django/db/models/indexes.py
index b5451f9e24..0ddfefec38 100644
--- a/django/db/models/indexes.py
+++ b/django/db/models/indexes.py
@@ -196,9 +196,11 @@ class Index:
             "" if not self.fields else " fields=%s" % repr(self.fields),
             "" if not self.expressions else " expressions=%s" % repr(self.expressions),
             "" if not self.name else " name=%s" % repr(self.name),
-            ""
-            if self.db_tablespace is None
-            else " db_tablespace=%s" % repr(self.db_tablespace),
+            (
+                ""
+                if self.db_tablespace is None
+                else " db_tablespace=%s" % repr(self.db_tablespace)
+            ),
             "" if self.condition is None else " condition=%s" % self.condition,
             "" if not self.include else " include=%s" % repr(self.include),
             "" if not self.opclasses else " opclasses=%s" % repr(self.opclasses),
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 91342a864a..64dd495d6e 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -253,9 +253,11 @@ class FieldGetDbPrepValueMixin:
         )
         return (
             "%s",
-            [get_db_prep_value(v, connection, prepared=True) for v in value]
-            if self.get_db_prep_lookup_value_is_iterable
-            else [get_db_prep_value(value, connection, prepared=True)],
+            (
+                [get_db_prep_value(v, connection, prepared=True) for v in value]
+                if self.get_db_prep_lookup_value_is_iterable
+                else [get_db_prep_value(value, connection, prepared=True)]
+            ),
         )


diff --git a/django/db/models/query.py b/django/db/models/query.py
index 5ac2407ea3..afa73dc161 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -108,9 +108,11 @@ class ModelIterable(BaseIterable):
                 related_objs,
                 operator.attrgetter(
                     *[
-                        field.attname
-                        if from_field == "self"
-                        else queryset.model._meta.get_field(from_field).attname
+                        (
+                            field.attname
+                            if from_field == "self"
+                            else queryset.model._meta.get_field(from_field).attname
+                        )
                         for from_field in field.from_fields
                     ]
                 ),
@@ -1362,9 +1364,7 @@ class QuerySet(AltersData):
         clone._iterable_class = (
             NamedValuesListIterable
             if named
-            else FlatValuesListIterable
-            if flat
-            else ValuesListIterable
+            else FlatValuesListIterable if flat else ValuesListIterable
         )
         return clone

@@ -1630,9 +1630,11 @@ class QuerySet(AltersData):
         if names is None:
             names = set(
                 chain.from_iterable(
-                    (field.name, field.attname)
-                    if hasattr(field, "attname")
-                    else (field.name,)
+                    (
+                        (field.name, field.attname)
+                        if hasattr(field, "attname")
+                        else (field.name,)
+                    )
                     for field in self.model._meta.get_fields()
                 )
             )
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 78148f76b0..f50b62ee86 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -5,6 +5,7 @@ Factored out from django.db.models.query to avoid making the main module very
 large and/or so that they can be used by other modules without getting into
 circular import difficulties.
 """
+
 import functools
 import inspect
 import logging
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index b28dc925ba..18f1db0689 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1216,9 +1216,9 @@ class SQLCompiler:
                 "field": f,
                 "reverse": False,
                 "local_setter": f.set_cached_value,
-                "remote_setter": f.remote_field.set_cached_value
-                if f.unique
-                else lambda x, y: None,
+                "remote_setter": (
+                    f.remote_field.set_cached_value if f.unique else lambda x, y: None
+                ),
                 "from_parent": False,
             }
             related_klass_infos.append(klass_info)
diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py
index 5eaa8c25f6..7c0c14a46e 100644
--- a/django/db/models/sql/datastructures.py
+++ b/django/db/models/sql/datastructures.py
@@ -2,6 +2,7 @@
 Useful auxiliary data structures for query construction. Not useful outside
 the SQL domain.
 """
+
 import warnings

 from django.core.exceptions import FullResultSet
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 13a6809dd8..5a97c59a02 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -6,6 +6,7 @@ themselves do not have to (and could be backed by things other than SQL
 databases). The abstraction barrier only works one way: this module has to know
 all about the internals of models in order to get the information it needs.
 """
+
 import copy
 import difflib
 import functools
@@ -76,9 +77,11 @@ def get_children_from_q(q):
 def rename_prefix_from_q(prefix, replacement, q):
     return Q.create(
         [
-            rename_prefix_from_q(prefix, replacement, c)
-            if isinstance(c, Node)
-            else (c[0].replace(prefix, replacement, 1), c[1])
+            (
+                rename_prefix_from_q(prefix, replacement, c)
+                if isinstance(c, Node)
+                else (c[0].replace(prefix, replacement, 1), c[1])
+            )
             for c in q.children
         ],
         q.connector,
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 2f23a2932c..9c5740c2cd 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -1,6 +1,7 @@
 """
 Code to manage the creation and SQL rendering of 'where' constraints.
 """
+
 import operator
 from functools import reduce

diff --git a/django/forms/models.py b/django/forms/models.py
index 3fa04b821f..78caf4f0b8 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -2,6 +2,7 @@
 Helper functions for creating Form classes from Django models
 and database field objects.
 """
+
 from itertools import chain

 from django.core.exceptions import (
@@ -829,9 +830,12 @@ class BaseModelFormSet(BaseFormSet, AltersData):
                 )
                 # Reduce Model instances to their primary key values
                 row_data = tuple(
-                    d._get_pk_val() if hasattr(d, "_get_pk_val")
-                    # Prevent "unhashable type: list" errors later on.
-                    else tuple(d) if isinstance(d, list) else d
+                    (
+                        d._get_pk_val()
+                        if hasattr(d, "_get_pk_val")
+                        # Prevent "unhashable type: list" errors later on.
+                        else tuple(d) if isinstance(d, list) else d
+                    )
                     for d in row_data
                 )
                 if row_data and None not in row_data:
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index ab7c0f755f..c3abe91765 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -100,9 +100,11 @@ class Media:

     def render_js(self):
         return [
-            path.__html__()
-            if hasattr(path, "__html__")
-            else format_html('<script src="{}"></script>', self.absolute_path(path))
+            (
+                path.__html__()
+                if hasattr(path, "__html__")
+                else format_html('<script src="{}"></script>', self.absolute_path(path))
+            )
             for path in self._js
         ]

@@ -112,12 +114,14 @@ class Media:
         media = sorted(self._css)
         return chain.from_iterable(
             [
-                path.__html__()
-                if hasattr(path, "__html__")
-                else format_html(
-                    '<link href="{}" media="{}" rel="stylesheet">',
-                    self.absolute_path(path),
-                    medium,
+                (
+                    path.__html__()
+                    if hasattr(path, "__html__")
+                    else format_html(
+                        '<link href="{}" media="{}" rel="stylesheet">',
+                        self.absolute_path(path),
+                        medium,
+                    )
                 )
                 for path in self._css[medium]
             ]
diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py
index 5ab63455ef..94e5116639 100644
--- a/django/http/multipartparser.py
+++ b/django/http/multipartparser.py
@@ -4,6 +4,7 @@ Multi-part parsing for file uploads.
 Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
 file upload handlers for processing.
 """
+
 import base64
 import binascii
 import collections
diff --git a/django/http/request.py b/django/http/request.py
index be6823cacb..044b2a66ea 100644
--- a/django/http/request.py
+++ b/django/http/request.py
@@ -169,9 +169,11 @@ class HttpRequest:
         return "%s%s%s" % (
             escape_uri_path(path),
             "/" if force_append_slash and not path.endswith("/") else "",
-            ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
-            if self.META.get("QUERY_STRING", "")
-            else "",
+            (
+                ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
+                if self.META.get("QUERY_STRING", "")
+                else ""
+            ),
         )

     def get_signed_cookie(self, key, default=RAISE_ERROR, salt="", max_age=None):
diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py
index 2c0d2cc120..f7943494ba 100644
--- a/django/middleware/csrf.py
+++ b/django/middleware/csrf.py
@@ -4,6 +4,7 @@ Cross Site Request Forgery Middleware.
 This module provides a middleware that implements protection
 against request forgeries from other sites.
 """
+
 import logging
 import string
 from collections import defaultdict
diff --git a/django/shortcuts.py b/django/shortcuts.py
index 90ec1bedc5..4783612bba 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -3,6 +3,7 @@ This module collects helper functions and classes that "span" multiple levels
 of MVC. In other words, these functions/classes introduce controlled coupling
 for convenience's sake.
 """
+
 from django.http import (
     Http404,
     HttpResponse,
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 589ca38414..1f1ea4d7a9 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -1,4 +1,5 @@
 """Default variable filters."""
+
 import random as random_module
 import re
 import types
diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py
index 79c10232bb..deb6b01fb6 100644
--- a/django/template/defaulttags.py
+++ b/django/template/defaulttags.py
@@ -1,4 +1,5 @@
 """Default tags used by the template system, available to all templates."""
+
 import re
 import sys
 import warnings
diff --git a/django/template/engine.py b/django/template/engine.py
index f2215c0e4e..9882d3a16d 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -70,9 +70,11 @@ class Engine:
             self.__class__.__qualname__,
             "" if not self.dirs else " dirs=%s" % repr(self.dirs),
             self.app_dirs,
-            ""
-            if not self.context_processors
-            else " context_processors=%s" % repr(self.context_processors),
+            (
+                ""
+                if not self.context_processors
+                else " context_processors=%s" % repr(self.context_processors)
+            ),
             self.debug,
             repr(self.loaders),
             repr(self.string_if_invalid),
diff --git a/django/template/smartif.py b/django/template/smartif.py
index 5b15a5a476..0a917c2aaa 100644
--- a/django/template/smartif.py
+++ b/django/template/smartif.py
@@ -1,6 +1,7 @@
 """
 Parser and utilities for the smart 'if' tag
 """
+
 # Using a simple top down parser, as described here:
 #    http://effbot.org/zone/simple-top-down-parsing.htm.
 # 'led' = left denotation
diff --git a/django/test/html.py b/django/test/html.py
index 87e213d651..f70796494b 100644
--- a/django/test/html.py
+++ b/django/test/html.py
@@ -1,4 +1,5 @@
 """Compare two HTML documents."""
+
 import html
 from html.parser import HTMLParser

diff --git a/django/urls/conf.py b/django/urls/conf.py
index 40708028a3..bb61063d77 100644
--- a/django/urls/conf.py
+++ b/django/urls/conf.py
@@ -1,4 +1,5 @@
 """Functions for use in URLsconfs."""
+
 from functools import partial
 from importlib import import_module

diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index b021673772..8b03c5801e 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -5,6 +5,7 @@ URLResolver is the main class here. Its resolve() method takes a URL (as
 a string) and returns a ResolverMatch object which provides access to all
 attributes of the resolved URL match.
 """
+
 import functools
 import inspect
 import re
@@ -91,9 +92,11 @@ class ResolverMatch:
                 self.app_names,
                 self.namespaces,
                 self.route,
-                f", captured_kwargs={self.captured_kwargs!r}"
-                if self.captured_kwargs
-                else "",
+                (
+                    f", captured_kwargs={self.captured_kwargs!r}"
+                    if self.captured_kwargs
+                    else ""
+                ),
                 f", extra_kwargs={self.extra_kwargs!r}" if self.extra_kwargs else "",
             )
         )
diff --git a/django/utils/archive.py b/django/utils/archive.py
index 71ec2d0015..56f34c0038 100644
--- a/django/utils/archive.py
+++ b/django/utils/archive.py
@@ -21,6 +21,7 @@ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 """
+
 import os
 import shutil
 import stat
diff --git a/django/utils/cache.py b/django/utils/cache.py
index cf797d0279..3b014fbe51 100644
--- a/django/utils/cache.py
+++ b/django/utils/cache.py
@@ -14,6 +14,7 @@ cache keys to prevent delivery of wrong content.
 An example: i18n middleware would need to distinguish caches by the
 "Accept-language" header.
 """
+
 import time
 from collections import defaultdict
 from hashlib import md5
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..5134b854d6 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -1,6 +1,7 @@
 """
 Django's standard crypto functions and utilities.
 """
+
 import hashlib
 import hmac
 import secrets
diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index a6c315e4cf..a3274b901c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -10,6 +10,7 @@ Usage:
 7th October 2003 11:39
 >>>
 """
+
 import calendar
 from datetime import date, datetime, time
 from email.utils import format_datetime as format_datetime_rfc5322
diff --git a/django/utils/deconstruct.py b/django/utils/deconstruct.py
index f8754c1974..2e5463a651 100644
--- a/django/utils/deconstruct.py
+++ b/django/utils/deconstruct.py
@@ -42,9 +42,11 @@ def deconstructible(*args, path=None):
                     "#serializing-values" % (name, module_name, get_docs_version())
                 )
             return (
-                path
-                if path and type(obj) is klass
-                else f"{obj.__class__.__module__}.{name}",
+                (
+                    path
+                    if path and type(obj) is klass
+                    else f"{obj.__class__.__module__}.{name}"
+                ),
                 obj._constructor_args[0],
                 obj._constructor_args[1],
             )
diff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py
index 31ca9a2db9..3bd456ca68 100644
--- a/django/utils/feedgenerator.py
+++ b/django/utils/feedgenerator.py
@@ -21,6 +21,7 @@ Sample usage:
 For definitions of the different versions of RSS, see:
 https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss
 """
+
 import datetime
 import email
 from io import StringIO
diff --git a/django/utils/jslex.py b/django/utils/jslex.py
index 93a1a2e972..fc46a686c7 100644
--- a/django/utils/jslex.py
+++ b/django/utils/jslex.py
@@ -1,4 +1,5 @@
 """JsLex: a lexer for JavaScript"""
+
 # Originally from https://bitbucket.org/ned/jslex
 import re

diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py
index 9ee82e1a9b..b71298e399 100644
--- a/django/utils/regex_helper.py
+++ b/django/utils/regex_helper.py
@@ -5,6 +5,7 @@ Used internally by Django and not intended for external use.
 This is not, and is not intended to be, a complete reg-exp decompiler. It
 should be good enough for a large class of URLS, however.
 """
+
 import re

 from django.utils.functional import SimpleLazyObject
diff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py
index 0b3f78e486..0618f02159 100644
--- a/django/utils/translation/__init__.py
+++ b/django/utils/translation/__init__.py
@@ -1,6 +1,7 @@
 """
 Internationalization support.
 """
+
 from contextlib import ContextDecorator
 from decimal import ROUND_UP, Decimal

diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 872c80b00f..a629528717 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -1,4 +1,5 @@
 """Translation helper functions."""
+
 import functools
 import gettext as gettext_module
 import os
diff --git a/django/views/decorators/http.py b/django/views/decorators/http.py
index 5d5dcbc790..a4c1ebc31e 100644
--- a/django/views/decorators/http.py
+++ b/django/views/decorators/http.py
@@ -1,6 +1,7 @@
 """
 Decorators for views based on HTTP headers.
 """
+
 import datetime
 from functools import wraps

diff --git a/django/views/static.py b/django/views/static.py
index df46c53093..b24f0e30f9 100644
--- a/django/views/static.py
+++ b/django/views/static.py
@@ -2,6 +2,7 @@
 Views and functions for serving static files. These are only to be used
 during development, and SHOULD NOT be used in a production setting.
 """
+
 import mimetypes
 import posixpath
 from pathlib import Path
diff --git a/docs/_ext/djangodocs.py b/docs/_ext/djangodocs.py
index 866b8f891d..210abdcae6 100644
--- a/docs/_ext/djangodocs.py
+++ b/docs/_ext/djangodocs.py
@@ -1,6 +1,7 @@
 """
 Sphinx plugins for Django documentation.
 """
+
 import json
 import os
 import re
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..6e5aada76b
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/test_project/__init__.py b/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/asgi.py b/test_project/asgi.py
new file mode 100644
index 0000000000..a7a0d4f0b1
--- /dev/null
+++ b/test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+
+application = get_asgi_application()
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..f189297a4f
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230707060601.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-8)vp2rxlc*ovq&4xokk-ve0on1%1ye4_dzp_es1z6#k%uxm%u("
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'bugapp',
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "test_project.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "test_project.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..b6ae5e3b82
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for test_project project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/test_project/wsgi.py b/test_project/wsgi.py
new file mode 100644
index 0000000000..ee57abe62a
--- /dev/null
+++ b/test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+
+application = get_wsgi_application()
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 0000000000..c1941877ac
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,20 @@
+import os
+import django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+django.setup()
+from bugapp.models import Thing, SubThing
+
+# Create a Thing instance
+thing = Thing(name='Test Thing')
+thing.save()
+
+# Create a SubThing instance
+subthing = SubThing(name='Test SubThing', thing=thing)
+subthing.save()
+
+# Delete the SubThing instance
+subthing.delete()
+
+# Try to add a new SubThing instance
+new_subthing = SubThing(name='New SubThing', thing=thing)
+new_subthing.save()
\ No newline at end of file
diff --git a/tests/admin_changelist/test_date_hierarchy.py b/tests/admin_changelist/test_date_hierarchy.py
index 03afaa33d9..94a6a8eb6c 100644
--- a/tests/admin_changelist/test_date_hierarchy.py
+++ b/tests/admin_changelist/test_date_hierarchy.py
@@ -90,7 +90,8 @@ class DateHierarchyTests(TestCase):
             {"year": 2017, "month": 12, "day": 0},
         )
         for invalid_query in tests:
-            with self.subTest(query=invalid_query), self.assertRaises(
-                IncorrectLookupParameters
+            with (
+                self.subTest(query=invalid_query),
+                self.assertRaises(IncorrectLookupParameters),
             ):
                 self.assertDateParams(invalid_query, None, None)
diff --git a/tests/admin_inlines/models.py b/tests/admin_inlines/models.py
index a8d2ee02e1..eca5bae422 100644
--- a/tests/admin_inlines/models.py
+++ b/tests/admin_inlines/models.py
@@ -1,6 +1,7 @@
 """
 Testing of admin inline formsets.
 """
+
 import random

 from django.contrib.contenttypes.fields import GenericForeignKey
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 57fbc454ff..421578a6c2 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -3,6 +3,7 @@ A series of tests to establish that the command-line management tools work as
 advertised - especially with regards to the handling of the
 DJANGO_SETTINGS_MODULE and default settings.py files.
 """
+
 import os
 import re
 import shutil
@@ -757,7 +758,9 @@ class DjangoAdminSettingsDirectory(AdminScriptTestCase):
         with open(os.path.join(app_path, "apps.py"), encoding="utf8") as f:
             content = f.read()
             self.assertIn("class こんにちはConfig(AppConfig)", content)
-            self.assertIn('name = "こんにちは"' if HAS_BLACK else "name = 'こんにちは'", content)
+            self.assertIn(
+                'name = "こんにちは"' if HAS_BLACK else "name = 'こんにちは'", content
+            )

     def test_builtin_command(self):
         """
diff --git a/tests/admin_views/custom_has_permission_admin.py b/tests/admin_views/custom_has_permission_admin.py
index 6dc2011b24..17b6498aab 100644
--- a/tests/admin_views/custom_has_permission_admin.py
+++ b/tests/admin_views/custom_has_permission_admin.py
@@ -1,6 +1,7 @@
 """
 A custom AdminSite for AdminViewPermissionsTest.test_login_has_permission().
 """
+
 from django.contrib import admin
 from django.contrib.auth import get_permission_codename
 from django.contrib.auth.forms import AuthenticationForm
diff --git a/tests/admin_views/customadmin.py b/tests/admin_views/customadmin.py
index e3429ec4bc..4b30c5c30f 100644
--- a/tests/admin_views/customadmin.py
+++ b/tests/admin_views/customadmin.py
@@ -1,6 +1,7 @@
 """
 A second, custom AdminSite -- see tests.CustomAdminSiteTests.
 """
+
 from django.contrib import admin
 from django.contrib.auth.admin import UserAdmin
 from django.contrib.auth.models import User
diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py
index bfb3919b23..9199bf3eba 100644
--- a/tests/aggregation_regress/tests.py
+++ b/tests/aggregation_regress/tests.py
@@ -1564,8 +1564,9 @@ class AggregationTests(TestCase):
             "django.db.connection.features.allows_group_by_selected_pks_on_model",
             return_value=True,
         ):
-            with mock.patch.object(Book._meta, "managed", False), mock.patch.object(
-                Author._meta, "managed", False
+            with (
+                mock.patch.object(Book._meta, "managed", False),
+                mock.patch.object(Author._meta, "managed", False),
             ):
                 _, _, grouping = qs.query.get_compiler(using="default").pre_sql_setup()
                 self.assertEqual(len(grouping), 2)
diff --git a/tests/auth_tests/models/custom_permissions.py b/tests/auth_tests/models/custom_permissions.py
index 52d28bd276..385de4e846 100644
--- a/tests/auth_tests/models/custom_permissions.py
+++ b/tests/auth_tests/models/custom_permissions.py
@@ -3,6 +3,7 @@ The CustomPermissionsUser users email as the identifier, but uses the normal
 Django permissions model. This allows us to check that the PermissionsMixin
 includes everything that is needed to interact with the ModelBackend.
 """
+
 from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
 from django.db import models

diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 7a80adbf31..7e5a91036c 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -479,8 +479,9 @@ class AuthenticationFormTest(TestDataMixin, TestCase):
             user_login_failed.disconnect(signal_handler)

     def test_inactive_user_i18n(self):
-        with self.settings(USE_I18N=True), translation.override(
-            "pt-br", deactivate=True
+        with (
+            self.settings(USE_I18N=True),
+            translation.override("pt-br", deactivate=True),
         ):
             # The user is inactive.
             data = {
@@ -899,9 +900,9 @@ class UserChangeFormTest(TestDataMixin, TestCase):
         class MyUserForm(UserChangeForm):
             def __init__(self, *args, **kwargs):
                 super().__init__(*args, **kwargs)
-                self.fields[
-                    "groups"
-                ].help_text = "These groups give users different permissions"
+                self.fields["groups"].help_text = (
+                    "These groups give users different permissions"
+                )

             class Meta(UserChangeForm.Meta):
                 fields = ("groups",)
diff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py
index e10992b25c..cf2ebafa15 100644
--- a/tests/auth_tests/test_hashers.py
+++ b/tests/auth_tests/test_hashers.py
@@ -327,8 +327,9 @@ class TestUtilsHashPass(SimpleTestCase):
         with mock.patch.object(hasher, "rounds", 4):
             encoded = make_password("letmein", hasher="bcrypt")

-        with mock.patch.object(hasher, "rounds", 6), mock.patch.object(
-            hasher, "encode", side_effect=hasher.encode
+        with (
+            mock.patch.object(hasher, "rounds", 6),
+            mock.patch.object(hasher, "encode", side_effect=hasher.encode),
         ):
             hasher.harden_runtime("wrong_password", encoded)

@@ -502,8 +503,9 @@ class TestUtilsHashPass(SimpleTestCase):
         with mock.patch.object(hasher, "iterations", 1):
             encoded = make_password("letmein")

-        with mock.patch.object(hasher, "iterations", 6), mock.patch.object(
-            hasher, "encode", side_effect=hasher.encode
+        with (
+            mock.patch.object(hasher, "iterations", 6),
+            mock.patch.object(hasher, "encode", side_effect=hasher.encode),
         ):
             hasher.harden_runtime("wrong_password", encoded)

@@ -551,8 +553,9 @@ class TestUtilsHashPass(SimpleTestCase):
         hasher = get_hasher("default")
         encoded = make_password("letmein")

-        with mock.patch.object(hasher, "harden_runtime"), mock.patch.object(
-            hasher, "must_update", return_value=True
+        with (
+            mock.patch.object(hasher, "harden_runtime"),
+            mock.patch.object(hasher, "must_update", return_value=True),
         ):
             # Correct password supplied, no hardening needed
             check_password("letmein", encoded)
diff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py
index d15a166c98..0897046c1f 100644
--- a/tests/auth_tests/test_views.py
+++ b/tests/auth_tests/test_views.py
@@ -818,9 +818,9 @@ class LoginTest(AuthViewsTestCase):
         # Use POST request to log in
         SessionMiddleware(get_response).process_request(req)
         CsrfViewMiddleware(get_response).process_view(req, LoginView.as_view(), (), {})
-        req.META[
-            "SERVER_NAME"
-        ] = "testserver"  # Required to have redirect work in login view
+        req.META["SERVER_NAME"] = (
+            "testserver"  # Required to have redirect work in login view
+        )
         req.META["SERVER_PORT"] = 80
         resp = CsrfViewMiddleware(LoginView.as_view())(req)
         csrf_cookie = resp.cookies.get(settings.CSRF_COOKIE_NAME, None)
diff --git a/tests/backends/base/test_base.py b/tests/backends/base/test_base.py
index ada2cc33c9..3a0f7f1f1c 100644
--- a/tests/backends/base/test_base.py
+++ b/tests/backends/base/test_base.py
@@ -168,8 +168,9 @@ class ExecuteWrapperTests(TestCase):
     def test_nested_wrapper_invoked(self):
         outer_wrapper = self.mock_wrapper()
         inner_wrapper = self.mock_wrapper()
-        with connection.execute_wrapper(outer_wrapper), connection.execute_wrapper(
-            inner_wrapper
+        with (
+            connection.execute_wrapper(outer_wrapper),
+            connection.execute_wrapper(inner_wrapper),
         ):
             self.call_execute(connection)
             self.assertEqual(inner_wrapper.call_count, 1)
@@ -182,8 +183,10 @@ class ExecuteWrapperTests(TestCase):

         wrapper = self.mock_wrapper()
         c = connection  # This alias shortens the next line.
-        with c.execute_wrapper(wrapper), c.execute_wrapper(blocker), c.execute_wrapper(
-            wrapper
+        with (
+            c.execute_wrapper(wrapper),
+            c.execute_wrapper(blocker),
+            c.execute_wrapper(wrapper),
         ):
             with c.cursor() as cursor:
                 cursor.execute("The database never sees this")
diff --git a/tests/backends/test_utils.py b/tests/backends/test_utils.py
index 03d4b036fd..704498836e 100644
--- a/tests/backends/test_utils.py
+++ b/tests/backends/test_utils.py
@@ -1,4 +1,5 @@
 """Tests for django.db.backends.utils"""
+
 from decimal import Decimal, Rounded

 from django.db import NotSupportedError, connection
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index bfdf5ed4b4..40a41a2f29 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -1,4 +1,5 @@
 """Tests related to django.db.backends that haven't been organized."""
+
 import datetime
 import threading
 import unittest
diff --git a/tests/bash_completion/tests.py b/tests/bash_completion/tests.py
index 856e351dfa..324e980937 100644
--- a/tests/bash_completion/tests.py
+++ b/tests/bash_completion/tests.py
@@ -1,6 +1,7 @@
 """
 A series of tests to establish that the command-line bash completion works.
 """
+
 import os
 import sys
 import unittest
diff --git a/tests/basic/models.py b/tests/basic/models.py
index b71b60a213..cd89643140 100644
--- a/tests/basic/models.py
+++ b/tests/basic/models.py
@@ -3,6 +3,7 @@ Bare-bones model

 This is a basic model with only two non-primary-key fields.
 """
+
 import uuid

 from django.db import models
diff --git a/tests/check_framework/test_security.py b/tests/check_framework/test_security.py
index 3e20f35f01..f5d22e7518 100644
--- a/tests/check_framework/test_security.py
+++ b/tests/check_framework/test_security.py
@@ -592,8 +592,9 @@ class CheckReferrerPolicyTest(SimpleTestCase):
             ("strict-origin", "origin"),
         )
         for value in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_REFERRER_POLICY=value
+            with (
+                self.subTest(value=value),
+                override_settings(SECURE_REFERRER_POLICY=value),
             ):
                 self.assertEqual(base.check_referrer_policy(None), [])

@@ -651,8 +652,11 @@ class CheckCrossOriginOpenerPolicyTest(SimpleTestCase):
     def test_with_coop(self):
         tests = ["same-origin", "same-origin-allow-popups", "unsafe-none"]
         for value in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+            with (
+                self.subTest(value=value),
+                override_settings(
+                    SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+                ),
             ):
                 self.assertEqual(base.check_cross_origin_opener_policy(None), [])

diff --git a/tests/contenttypes_tests/test_management.py b/tests/contenttypes_tests/test_management.py
index eb472d80ce..14ff4e5952 100644
--- a/tests/contenttypes_tests/test_management.py
+++ b/tests/contenttypes_tests/test_management.py
@@ -88,9 +88,10 @@ class RemoveStaleContentTypesTests(TestCase):
     def test_contenttypes_removed_in_installed_apps_without_models(self):
         ContentType.objects.create(app_label="empty_models", model="Fake 1")
         ContentType.objects.create(app_label="no_models", model="Fake 2")
-        with mock.patch(
-            "builtins.input", return_value="yes"
-        ), captured_stdout() as stdout:
+        with (
+            mock.patch("builtins.input", return_value="yes"),
+            captured_stdout() as stdout,
+        ):
             call_command("remove_stale_contenttypes", verbosity=2)
         self.assertNotIn(
             "Deleting stale content type 'empty_models | Fake 1'",
@@ -106,9 +107,10 @@ class RemoveStaleContentTypesTests(TestCase):
     def test_contenttypes_removed_for_apps_not_in_installed_apps(self):
         ContentType.objects.create(app_label="empty_models", model="Fake 1")
         ContentType.objects.create(app_label="no_models", model="Fake 2")
-        with mock.patch(
-            "builtins.input", return_value="yes"
-        ), captured_stdout() as stdout:
+        with (
+            mock.patch("builtins.input", return_value="yes"),
+            captured_stdout() as stdout,
+        ):
             call_command(
                 "remove_stale_contenttypes", include_stale_apps=True, verbosity=2
             )
diff --git a/tests/contenttypes_tests/test_models.py b/tests/contenttypes_tests/test_models.py
index 95518bb3df..fdf16c20d5 100644
--- a/tests/contenttypes_tests/test_models.py
+++ b/tests/contenttypes_tests/test_models.py
@@ -324,7 +324,8 @@ class ContentTypesMultidbTests(TestCase):
         db_for_read().
         """
         ContentType.objects.clear_cache()
-        with self.assertNumQueries(0, using="default"), self.assertNumQueries(
-            1, using="other"
+        with (
+            self.assertNumQueries(0, using="default"),
+            self.assertNumQueries(1, using="other"),
         ):
             ContentType.objects.get_for_model(Author)
diff --git a/tests/contenttypes_tests/test_views.py b/tests/contenttypes_tests/test_views.py
index 4d85d15065..75f39a7bab 100644
--- a/tests/contenttypes_tests/test_views.py
+++ b/tests/contenttypes_tests/test_views.py
@@ -150,10 +150,8 @@ class ContentTypesViewsSiteRelTests(TestCase):
         """
         The shortcut view works if a model's ForeignKey to site is None.
         """
-        get_model.side_effect = (
-            lambda *args, **kwargs: MockSite
-            if args[0] == "sites.Site"
-            else ModelWithNullFKToSite
+        get_model.side_effect = lambda *args, **kwargs: (
+            MockSite if args[0] == "sites.Site" else ModelWithNullFKToSite
         )

         obj = ModelWithNullFKToSite.objects.create(title="title")
@@ -172,10 +170,8 @@ class ContentTypesViewsSiteRelTests(TestCase):
         site if it's attached to the object or to the domain of the first site
         found in the m2m relationship.
         """
-        get_model.side_effect = (
-            lambda *args, **kwargs: MockSite
-            if args[0] == "sites.Site"
-            else ModelWithM2MToSite
+        get_model.side_effect = lambda *args, **kwargs: (
+            MockSite if args[0] == "sites.Site" else ModelWithM2MToSite
         )

         # get_current_site() will lookup a Site object, so these must match the
diff --git a/tests/context_processors/tests.py b/tests/context_processors/tests.py
index 23f9d59149..ba92ff8b05 100644
--- a/tests/context_processors/tests.py
+++ b/tests/context_processors/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for Django's bundled context processors.
 """
+
 from django.test import SimpleTestCase, TestCase, override_settings


diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py
index a636977b67..22f443d100 100644
--- a/tests/custom_lookups/tests.py
+++ b/tests/custom_lookups/tests.py
@@ -238,10 +238,11 @@ class LookupTests(TestCase):
     def test_custom_name_lookup(self):
         a1 = Author.objects.create(name="a1", birthdate=date(1981, 2, 16))
         Author.objects.create(name="a2", birthdate=date(2012, 2, 29))
-        with register_lookup(models.DateField, YearTransform), register_lookup(
-            models.DateField, YearTransform, lookup_name="justtheyear"
-        ), register_lookup(YearTransform, Exactly), register_lookup(
-            YearTransform, Exactly, lookup_name="isactually"
+        with (
+            register_lookup(models.DateField, YearTransform),
+            register_lookup(models.DateField, YearTransform, lookup_name="justtheyear"),
+            register_lookup(YearTransform, Exactly),
+            register_lookup(YearTransform, Exactly, lookup_name="isactually"),
         ):
             qs1 = Author.objects.filter(birthdate__testyear__exactly=1981)
             qs2 = Author.objects.filter(birthdate__justtheyear__isactually=1981)
diff --git a/tests/db_functions/comparison/test_nullif.py b/tests/db_functions/comparison/test_nullif.py
index 9839e6b4c5..cdbc3d6960 100644
--- a/tests/db_functions/comparison/test_nullif.py
+++ b/tests/db_functions/comparison/test_nullif.py
@@ -23,9 +23,11 @@ class NullIfTests(TestCase):
             [
                 ("smithj",),
                 (
-                    ""
-                    if connection.features.interprets_empty_strings_as_nulls
-                    else None,
+                    (
+                        ""
+                        if connection.features.interprets_empty_strings_as_nulls
+                        else None
+                    ),
                 ),
             ],
         )
diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py
index 29212b6e24..e576e6e464 100644
--- a/tests/db_functions/datetime/test_extract_trunc.py
+++ b/tests/db_functions/datetime/test_extract_trunc.py
@@ -113,9 +113,11 @@ class DateFunctionTests(TestCase):
             end_date=end_datetime.date() if end_datetime else None,
             start_time=start_datetime.time() if start_datetime else None,
             end_time=end_datetime.time() if end_datetime else None,
-            duration=(end_datetime - start_datetime)
-            if start_datetime and end_datetime
-            else None,
+            duration=(
+                (end_datetime - start_datetime)
+                if start_datetime and end_datetime
+                else None
+            ),
         )

     def test_extract_year_exact_lookup(self):
diff --git a/tests/db_functions/models.py b/tests/db_functions/models.py
index d6a06511bc..c126f1bae1 100644
--- a/tests/db_functions/models.py
+++ b/tests/db_functions/models.py
@@ -1,6 +1,7 @@
 """
 Tests for built in Function expressions.
 """
+
 from django.db import models


diff --git a/tests/db_functions/text/test_md5.py b/tests/db_functions/text/test_md5.py
index fd0aec58f2..4fd66f0397 100644
--- a/tests/db_functions/text/test_md5.py
+++ b/tests/db_functions/text/test_md5.py
@@ -35,9 +35,11 @@ class MD5Tests(TestCase):
                 "ca6d48f6772000141e66591aee49d56c",
                 "bf2c13bc1154e3d2e7df848cbc8be73d",
                 "d41d8cd98f00b204e9800998ecf8427e",
-                "d41d8cd98f00b204e9800998ecf8427e"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "d41d8cd98f00b204e9800998ecf8427e"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha1.py b/tests/db_functions/text/test_sha1.py
index 175c5727ff..ef846d07aa 100644
--- a/tests/db_functions/text/test_sha1.py
+++ b/tests/db_functions/text/test_sha1.py
@@ -35,9 +35,11 @@ class SHA1Tests(TestCase):
                 "0781e0745a2503e6ded05ed5bc554c421d781b0c",
                 "198d15ea139de04060caf95bc3e0ec5883cba881",
                 "da39a3ee5e6b4b0d3255bfef95601890afd80709",
-                "da39a3ee5e6b4b0d3255bfef95601890afd80709"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "da39a3ee5e6b4b0d3255bfef95601890afd80709"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha224.py b/tests/db_functions/text/test_sha224.py
index a6254f43e3..60d9e378a6 100644
--- a/tests/db_functions/text/test_sha224.py
+++ b/tests/db_functions/text/test_sha224.py
@@ -37,9 +37,11 @@ class SHA224Tests(TestCase):
                 "2297904883e78183cb118fc3dc21a610d60daada7b6ebdbc85139f4d",
                 "eba942746e5855121d9d8f79e27dfdebed81adc85b6bf41591203080",
                 "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
-                "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha256.py b/tests/db_functions/text/test_sha256.py
index b399dbecd3..0cf72783e7 100644
--- a/tests/db_functions/text/test_sha256.py
+++ b/tests/db_functions/text/test_sha256.py
@@ -35,9 +35,11 @@ class SHA256Tests(TestCase):
                 "6e4cce20cd83fc7c202f21a8b2452a68509cf24d1c272a045b5e0cfc43f0d94e",
                 "3ad2039e3ec0c88973ae1c0fce5a3dbafdd5a1627da0a92312c54ebfcf43988e",
                 "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
-                "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha384.py b/tests/db_functions/text/test_sha384.py
index 250cadda4a..313f6e6d78 100644
--- a/tests/db_functions/text/test_sha384.py
+++ b/tests/db_functions/text/test_sha384.py
@@ -39,10 +39,12 @@ class SHA384Tests(TestCase):
                 "26676a43c7ba378621175853b0",
                 "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
                 "bfe76f65fbd51ad2f14898b95b",
-                "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
-                "bfe76f65fbd51ad2f14898b95b"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
+                    "bfe76f65fbd51ad2f14898b95b"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha512.py b/tests/db_functions/text/test_sha512.py
index f5a7ad4ae5..b4c7a4bbd8 100644
--- a/tests/db_functions/text/test_sha512.py
+++ b/tests/db_functions/text/test_sha512.py
@@ -39,10 +39,12 @@ class SHA512Tests(TestCase):
                 "172d88798345a3a7666faf5f35a144c60812d3234dcd35f444624f2faee16857",
                 "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
                 "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
-                "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
-                "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
+                    "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_utils/tests.py b/tests/db_utils/tests.py
index a2d9cc7b5e..4028a8acdf 100644
--- a/tests/db_utils/tests.py
+++ b/tests/db_utils/tests.py
@@ -1,4 +1,5 @@
 """Tests for django.db.utils."""
+
 import unittest

 from django.core.exceptions import ImproperlyConfigured
diff --git a/tests/dbshell/test_sqlite.py b/tests/dbshell/test_sqlite.py
index faf9882ad9..e795f7619b 100644
--- a/tests/dbshell/test_sqlite.py
+++ b/tests/dbshell/test_sqlite.py
@@ -35,8 +35,11 @@ class SqliteDbshellCommandTestCase(SimpleTestCase):
         cmd_args = self.settings_to_cmd_args_env(sqlite_with_path)[0]

         msg = '"sqlite3 test.db.sqlite3" returned non-zero exit status 1.'
-        with mock.patch(
-            "django.db.backends.sqlite3.client.DatabaseClient.runshell",
-            side_effect=subprocess.CalledProcessError(returncode=1, cmd=cmd_args),
-        ), self.assertRaisesMessage(CommandError, msg):
+        with (
+            mock.patch(
+                "django.db.backends.sqlite3.client.DatabaseClient.runshell",
+                side_effect=subprocess.CalledProcessError(returncode=1, cmd=cmd_args),
+            ),
+            self.assertRaisesMessage(CommandError, msg),
+        ):
             call_command("dbshell")
diff --git a/tests/distinct_on_fields/tests.py b/tests/distinct_on_fields/tests.py
index b80878bbf2..93b3f27aec 100644
--- a/tests/distinct_on_fields/tests.py
+++ b/tests/distinct_on_fields/tests.py
@@ -76,9 +76,11 @@ class DistinctOnTests(TestCase):
             (StaffTag.objects.distinct("staff", "tag"), [self.st1]),
             (
                 Tag.objects.order_by("parent__pk", "pk").distinct("parent"),
-                [self.t2, self.t4, self.t1]
-                if connection.features.nulls_order_largest
-                else [self.t1, self.t2, self.t4],
+                (
+                    [self.t2, self.t4, self.t1]
+                    if connection.features.nulls_order_largest
+                    else [self.t1, self.t2, self.t4]
+                ),
             ),
             (
                 StaffTag.objects.select_related("staff")
diff --git a/tests/expressions/models.py b/tests/expressions/models.py
index 35985dc5f0..aa9dba3ebe 100644
--- a/tests/expressions/models.py
+++ b/tests/expressions/models.py
@@ -1,6 +1,7 @@
 """
 Tests for F() query expression syntax.
 """
+
 import uuid

 from django.db import models
diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py
index 693efc4c62..833d841361 100644
--- a/tests/file_uploads/tests.py
+++ b/tests/file_uploads/tests.py
@@ -451,9 +451,10 @@ class FileUploadTests(TestCase):

     def test_file_content(self):
         file = tempfile.NamedTemporaryFile
-        with file(suffix=".ctype_extra") as no_content_type, file(
-            suffix=".ctype_extra"
-        ) as simple_file:
+        with (
+            file(suffix=".ctype_extra") as no_content_type,
+            file(suffix=".ctype_extra") as simple_file,
+        ):
             no_content_type.write(b"no content")
             no_content_type.seek(0)

@@ -482,9 +483,10 @@ class FileUploadTests(TestCase):
     def test_content_type_extra(self):
         """Uploaded files may have content type parameters available."""
         file = tempfile.NamedTemporaryFile
-        with file(suffix=".ctype_extra") as no_content_type, file(
-            suffix=".ctype_extra"
-        ) as simple_file:
+        with (
+            file(suffix=".ctype_extra") as no_content_type,
+            file(suffix=".ctype_extra") as simple_file,
+        ):
             no_content_type.write(b"something")
             no_content_type.seek(0)

diff --git a/tests/file_uploads/uploadhandler.py b/tests/file_uploads/uploadhandler.py
index a1e1a5af05..d3c88ac305 100644
--- a/tests/file_uploads/uploadhandler.py
+++ b/tests/file_uploads/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Upload handlers to test the upload API.
 """
+
 import os
 from tempfile import NamedTemporaryFile

diff --git a/tests/files/tests.py b/tests/files/tests.py
index b3478d2732..0535914904 100644
--- a/tests/files/tests.py
+++ b/tests/files/tests.py
@@ -144,35 +144,40 @@ class FileTests(unittest.TestCase):
         self.assertEqual(list(f), ["one\n", "two\n", "three"])

     def test_readable(self):
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertTrue(test_file.readable())
         self.assertFalse(test_file.readable())

     def test_writable(self):
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertTrue(test_file.writable())
         self.assertFalse(test_file.writable())
-        with tempfile.TemporaryFile("rb") as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile("rb") as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertFalse(test_file.writable())

     def test_seekable(self):
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertTrue(test_file.seekable())
         self.assertFalse(test_file.seekable())

     def test_io_wrapper(self):
         content = "vive l'été\n"
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             test_file.write(content.encode())
             test_file.seek(0)
             wrapper = TextIOWrapper(test_file, "utf-8", newline="\n")
diff --git a/tests/force_insert_update/models.py b/tests/force_insert_update/models.py
index b95b197454..e6fdfbd827 100644
--- a/tests/force_insert_update/models.py
+++ b/tests/force_insert_update/models.py
@@ -2,6 +2,7 @@
 Tests for forcing insert and update queries (instead of Django's normal
 automatic behavior).
 """
+
 from django.db import models


diff --git a/tests/forms_tests/field_tests/test_decimalfield.py b/tests/forms_tests/field_tests/test_decimalfield.py
index 9d26bc88b0..cb13e5b71b 100644
--- a/tests/forms_tests/field_tests/test_decimalfield.py
+++ b/tests/forms_tests/field_tests/test_decimalfield.py
@@ -80,8 +80,9 @@ class DecimalFieldTest(FormFieldAssertionsMixin, SimpleTestCase):
             "--0.12",
         )
         for value in values:
-            with self.subTest(value=value), self.assertRaisesMessage(
-                ValidationError, "'Enter a number.'"
+            with (
+                self.subTest(value=value),
+                self.assertRaisesMessage(ValidationError, "'Enter a number.'"),
             ):
                 f.clean(value)

diff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py
index 11388bdc09..9744981471 100644
--- a/tests/forms_tests/field_tests/test_filefield.py
+++ b/tests/forms_tests/field_tests/test_filefield.py
@@ -53,7 +53,8 @@ class FileFieldTest(SimpleTestCase):
         self.assertIsInstance(
             f.clean(
                 SimpleUploadedFile(
-                    "我隻氣墊船裝滿晒鱔.txt", "मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".encode()
+                    "我隻氣墊船裝滿晒鱔.txt",
+                    "मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".encode(),
                 )
             ),
             SimpleUploadedFile,
diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py
index ee0ae5a426..5d5608f78b 100644
--- a/tests/forms_tests/tests/test_formsets.py
+++ b/tests/forms_tests/tests/test_formsets.py
@@ -213,9 +213,12 @@ class FormsFormsetTestCase(SimpleTestCase):
             [("Calexico", "100"), ("Any1", "42"), ("Any2", "101")]
         )

-        with mock.patch(
-            "django.forms.formsets.ManagementForm.is_valid", mocked_is_valid
-        ), mock.patch("django.forms.forms.BaseForm.full_clean", mocked_full_clean):
+        with (
+            mock.patch(
+                "django.forms.formsets.ManagementForm.is_valid", mocked_is_valid
+            ),
+            mock.patch("django.forms.forms.BaseForm.full_clean", mocked_full_clean),
+        ):
             self.assertTrue(formset.is_valid())
         self.assertEqual(is_valid_counter.call_count, 1)
         self.assertEqual(full_clean_counter.call_count, 4)
diff --git a/tests/gis_tests/gdal_tests/test_raster.py b/tests/gis_tests/gdal_tests/test_raster.py
index 67108cbb32..a5f1edef0b 100644
--- a/tests/gis_tests/gdal_tests/test_raster.py
+++ b/tests/gis_tests/gdal_tests/test_raster.py
@@ -102,8 +102,9 @@ class GDALRasterTests(SimpleTestCase):
         ]
         msg = "Geotransform must consist of 6 numeric values."
         for geotransform in error_geotransforms:
-            with self.subTest(i=geotransform), self.assertRaisesMessage(
-                ValueError, msg
+            with (
+                self.subTest(i=geotransform),
+                self.assertRaisesMessage(ValueError, msg),
             ):
                 rsmem.geotransform = geotransform

diff --git a/tests/gis_tests/geogapp/tests.py b/tests/gis_tests/geogapp/tests.py
index 8565608993..cb783b9465 100644
--- a/tests/gis_tests/geogapp/tests.py
+++ b/tests/gis_tests/geogapp/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for geography support in PostGIS
 """
+
 import os

 from django.contrib.gis.db import models
diff --git a/tests/gis_tests/test_data.py b/tests/gis_tests/test_data.py
index 0a94907320..8dd6042175 100644
--- a/tests/gis_tests/test_data.py
+++ b/tests/gis_tests/test_data.py
@@ -2,6 +2,7 @@
 This module has the mock object definitions used to hold reference geometry
 for the GEOS and GDAL tests.
 """
+
 import json
 import os

diff --git a/tests/handlers/tests.py b/tests/handlers/tests.py
index ab3837d25e..85f873f3da 100644
--- a/tests/handlers/tests.py
+++ b/tests/handlers/tests.py
@@ -244,8 +244,9 @@ class HandlerRequestTests(SimpleTestCase):
             ("/no_response_cbv/", "handlers.views.NoResponse.__call__"),
         )
         for url, view in tests:
-            with self.subTest(url=url), self.assertRaisesMessage(
-                ValueError, msg % view
+            with (
+                self.subTest(url=url),
+                self.assertRaisesMessage(ValueError, msg % view),
             ):
                 self.client.get(url)

diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py
index 0a41ea5ec6..5f3f195c78 100644
--- a/tests/httpwrappers/tests.py
+++ b/tests/httpwrappers/tests.py
@@ -352,9 +352,9 @@ class HttpResponseTests(SimpleTestCase):
         h.headers["Content-Disposition"] = 'attachment; filename="%s"' % f
         # This one is triggering https://bugs.python.org/issue20747, that is Python
         # will itself insert a newline in the header
-        h.headers[
-            "Content-Disposition"
-        ] = 'attachment; filename="EdelRot_Blu\u0308te (3)-0.JPG"'
+        h.headers["Content-Disposition"] = (
+            'attachment; filename="EdelRot_Blu\u0308te (3)-0.JPG"'
+        )

     def test_newlines_in_headers(self):
         # Bug #10188: Do not allow newlines in headers (CR or LF)
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 9e2a37b79a..dd13470a6e 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -2027,15 +2027,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'missing_field'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_table_check_constraints
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'missing_field'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_table_check_constraints
+                else []
+            ),
         )

     @skipUnlessDBFeature("supports_table_check_constraints")
@@ -2381,15 +2383,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'missing_field'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'missing_field'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )

     def test_unique_constraint_condition_pointing_to_joined_fields(self):
@@ -2409,15 +2413,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the joined field 'parent__age__lt'.",
-                    obj=Model,
-                    id="models.E041",
-                )
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the joined field 'parent__age__lt'.",
+                        obj=Model,
+                        id="models.E041",
+                    )
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )

     def test_unique_constraint_pointing_to_reverse_o2o(self):
@@ -2436,15 +2442,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'model'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'model'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )

     def test_deferrable_unique_constraint(self):
diff --git a/tests/m2m_and_m2o/models.py b/tests/m2m_and_m2o/models.py
index 6a5b0b29c9..4cbd1eb4e8 100644
--- a/tests/m2m_and_m2o/models.py
+++ b/tests/m2m_and_m2o/models.py
@@ -3,6 +3,7 @@ Many-to-many and many-to-one relationships to the same table

 Make sure to set ``related_name`` if you use relationships to the same table.
 """
+
 from django.db import models


diff --git a/tests/m2m_intermediary/models.py b/tests/m2m_intermediary/models.py
index 1333d14b41..f82498651f 100644
--- a/tests/m2m_intermediary/models.py
+++ b/tests/m2m_intermediary/models.py
@@ -9,6 +9,7 @@ each ``Article``-``Reporter`` combination (a ``Writer``) has a ``position``
 field, which specifies the ``Reporter``'s position for the given article
 (e.g. "Staff writer").
 """
+
 from django.db import models


diff --git a/tests/mail/tests.py b/tests/mail/tests.py
index 54a136c1a9..447f9da0d9 100644
--- a/tests/mail/tests.py
+++ b/tests/mail/tests.py
@@ -1393,8 +1393,9 @@ class BaseEmailBackendTests(HeadersCheckMixin):
         ):
             msg = "The %s setting must be a list of 2-tuples." % setting
             for value in tests:
-                with self.subTest(setting=setting, value=value), self.settings(
-                    **{setting: value}
+                with (
+                    self.subTest(setting=setting, value=value),
+                    self.settings(**{setting: value}),
                 ):
                     with self.assertRaisesMessage(ValueError, msg):
                         mail_func("subject", "content")
diff --git a/tests/many_to_many/models.py b/tests/many_to_many/models.py
index 541928e94d..42fc426990 100644
--- a/tests/many_to_many/models.py
+++ b/tests/many_to_many/models.py
@@ -6,6 +6,7 @@ To define a many-to-many relationship, use ``ManyToManyField()``.
 In this example, an ``Article`` can be published in multiple ``Publication``
 objects, and a ``Publication`` has multiple ``Article`` objects.
 """
+
 from django.db import models


diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py
index cca7e79817..56e660592a 100644
--- a/tests/many_to_one/models.py
+++ b/tests/many_to_one/models.py
@@ -3,6 +3,7 @@ Many-to-one relationships

 To define a many-to-one relationship, use ``ForeignKey()``.
 """
+
 from django.db import models


diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py
index dd220b8f4c..339b9181c3 100644
--- a/tests/middleware/test_security.py
+++ b/tests/middleware/test_security.py
@@ -248,8 +248,9 @@ class SecurityMiddlewareTest(SimpleTestCase):
             (("strict-origin", "origin"), "strict-origin,origin"),
         )
         for value, expected in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_REFERRER_POLICY=value
+            with (
+                self.subTest(value=value),
+                override_settings(SECURE_REFERRER_POLICY=value),
             ):
                 self.assertEqual(
                     self.process_response().headers["Referrer-Policy"],
@@ -287,8 +288,11 @@ class SecurityMiddlewareTest(SimpleTestCase):
         """
         tests = ["same-origin", "same-origin-allow-popups", "unsafe-none"]
         for value in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+            with (
+                self.subTest(value=value),
+                override_settings(
+                    SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+                ),
             ):
                 self.assertEqual(
                     self.process_response().headers["Cross-Origin-Opener-Policy"],
diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py
index 2153a0bb5a..4771bbe49a 100644
--- a/tests/middleware/tests.py
+++ b/tests/middleware/tests.py
@@ -851,9 +851,9 @@ class GZipMiddlewareTest(SimpleTestCase):
     def setUp(self):
         self.req = self.request_factory.get("/")
         self.req.META["HTTP_ACCEPT_ENCODING"] = "gzip, deflate"
-        self.req.META[
-            "HTTP_USER_AGENT"
-        ] = "Mozilla/5.0 (Windows NT 5.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
+        self.req.META["HTTP_USER_AGENT"] = (
+            "Mozilla/5.0 (Windows NT 5.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
+        )
         self.resp = HttpResponse()
         self.resp.status_code = 200
         self.resp.content = self.compressible_string
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 387cef924a..dd7da15491 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -3087,9 +3087,11 @@ class OptimizeMigrationTests(MigrationTestBase):
             with open(initial_migration_file) as fp:
                 content = fp.read()
                 self.assertIn(
-                    '("bool", models.BooleanField'
-                    if HAS_BLACK
-                    else "('bool', models.BooleanField",
+                    (
+                        '("bool", models.BooleanField'
+                        if HAS_BLACK
+                        else "('bool', models.BooleanField"
+                    ),
                     content,
                 )
         self.assertEqual(
@@ -3116,9 +3118,11 @@ class OptimizeMigrationTests(MigrationTestBase):
             with open(initial_migration_file) as fp:
                 content = fp.read()
                 self.assertIn(
-                    '("bool", models.BooleanField'
-                    if HAS_BLACK
-                    else "('bool', models.BooleanField",
+                    (
+                        '("bool", models.BooleanField'
+                        if HAS_BLACK
+                        else "('bool', models.BooleanField"
+                    ),
                     content,
                 )
         self.assertEqual(out.getvalue(), "")
diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py
index 6232b44b98..571cb3e1a2 100644
--- a/tests/migrations/test_executor.py
+++ b/tests/migrations/test_executor.py
@@ -405,9 +405,9 @@ class ExecutorTests(MigrationTestBase):
             migrations_apps = executor.loader.project_state(
                 ("migrations", "0001_initial"),
             ).apps
-            global_apps.get_app_config("migrations").models[
-                "author"
-            ] = migrations_apps.get_model("migrations", "author")
+            global_apps.get_app_config("migrations").models["author"] = (
+                migrations_apps.get_model("migrations", "author")
+            )
             try:
                 migration = executor.loader.get_migration("auth", "0001_initial")
                 self.assertIs(executor.detect_soft_applied(None, migration)[0], True)
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index e377e4ca64..4a23b626f0 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -3509,15 +3509,17 @@ class OperationTests(OperationTestBase):
         operation.state_forwards(app_label, new_state)
         # Rename index.
         expected_queries = 1 if connection.features.can_rename_index else 2
-        with connection.schema_editor() as editor, self.assertNumQueries(
-            expected_queries
+        with (
+            connection.schema_editor() as editor,
+            self.assertNumQueries(expected_queries),
         ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameNotExists(table_name, "pony_pink_idx")
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
         # Reversal.
-        with connection.schema_editor() as editor, self.assertNumQueries(
-            expected_queries
+        with (
+            connection.schema_editor() as editor,
+            self.assertNumQueries(expected_queries),
         ):
             operation.database_backwards(app_label, editor, new_state, project_state)
         self.assertIndexNameExists(table_name, "pony_pink_idx")
@@ -4283,9 +4285,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 1)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         Pony.objects.create(pink=1, weight=4.0)
         if connection.features.supports_deferrable_unique_constraints:
@@ -4344,9 +4347,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 0)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         # Constraint doesn't work.
         Pony.objects.create(pink=1, weight=4.0)
@@ -4407,9 +4411,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 1)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         Pony.objects.create(pink=1, weight=4.0)
         if connection.features.supports_covering_indexes:
@@ -4455,9 +4460,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 0)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         # Constraint doesn't work.
         Pony.objects.create(pink=1, weight=4.0)
diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py
index 47aae186e0..ffb9f28cfa 100644
--- a/tests/model_inheritance/models.py
+++ b/tests/model_inheritance/models.py
@@ -11,6 +11,7 @@ Model inheritance exists in two varieties:

 Both styles are demonstrated here.
 """
+
 from django.db import models

 #
diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py
index 5bf1ef5db5..6b005fcef0 100644
--- a/tests/model_inheritance/tests.py
+++ b/tests/model_inheritance/tests.py
@@ -216,9 +216,11 @@ class ModelInheritanceTests(TestCase):
             GrandChild().save()

         for i, test in enumerate([a, b]):
-            with self.subTest(i=i), self.assertNumQueries(4), CaptureQueriesContext(
-                connection
-            ) as queries:
+            with (
+                self.subTest(i=i),
+                self.assertNumQueries(4),
+                CaptureQueriesContext(connection) as queries,
+            ):
                 test()
                 for query in queries:
                     sql = query["sql"]
diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py
index 1a9f953d6f..ba31048ac2 100644
--- a/tests/model_inheritance_regress/tests.py
+++ b/tests/model_inheritance_regress/tests.py
@@ -1,6 +1,7 @@
 """
 Regression tests for Model inheritance behavior.
 """
+
 import datetime
 from operator import attrgetter
 from unittest import expectedFailure
diff --git a/tests/null_fk_ordering/models.py b/tests/null_fk_ordering/models.py
index adfdbf3bea..d7b6ad8238 100644
--- a/tests/null_fk_ordering/models.py
+++ b/tests/null_fk_ordering/models.py
@@ -5,6 +5,7 @@ Regression tests for proper working of ForeignKey(null=True). Tests these bugs:
 unexpected results

 """
+
 from django.db import models


diff --git a/tests/one_to_one/models.py b/tests/one_to_one/models.py
index ca459e9edf..20b2eeec7d 100644
--- a/tests/one_to_one/models.py
+++ b/tests/one_to_one/models.py
@@ -5,6 +5,7 @@ To define a one-to-one relationship, use ``OneToOneField()``.

 In this example, a ``Place`` optionally can be a ``Restaurant``.
 """
+
 from django.db import models


diff --git a/tests/order_with_respect_to/base_tests.py b/tests/order_with_respect_to/base_tests.py
index ea548ca076..5170c6d957 100644
--- a/tests/order_with_respect_to/base_tests.py
+++ b/tests/order_with_respect_to/base_tests.py
@@ -2,6 +2,7 @@
 The tests are shared with contenttypes_tests and so shouldn't import or
 reference any models directly. Subclasses should inherit django.test.TestCase.
 """
+
 from operator import attrgetter


@@ -117,8 +118,11 @@ class BaseOrderWithRespectToTests:
                 return "other"

         with self.settings(DATABASE_ROUTERS=[WriteToOtherRouter()]):
-            with self.assertNumQueries(0, using="default"), self.assertNumQueries(
-                1,
-                using="other",
+            with (
+                self.assertNumQueries(0, using="default"),
+                self.assertNumQueries(
+                    1,
+                    using="other",
+                ),
             ):
                 self.q1.set_answer_order([3, 1, 2, 4])
diff --git a/tests/postgres_tests/fields.py b/tests/postgres_tests/fields.py
index 1565b5ed43..7c93d2039e 100644
--- a/tests/postgres_tests/fields.py
+++ b/tests/postgres_tests/fields.py
@@ -2,6 +2,7 @@
 Indirection layer for PostgreSQL-specific fields, so the tests don't fail when
 run with a backend other than PostgreSQL.
 """
+
 import enum

 from django.db import models
diff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py
index bf47833743..e5a8e9dbe9 100644
--- a/tests/postgres_tests/test_constraints.py
+++ b/tests/postgres_tests/test_constraints.py
@@ -300,8 +300,9 @@ class ExclusionConstraintTests(PostgreSQLTestCase):
     def test_empty_expressions(self):
         msg = "At least one expression is required to define an exclusion constraint."
         for empty_expressions in (None, []):
-            with self.subTest(empty_expressions), self.assertRaisesMessage(
-                ValueError, msg
+            with (
+                self.subTest(empty_expressions),
+                self.assertRaisesMessage(ValueError, msg),
             ):
                 ExclusionConstraint(
                     index_type="GIST",
diff --git a/tests/postgres_tests/test_search.py b/tests/postgres_tests/test_search.py
index 6f6318899c..472dca6c7b 100644
--- a/tests/postgres_tests/test_search.py
+++ b/tests/postgres_tests/test_search.py
@@ -5,6 +5,7 @@ These tests use dialogue from the 1975 film Monty Python and the Holy Grail.
 All text copyright Python (Monty) Pictures. Thanks to sacred-texts.com for the
 transcript.
 """
+
 from django.db.models import F, Value

 from . import PostgreSQLSimpleTestCase, PostgreSQLTestCase
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index c8b9a9538b..533bebfee2 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -1592,8 +1592,9 @@ class MultiDbTests(TestCase):
         )

         # Explicit using on a different db.
-        with self.assertNumQueries(1, using="default"), self.assertNumQueries(
-            1, using="other"
+        with (
+            self.assertNumQueries(1, using="default"),
+            self.assertNumQueries(1, using="other"),
         ):
             prefetch = Prefetch(
                 "first_time_authors", queryset=Author.objects.using("default")
diff --git a/tests/proxy_models/models.py b/tests/proxy_models/models.py
index 604136b5ac..c0277e093f 100644
--- a/tests/proxy_models/models.py
+++ b/tests/proxy_models/models.py
@@ -4,6 +4,7 @@ they will take data directly from the table of their base class table rather
 than using a new table of their own. This allows them to act as simple proxies,
 providing a modified interface to the data from the base class.
 """
+
 from django.db import models

 # A couple of managers for testing managing overriding in proxy model cases.
diff --git a/tests/queries/models.py b/tests/queries/models.py
index 23c41e3374..9f4cf040b6 100644
--- a/tests/queries/models.py
+++ b/tests/queries/models.py
@@ -1,6 +1,7 @@
 """
 Various complex queries that have been problematic in the past.
 """
+
 import datetime

 from django.db import models
diff --git a/tests/requests_tests/test_accept_header.py b/tests/requests_tests/test_accept_header.py
index c6eed0e479..5afb9e9993 100644
--- a/tests/requests_tests/test_accept_header.py
+++ b/tests/requests_tests/test_accept_header.py
@@ -68,9 +68,9 @@ class AcceptHeaderTests(TestCase):

     def test_accept_headers(self):
         request = HttpRequest()
-        request.META[
-            "HTTP_ACCEPT"
-        ] = "text/html, application/xhtml+xml,application/xml ;q=0.9,*/*;q=0.8"
+        request.META["HTTP_ACCEPT"] = (
+            "text/html, application/xhtml+xml,application/xml ;q=0.9,*/*;q=0.8"
+        )
         self.assertEqual(
             [str(accepted_type) for accepted_type in request.accepted_types],
             [
@@ -94,9 +94,9 @@ class AcceptHeaderTests(TestCase):

     def test_request_accepts_some(self):
         request = HttpRequest()
-        request.META[
-            "HTTP_ACCEPT"
-        ] = "text/html,application/xhtml+xml,application/xml;q=0.9"
+        request.META["HTTP_ACCEPT"] = (
+            "text/html,application/xhtml+xml,application/xml;q=0.9"
+        )
         self.assertIs(request.accepts("text/html"), True)
         self.assertIs(request.accepts("application/xhtml+xml"), True)
         self.assertIs(request.accepts("application/xml"), True)
diff --git a/tests/save_delete_hooks/models.py b/tests/save_delete_hooks/models.py
index e7c598aeae..8b9826eb14 100644
--- a/tests/save_delete_hooks/models.py
+++ b/tests/save_delete_hooks/models.py
@@ -4,6 +4,7 @@ Adding hooks before/after saving and deleting
 To execute arbitrary code around ``save()`` and ``delete()``, just subclass
 the methods.
 """
+
 from django.db import models


diff --git a/tests/schema/fields.py b/tests/schema/fields.py
index 998cb28b8c..24a26b2c2c 100644
--- a/tests/schema/fields.py
+++ b/tests/schema/fields.py
@@ -41,9 +41,11 @@ class CustomManyToManyField(RelatedField):
             related_name=related_name,
             related_query_name=related_query_name,
             limit_choices_to=limit_choices_to,
-            symmetrical=symmetrical
-            if symmetrical is not None
-            else (to == RECURSIVE_RELATIONSHIP_CONSTANT),
+            symmetrical=(
+                symmetrical
+                if symmetrical is not None
+                else (to == RECURSIVE_RELATIONSHIP_CONSTANT)
+            ),
             through=through,
             through_fields=through_fields,
             db_constraint=db_constraint,
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index 688a9f1fcf..d6b70886e5 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -632,9 +632,10 @@ class SchemaTests(TransactionTestCase):
         # Add the new field
         new_field = IntegerField(null=True)
         new_field.set_attributes_from_name("age")
-        with CaptureQueriesContext(
-            connection
-        ) as ctx, connection.schema_editor() as editor:
+        with (
+            CaptureQueriesContext(connection) as ctx,
+            connection.schema_editor() as editor,
+        ):
             editor.add_field(Author, new_field)
         drop_default_sql = editor.sql_alter_column_no_default % {
             "column": editor.quote_name(new_field.name),
@@ -2310,9 +2311,10 @@ class SchemaTests(TransactionTestCase):
         with self.assertRaises(DatabaseError):
             self.column_classes(new_field.remote_field.through)
         # Add the field
-        with CaptureQueriesContext(
-            connection
-        ) as ctx, connection.schema_editor() as editor:
+        with (
+            CaptureQueriesContext(connection) as ctx,
+            connection.schema_editor() as editor,
+        ):
             editor.add_field(LocalAuthorWithM2M, new_field)
         # Table is not rebuilt.
         self.assertEqual(
@@ -2790,9 +2792,11 @@ class SchemaTests(TransactionTestCase):
         )
         # Redundant foreign key index is not added.
         self.assertEqual(
-            len(old_constraints) - 1
-            if connection.features.supports_partial_indexes
-            else len(old_constraints),
+            (
+                len(old_constraints) - 1
+                if connection.features.supports_partial_indexes
+                else len(old_constraints)
+            ),
             len(new_constraints),
         )

diff --git a/tests/serializers/models/base.py b/tests/serializers/models/base.py
index e9f548ad3c..72a7eba35b 100644
--- a/tests/serializers/models/base.py
+++ b/tests/serializers/models/base.py
@@ -4,6 +4,7 @@ Serialization
 ``django.core.serializers`` provides interfaces to converting Django
 ``QuerySet`` objects to and from "flat" data (i.e. strings).
 """
+
 from decimal import Decimal

 from django.db import models
diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py
index 3d863a3fb2..a0e8751461 100644
--- a/tests/serializers/models/data.py
+++ b/tests/serializers/models/data.py
@@ -4,6 +4,7 @@ The following classes are for testing basic data marshalling, including
 NULL values, where allowed.
 The basic idea is to have a model for each Django data type.
 """
+
 import uuid

 from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
diff --git a/tests/serializers/models/natural.py b/tests/serializers/models/natural.py
index 1e439b34eb..cfc57b1127 100644
--- a/tests/serializers/models/natural.py
+++ b/tests/serializers/models/natural.py
@@ -1,4 +1,5 @@
 """Models for test_natural.py"""
+
 import uuid

 from django.db import models
diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py
index e1cb776d83..6361dc0c05 100644
--- a/tests/serializers/test_data.py
+++ b/tests/serializers/test_data.py
@@ -6,6 +6,7 @@ test case that is capable of testing the capabilities of
 the serializers. This includes all valid data values, plus
 forward, backwards and self references.
 """
+
 import datetime
 import decimal
 import uuid
diff --git a/tests/servers/tests.py b/tests/servers/tests.py
index 4dece98ce9..0a6b5508ff 100644
--- a/tests/servers/tests.py
+++ b/tests/servers/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for django.core.servers.
 """
+
 import errno
 import os
 import socket
diff --git a/tests/sessions_tests/models.py b/tests/sessions_tests/models.py
index 6eda26f22a..93f80b347d 100644
--- a/tests/sessions_tests/models.py
+++ b/tests/sessions_tests/models.py
@@ -3,6 +3,7 @@ This custom Session model adds an extra column to store an account ID. In
 real-world applications, it gives you the option of querying the database for
 all active sessions for a particular account.
 """
+
 from django.contrib.sessions.backends.db import SessionStore as DBStore
 from django.contrib.sessions.base_session import AbstractBaseSession
 from django.db import models
diff --git a/tests/signals/models.py b/tests/signals/models.py
index b758244749..5fb9f9f772 100644
--- a/tests/signals/models.py
+++ b/tests/signals/models.py
@@ -1,6 +1,7 @@
 """
 Testing signals before/after saving and deleting.
 """
+
 from django.db import models


diff --git a/tests/template_tests/test_parser.py b/tests/template_tests/test_parser.py
index e40a5611e2..eb3bb49113 100644
--- a/tests/template_tests/test_parser.py
+++ b/tests/template_tests/test_parser.py
@@ -2,6 +2,7 @@
 Testing some internals of the template processing.
 These are *not* examples to be copied in user code.
 """
+
 from django.template import Library, TemplateSyntaxError
 from django.template.base import (
     FilterExpression,
diff --git a/tests/test_client/tests.py b/tests/test_client/tests.py
index a5e980f3d0..5a7946b73c 100644
--- a/tests/test_client/tests.py
+++ b/tests/test_client/tests.py
@@ -19,6 +19,7 @@ testing against the contexts and templates produced by a view,
 rather than the HTML rendered to the end-user.

 """
+
 import copy
 import itertools
 import tempfile
diff --git a/tests/test_client_regress/tests.py b/tests/test_client_regress/tests.py
index 726d1dcf8f..bd5239ce24 100644
--- a/tests/test_client_regress/tests.py
+++ b/tests/test_client_regress/tests.py
@@ -1,6 +1,7 @@
 """
 Regression tests for the Test Client, especially the customized assertions.
 """
+
 import itertools
 import os

diff --git a/tests/test_runner/test_discover_runner.py b/tests/test_runner/test_discover_runner.py
index bca9037492..7a7cdfa04c 100644
--- a/tests/test_runner/test_discover_runner.py
+++ b/tests/test_runner/test_discover_runner.py
@@ -657,9 +657,10 @@ class DiscoverRunnerTests(SimpleTestCase):
     @mock.patch("faulthandler.enable")
     def test_faulthandler_enabled_fileno(self, mocked_enable):
         # sys.stderr that is not an actual file.
-        with mock.patch(
-            "faulthandler.is_enabled", return_value=False
-        ), captured_stderr():
+        with (
+            mock.patch("faulthandler.is_enabled", return_value=False),
+            captured_stderr(),
+        ):
             DiscoverRunner(enable_faulthandler=True)
             mocked_enable.assert_called()

diff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py
index 28145be3db..9cdfd42aaa 100644
--- a/tests/test_runner/tests.py
+++ b/tests/test_runner/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for django test runner
 """
+
 import collections.abc
 import multiprocessing
 import os
@@ -961,17 +962,21 @@ class RunTestsExceptionHandlingTests(unittest.TestCase):
         """
         Teardown functions are run when run_checks() raises SystemCheckError.
         """
-        with mock.patch(
-            "django.test.runner.DiscoverRunner.setup_test_environment"
-        ), mock.patch("django.test.runner.DiscoverRunner.setup_databases"), mock.patch(
-            "django.test.runner.DiscoverRunner.build_suite"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.run_checks", side_effect=SystemCheckError
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_databases"
-        ) as teardown_databases, mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_test_environment"
-        ) as teardown_test_environment:
+        with (
+            mock.patch("django.test.runner.DiscoverRunner.setup_test_environment"),
+            mock.patch("django.test.runner.DiscoverRunner.setup_databases"),
+            mock.patch("django.test.runner.DiscoverRunner.build_suite"),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.run_checks",
+                side_effect=SystemCheckError,
+            ),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_databases"
+            ) as teardown_databases,
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_test_environment"
+            ) as teardown_test_environment,
+        ):
             runner = DiscoverRunner(verbosity=0, interactive=False)
             with self.assertRaises(SystemCheckError):
                 runner.run_tests(
@@ -985,18 +990,22 @@ class RunTestsExceptionHandlingTests(unittest.TestCase):
         SystemCheckError is surfaced when run_checks() raises SystemCheckError
         and teardown databases() raises ValueError.
         """
-        with mock.patch(
-            "django.test.runner.DiscoverRunner.setup_test_environment"
-        ), mock.patch("django.test.runner.DiscoverRunner.setup_databases"), mock.patch(
-            "django.test.runner.DiscoverRunner.build_suite"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.run_checks", side_effect=SystemCheckError
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_databases",
-            side_effect=ValueError,
-        ) as teardown_databases, mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_test_environment"
-        ) as teardown_test_environment:
+        with (
+            mock.patch("django.test.runner.DiscoverRunner.setup_test_environment"),
+            mock.patch("django.test.runner.DiscoverRunner.setup_databases"),
+            mock.patch("django.test.runner.DiscoverRunner.build_suite"),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.run_checks",
+                side_effect=SystemCheckError,
+            ),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_databases",
+                side_effect=ValueError,
+            ) as teardown_databases,
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_test_environment"
+            ) as teardown_test_environment,
+        ):
             runner = DiscoverRunner(verbosity=0, interactive=False)
             with self.assertRaises(SystemCheckError):
                 runner.run_tests(
@@ -1010,18 +1019,19 @@ class RunTestsExceptionHandlingTests(unittest.TestCase):
         Exceptions on teardown are surfaced if no exceptions happen during
         run_checks().
         """
-        with mock.patch(
-            "django.test.runner.DiscoverRunner.setup_test_environment"
-        ), mock.patch("django.test.runner.DiscoverRunner.setup_databases"), mock.patch(
-            "django.test.runner.DiscoverRunner.build_suite"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.run_checks"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_databases",
-            side_effect=ValueError,
-        ) as teardown_databases, mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_test_environment"
-        ) as teardown_test_environment:
+        with (
+            mock.patch("django.test.runner.DiscoverRunner.setup_test_environment"),
+            mock.patch("django.test.runner.DiscoverRunner.setup_databases"),
+            mock.patch("django.test.runner.DiscoverRunner.build_suite"),
+            mock.patch("django.test.runner.DiscoverRunner.run_checks"),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_databases",
+                side_effect=ValueError,
+            ) as teardown_databases,
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_test_environment"
+            ) as teardown_test_environment,
+        ):
             runner = DiscoverRunner(verbosity=0, interactive=False)
             with self.assertRaises(ValueError):
                 # Suppress the output when running TestDjangoTestCase.
diff --git a/tests/transactions/models.py b/tests/transactions/models.py
index 9506bace35..3d4c7d7e44 100644
--- a/tests/transactions/models.py
+++ b/tests/transactions/models.py
@@ -6,6 +6,7 @@ each transaction upon a write, but you can decorate a function to get
 commit-on-success behavior. Alternatively, you can manage the transaction
 manually.
 """
+
 from django.db import models


diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index 89dfd0deba..8384f55b3c 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -1,6 +1,7 @@
 """
 Unit tests for reverse URL lookups.
 """
+
 import pickle
 import sys
 import threading
diff --git a/tests/urls.py b/tests/urls.py
index 7d3a3a790a..67c4d4091b 100644
--- a/tests/urls.py
+++ b/tests/urls.py
@@ -3,5 +3,4 @@ should be added within the test folders, and use TestCase.urls to set them.
 This helps the tests remain isolated.
 """

-
 urlpatterns = []
diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py
index 07229f25ed..d5d90b68fc 100644
--- a/tests/utils_tests/test_datastructures.py
+++ b/tests/utils_tests/test_datastructures.py
@@ -1,6 +1,7 @@
 """
 Tests for stuff in django.utils.datastructures.
 """
+
 import collections.abc
 import copy
 import pickle
diff --git a/tests/utils_tests/test_jslex.py b/tests/utils_tests/test_jslex.py
index ee13eb4d64..59551930c6 100644
--- a/tests/utils_tests/test_jslex.py
+++ b/tests/utils_tests/test_jslex.py
@@ -1,4 +1,5 @@
 """Tests for jslex."""
+
 # originally from https://bitbucket.org/ned/jslex

 from django.test import SimpleTestCase
diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py
index 65f9db89bf..d9e101703c 100644
--- a/tests/view_tests/tests/test_debug.py
+++ b/tests/view_tests/tests/test_debug.py
@@ -332,14 +332,17 @@ class DebugViewTests(SimpleTestCase):
         with tempfile.NamedTemporaryFile(prefix=template_name) as tmpfile:
             tempdir = os.path.dirname(tmpfile.name)
             template_path = os.path.join(tempdir, template_name)
-            with override_settings(
-                TEMPLATES=[
-                    {
-                        "BACKEND": "django.template.backends.django.DjangoTemplates",
-                        "DIRS": [tempdir],
-                    }
-                ]
-            ), self.assertLogs("django.request", "ERROR"):
+            with (
+                override_settings(
+                    TEMPLATES=[
+                        {
+                            "BACKEND": "django.template.backends.django.DjangoTemplates",
+                            "DIRS": [tempdir],
+                        }
+                    ]
+                ),
+                self.assertLogs("django.request", "ERROR"),
+            ):
                 response = self.client.get(
                     reverse(
                         "raises_template_does_not_exist", kwargs={"path": template_name}
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:39:23,405 - INFO - ------------------------------
2025-01-25 11:39:23,405 - INFO - END Runtime Completion Fn
2025-01-25 11:39:23,405 - INFO - ------------------------------
2025-01-25 11:39:23,405 - INFO - Got git diff for instance django__django-16950:
--------
diff --git a/bugapp/__init__.py b/bugapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bugapp/admin.py b/bugapp/admin.py
new file mode 100644
index 0000000000..49c0432d57
--- /dev/null
+++ b/bugapp/admin.py
@@ -0,0 +1,13 @@
+from django.contrib import admin
+from .models import Thing, SubThing
+
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ('name',)
+    ordering = ('pkid',)
+    inlines = (SubThingInline,)
+
+# Register your models here.
diff --git a/bugapp/apps.py b/bugapp/apps.py
new file mode 100644
index 0000000000..ca5dce0f70
--- /dev/null
+++ b/bugapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class BugappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "bugapp"
diff --git a/bugapp/migrations/0001_initial.py b/bugapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..9e650354b3
--- /dev/null
+++ b/bugapp/migrations/0001_initial.py
@@ -0,0 +1,55 @@
+# Generated by Django 5.0.dev20230707060601 on 2025-01-25 11:38
+
+import django.db.models.deletion
+import uuid
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Thing",
+            fields=[
+                (
+                    "pkid",
+                    models.BigAutoField(
+                        editable=False, primary_key=True, serialize=False
+                    ),
+                ),
+                (
+                    "id",
+                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
+                ),
+                ("name", models.CharField(max_length=191)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="SubThing",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=191)),
+                (
+                    "thing",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="subthings",
+                        to="bugapp.thing",
+                        to_field="id",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/bugapp/migrations/__init__.py b/bugapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/bugapp/models.py b/bugapp/models.py
new file mode 100644
index 0000000000..685c1371e4
--- /dev/null
+++ b/bugapp/models.py
@@ -0,0 +1,24 @@
+from django.db import models
+import uuid
+
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+    class Meta:
+        abstract = True
+
+class Thing(UUIDModel):
+    class Meta:
+        app_label = 'bugapp'
+    name = models.CharField(max_length=191)
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        'bugapp.Thing',
+        to_field='id',
+        on_delete=models.CASCADE,
+        related_name='subthings',
+    )
+
+# Create your models here.
diff --git a/bugapp/tests.py b/bugapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/bugapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/bugapp/views.py b/bugapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/bugapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..15a11b8b21
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/__main__.py b/django/__main__.py
index 8b96e91ea8..7415143848 100644
--- a/django/__main__.py
+++ b/django/__main__.py
@@ -3,6 +3,7 @@ Invokes django-admin when the django module is run as a script.

 Example: python -m django check
 """
+
 from django.core import management

 if __name__ == "__main__":
diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index 197d39bf21..fd6306a488 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -5,6 +5,7 @@ Filters are specified in models with the "list_filter" option.
 Each filter subclass knows how to display a filter for a field that passes a
 certain test -- e.g. being a DateField or ForeignKey.
 """
+
 import datetime

 from django.contrib.admin.options import IncorrectLookupParameters
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index f9760664dd..1cc2572d08 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1724,9 +1724,9 @@ class ModelAdmin(BaseModelAdmin):
                 has_delete_permission = inline.has_delete_permission(request, obj)
             else:
                 # Disable all edit-permissions, and override formset settings.
-                has_add_permission = (
-                    has_change_permission
-                ) = has_delete_permission = False
+                has_add_permission = has_change_permission = has_delete_permission = (
+                    False
+                )
                 formset.extra = formset.max_num = 0
             has_view_permission = inline.has_view_permission(request, obj)
             prepopulated = dict(inline.get_prepopulated_fields(request, obj))
@@ -1861,9 +1861,11 @@ class ModelAdmin(BaseModelAdmin):
             form,
             list(fieldsets),
             # Clear prepopulated fields on a view-only form to avoid a crash.
-            self.get_prepopulated_fields(request, obj)
-            if add or self.has_change_permission(request, obj)
-            else {},
+            (
+                self.get_prepopulated_fields(request, obj)
+                if add or self.has_change_permission(request, obj)
+                else {}
+            ),
             readonly_fields,
             model_admin=self,
         )
diff --git a/django/contrib/admin/templatetags/admin_list.py b/django/contrib/admin/templatetags/admin_list.py
index 9bff84d501..24dbb820ae 100644
--- a/django/contrib/admin/templatetags/admin_list.py
+++ b/django/contrib/admin/templatetags/admin_list.py
@@ -171,9 +171,9 @@ def result_headers(cl):
             "url_primary": cl.get_query_string({ORDER_VAR: ".".join(o_list_primary)}),
             "url_remove": cl.get_query_string({ORDER_VAR: ".".join(o_list_remove)}),
             "url_toggle": cl.get_query_string({ORDER_VAR: ".".join(o_list_toggle)}),
-            "class_attrib": format_html(' class="{}"', " ".join(th_classes))
-            if th_classes
-            else "",
+            "class_attrib": (
+                format_html(' class="{}"', " ".join(th_classes)) if th_classes else ""
+            ),
         }


@@ -267,9 +267,11 @@ def items_for_result(cl, result, form):
                 link_or_text = format_html(
                     '<a href="{}"{}>{}</a>',
                     url,
-                    format_html(' data-popup-opener="{}"', value)
-                    if cl.is_popup
-                    else "",
+                    (
+                        format_html(' data-popup-opener="{}"', value)
+                        if cl.is_popup
+                        else ""
+                    ),
                     result_repr,
                 )

diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index c7a79f520b..83a166e248 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -1,6 +1,7 @@
 """
 Form Widget classes specific to the Django admin site.
 """
+
 import copy
 import json

diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index da0eac731f..386584b273 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseUser even when django.contrib.auth is
 not in INSTALLED_APPS.
 """
+
 import unicodedata
 import warnings

diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py
index ad31a6e68f..b29a980cb2 100644
--- a/django/contrib/auth/management/__init__.py
+++ b/django/contrib/auth/management/__init__.py
@@ -1,6 +1,7 @@
 """
 Creates permissions for all installed apps that need permissions.
 """
+
 import getpass
 import unicodedata

diff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py
index 48994e5371..050c0b334d 100644
--- a/django/contrib/auth/management/commands/createsuperuser.py
+++ b/django/contrib/auth/management/commands/createsuperuser.py
@@ -1,6 +1,7 @@
 """
 Management utility to create superusers.
 """
+
 import getpass
 import os
 import sys
@@ -267,15 +268,19 @@ class Command(BaseCommand):
         return "%s%s%s: " % (
             capfirst(field.verbose_name),
             " (leave blank to use '%s')" % default if default else "",
-            " (%s.%s)"
-            % (
-                field.remote_field.model._meta.object_name,
-                field.m2m_target_field_name()
-                if field.many_to_many
-                else field.remote_field.field_name,
-            )
-            if field.remote_field
-            else "",
+            (
+                " (%s.%s)"
+                % (
+                    field.remote_field.model._meta.object_name,
+                    (
+                        field.m2m_target_field_name()
+                        if field.many_to_many
+                        else field.remote_field.field_name
+                    ),
+                )
+                if field.remote_field
+                else ""
+            ),
         )

     @cached_property
diff --git a/django/contrib/gis/db/backends/oracle/models.py b/django/contrib/gis/db/backends/oracle/models.py
index f06f73148e..af749c3435 100644
--- a/django/contrib/gis/db/backends/oracle/models.py
+++ b/django/contrib/gis/db/backends/oracle/models.py
@@ -7,6 +7,7 @@
  For example, the `USER_SDO_GEOM_METADATA` is used for the GeometryColumns
  model and the `SDO_COORD_REF_SYS` is used for the SpatialRefSys model.
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin

diff --git a/django/contrib/gis/db/backends/oracle/operations.py b/django/contrib/gis/db/backends/oracle/operations.py
index ed86985cf8..eb86dc39de 100644
--- a/django/contrib/gis/db/backends/oracle/operations.py
+++ b/django/contrib/gis/db/backends/oracle/operations.py
@@ -7,6 +7,7 @@
  support for an internal JVM, and Java libraries are required to use
  the WKT constructors.
 """
+
 import re

 from django.contrib.gis.db import models
diff --git a/django/contrib/gis/db/backends/postgis/adapter.py b/django/contrib/gis/db/backends/postgis/adapter.py
index c95f903253..c9715e1756 100644
--- a/django/contrib/gis/db/backends/postgis/adapter.py
+++ b/django/contrib/gis/db/backends/postgis/adapter.py
@@ -1,6 +1,7 @@
 """
  This object provides quoting for GEOS geometries into PostgreSQL/PostGIS.
 """
+
 from django.contrib.gis.db.backends.postgis.pgraster import to_pgraster
 from django.contrib.gis.geos import GEOSGeometry
 from django.db.backends.postgresql.psycopg_any import sql
diff --git a/django/contrib/gis/db/backends/postgis/const.py b/django/contrib/gis/db/backends/postgis/const.py
index 2f4393d25e..8bc16a1abb 100644
--- a/django/contrib/gis/db/backends/postgis/const.py
+++ b/django/contrib/gis/db/backends/postgis/const.py
@@ -1,6 +1,7 @@
 """
 PostGIS to GDAL conversion constant definitions
 """
+
 # Lookup to convert pixel type values from GDAL to PostGIS
 GDAL_TO_POSTGIS = [None, 4, 6, 5, 8, 7, 10, 11, None, None, None, None]

diff --git a/django/contrib/gis/db/backends/postgis/models.py b/django/contrib/gis/db/backends/postgis/models.py
index b7b568274a..e35ef75ce9 100644
--- a/django/contrib/gis/db/backends/postgis/models.py
+++ b/django/contrib/gis/db/backends/postgis/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the PostGIS backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models

diff --git a/django/contrib/gis/db/backends/spatialite/models.py b/django/contrib/gis/db/backends/spatialite/models.py
index 7cc98ae126..0f5f7b55ef 100644
--- a/django/contrib/gis/db/backends/spatialite/models.py
+++ b/django/contrib/gis/db/backends/spatialite/models.py
@@ -1,6 +1,7 @@
 """
  The GeometryColumns and SpatialRefSys models for the SpatiaLite backend.
 """
+
 from django.contrib.gis.db.backends.base.models import SpatialRefSysMixin
 from django.db import models

diff --git a/django/contrib/gis/db/backends/spatialite/operations.py b/django/contrib/gis/db/backends/spatialite/operations.py
index 0b8b26ab6f..d39f7a9e0d 100644
--- a/django/contrib/gis/db/backends/spatialite/operations.py
+++ b/django/contrib/gis/db/backends/spatialite/operations.py
@@ -2,6 +2,7 @@
 SQL functions reference lists:
 https://www.gaia-gis.it/gaia-sins/spatialite-sql-4.3.0.html
 """
+
 from django.contrib.gis.db import models
 from django.contrib.gis.db.backends.base.operations import BaseSpatialOperations
 from django.contrib.gis.db.backends.spatialite.adapter import SpatiaLiteAdapter
diff --git a/django/contrib/gis/db/models/functions.py b/django/contrib/gis/db/models/functions.py
index 19da355d28..3f26f4c6bc 100644
--- a/django/contrib/gis/db/models/functions.py
+++ b/django/contrib/gis/db/models/functions.py
@@ -127,9 +127,11 @@ class SQLiteDecimalToFloatMixin:
         copy = self.copy()
         copy.set_source_expressions(
             [
-                Value(float(expr.value))
-                if hasattr(expr, "value") and isinstance(expr.value, Decimal)
-                else expr
+                (
+                    Value(float(expr.value))
+                    if hasattr(expr, "value") and isinstance(expr.value, Decimal)
+                    else expr
+                )
                 for expr in copy.get_source_expressions()
             ]
         )
@@ -343,9 +345,9 @@ class Distance(DistanceResultMixin, OracleToleranceMixin, GeoFunc):
     def as_sqlite(self, compiler, connection, **extra_context):
         if self.geo_field.geodetic(connection):
             # SpatiaLite returns NULL instead of zero on geodetic coordinates
-            extra_context[
-                "template"
-            ] = "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            extra_context["template"] = (
+                "COALESCE(%(function)s(%(expressions)s, %(spheroid)s), 0)"
+            )
             extra_context["spheroid"] = int(bool(self.spheroid))
         return super().as_sql(compiler, connection, **extra_context)

diff --git a/django/contrib/gis/db/models/proxy.py b/django/contrib/gis/db/models/proxy.py
index 4db365dc16..b415e147fc 100644
--- a/django/contrib/gis/db/models/proxy.py
+++ b/django/contrib/gis/db/models/proxy.py
@@ -5,6 +5,7 @@ objects corresponding to geographic model fields.

 Thanks to Robert Coup for providing this functionality (see #4322).
 """
+
 from django.db.models.query_utils import DeferredAttribute


diff --git a/django/contrib/gis/db/models/sql/conversion.py b/django/contrib/gis/db/models/sql/conversion.py
index be712319fb..7802b2dd1e 100644
--- a/django/contrib/gis/db/models/sql/conversion.py
+++ b/django/contrib/gis/db/models/sql/conversion.py
@@ -2,6 +2,7 @@
 This module holds simple classes to convert geospatial values from the
 database.
 """
+
 from decimal import Decimal

 from django.contrib.gis.measure import Area, Distance
diff --git a/django/contrib/gis/gdal/__init__.py b/django/contrib/gis/gdal/__init__.py
index 9ed6e31156..e63808d39d 100644
--- a/django/contrib/gis/gdal/__init__.py
+++ b/django/contrib/gis/gdal/__init__.py
@@ -25,6 +25,7 @@
  by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C
  library on your system.
 """
+
 from django.contrib.gis.gdal.datasource import DataSource
 from django.contrib.gis.gdal.driver import Driver
 from django.contrib.gis.gdal.envelope import Envelope
diff --git a/django/contrib/gis/gdal/datasource.py b/django/contrib/gis/gdal/datasource.py
index dfd043ab0c..c7ff48b8f1 100644
--- a/django/contrib/gis/gdal/datasource.py
+++ b/django/contrib/gis/gdal/datasource.py
@@ -33,6 +33,7 @@
               #  OFTReal returns floats, all else returns string.
               val = field.value
 """
+
 from ctypes import byref
 from pathlib import Path

diff --git a/django/contrib/gis/gdal/envelope.py b/django/contrib/gis/gdal/envelope.py
index 4c2c1e4a1a..05832bd7cc 100644
--- a/django/contrib/gis/gdal/envelope.py
+++ b/django/contrib/gis/gdal/envelope.py
@@ -10,6 +10,7 @@
                            |          |
  Lower left (min_x, min_y) o----------+
 """
+
 from ctypes import Structure, c_double

 from django.contrib.gis.gdal.error import GDALException
diff --git a/django/contrib/gis/gdal/geometries.py b/django/contrib/gis/gdal/geometries.py
index f74dc688b3..8ea6b5ffc4 100644
--- a/django/contrib/gis/gdal/geometries.py
+++ b/django/contrib/gis/gdal/geometries.py
@@ -38,6 +38,7 @@
   >>> print(gt1 == 3, gt1 == 'Polygon') # Equivalence works w/non-OGRGeomType objects
   True True
 """
+
 import sys
 from binascii import b2a_hex
 from ctypes import byref, c_char_p, c_double, c_ubyte, c_void_p, string_at
diff --git a/django/contrib/gis/gdal/prototypes/ds.py b/django/contrib/gis/gdal/prototypes/ds.py
index bc5250e2db..b6e9d4a0b8 100644
--- a/django/contrib/gis/gdal/prototypes/ds.py
+++ b/django/contrib/gis/gdal/prototypes/ds.py
@@ -3,6 +3,7 @@
  related data structures. OGR_Dr_*, OGR_DS_*, OGR_L_*, OGR_F_*,
  OGR_Fld_* routines are relevant here.
 """
+
 from ctypes import POINTER, c_char_p, c_double, c_int, c_long, c_void_p

 from django.contrib.gis.gdal.envelope import OGREnvelope
diff --git a/django/contrib/gis/gdal/prototypes/errcheck.py b/django/contrib/gis/gdal/prototypes/errcheck.py
index 52bb7cb083..d37e81cdf6 100644
--- a/django/contrib/gis/gdal/prototypes/errcheck.py
+++ b/django/contrib/gis/gdal/prototypes/errcheck.py
@@ -2,6 +2,7 @@
  This module houses the error-checking routines used by the GDAL
  ctypes prototypes.
 """
+
 from ctypes import c_void_p, string_at

 from django.contrib.gis.gdal.error import GDALException, SRSException, check_err
diff --git a/django/contrib/gis/gdal/prototypes/generation.py b/django/contrib/gis/gdal/prototypes/generation.py
index 230e56f665..4d34a96e70 100644
--- a/django/contrib/gis/gdal/prototypes/generation.py
+++ b/django/contrib/gis/gdal/prototypes/generation.py
@@ -2,6 +2,7 @@
  This module contains functions that generate ctypes prototypes for the
  GDAL routines.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_int64, c_void_p
 from functools import partial

diff --git a/django/contrib/gis/gdal/prototypes/raster.py b/django/contrib/gis/gdal/prototypes/raster.py
index 59b930cb02..b7871d1969 100644
--- a/django/contrib/gis/gdal/prototypes/raster.py
+++ b/django/contrib/gis/gdal/prototypes/raster.py
@@ -2,6 +2,7 @@
 This module houses the ctypes function prototypes for GDAL DataSource (raster)
 related data structures.
 """
+
 from ctypes import POINTER, c_bool, c_char_p, c_double, c_int, c_void_p
 from functools import partial

diff --git a/django/contrib/gis/gdal/raster/const.py b/django/contrib/gis/gdal/raster/const.py
index dccc9cfab4..a1ab62f37a 100644
--- a/django/contrib/gis/gdal/raster/const.py
+++ b/django/contrib/gis/gdal/raster/const.py
@@ -1,6 +1,7 @@
 """
 GDAL - Constant definitions
 """
+
 from ctypes import (
     c_double,
     c_float,
diff --git a/django/contrib/gis/gdal/srs.py b/django/contrib/gis/gdal/srs.py
index cd0554eb12..85f9c0a9a4 100644
--- a/django/contrib/gis/gdal/srs.py
+++ b/django/contrib/gis/gdal/srs.py
@@ -26,6 +26,7 @@
   >>> print(srs.name)
   NAD83 / Texas South Central
 """
+
 from ctypes import byref, c_char_p, c_int
 from enum import IntEnum
 from types import NoneType
diff --git a/django/contrib/gis/geoip2/__init__.py b/django/contrib/gis/geoip2/__init__.py
index 71b71f68db..0df5827c25 100644
--- a/django/contrib/gis/geoip2/__init__.py
+++ b/django/contrib/gis/geoip2/__init__.py
@@ -11,6 +11,7 @@ downloaded from MaxMind at https://dev.maxmind.com/geoip/geoip2/geolite2/.
 Grab GeoLite2-Country.mmdb.gz and GeoLite2-City.mmdb.gz, and unzip them in the
 directory corresponding to settings.GEOIP_PATH.
 """
+
 __all__ = ["HAS_GEOIP2"]

 try:
diff --git a/django/contrib/gis/geos/__init__.py b/django/contrib/gis/geos/__init__.py
index 27de1ca8e6..f50cd19856 100644
--- a/django/contrib/gis/geos/__init__.py
+++ b/django/contrib/gis/geos/__init__.py
@@ -2,6 +2,7 @@
 The GeoDjango GEOS module.  Please consult the GeoDjango documentation
 for more details: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geos/
 """
+
 from .collections import (  # NOQA
     GeometryCollection,
     MultiLineString,
diff --git a/django/contrib/gis/geos/collections.py b/django/contrib/gis/geos/collections.py
index abfec8af3d..35262a5622 100644
--- a/django/contrib/gis/geos/collections.py
+++ b/django/contrib/gis/geos/collections.py
@@ -2,6 +2,7 @@
  This module houses the Geometry Collection objects:
  GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon
 """
+
 from django.contrib.gis.geos import prototypes as capi
 from django.contrib.gis.geos.geometry import GEOSGeometry, LinearGeometryMixin
 from django.contrib.gis.geos.libgeos import GEOM_PTR
diff --git a/django/contrib/gis/geos/coordseq.py b/django/contrib/gis/geos/coordseq.py
index 0ff4ecb2e5..15400e08fe 100644
--- a/django/contrib/gis/geos/coordseq.py
+++ b/django/contrib/gis/geos/coordseq.py
@@ -3,6 +3,7 @@
  by GEOSGeometry to house the actual coordinates of the Point,
  LineString, and LinearRing geometries.
 """
+
 from ctypes import byref, c_byte, c_double, c_uint

 from django.contrib.gis.geos import prototypes as capi
diff --git a/django/contrib/gis/geos/geometry.py b/django/contrib/gis/geos/geometry.py
index 38e5fe554c..442ae92422 100644
--- a/django/contrib/gis/geos/geometry.py
+++ b/django/contrib/gis/geos/geometry.py
@@ -2,6 +2,7 @@
  This module contains the 'base' GEOSGeometry object -- all GEOS Geometries
  inherit from this object.
 """
+
 import re
 from ctypes import addressof, byref, c_double

diff --git a/django/contrib/gis/geos/io.py b/django/contrib/gis/geos/io.py
index d7898065f0..8dd3f289e6 100644
--- a/django/contrib/gis/geos/io.py
+++ b/django/contrib/gis/geos/io.py
@@ -3,6 +3,7 @@ Module that holds classes for performing I/O operations on GEOS geometry
 objects.  Specifically, this has Python implementations of WKB/WKT
 reader and writer classes.
 """
+
 from django.contrib.gis.geos.geometry import GEOSGeometry
 from django.contrib.gis.geos.prototypes.io import (
     WKBWriter,
diff --git a/django/contrib/gis/geos/libgeos.py b/django/contrib/gis/geos/libgeos.py
index 1121b4f715..b883c6c090 100644
--- a/django/contrib/gis/geos/libgeos.py
+++ b/django/contrib/gis/geos/libgeos.py
@@ -6,6 +6,7 @@
  This module also houses GEOS Pointer utilities, including
  get_pointer_arr(), and GEOM_PTR.
 """
+
 import logging
 import os
 from ctypes import CDLL, CFUNCTYPE, POINTER, Structure, c_char_p
diff --git a/django/contrib/gis/geos/prototypes/errcheck.py b/django/contrib/gis/geos/prototypes/errcheck.py
index a527f513a7..42b24c2891 100644
--- a/django/contrib/gis/geos/prototypes/errcheck.py
+++ b/django/contrib/gis/geos/prototypes/errcheck.py
@@ -1,6 +1,7 @@
 """
  Error checking functions for GEOS ctypes prototype functions.
 """
+
 from ctypes import c_void_p, string_at

 from django.contrib.gis.geos.error import GEOSException
diff --git a/django/contrib/gis/geos/prototypes/misc.py b/django/contrib/gis/geos/prototypes/misc.py
index fccd0ecc9e..bd5859e79b 100644
--- a/django/contrib/gis/geos/prototypes/misc.py
+++ b/django/contrib/gis/geos/prototypes/misc.py
@@ -2,6 +2,7 @@
  This module is for the miscellaneous GEOS routines, particularly the
  ones that return the area, distance, and length.
 """
+
 from ctypes import POINTER, c_double, c_int

 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/predicates.py b/django/contrib/gis/geos/prototypes/predicates.py
index d2e113a734..a79d4e3187 100644
--- a/django/contrib/gis/geos/prototypes/predicates.py
+++ b/django/contrib/gis/geos/prototypes/predicates.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  unary and binary predicate operations on geometries.
 """
+
 from ctypes import c_byte, c_char_p, c_double

 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/geos/prototypes/topology.py b/django/contrib/gis/geos/prototypes/topology.py
index e61eae964a..9323bb2d16 100644
--- a/django/contrib/gis/geos/prototypes/topology.py
+++ b/django/contrib/gis/geos/prototypes/topology.py
@@ -2,6 +2,7 @@
  This module houses the GEOS ctypes prototype functions for the
  topological operations on geometries.
 """
+
 from ctypes import c_double, c_int

 from django.contrib.gis.geos.libgeos import GEOM_PTR, GEOSFuncFactory
diff --git a/django/contrib/gis/utils/__init__.py b/django/contrib/gis/utils/__init__.py
index 12f032c665..f42fa90226 100644
--- a/django/contrib/gis/utils/__init__.py
+++ b/django/contrib/gis/utils/__init__.py
@@ -1,6 +1,7 @@
 """
  This module contains useful utilities for GeoDjango.
 """
+
 from django.contrib.gis.utils.ogrinfo import ogrinfo
 from django.contrib.gis.utils.ogrinspect import mapping, ogrinspect
 from django.contrib.gis.utils.srs import add_srs_entry
diff --git a/django/contrib/gis/utils/ogrinspect.py b/django/contrib/gis/utils/ogrinspect.py
index 40ca0cb461..76c8bfbcfa 100644
--- a/django/contrib/gis/utils/ogrinspect.py
+++ b/django/contrib/gis/utils/ogrinspect.py
@@ -3,6 +3,7 @@ This module is for inspecting OGR data sources and generating either
 models for GeoDjango and/or mapping dictionaries for use with the
 `LayerMapping` utility.
 """
+
 from django.contrib.gis.gdal import DataSource
 from django.contrib.gis.gdal.field import (
     OFTDate,
diff --git a/django/contrib/postgres/search.py b/django/contrib/postgres/search.py
index 936709c2f8..4d279857c6 100644
--- a/django/contrib/postgres/search.py
+++ b/django/contrib/postgres/search.py
@@ -116,9 +116,11 @@ class SearchVector(SearchVectorCombinable, Func):
         clone.set_source_expressions(
             [
                 Coalesce(
-                    expression
-                    if isinstance(expression.output_field, (CharField, TextField))
-                    else Cast(expression, TextField()),
+                    (
+                        expression
+                        if isinstance(expression.output_field, (CharField, TextField))
+                        else Cast(expression, TextField())
+                    ),
                     Value(""),
                 )
                 for expression in clone.get_source_expressions()
diff --git a/django/contrib/sessions/base_session.py b/django/contrib/sessions/base_session.py
index 603d2fe12c..8809dd36f7 100644
--- a/django/contrib/sessions/base_session.py
+++ b/django/contrib/sessions/base_session.py
@@ -2,6 +2,7 @@
 This module allows importing AbstractBaseSession even
 when django.contrib.sessions is not in INSTALLED_APPS.
 """
+
 from django.db import models
 from django.utils.translation import gettext_lazy as _

diff --git a/django/contrib/staticfiles/views.py b/django/contrib/staticfiles/views.py
index 83d04d4cec..3fb2677322 100644
--- a/django/contrib/staticfiles/views.py
+++ b/django/contrib/staticfiles/views.py
@@ -3,6 +3,7 @@ Views and functions for serving static files. These are only to be used during
 development, and SHOULD NOT be used in a production setting.

 """
+
 import os
 import posixpath

diff --git a/django/core/cache/__init__.py b/django/core/cache/__init__.py
index eb7fa5b2e9..444d958e68 100644
--- a/django/core/cache/__init__.py
+++ b/django/core/cache/__init__.py
@@ -12,6 +12,7 @@ object.

 See docs/topics/cache.txt for information on the public API.
 """
+
 from django.core import signals
 from django.core.cache.backends.base import (
     BaseCache,
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index 2a2288ff4d..31c18ee7e1 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -1,6 +1,7 @@
 """
 Global Django exception and warning classes.
 """
+
 import operator

 from django.utils.hashable import make_hashable
diff --git a/django/core/files/images.py b/django/core/files/images.py
index 6a603f24fc..7c1532ac8f 100644
--- a/django/core/files/images.py
+++ b/django/core/files/images.py
@@ -3,6 +3,7 @@ Utility functions for handling images.

 Requires Pillow as you might imagine.
 """
+
 import struct
 import zlib

diff --git a/django/core/files/locks.py b/django/core/files/locks.py
index c0f471f87d..a7a7a22dce 100644
--- a/django/core/files/locks.py
+++ b/django/core/files/locks.py
@@ -16,6 +16,7 @@ Example Usage::
     ...     locks.lock(f, locks.LOCK_EX)
     ...     f.write('Django')
 """
+
 import os

 __all__ = ("LOCK_EX", "LOCK_SH", "LOCK_NB", "lock", "unlock")
diff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py
index b6c185e8fc..ab86f7fede 100644
--- a/django/core/files/uploadhandler.py
+++ b/django/core/files/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Base file upload handler classes, and the built-in concrete subclasses
 """
+
 import os
 from io import BytesIO

diff --git a/django/core/mail/__init__.py b/django/core/mail/__init__.py
index dc63e8702c..676326697b 100644
--- a/django/core/mail/__init__.py
+++ b/django/core/mail/__init__.py
@@ -1,6 +1,7 @@
 """
 Tools for sending email.
 """
+
 from django.conf import settings

 # Imported for backwards compatibility and for the sake
diff --git a/django/core/mail/backends/console.py b/django/core/mail/backends/console.py
index ee5dd28504..2d7c778cc1 100644
--- a/django/core/mail/backends/console.py
+++ b/django/core/mail/backends/console.py
@@ -1,6 +1,7 @@
 """
 Email backend that writes messages to console instead of sending them.
 """
+
 import sys
 import threading

diff --git a/django/core/mail/backends/smtp.py b/django/core/mail/backends/smtp.py
index 1ee48269ae..6820148ac1 100644
--- a/django/core/mail/backends/smtp.py
+++ b/django/core/mail/backends/smtp.py
@@ -1,4 +1,5 @@
 """SMTP email backend class."""
+
 import smtplib
 import ssl
 import threading
diff --git a/django/core/management/base.py b/django/core/management/base.py
index 631c761c00..4c47e1c6e5 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -2,6 +2,7 @@
 Base classes for writing management commands (named commands which can
 be executed through ``django-admin`` or ``manage.py``).
 """
+
 import argparse
 import os
 import sys
@@ -528,9 +529,11 @@ class BaseCommand:
                 if issues:
                     visible_issue_count += len(issues)
                     formatted = (
-                        self.style.ERROR(str(e))
-                        if e.is_serious()
-                        else self.style.WARNING(str(e))
+                        (
+                            self.style.ERROR(str(e))
+                            if e.is_serious()
+                            else self.style.WARNING(str(e))
+                        )
                         for e in issues
                     )
                     formatted = "\n".join(sorted(formatted))
@@ -543,11 +546,15 @@ class BaseCommand:
             if visible_issue_count:
                 footer += "\n"
             footer += "System check identified %s (%s silenced)." % (
-                "no issues"
-                if visible_issue_count == 0
-                else "1 issue"
-                if visible_issue_count == 1
-                else "%s issues" % visible_issue_count,
+                (
+                    "no issues"
+                    if visible_issue_count == 0
+                    else (
+                        "1 issue"
+                        if visible_issue_count == 1
+                        else "%s issues" % visible_issue_count
+                    )
+                ),
                 len(all_issues) - visible_issue_count,
             )

diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index 20dffac05f..1fbca9244b 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -1,6 +1,7 @@
 """
 Module for abstract serializer/unserializer base classes.
 """
+
 from io import StringIO

 from django.core.exceptions import ObjectDoesNotExist
diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py
index e0129a59bb..cfe2ac0d1e 100644
--- a/django/core/serializers/xml_serializer.py
+++ b/django/core/serializers/xml_serializer.py
@@ -1,6 +1,7 @@
 """
 XML serializer.
 """
+
 import json
 from xml.dom import pulldom
 from xml.sax import handler
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 2742748049..015cf68faa 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -712,9 +712,9 @@ class BaseDatabaseSchemaEditor:
                 namespace, _ = split_identifier(model._meta.db_table)
                 definition += " " + self.sql_create_column_inline_fk % {
                     "name": self._fk_constraint_name(model, field, constraint_suffix),
-                    "namespace": "%s." % self.quote_name(namespace)
-                    if namespace
-                    else "",
+                    "namespace": (
+                        "%s." % self.quote_name(namespace) if namespace else ""
+                    ),
                     "column": self.quote_name(field.column),
                     "to_table": self.quote_name(to_table),
                     "to_column": self.quote_name(to_column),
@@ -1850,11 +1850,13 @@ class BaseDatabaseSchemaEditor:
         """Return all constraint names matching the columns and conditions."""
         if column_names is not None:
             column_names = [
-                self.connection.introspection.identifier_converter(
-                    truncate_name(name, self.connection.ops.max_name_length())
+                (
+                    self.connection.introspection.identifier_converter(
+                        truncate_name(name, self.connection.ops.max_name_length())
+                    )
+                    if self.connection.features.truncates_names
+                    else self.connection.introspection.identifier_converter(name)
                 )
-                if self.connection.features.truncates_names
-                else self.connection.introspection.identifier_converter(name)
                 for name in column_names
             ]
         with self.connection.cursor() as cursor:
diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 412d07a993..75787ef8ab 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -2,6 +2,7 @@
 Helpers to manipulate deferred DDL statements that might need to be adjusted or
 discarded within when executing a migration.
 """
+
 from copy import deepcopy


diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 6811b10abb..521187d2d4 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -3,6 +3,7 @@ MySQL database backend for Django.

 Requires mysqlclient: https://pypi.org/project/mysqlclient/
 """
+
 from django.core.exceptions import ImproperlyConfigured
 from django.db import IntegrityError
 from django.db.backends import utils as backend_utils
diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py
index 845ab8ccf5..611a3ea75a 100644
--- a/django/db/backends/oracle/base.py
+++ b/django/db/backends/oracle/base.py
@@ -3,6 +3,7 @@ Oracle database backend for Django.

 Requires cx_Oracle: https://oracle.github.io/python-cx_Oracle/
 """
+
 import datetime
 import decimal
 import os
diff --git a/django/db/backends/oracle/creation.py b/django/db/backends/oracle/creation.py
index df773bff8c..b0a5177728 100644
--- a/django/db/backends/oracle/creation.py
+++ b/django/db/backends/oracle/creation.py
@@ -133,20 +133,20 @@ class DatabaseCreation(BaseDatabaseCreation):
         credentials in the SAVED_USER/SAVED_PASSWORD key in the settings dict.
         """
         real_settings = settings.DATABASES[self.connection.alias]
-        real_settings["SAVED_USER"] = self.connection.settings_dict[
-            "SAVED_USER"
-        ] = self.connection.settings_dict["USER"]
+        real_settings["SAVED_USER"] = self.connection.settings_dict["SAVED_USER"] = (
+            self.connection.settings_dict["USER"]
+        )
         real_settings["SAVED_PASSWORD"] = self.connection.settings_dict[
             "SAVED_PASSWORD"
         ] = self.connection.settings_dict["PASSWORD"]
         real_test_settings = real_settings["TEST"]
         test_settings = self.connection.settings_dict["TEST"]
-        real_test_settings["USER"] = real_settings["USER"] = test_settings[
-            "USER"
-        ] = self.connection.settings_dict["USER"] = parameters["user"]
-        real_settings["PASSWORD"] = self.connection.settings_dict[
-            "PASSWORD"
-        ] = parameters["password"]
+        real_test_settings["USER"] = real_settings["USER"] = test_settings["USER"] = (
+            self.connection.settings_dict["USER"]
+        ) = parameters["user"]
+        real_settings["PASSWORD"] = self.connection.settings_dict["PASSWORD"] = (
+            parameters["password"]
+        )

     def set_as_test_mirror(self, primary_settings_dict):
         """
diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py
index d92ad58710..c950a9a616 100644
--- a/django/db/backends/postgresql/base.py
+++ b/django/db/backends/postgresql/base.py
@@ -226,9 +226,11 @@ class DatabaseWrapper(BaseDatabaseWrapper):
         server_side_binding = conn_params.pop("server_side_binding", None)
         conn_params.setdefault(
             "cursor_factory",
-            ServerBindingCursor
-            if is_psycopg3 and server_side_binding is True
-            else Cursor,
+            (
+                ServerBindingCursor
+                if is_psycopg3 and server_side_binding is True
+                else Cursor
+            ),
         )
         if settings_dict["USER"]:
             conn_params["user"] = settings_dict["USER"]
diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 40fef6660e..2bec32c7dd 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -266,9 +266,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             % {
                 "column": self.quote_name(new_field.column),
                 "type": new_type,
-                "collation": " " + self._collate_sql(new_collation)
-                if new_collation
-                else "",
+                "collation": (
+                    " " + self._collate_sql(new_collation) if new_collation else ""
+                ),
             },
             [],
         )
diff --git a/django/db/backends/sqlite3/_functions.py b/django/db/backends/sqlite3/_functions.py
index 7e86950f7d..0171b60f38 100644
--- a/django/db/backends/sqlite3/_functions.py
+++ b/django/db/backends/sqlite3/_functions.py
@@ -1,6 +1,7 @@
 """
 Implementations of SQL functions for SQLite.
 """
+
 import functools
 import random
 import statistics
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index a3a382a56b..e7205cefc9 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -1,6 +1,7 @@
 """
 SQLite backend for the sqlite3 module in the standard library.
 """
+
 import datetime
 import decimal
 import warnings
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 154ac44419..aaf40532fa 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -566,11 +566,12 @@ class MigrationAutodetector:
                                 rem_model_state.app_label,
                                 rem_model_state.name_lower,
                             )
-                            self.renamed_models_rel[
-                                renamed_models_rel_key
-                            ] = "%s.%s" % (
-                                model_state.app_label,
-                                model_state.name_lower,
+                            self.renamed_models_rel[renamed_models_rel_key] = (
+                                "%s.%s"
+                                % (
+                                    model_state.app_label,
+                                    model_state.name_lower,
+                                )
                             )
                             self.old_model_keys.remove((rem_app_label, rem_model_name))
                             self.old_model_keys.add((app_label, model_name))
@@ -971,9 +972,9 @@ class MigrationAutodetector:
                                 (rem_app_label, rem_model_name, rem_field_name)
                             )
                             old_field_keys.add((app_label, model_name, field_name))
-                            self.renamed_fields[
-                                app_label, model_name, field_name
-                            ] = rem_field_name
+                            self.renamed_fields[app_label, model_name, field_name] = (
+                                rem_field_name
+                            )
                             break

     def generate_renamed_fields(self):
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 81dcd06e04..50445f3101 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -131,11 +131,11 @@ class MigrationLoader:
                         "Migration %s in app %s has no Migration class"
                         % (migration_name, app_config.label)
                     )
-                self.disk_migrations[
-                    app_config.label, migration_name
-                ] = migration_module.Migration(
-                    migration_name,
-                    app_config.label,
+                self.disk_migrations[app_config.label, migration_name] = (
+                    migration_module.Migration(
+                        migration_name,
+                        app_config.label,
+                    )
                 )

     def get_migration(self, app_label, name_prefix):
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index b18ef55369..98d563d26a 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -55,11 +55,11 @@ class CreateModel(ModelOperation):
         _check_for_duplicates(
             "bases",
             (
-                base._meta.label_lower
-                if hasattr(base, "_meta")
-                else base.lower()
-                if isinstance(base, str)
-                else base
+                (
+                    base._meta.label_lower
+                    if hasattr(base, "_meta")
+                    else base.lower() if isinstance(base, str) else base
+                )
                 for base in self.bases
             ),
         )
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..bb2a19edbb 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -525,11 +525,11 @@ class ProjectState:
             if model_state.options.get("proxy"):
                 proxy_models[model_key] = model_state
                 # Find a concrete model for the proxy.
-                concrete_models_mapping[
-                    model_key
-                ] = self._find_concrete_model_from_proxy(
-                    proxy_models,
-                    model_state,
+                concrete_models_mapping[model_key] = (
+                    self._find_concrete_model_from_proxy(
+                        proxy_models,
+                        model_state,
+                    )
                 )
             else:
                 concrete_models_mapping[model_key] = model_key
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index a778cd413b..0cbffacd1b 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -1,6 +1,7 @@
 """
 Classes to represent the definitions of aggregate functions.
 """
+
 from django.core.exceptions import FieldError, FullResultSet
 from django.db.models.expressions import Case, Func, Star, Value, When
 from django.db.models.fields import IntegerField
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0711ec0d61..9634ddaa20 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -2217,9 +2217,11 @@ class Model(AltersData, metaclass=ModelBase):
         opts = cls._meta
         valid_fields = set(
             chain.from_iterable(
-                (f.name, f.attname)
-                if not (f.auto_created and not f.concrete)
-                else (f.field.related_query_name(),)
+                (
+                    (f.name, f.attname)
+                    if not (f.auto_created and not f.concrete)
+                    else (f.field.related_query_name(),)
+                )
                 for f in chain(opts.fields, opts.related_objects)
             )
         )
diff --git a/django/db/models/constants.py b/django/db/models/constants.py
index a0c99c95fc..cec1b9b90f 100644
--- a/django/db/models/constants.py
+++ b/django/db/models/constants.py
@@ -1,6 +1,7 @@
 """
 Constants used across the ORM in general.
 """
+
 from enum import Enum

 # Separator used to split filter strings apart.
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 280cb967b4..530b788a06 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -203,9 +203,11 @@ class BaseExpression:

     def _parse_expressions(self, *expressions):
         return [
-            arg
-            if hasattr(arg, "resolve_expression")
-            else (F(arg) if isinstance(arg, str) else Value(arg))
+            (
+                arg
+                if hasattr(arg, "resolve_expression")
+                else (F(arg) if isinstance(arg, str) else Value(arg))
+            )
             for arg in expressions
         ]

@@ -277,9 +279,11 @@ class BaseExpression:
         c.is_summary = summarize
         c.set_source_expressions(
             [
-                expr.resolve_expression(query, allow_joins, reuse, summarize)
-                if expr
-                else None
+                (
+                    expr.resolve_expression(query, allow_joins, reuse, summarize)
+                    if expr
+                    else None
+                )
                 for expr in c.get_source_expressions()
             ]
         )
@@ -358,22 +362,16 @@ class BaseExpression:
         field = self.output_field
         internal_type = field.get_internal_type()
         if internal_type == "FloatField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else float(value)
+            return lambda value, expression, connection: (
+                None if value is None else float(value)
             )
         elif internal_type.endswith("IntegerField"):
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else int(value)
+            return lambda value, expression, connection: (
+                None if value is None else int(value)
             )
         elif internal_type == "DecimalField":
-            return (
-                lambda value, expression, connection: None
-                if value is None
-                else Decimal(value)
+            return lambda value, expression, connection: (
+                None if value is None else Decimal(value)
             )
         return self._convert_value_noop

@@ -419,9 +417,11 @@ class BaseExpression:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                F(f"{prefix}{expr.name}")
-                if isinstance(expr, F)
-                else expr.prefix_references(prefix)
+                (
+                    F(f"{prefix}{expr.name}")
+                    if isinstance(expr, F)
+                    else expr.prefix_references(prefix)
+                )
                 for expr in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index c74e92ba89..144cce6142 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -8,6 +8,7 @@ in the ``remote_field`` attribute of the field.
 They also act as reverse fields for the purposes of the Meta API because
 they're the closest concept currently available.
 """
+
 import warnings

 from django.core import exceptions
diff --git a/django/db/models/functions/comparison.py b/django/db/models/functions/comparison.py
index 108d904712..72a5925823 100644
--- a/django/db/models/functions/comparison.py
+++ b/django/db/models/functions/comparison.py
@@ -1,4 +1,5 @@
 """Database functions that do comparisons or type conversions."""
+
 from django.db import NotSupportedError
 from django.db.models.expressions import Func, Value
 from django.db.models.fields import TextField
diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index eb5332ecc0..09447e9fb3 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -318,9 +318,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate DateField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         elif isinstance(field, TimeField) and (
@@ -331,9 +333,11 @@ class TruncBase(TimezoneMixin, Transform):
                 "Cannot truncate TimeField '%s' to %s."
                 % (
                     field.name,
-                    output_field.__class__.__name__
-                    if has_explicit_output_field
-                    else "DateTimeField",
+                    (
+                        output_field.__class__.__name__
+                        if has_explicit_output_field
+                        else "DateTimeField"
+                    ),
                 )
             )
         return copy
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 460143ba5a..5fa4654a84 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -47,9 +47,11 @@ class ATan2(NumericOutputFieldMixin, Func):
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, FloatField())
-                if isinstance(expression.output_field, IntegerField)
-                else expression
+                (
+                    Cast(expression, FloatField())
+                    if isinstance(expression.output_field, IntegerField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()[::-1]
             ]
         )
diff --git a/django/db/models/functions/mixins.py b/django/db/models/functions/mixins.py
index caf20e131d..d983df7725 100644
--- a/django/db/models/functions/mixins.py
+++ b/django/db/models/functions/mixins.py
@@ -14,9 +14,11 @@ class FixDecimalInputMixin:
         clone = self.copy()
         clone.set_source_expressions(
             [
-                Cast(expression, output_field)
-                if isinstance(expression.output_field, FloatField)
-                else expression
+                (
+                    Cast(expression, output_field)
+                    if isinstance(expression.output_field, FloatField)
+                    else expression
+                )
                 for expression in self.get_source_expressions()
             ]
         )
diff --git a/django/db/models/indexes.py b/django/db/models/indexes.py
index b5451f9e24..0ddfefec38 100644
--- a/django/db/models/indexes.py
+++ b/django/db/models/indexes.py
@@ -196,9 +196,11 @@ class Index:
             "" if not self.fields else " fields=%s" % repr(self.fields),
             "" if not self.expressions else " expressions=%s" % repr(self.expressions),
             "" if not self.name else " name=%s" % repr(self.name),
-            ""
-            if self.db_tablespace is None
-            else " db_tablespace=%s" % repr(self.db_tablespace),
+            (
+                ""
+                if self.db_tablespace is None
+                else " db_tablespace=%s" % repr(self.db_tablespace)
+            ),
             "" if self.condition is None else " condition=%s" % self.condition,
             "" if not self.include else " include=%s" % repr(self.include),
             "" if not self.opclasses else " opclasses=%s" % repr(self.opclasses),
diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 91342a864a..64dd495d6e 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -253,9 +253,11 @@ class FieldGetDbPrepValueMixin:
         )
         return (
             "%s",
-            [get_db_prep_value(v, connection, prepared=True) for v in value]
-            if self.get_db_prep_lookup_value_is_iterable
-            else [get_db_prep_value(value, connection, prepared=True)],
+            (
+                [get_db_prep_value(v, connection, prepared=True) for v in value]
+                if self.get_db_prep_lookup_value_is_iterable
+                else [get_db_prep_value(value, connection, prepared=True)]
+            ),
         )


diff --git a/django/db/models/query.py b/django/db/models/query.py
index 5ac2407ea3..afa73dc161 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -108,9 +108,11 @@ class ModelIterable(BaseIterable):
                 related_objs,
                 operator.attrgetter(
                     *[
-                        field.attname
-                        if from_field == "self"
-                        else queryset.model._meta.get_field(from_field).attname
+                        (
+                            field.attname
+                            if from_field == "self"
+                            else queryset.model._meta.get_field(from_field).attname
+                        )
                         for from_field in field.from_fields
                     ]
                 ),
@@ -1362,9 +1364,7 @@ class QuerySet(AltersData):
         clone._iterable_class = (
             NamedValuesListIterable
             if named
-            else FlatValuesListIterable
-            if flat
-            else ValuesListIterable
+            else FlatValuesListIterable if flat else ValuesListIterable
         )
         return clone

@@ -1630,9 +1630,11 @@ class QuerySet(AltersData):
         if names is None:
             names = set(
                 chain.from_iterable(
-                    (field.name, field.attname)
-                    if hasattr(field, "attname")
-                    else (field.name,)
+                    (
+                        (field.name, field.attname)
+                        if hasattr(field, "attname")
+                        else (field.name,)
+                    )
                     for field in self.model._meta.get_fields()
                 )
             )
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 78148f76b0..f50b62ee86 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -5,6 +5,7 @@ Factored out from django.db.models.query to avoid making the main module very
 large and/or so that they can be used by other modules without getting into
 circular import difficulties.
 """
+
 import functools
 import inspect
 import logging
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index b28dc925ba..18f1db0689 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -1216,9 +1216,9 @@ class SQLCompiler:
                 "field": f,
                 "reverse": False,
                 "local_setter": f.set_cached_value,
-                "remote_setter": f.remote_field.set_cached_value
-                if f.unique
-                else lambda x, y: None,
+                "remote_setter": (
+                    f.remote_field.set_cached_value if f.unique else lambda x, y: None
+                ),
                 "from_parent": False,
             }
             related_klass_infos.append(klass_info)
diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py
index 5eaa8c25f6..7c0c14a46e 100644
--- a/django/db/models/sql/datastructures.py
+++ b/django/db/models/sql/datastructures.py
@@ -2,6 +2,7 @@
 Useful auxiliary data structures for query construction. Not useful outside
 the SQL domain.
 """
+
 import warnings

 from django.core.exceptions import FullResultSet
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 13a6809dd8..5a97c59a02 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -6,6 +6,7 @@ themselves do not have to (and could be backed by things other than SQL
 databases). The abstraction barrier only works one way: this module has to know
 all about the internals of models in order to get the information it needs.
 """
+
 import copy
 import difflib
 import functools
@@ -76,9 +77,11 @@ def get_children_from_q(q):
 def rename_prefix_from_q(prefix, replacement, q):
     return Q.create(
         [
-            rename_prefix_from_q(prefix, replacement, c)
-            if isinstance(c, Node)
-            else (c[0].replace(prefix, replacement, 1), c[1])
+            (
+                rename_prefix_from_q(prefix, replacement, c)
+                if isinstance(c, Node)
+                else (c[0].replace(prefix, replacement, 1), c[1])
+            )
             for c in q.children
         ],
         q.connector,
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 2f23a2932c..9c5740c2cd 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -1,6 +1,7 @@
 """
 Code to manage the creation and SQL rendering of 'where' constraints.
 """
+
 import operator
 from functools import reduce

diff --git a/django/forms/models.py b/django/forms/models.py
index 3fa04b821f..78caf4f0b8 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -2,6 +2,7 @@
 Helper functions for creating Form classes from Django models
 and database field objects.
 """
+
 from itertools import chain

 from django.core.exceptions import (
@@ -829,9 +830,12 @@ class BaseModelFormSet(BaseFormSet, AltersData):
                 )
                 # Reduce Model instances to their primary key values
                 row_data = tuple(
-                    d._get_pk_val() if hasattr(d, "_get_pk_val")
-                    # Prevent "unhashable type: list" errors later on.
-                    else tuple(d) if isinstance(d, list) else d
+                    (
+                        d._get_pk_val()
+                        if hasattr(d, "_get_pk_val")
+                        # Prevent "unhashable type: list" errors later on.
+                        else tuple(d) if isinstance(d, list) else d
+                    )
                     for d in row_data
                 )
                 if row_data and None not in row_data:
diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index ab7c0f755f..c3abe91765 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -100,9 +100,11 @@ class Media:

     def render_js(self):
         return [
-            path.__html__()
-            if hasattr(path, "__html__")
-            else format_html('<script src="{}"></script>', self.absolute_path(path))
+            (
+                path.__html__()
+                if hasattr(path, "__html__")
+                else format_html('<script src="{}"></script>', self.absolute_path(path))
+            )
             for path in self._js
         ]

@@ -112,12 +114,14 @@ class Media:
         media = sorted(self._css)
         return chain.from_iterable(
             [
-                path.__html__()
-                if hasattr(path, "__html__")
-                else format_html(
-                    '<link href="{}" media="{}" rel="stylesheet">',
-                    self.absolute_path(path),
-                    medium,
+                (
+                    path.__html__()
+                    if hasattr(path, "__html__")
+                    else format_html(
+                        '<link href="{}" media="{}" rel="stylesheet">',
+                        self.absolute_path(path),
+                        medium,
+                    )
                 )
                 for path in self._css[medium]
             ]
diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py
index 5ab63455ef..94e5116639 100644
--- a/django/http/multipartparser.py
+++ b/django/http/multipartparser.py
@@ -4,6 +4,7 @@ Multi-part parsing for file uploads.
 Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
 file upload handlers for processing.
 """
+
 import base64
 import binascii
 import collections
diff --git a/django/http/request.py b/django/http/request.py
index be6823cacb..044b2a66ea 100644
--- a/django/http/request.py
+++ b/django/http/request.py
@@ -169,9 +169,11 @@ class HttpRequest:
         return "%s%s%s" % (
             escape_uri_path(path),
             "/" if force_append_slash and not path.endswith("/") else "",
-            ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
-            if self.META.get("QUERY_STRING", "")
-            else "",
+            (
+                ("?" + iri_to_uri(self.META.get("QUERY_STRING", "")))
+                if self.META.get("QUERY_STRING", "")
+                else ""
+            ),
         )

     def get_signed_cookie(self, key, default=RAISE_ERROR, salt="", max_age=None):
diff --git a/django/middleware/csrf.py b/django/middleware/csrf.py
index 2c0d2cc120..f7943494ba 100644
--- a/django/middleware/csrf.py
+++ b/django/middleware/csrf.py
@@ -4,6 +4,7 @@ Cross Site Request Forgery Middleware.
 This module provides a middleware that implements protection
 against request forgeries from other sites.
 """
+
 import logging
 import string
 from collections import defaultdict
diff --git a/django/shortcuts.py b/django/shortcuts.py
index 90ec1bedc5..4783612bba 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -3,6 +3,7 @@ This module collects helper functions and classes that "span" multiple levels
 of MVC. In other words, these functions/classes introduce controlled coupling
 for convenience's sake.
 """
+
 from django.http import (
     Http404,
     HttpResponse,
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 589ca38414..1f1ea4d7a9 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -1,4 +1,5 @@
 """Default variable filters."""
+
 import random as random_module
 import re
 import types
diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py
index 79c10232bb..deb6b01fb6 100644
--- a/django/template/defaulttags.py
+++ b/django/template/defaulttags.py
@@ -1,4 +1,5 @@
 """Default tags used by the template system, available to all templates."""
+
 import re
 import sys
 import warnings
diff --git a/django/template/engine.py b/django/template/engine.py
index f2215c0e4e..9882d3a16d 100644
--- a/django/template/engine.py
+++ b/django/template/engine.py
@@ -70,9 +70,11 @@ class Engine:
             self.__class__.__qualname__,
             "" if not self.dirs else " dirs=%s" % repr(self.dirs),
             self.app_dirs,
-            ""
-            if not self.context_processors
-            else " context_processors=%s" % repr(self.context_processors),
+            (
+                ""
+                if not self.context_processors
+                else " context_processors=%s" % repr(self.context_processors)
+            ),
             self.debug,
             repr(self.loaders),
             repr(self.string_if_invalid),
diff --git a/django/template/smartif.py b/django/template/smartif.py
index 5b15a5a476..0a917c2aaa 100644
--- a/django/template/smartif.py
+++ b/django/template/smartif.py
@@ -1,6 +1,7 @@
 """
 Parser and utilities for the smart 'if' tag
 """
+
 # Using a simple top down parser, as described here:
 #    http://effbot.org/zone/simple-top-down-parsing.htm.
 # 'led' = left denotation
diff --git a/django/test/html.py b/django/test/html.py
index 87e213d651..f70796494b 100644
--- a/django/test/html.py
+++ b/django/test/html.py
@@ -1,4 +1,5 @@
 """Compare two HTML documents."""
+
 import html
 from html.parser import HTMLParser

diff --git a/django/urls/conf.py b/django/urls/conf.py
index 40708028a3..bb61063d77 100644
--- a/django/urls/conf.py
+++ b/django/urls/conf.py
@@ -1,4 +1,5 @@
 """Functions for use in URLsconfs."""
+
 from functools import partial
 from importlib import import_module

diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index b021673772..8b03c5801e 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -5,6 +5,7 @@ URLResolver is the main class here. Its resolve() method takes a URL (as
 a string) and returns a ResolverMatch object which provides access to all
 attributes of the resolved URL match.
 """
+
 import functools
 import inspect
 import re
@@ -91,9 +92,11 @@ class ResolverMatch:
                 self.app_names,
                 self.namespaces,
                 self.route,
-                f", captured_kwargs={self.captured_kwargs!r}"
-                if self.captured_kwargs
-                else "",
+                (
+                    f", captured_kwargs={self.captured_kwargs!r}"
+                    if self.captured_kwargs
+                    else ""
+                ),
                 f", extra_kwargs={self.extra_kwargs!r}" if self.extra_kwargs else "",
             )
         )
diff --git a/django/utils/archive.py b/django/utils/archive.py
index 71ec2d0015..56f34c0038 100644
--- a/django/utils/archive.py
+++ b/django/utils/archive.py
@@ -21,6 +21,7 @@ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 """
+
 import os
 import shutil
 import stat
diff --git a/django/utils/cache.py b/django/utils/cache.py
index cf797d0279..3b014fbe51 100644
--- a/django/utils/cache.py
+++ b/django/utils/cache.py
@@ -14,6 +14,7 @@ cache keys to prevent delivery of wrong content.
 An example: i18n middleware would need to distinguish caches by the
 "Accept-language" header.
 """
+
 import time
 from collections import defaultdict
 from hashlib import md5
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..5134b854d6 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -1,6 +1,7 @@
 """
 Django's standard crypto functions and utilities.
 """
+
 import hashlib
 import hmac
 import secrets
diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index a6c315e4cf..a3274b901c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -10,6 +10,7 @@ Usage:
 7th October 2003 11:39
 >>>
 """
+
 import calendar
 from datetime import date, datetime, time
 from email.utils import format_datetime as format_datetime_rfc5322
diff --git a/django/utils/deconstruct.py b/django/utils/deconstruct.py
index f8754c1974..2e5463a651 100644
--- a/django/utils/deconstruct.py
+++ b/django/utils/deconstruct.py
@@ -42,9 +42,11 @@ def deconstructible(*args, path=None):
                     "#serializing-values" % (name, module_name, get_docs_version())
                 )
             return (
-                path
-                if path and type(obj) is klass
-                else f"{obj.__class__.__module__}.{name}",
+                (
+                    path
+                    if path and type(obj) is klass
+                    else f"{obj.__class__.__module__}.{name}"
+                ),
                 obj._constructor_args[0],
                 obj._constructor_args[1],
             )
diff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py
index 31ca9a2db9..3bd456ca68 100644
--- a/django/utils/feedgenerator.py
+++ b/django/utils/feedgenerator.py
@@ -21,6 +21,7 @@ Sample usage:
 For definitions of the different versions of RSS, see:
 https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss
 """
+
 import datetime
 import email
 from io import StringIO
diff --git a/django/utils/jslex.py b/django/utils/jslex.py
index 93a1a2e972..fc46a686c7 100644
--- a/django/utils/jslex.py
+++ b/django/utils/jslex.py
@@ -1,4 +1,5 @@
 """JsLex: a lexer for JavaScript"""
+
 # Originally from https://bitbucket.org/ned/jslex
 import re

diff --git a/django/utils/regex_helper.py b/django/utils/regex_helper.py
index 9ee82e1a9b..b71298e399 100644
--- a/django/utils/regex_helper.py
+++ b/django/utils/regex_helper.py
@@ -5,6 +5,7 @@ Used internally by Django and not intended for external use.
 This is not, and is not intended to be, a complete reg-exp decompiler. It
 should be good enough for a large class of URLS, however.
 """
+
 import re

 from django.utils.functional import SimpleLazyObject
diff --git a/django/utils/translation/__init__.py b/django/utils/translation/__init__.py
index 0b3f78e486..0618f02159 100644
--- a/django/utils/translation/__init__.py
+++ b/django/utils/translation/__init__.py
@@ -1,6 +1,7 @@
 """
 Internationalization support.
 """
+
 from contextlib import ContextDecorator
 from decimal import ROUND_UP, Decimal

diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 872c80b00f..a629528717 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -1,4 +1,5 @@
 """Translation helper functions."""
+
 import functools
 import gettext as gettext_module
 import os
diff --git a/django/views/decorators/http.py b/django/views/decorators/http.py
index 5d5dcbc790..a4c1ebc31e 100644
--- a/django/views/decorators/http.py
+++ b/django/views/decorators/http.py
@@ -1,6 +1,7 @@
 """
 Decorators for views based on HTTP headers.
 """
+
 import datetime
 from functools import wraps

diff --git a/django/views/static.py b/django/views/static.py
index df46c53093..b24f0e30f9 100644
--- a/django/views/static.py
+++ b/django/views/static.py
@@ -2,6 +2,7 @@
 Views and functions for serving static files. These are only to be used
 during development, and SHOULD NOT be used in a production setting.
 """
+
 import mimetypes
 import posixpath
 from pathlib import Path
diff --git a/docs/_ext/djangodocs.py b/docs/_ext/djangodocs.py
index 866b8f891d..210abdcae6 100644
--- a/docs/_ext/djangodocs.py
+++ b/docs/_ext/djangodocs.py
@@ -1,6 +1,7 @@
 """
 Sphinx plugins for Django documentation.
 """
+
 import json
 import os
 import re
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..6e5aada76b
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/test_project/__init__.py b/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/asgi.py b/test_project/asgi.py
new file mode 100644
index 0000000000..a7a0d4f0b1
--- /dev/null
+++ b/test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+
+application = get_asgi_application()
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..f189297a4f
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230707060601.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-8)vp2rxlc*ovq&4xokk-ve0on1%1ye4_dzp_es1z6#k%uxm%u("
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'bugapp',
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "test_project.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "test_project.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..b6ae5e3b82
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for test_project project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/test_project/wsgi.py b/test_project/wsgi.py
new file mode 100644
index 0000000000..ee57abe62a
--- /dev/null
+++ b/test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+
+application = get_wsgi_application()
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 0000000000..c1941877ac
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,20 @@
+import os
+import django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+django.setup()
+from bugapp.models import Thing, SubThing
+
+# Create a Thing instance
+thing = Thing(name='Test Thing')
+thing.save()
+
+# Create a SubThing instance
+subthing = SubThing(name='Test SubThing', thing=thing)
+subthing.save()
+
+# Delete the SubThing instance
+subthing.delete()
+
+# Try to add a new SubThing instance
+new_subthing = SubThing(name='New SubThing', thing=thing)
+new_subthing.save()
\ No newline at end of file
diff --git a/tests/admin_changelist/test_date_hierarchy.py b/tests/admin_changelist/test_date_hierarchy.py
index 03afaa33d9..94a6a8eb6c 100644
--- a/tests/admin_changelist/test_date_hierarchy.py
+++ b/tests/admin_changelist/test_date_hierarchy.py
@@ -90,7 +90,8 @@ class DateHierarchyTests(TestCase):
             {"year": 2017, "month": 12, "day": 0},
         )
         for invalid_query in tests:
-            with self.subTest(query=invalid_query), self.assertRaises(
-                IncorrectLookupParameters
+            with (
+                self.subTest(query=invalid_query),
+                self.assertRaises(IncorrectLookupParameters),
             ):
                 self.assertDateParams(invalid_query, None, None)
diff --git a/tests/admin_inlines/models.py b/tests/admin_inlines/models.py
index a8d2ee02e1..eca5bae422 100644
--- a/tests/admin_inlines/models.py
+++ b/tests/admin_inlines/models.py
@@ -1,6 +1,7 @@
 """
 Testing of admin inline formsets.
 """
+
 import random

 from django.contrib.contenttypes.fields import GenericForeignKey
diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py
index 57fbc454ff..421578a6c2 100644
--- a/tests/admin_scripts/tests.py
+++ b/tests/admin_scripts/tests.py
@@ -3,6 +3,7 @@ A series of tests to establish that the command-line management tools work as
 advertised - especially with regards to the handling of the
 DJANGO_SETTINGS_MODULE and default settings.py files.
 """
+
 import os
 import re
 import shutil
@@ -757,7 +758,9 @@ class DjangoAdminSettingsDirectory(AdminScriptTestCase):
         with open(os.path.join(app_path, "apps.py"), encoding="utf8") as f:
             content = f.read()
             self.assertIn("class こんにちはConfig(AppConfig)", content)
-            self.assertIn('name = "こんにちは"' if HAS_BLACK else "name = 'こんにちは'", content)
+            self.assertIn(
+                'name = "こんにちは"' if HAS_BLACK else "name = 'こんにちは'", content
+            )

     def test_builtin_command(self):
         """
diff --git a/tests/admin_views/custom_has_permission_admin.py b/tests/admin_views/custom_has_permission_admin.py
index 6dc2011b24..17b6498aab 100644
--- a/tests/admin_views/custom_has_permission_admin.py
+++ b/tests/admin_views/custom_has_permission_admin.py
@@ -1,6 +1,7 @@
 """
 A custom AdminSite for AdminViewPermissionsTest.test_login_has_permission().
 """
+
 from django.contrib import admin
 from django.contrib.auth import get_permission_codename
 from django.contrib.auth.forms import AuthenticationForm
diff --git a/tests/admin_views/customadmin.py b/tests/admin_views/customadmin.py
index e3429ec4bc..4b30c5c30f 100644
--- a/tests/admin_views/customadmin.py
+++ b/tests/admin_views/customadmin.py
@@ -1,6 +1,7 @@
 """
 A second, custom AdminSite -- see tests.CustomAdminSiteTests.
 """
+
 from django.contrib import admin
 from django.contrib.auth.admin import UserAdmin
 from django.contrib.auth.models import User
diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py
index bfb3919b23..9199bf3eba 100644
--- a/tests/aggregation_regress/tests.py
+++ b/tests/aggregation_regress/tests.py
@@ -1564,8 +1564,9 @@ class AggregationTests(TestCase):
             "django.db.connection.features.allows_group_by_selected_pks_on_model",
             return_value=True,
         ):
-            with mock.patch.object(Book._meta, "managed", False), mock.patch.object(
-                Author._meta, "managed", False
+            with (
+                mock.patch.object(Book._meta, "managed", False),
+                mock.patch.object(Author._meta, "managed", False),
             ):
                 _, _, grouping = qs.query.get_compiler(using="default").pre_sql_setup()
                 self.assertEqual(len(grouping), 2)
diff --git a/tests/auth_tests/models/custom_permissions.py b/tests/auth_tests/models/custom_permissions.py
index 52d28bd276..385de4e846 100644
--- a/tests/auth_tests/models/custom_permissions.py
+++ b/tests/auth_tests/models/custom_permissions.py
@@ -3,6 +3,7 @@ The CustomPermissionsUser users email as the identifier, but uses the normal
 Django permissions model. This allows us to check that the PermissionsMixin
 includes everything that is needed to interact with the ModelBackend.
 """
+
 from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
 from django.db import models

diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 7a80adbf31..7e5a91036c 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -479,8 +479,9 @@ class AuthenticationFormTest(TestDataMixin, TestCase):
             user_login_failed.disconnect(signal_handler)

     def test_inactive_user_i18n(self):
-        with self.settings(USE_I18N=True), translation.override(
-            "pt-br", deactivate=True
+        with (
+            self.settings(USE_I18N=True),
+            translation.override("pt-br", deactivate=True),
         ):
             # The user is inactive.
             data = {
@@ -899,9 +900,9 @@ class UserChangeFormTest(TestDataMixin, TestCase):
         class MyUserForm(UserChangeForm):
             def __init__(self, *args, **kwargs):
                 super().__init__(*args, **kwargs)
-                self.fields[
-                    "groups"
-                ].help_text = "These groups give users different permissions"
+                self.fields["groups"].help_text = (
+                    "These groups give users different permissions"
+                )

             class Meta(UserChangeForm.Meta):
                 fields = ("groups",)
diff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py
index e10992b25c..cf2ebafa15 100644
--- a/tests/auth_tests/test_hashers.py
+++ b/tests/auth_tests/test_hashers.py
@@ -327,8 +327,9 @@ class TestUtilsHashPass(SimpleTestCase):
         with mock.patch.object(hasher, "rounds", 4):
             encoded = make_password("letmein", hasher="bcrypt")

-        with mock.patch.object(hasher, "rounds", 6), mock.patch.object(
-            hasher, "encode", side_effect=hasher.encode
+        with (
+            mock.patch.object(hasher, "rounds", 6),
+            mock.patch.object(hasher, "encode", side_effect=hasher.encode),
         ):
             hasher.harden_runtime("wrong_password", encoded)

@@ -502,8 +503,9 @@ class TestUtilsHashPass(SimpleTestCase):
         with mock.patch.object(hasher, "iterations", 1):
             encoded = make_password("letmein")

-        with mock.patch.object(hasher, "iterations", 6), mock.patch.object(
-            hasher, "encode", side_effect=hasher.encode
+        with (
+            mock.patch.object(hasher, "iterations", 6),
+            mock.patch.object(hasher, "encode", side_effect=hasher.encode),
         ):
             hasher.harden_runtime("wrong_password", encoded)

@@ -551,8 +553,9 @@ class TestUtilsHashPass(SimpleTestCase):
         hasher = get_hasher("default")
         encoded = make_password("letmein")

-        with mock.patch.object(hasher, "harden_runtime"), mock.patch.object(
-            hasher, "must_update", return_value=True
+        with (
+            mock.patch.object(hasher, "harden_runtime"),
+            mock.patch.object(hasher, "must_update", return_value=True),
         ):
             # Correct password supplied, no hardening needed
             check_password("letmein", encoded)
diff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py
index d15a166c98..0897046c1f 100644
--- a/tests/auth_tests/test_views.py
+++ b/tests/auth_tests/test_views.py
@@ -818,9 +818,9 @@ class LoginTest(AuthViewsTestCase):
         # Use POST request to log in
         SessionMiddleware(get_response).process_request(req)
         CsrfViewMiddleware(get_response).process_view(req, LoginView.as_view(), (), {})
-        req.META[
-            "SERVER_NAME"
-        ] = "testserver"  # Required to have redirect work in login view
+        req.META["SERVER_NAME"] = (
+            "testserver"  # Required to have redirect work in login view
+        )
         req.META["SERVER_PORT"] = 80
         resp = CsrfViewMiddleware(LoginView.as_view())(req)
         csrf_cookie = resp.cookies.get(settings.CSRF_COOKIE_NAME, None)
diff --git a/tests/backends/base/test_base.py b/tests/backends/base/test_base.py
index ada2cc33c9..3a0f7f1f1c 100644
--- a/tests/backends/base/test_base.py
+++ b/tests/backends/base/test_base.py
@@ -168,8 +168,9 @@ class ExecuteWrapperTests(TestCase):
     def test_nested_wrapper_invoked(self):
         outer_wrapper = self.mock_wrapper()
         inner_wrapper = self.mock_wrapper()
-        with connection.execute_wrapper(outer_wrapper), connection.execute_wrapper(
-            inner_wrapper
+        with (
+            connection.execute_wrapper(outer_wrapper),
+            connection.execute_wrapper(inner_wrapper),
         ):
             self.call_execute(connection)
             self.assertEqual(inner_wrapper.call_count, 1)
@@ -182,8 +183,10 @@ class ExecuteWrapperTests(TestCase):

         wrapper = self.mock_wrapper()
         c = connection  # This alias shortens the next line.
-        with c.execute_wrapper(wrapper), c.execute_wrapper(blocker), c.execute_wrapper(
-            wrapper
+        with (
+            c.execute_wrapper(wrapper),
+            c.execute_wrapper(blocker),
+            c.execute_wrapper(wrapper),
         ):
             with c.cursor() as cursor:
                 cursor.execute("The database never sees this")
diff --git a/tests/backends/test_utils.py b/tests/backends/test_utils.py
index 03d4b036fd..704498836e 100644
--- a/tests/backends/test_utils.py
+++ b/tests/backends/test_utils.py
@@ -1,4 +1,5 @@
 """Tests for django.db.backends.utils"""
+
 from decimal import Decimal, Rounded

 from django.db import NotSupportedError, connection
diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index bfdf5ed4b4..40a41a2f29 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -1,4 +1,5 @@
 """Tests related to django.db.backends that haven't been organized."""
+
 import datetime
 import threading
 import unittest
diff --git a/tests/bash_completion/tests.py b/tests/bash_completion/tests.py
index 856e351dfa..324e980937 100644
--- a/tests/bash_completion/tests.py
+++ b/tests/bash_completion/tests.py
@@ -1,6 +1,7 @@
 """
 A series of tests to establish that the command-line bash completion works.
 """
+
 import os
 import sys
 import unittest
diff --git a/tests/basic/models.py b/tests/basic/models.py
index b71b60a213..cd89643140 100644
--- a/tests/basic/models.py
+++ b/tests/basic/models.py
@@ -3,6 +3,7 @@ Bare-bones model

 This is a basic model with only two non-primary-key fields.
 """
+
 import uuid

 from django.db import models
diff --git a/tests/check_framework/test_security.py b/tests/check_framework/test_security.py
index 3e20f35f01..f5d22e7518 100644
--- a/tests/check_framework/test_security.py
+++ b/tests/check_framework/test_security.py
@@ -592,8 +592,9 @@ class CheckReferrerPolicyTest(SimpleTestCase):
             ("strict-origin", "origin"),
         )
         for value in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_REFERRER_POLICY=value
+            with (
+                self.subTest(value=value),
+                override_settings(SECURE_REFERRER_POLICY=value),
             ):
                 self.assertEqual(base.check_referrer_policy(None), [])

@@ -651,8 +652,11 @@ class CheckCrossOriginOpenerPolicyTest(SimpleTestCase):
     def test_with_coop(self):
         tests = ["same-origin", "same-origin-allow-popups", "unsafe-none"]
         for value in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+            with (
+                self.subTest(value=value),
+                override_settings(
+                    SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+                ),
             ):
                 self.assertEqual(base.check_cross_origin_opener_policy(None), [])

diff --git a/tests/contenttypes_tests/test_management.py b/tests/contenttypes_tests/test_management.py
index eb472d80ce..14ff4e5952 100644
--- a/tests/contenttypes_tests/test_management.py
+++ b/tests/contenttypes_tests/test_management.py
@@ -88,9 +88,10 @@ class RemoveStaleContentTypesTests(TestCase):
     def test_contenttypes_removed_in_installed_apps_without_models(self):
         ContentType.objects.create(app_label="empty_models", model="Fake 1")
         ContentType.objects.create(app_label="no_models", model="Fake 2")
-        with mock.patch(
-            "builtins.input", return_value="yes"
-        ), captured_stdout() as stdout:
+        with (
+            mock.patch("builtins.input", return_value="yes"),
+            captured_stdout() as stdout,
+        ):
             call_command("remove_stale_contenttypes", verbosity=2)
         self.assertNotIn(
             "Deleting stale content type 'empty_models | Fake 1'",
@@ -106,9 +107,10 @@ class RemoveStaleContentTypesTests(TestCase):
     def test_contenttypes_removed_for_apps_not_in_installed_apps(self):
         ContentType.objects.create(app_label="empty_models", model="Fake 1")
         ContentType.objects.create(app_label="no_models", model="Fake 2")
-        with mock.patch(
-            "builtins.input", return_value="yes"
-        ), captured_stdout() as stdout:
+        with (
+            mock.patch("builtins.input", return_value="yes"),
+            captured_stdout() as stdout,
+        ):
             call_command(
                 "remove_stale_contenttypes", include_stale_apps=True, verbosity=2
             )
diff --git a/tests/contenttypes_tests/test_models.py b/tests/contenttypes_tests/test_models.py
index 95518bb3df..fdf16c20d5 100644
--- a/tests/contenttypes_tests/test_models.py
+++ b/tests/contenttypes_tests/test_models.py
@@ -324,7 +324,8 @@ class ContentTypesMultidbTests(TestCase):
         db_for_read().
         """
         ContentType.objects.clear_cache()
-        with self.assertNumQueries(0, using="default"), self.assertNumQueries(
-            1, using="other"
+        with (
+            self.assertNumQueries(0, using="default"),
+            self.assertNumQueries(1, using="other"),
         ):
             ContentType.objects.get_for_model(Author)
diff --git a/tests/contenttypes_tests/test_views.py b/tests/contenttypes_tests/test_views.py
index 4d85d15065..75f39a7bab 100644
--- a/tests/contenttypes_tests/test_views.py
+++ b/tests/contenttypes_tests/test_views.py
@@ -150,10 +150,8 @@ class ContentTypesViewsSiteRelTests(TestCase):
         """
         The shortcut view works if a model's ForeignKey to site is None.
         """
-        get_model.side_effect = (
-            lambda *args, **kwargs: MockSite
-            if args[0] == "sites.Site"
-            else ModelWithNullFKToSite
+        get_model.side_effect = lambda *args, **kwargs: (
+            MockSite if args[0] == "sites.Site" else ModelWithNullFKToSite
         )

         obj = ModelWithNullFKToSite.objects.create(title="title")
@@ -172,10 +170,8 @@ class ContentTypesViewsSiteRelTests(TestCase):
         site if it's attached to the object or to the domain of the first site
         found in the m2m relationship.
         """
-        get_model.side_effect = (
-            lambda *args, **kwargs: MockSite
-            if args[0] == "sites.Site"
-            else ModelWithM2MToSite
+        get_model.side_effect = lambda *args, **kwargs: (
+            MockSite if args[0] == "sites.Site" else ModelWithM2MToSite
         )

         # get_current_site() will lookup a Site object, so these must match the
diff --git a/tests/context_processors/tests.py b/tests/context_processors/tests.py
index 23f9d59149..ba92ff8b05 100644
--- a/tests/context_processors/tests.py
+++ b/tests/context_processors/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for Django's bundled context processors.
 """
+
 from django.test import SimpleTestCase, TestCase, override_settings


diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py
index a636977b67..22f443d100 100644
--- a/tests/custom_lookups/tests.py
+++ b/tests/custom_lookups/tests.py
@@ -238,10 +238,11 @@ class LookupTests(TestCase):
     def test_custom_name_lookup(self):
         a1 = Author.objects.create(name="a1", birthdate=date(1981, 2, 16))
         Author.objects.create(name="a2", birthdate=date(2012, 2, 29))
-        with register_lookup(models.DateField, YearTransform), register_lookup(
-            models.DateField, YearTransform, lookup_name="justtheyear"
-        ), register_lookup(YearTransform, Exactly), register_lookup(
-            YearTransform, Exactly, lookup_name="isactually"
+        with (
+            register_lookup(models.DateField, YearTransform),
+            register_lookup(models.DateField, YearTransform, lookup_name="justtheyear"),
+            register_lookup(YearTransform, Exactly),
+            register_lookup(YearTransform, Exactly, lookup_name="isactually"),
         ):
             qs1 = Author.objects.filter(birthdate__testyear__exactly=1981)
             qs2 = Author.objects.filter(birthdate__justtheyear__isactually=1981)
diff --git a/tests/db_functions/comparison/test_nullif.py b/tests/db_functions/comparison/test_nullif.py
index 9839e6b4c5..cdbc3d6960 100644
--- a/tests/db_functions/comparison/test_nullif.py
+++ b/tests/db_functions/comparison/test_nullif.py
@@ -23,9 +23,11 @@ class NullIfTests(TestCase):
             [
                 ("smithj",),
                 (
-                    ""
-                    if connection.features.interprets_empty_strings_as_nulls
-                    else None,
+                    (
+                        ""
+                        if connection.features.interprets_empty_strings_as_nulls
+                        else None
+                    ),
                 ),
             ],
         )
diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py
index 29212b6e24..e576e6e464 100644
--- a/tests/db_functions/datetime/test_extract_trunc.py
+++ b/tests/db_functions/datetime/test_extract_trunc.py
@@ -113,9 +113,11 @@ class DateFunctionTests(TestCase):
             end_date=end_datetime.date() if end_datetime else None,
             start_time=start_datetime.time() if start_datetime else None,
             end_time=end_datetime.time() if end_datetime else None,
-            duration=(end_datetime - start_datetime)
-            if start_datetime and end_datetime
-            else None,
+            duration=(
+                (end_datetime - start_datetime)
+                if start_datetime and end_datetime
+                else None
+            ),
         )

     def test_extract_year_exact_lookup(self):
diff --git a/tests/db_functions/models.py b/tests/db_functions/models.py
index d6a06511bc..c126f1bae1 100644
--- a/tests/db_functions/models.py
+++ b/tests/db_functions/models.py
@@ -1,6 +1,7 @@
 """
 Tests for built in Function expressions.
 """
+
 from django.db import models


diff --git a/tests/db_functions/text/test_md5.py b/tests/db_functions/text/test_md5.py
index fd0aec58f2..4fd66f0397 100644
--- a/tests/db_functions/text/test_md5.py
+++ b/tests/db_functions/text/test_md5.py
@@ -35,9 +35,11 @@ class MD5Tests(TestCase):
                 "ca6d48f6772000141e66591aee49d56c",
                 "bf2c13bc1154e3d2e7df848cbc8be73d",
                 "d41d8cd98f00b204e9800998ecf8427e",
-                "d41d8cd98f00b204e9800998ecf8427e"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "d41d8cd98f00b204e9800998ecf8427e"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha1.py b/tests/db_functions/text/test_sha1.py
index 175c5727ff..ef846d07aa 100644
--- a/tests/db_functions/text/test_sha1.py
+++ b/tests/db_functions/text/test_sha1.py
@@ -35,9 +35,11 @@ class SHA1Tests(TestCase):
                 "0781e0745a2503e6ded05ed5bc554c421d781b0c",
                 "198d15ea139de04060caf95bc3e0ec5883cba881",
                 "da39a3ee5e6b4b0d3255bfef95601890afd80709",
-                "da39a3ee5e6b4b0d3255bfef95601890afd80709"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "da39a3ee5e6b4b0d3255bfef95601890afd80709"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha224.py b/tests/db_functions/text/test_sha224.py
index a6254f43e3..60d9e378a6 100644
--- a/tests/db_functions/text/test_sha224.py
+++ b/tests/db_functions/text/test_sha224.py
@@ -37,9 +37,11 @@ class SHA224Tests(TestCase):
                 "2297904883e78183cb118fc3dc21a610d60daada7b6ebdbc85139f4d",
                 "eba942746e5855121d9d8f79e27dfdebed81adc85b6bf41591203080",
                 "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
-                "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha256.py b/tests/db_functions/text/test_sha256.py
index b399dbecd3..0cf72783e7 100644
--- a/tests/db_functions/text/test_sha256.py
+++ b/tests/db_functions/text/test_sha256.py
@@ -35,9 +35,11 @@ class SHA256Tests(TestCase):
                 "6e4cce20cd83fc7c202f21a8b2452a68509cf24d1c272a045b5e0cfc43f0d94e",
                 "3ad2039e3ec0c88973ae1c0fce5a3dbafdd5a1627da0a92312c54ebfcf43988e",
                 "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
-                "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha384.py b/tests/db_functions/text/test_sha384.py
index 250cadda4a..313f6e6d78 100644
--- a/tests/db_functions/text/test_sha384.py
+++ b/tests/db_functions/text/test_sha384.py
@@ -39,10 +39,12 @@ class SHA384Tests(TestCase):
                 "26676a43c7ba378621175853b0",
                 "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
                 "bfe76f65fbd51ad2f14898b95b",
-                "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
-                "bfe76f65fbd51ad2f14898b95b"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274ede"
+                    "bfe76f65fbd51ad2f14898b95b"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_functions/text/test_sha512.py b/tests/db_functions/text/test_sha512.py
index f5a7ad4ae5..b4c7a4bbd8 100644
--- a/tests/db_functions/text/test_sha512.py
+++ b/tests/db_functions/text/test_sha512.py
@@ -39,10 +39,12 @@ class SHA512Tests(TestCase):
                 "172d88798345a3a7666faf5f35a144c60812d3234dcd35f444624f2faee16857",
                 "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
                 "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
-                "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
-                "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
-                if connection.features.interprets_empty_strings_as_nulls
-                else None,
+                (
+                    "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce"
+                    "47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
+                    if connection.features.interprets_empty_strings_as_nulls
+                    else None
+                ),
             ],
         )

diff --git a/tests/db_utils/tests.py b/tests/db_utils/tests.py
index a2d9cc7b5e..4028a8acdf 100644
--- a/tests/db_utils/tests.py
+++ b/tests/db_utils/tests.py
@@ -1,4 +1,5 @@
 """Tests for django.db.utils."""
+
 import unittest

 from django.core.exceptions import ImproperlyConfigured
diff --git a/tests/dbshell/test_sqlite.py b/tests/dbshell/test_sqlite.py
index faf9882ad9..e795f7619b 100644
--- a/tests/dbshell/test_sqlite.py
+++ b/tests/dbshell/test_sqlite.py
@@ -35,8 +35,11 @@ class SqliteDbshellCommandTestCase(SimpleTestCase):
         cmd_args = self.settings_to_cmd_args_env(sqlite_with_path)[0]

         msg = '"sqlite3 test.db.sqlite3" returned non-zero exit status 1.'
-        with mock.patch(
-            "django.db.backends.sqlite3.client.DatabaseClient.runshell",
-            side_effect=subprocess.CalledProcessError(returncode=1, cmd=cmd_args),
-        ), self.assertRaisesMessage(CommandError, msg):
+        with (
+            mock.patch(
+                "django.db.backends.sqlite3.client.DatabaseClient.runshell",
+                side_effect=subprocess.CalledProcessError(returncode=1, cmd=cmd_args),
+            ),
+            self.assertRaisesMessage(CommandError, msg),
+        ):
             call_command("dbshell")
diff --git a/tests/distinct_on_fields/tests.py b/tests/distinct_on_fields/tests.py
index b80878bbf2..93b3f27aec 100644
--- a/tests/distinct_on_fields/tests.py
+++ b/tests/distinct_on_fields/tests.py
@@ -76,9 +76,11 @@ class DistinctOnTests(TestCase):
             (StaffTag.objects.distinct("staff", "tag"), [self.st1]),
             (
                 Tag.objects.order_by("parent__pk", "pk").distinct("parent"),
-                [self.t2, self.t4, self.t1]
-                if connection.features.nulls_order_largest
-                else [self.t1, self.t2, self.t4],
+                (
+                    [self.t2, self.t4, self.t1]
+                    if connection.features.nulls_order_largest
+                    else [self.t1, self.t2, self.t4]
+                ),
             ),
             (
                 StaffTag.objects.select_related("staff")
diff --git a/tests/expressions/models.py b/tests/expressions/models.py
index 35985dc5f0..aa9dba3ebe 100644
--- a/tests/expressions/models.py
+++ b/tests/expressions/models.py
@@ -1,6 +1,7 @@
 """
 Tests for F() query expression syntax.
 """
+
 import uuid

 from django.db import models
diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py
index 693efc4c62..833d841361 100644
--- a/tests/file_uploads/tests.py
+++ b/tests/file_uploads/tests.py
@@ -451,9 +451,10 @@ class FileUploadTests(TestCase):

     def test_file_content(self):
         file = tempfile.NamedTemporaryFile
-        with file(suffix=".ctype_extra") as no_content_type, file(
-            suffix=".ctype_extra"
-        ) as simple_file:
+        with (
+            file(suffix=".ctype_extra") as no_content_type,
+            file(suffix=".ctype_extra") as simple_file,
+        ):
             no_content_type.write(b"no content")
             no_content_type.seek(0)

@@ -482,9 +483,10 @@ class FileUploadTests(TestCase):
     def test_content_type_extra(self):
         """Uploaded files may have content type parameters available."""
         file = tempfile.NamedTemporaryFile
-        with file(suffix=".ctype_extra") as no_content_type, file(
-            suffix=".ctype_extra"
-        ) as simple_file:
+        with (
+            file(suffix=".ctype_extra") as no_content_type,
+            file(suffix=".ctype_extra") as simple_file,
+        ):
             no_content_type.write(b"something")
             no_content_type.seek(0)

diff --git a/tests/file_uploads/uploadhandler.py b/tests/file_uploads/uploadhandler.py
index a1e1a5af05..d3c88ac305 100644
--- a/tests/file_uploads/uploadhandler.py
+++ b/tests/file_uploads/uploadhandler.py
@@ -1,6 +1,7 @@
 """
 Upload handlers to test the upload API.
 """
+
 import os
 from tempfile import NamedTemporaryFile

diff --git a/tests/files/tests.py b/tests/files/tests.py
index b3478d2732..0535914904 100644
--- a/tests/files/tests.py
+++ b/tests/files/tests.py
@@ -144,35 +144,40 @@ class FileTests(unittest.TestCase):
         self.assertEqual(list(f), ["one\n", "two\n", "three"])

     def test_readable(self):
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertTrue(test_file.readable())
         self.assertFalse(test_file.readable())

     def test_writable(self):
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertTrue(test_file.writable())
         self.assertFalse(test_file.writable())
-        with tempfile.TemporaryFile("rb") as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile("rb") as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertFalse(test_file.writable())

     def test_seekable(self):
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             self.assertTrue(test_file.seekable())
         self.assertFalse(test_file.seekable())

     def test_io_wrapper(self):
         content = "vive l'été\n"
-        with tempfile.TemporaryFile() as temp, File(
-            temp, name="something.txt"
-        ) as test_file:
+        with (
+            tempfile.TemporaryFile() as temp,
+            File(temp, name="something.txt") as test_file,
+        ):
             test_file.write(content.encode())
             test_file.seek(0)
             wrapper = TextIOWrapper(test_file, "utf-8", newline="\n")
diff --git a/tests/force_insert_update/models.py b/tests/force_insert_update/models.py
index b95b197454..e6fdfbd827 100644
--- a/tests/force_insert_update/models.py
+++ b/tests/force_insert_update/models.py
@@ -2,6 +2,7 @@
 Tests for forcing insert and update queries (instead of Django's normal
 automatic behavior).
 """
+
 from django.db import models


diff --git a/tests/forms_tests/field_tests/test_decimalfield.py b/tests/forms_tests/field_tests/test_decimalfield.py
index 9d26bc88b0..cb13e5b71b 100644
--- a/tests/forms_tests/field_tests/test_decimalfield.py
+++ b/tests/forms_tests/field_tests/test_decimalfield.py
@@ -80,8 +80,9 @@ class DecimalFieldTest(FormFieldAssertionsMixin, SimpleTestCase):
             "--0.12",
         )
         for value in values:
-            with self.subTest(value=value), self.assertRaisesMessage(
-                ValidationError, "'Enter a number.'"
+            with (
+                self.subTest(value=value),
+                self.assertRaisesMessage(ValidationError, "'Enter a number.'"),
             ):
                 f.clean(value)

diff --git a/tests/forms_tests/field_tests/test_filefield.py b/tests/forms_tests/field_tests/test_filefield.py
index 11388bdc09..9744981471 100644
--- a/tests/forms_tests/field_tests/test_filefield.py
+++ b/tests/forms_tests/field_tests/test_filefield.py
@@ -53,7 +53,8 @@ class FileFieldTest(SimpleTestCase):
         self.assertIsInstance(
             f.clean(
                 SimpleUploadedFile(
-                    "我隻氣墊船裝滿晒鱔.txt", "मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".encode()
+                    "我隻氣墊船裝滿晒鱔.txt",
+                    "मेरी मँडराने वाली नाव सर्पमीनों से भरी ह".encode(),
                 )
             ),
             SimpleUploadedFile,
diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py
index ee0ae5a426..5d5608f78b 100644
--- a/tests/forms_tests/tests/test_formsets.py
+++ b/tests/forms_tests/tests/test_formsets.py
@@ -213,9 +213,12 @@ class FormsFormsetTestCase(SimpleTestCase):
             [("Calexico", "100"), ("Any1", "42"), ("Any2", "101")]
         )

-        with mock.patch(
-            "django.forms.formsets.ManagementForm.is_valid", mocked_is_valid
-        ), mock.patch("django.forms.forms.BaseForm.full_clean", mocked_full_clean):
+        with (
+            mock.patch(
+                "django.forms.formsets.ManagementForm.is_valid", mocked_is_valid
+            ),
+            mock.patch("django.forms.forms.BaseForm.full_clean", mocked_full_clean),
+        ):
             self.assertTrue(formset.is_valid())
         self.assertEqual(is_valid_counter.call_count, 1)
         self.assertEqual(full_clean_counter.call_count, 4)
diff --git a/tests/gis_tests/gdal_tests/test_raster.py b/tests/gis_tests/gdal_tests/test_raster.py
index 67108cbb32..a5f1edef0b 100644
--- a/tests/gis_tests/gdal_tests/test_raster.py
+++ b/tests/gis_tests/gdal_tests/test_raster.py
@@ -102,8 +102,9 @@ class GDALRasterTests(SimpleTestCase):
         ]
         msg = "Geotransform must consist of 6 numeric values."
         for geotransform in error_geotransforms:
-            with self.subTest(i=geotransform), self.assertRaisesMessage(
-                ValueError, msg
+            with (
+                self.subTest(i=geotransform),
+                self.assertRaisesMessage(ValueError, msg),
             ):
                 rsmem.geotransform = geotransform

diff --git a/tests/gis_tests/geogapp/tests.py b/tests/gis_tests/geogapp/tests.py
index 8565608993..cb783b9465 100644
--- a/tests/gis_tests/geogapp/tests.py
+++ b/tests/gis_tests/geogapp/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for geography support in PostGIS
 """
+
 import os

 from django.contrib.gis.db import models
diff --git a/tests/gis_tests/test_data.py b/tests/gis_tests/test_data.py
index 0a94907320..8dd6042175 100644
--- a/tests/gis_tests/test_data.py
+++ b/tests/gis_tests/test_data.py
@@ -2,6 +2,7 @@
 This module has the mock object definitions used to hold reference geometry
 for the GEOS and GDAL tests.
 """
+
 import json
 import os

diff --git a/tests/handlers/tests.py b/tests/handlers/tests.py
index ab3837d25e..85f873f3da 100644
--- a/tests/handlers/tests.py
+++ b/tests/handlers/tests.py
@@ -244,8 +244,9 @@ class HandlerRequestTests(SimpleTestCase):
             ("/no_response_cbv/", "handlers.views.NoResponse.__call__"),
         )
         for url, view in tests:
-            with self.subTest(url=url), self.assertRaisesMessage(
-                ValueError, msg % view
+            with (
+                self.subTest(url=url),
+                self.assertRaisesMessage(ValueError, msg % view),
             ):
                 self.client.get(url)

diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py
index 0a41ea5ec6..5f3f195c78 100644
--- a/tests/httpwrappers/tests.py
+++ b/tests/httpwrappers/tests.py
@@ -352,9 +352,9 @@ class HttpResponseTests(SimpleTestCase):
         h.headers["Content-Disposition"] = 'attachment; filename="%s"' % f
         # This one is triggering https://bugs.python.org/issue20747, that is Python
         # will itself insert a newline in the header
-        h.headers[
-            "Content-Disposition"
-        ] = 'attachment; filename="EdelRot_Blu\u0308te (3)-0.JPG"'
+        h.headers["Content-Disposition"] = (
+            'attachment; filename="EdelRot_Blu\u0308te (3)-0.JPG"'
+        )

     def test_newlines_in_headers(self):
         # Bug #10188: Do not allow newlines in headers (CR or LF)
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 9e2a37b79a..dd13470a6e 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -2027,15 +2027,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'missing_field'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_table_check_constraints
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'missing_field'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_table_check_constraints
+                else []
+            ),
         )

     @skipUnlessDBFeature("supports_table_check_constraints")
@@ -2381,15 +2383,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'missing_field'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'missing_field'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )

     def test_unique_constraint_condition_pointing_to_joined_fields(self):
@@ -2409,15 +2413,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the joined field 'parent__age__lt'.",
-                    obj=Model,
-                    id="models.E041",
-                )
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the joined field 'parent__age__lt'.",
+                        obj=Model,
+                        id="models.E041",
+                    )
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )

     def test_unique_constraint_pointing_to_reverse_o2o(self):
@@ -2436,15 +2442,17 @@ class ConstraintsTests(TestCase):

         self.assertEqual(
             Model.check(databases=self.databases),
-            [
-                Error(
-                    "'constraints' refers to the nonexistent field 'model'.",
-                    obj=Model,
-                    id="models.E012",
-                ),
-            ]
-            if connection.features.supports_partial_indexes
-            else [],
+            (
+                [
+                    Error(
+                        "'constraints' refers to the nonexistent field 'model'.",
+                        obj=Model,
+                        id="models.E012",
+                    ),
+                ]
+                if connection.features.supports_partial_indexes
+                else []
+            ),
         )

     def test_deferrable_unique_constraint(self):
diff --git a/tests/m2m_and_m2o/models.py b/tests/m2m_and_m2o/models.py
index 6a5b0b29c9..4cbd1eb4e8 100644
--- a/tests/m2m_and_m2o/models.py
+++ b/tests/m2m_and_m2o/models.py
@@ -3,6 +3,7 @@ Many-to-many and many-to-one relationships to the same table

 Make sure to set ``related_name`` if you use relationships to the same table.
 """
+
 from django.db import models


diff --git a/tests/m2m_intermediary/models.py b/tests/m2m_intermediary/models.py
index 1333d14b41..f82498651f 100644
--- a/tests/m2m_intermediary/models.py
+++ b/tests/m2m_intermediary/models.py
@@ -9,6 +9,7 @@ each ``Article``-``Reporter`` combination (a ``Writer``) has a ``position``
 field, which specifies the ``Reporter``'s position for the given article
 (e.g. "Staff writer").
 """
+
 from django.db import models


diff --git a/tests/mail/tests.py b/tests/mail/tests.py
index 54a136c1a9..447f9da0d9 100644
--- a/tests/mail/tests.py
+++ b/tests/mail/tests.py
@@ -1393,8 +1393,9 @@ class BaseEmailBackendTests(HeadersCheckMixin):
         ):
             msg = "The %s setting must be a list of 2-tuples." % setting
             for value in tests:
-                with self.subTest(setting=setting, value=value), self.settings(
-                    **{setting: value}
+                with (
+                    self.subTest(setting=setting, value=value),
+                    self.settings(**{setting: value}),
                 ):
                     with self.assertRaisesMessage(ValueError, msg):
                         mail_func("subject", "content")
diff --git a/tests/many_to_many/models.py b/tests/many_to_many/models.py
index 541928e94d..42fc426990 100644
--- a/tests/many_to_many/models.py
+++ b/tests/many_to_many/models.py
@@ -6,6 +6,7 @@ To define a many-to-many relationship, use ``ManyToManyField()``.
 In this example, an ``Article`` can be published in multiple ``Publication``
 objects, and a ``Publication`` has multiple ``Article`` objects.
 """
+
 from django.db import models


diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py
index cca7e79817..56e660592a 100644
--- a/tests/many_to_one/models.py
+++ b/tests/many_to_one/models.py
@@ -3,6 +3,7 @@ Many-to-one relationships

 To define a many-to-one relationship, use ``ForeignKey()``.
 """
+
 from django.db import models


diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py
index dd220b8f4c..339b9181c3 100644
--- a/tests/middleware/test_security.py
+++ b/tests/middleware/test_security.py
@@ -248,8 +248,9 @@ class SecurityMiddlewareTest(SimpleTestCase):
             (("strict-origin", "origin"), "strict-origin,origin"),
         )
         for value, expected in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_REFERRER_POLICY=value
+            with (
+                self.subTest(value=value),
+                override_settings(SECURE_REFERRER_POLICY=value),
             ):
                 self.assertEqual(
                     self.process_response().headers["Referrer-Policy"],
@@ -287,8 +288,11 @@ class SecurityMiddlewareTest(SimpleTestCase):
         """
         tests = ["same-origin", "same-origin-allow-popups", "unsafe-none"]
         for value in tests:
-            with self.subTest(value=value), override_settings(
-                SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+            with (
+                self.subTest(value=value),
+                override_settings(
+                    SECURE_CROSS_ORIGIN_OPENER_POLICY=value,
+                ),
             ):
                 self.assertEqual(
                     self.process_response().headers["Cross-Origin-Opener-Policy"],
diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py
index 2153a0bb5a..4771bbe49a 100644
--- a/tests/middleware/tests.py
+++ b/tests/middleware/tests.py
@@ -851,9 +851,9 @@ class GZipMiddlewareTest(SimpleTestCase):
     def setUp(self):
         self.req = self.request_factory.get("/")
         self.req.META["HTTP_ACCEPT_ENCODING"] = "gzip, deflate"
-        self.req.META[
-            "HTTP_USER_AGENT"
-        ] = "Mozilla/5.0 (Windows NT 5.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
+        self.req.META["HTTP_USER_AGENT"] = (
+            "Mozilla/5.0 (Windows NT 5.1; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"
+        )
         self.resp = HttpResponse()
         self.resp.status_code = 200
         self.resp.content = self.compressible_string
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 387cef924a..dd7da15491 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -3087,9 +3087,11 @@ class OptimizeMigrationTests(MigrationTestBase):
             with open(initial_migration_file) as fp:
                 content = fp.read()
                 self.assertIn(
-                    '("bool", models.BooleanField'
-                    if HAS_BLACK
-                    else "('bool', models.BooleanField",
+                    (
+                        '("bool", models.BooleanField'
+                        if HAS_BLACK
+                        else "('bool', models.BooleanField"
+                    ),
                     content,
                 )
         self.assertEqual(
@@ -3116,9 +3118,11 @@ class OptimizeMigrationTests(MigrationTestBase):
             with open(initial_migration_file) as fp:
                 content = fp.read()
                 self.assertIn(
-                    '("bool", models.BooleanField'
-                    if HAS_BLACK
-                    else "('bool', models.BooleanField",
+                    (
+                        '("bool", models.BooleanField'
+                        if HAS_BLACK
+                        else "('bool', models.BooleanField"
+                    ),
                     content,
                 )
         self.assertEqual(out.getvalue(), "")
diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py
index 6232b44b98..571cb3e1a2 100644
--- a/tests/migrations/test_executor.py
+++ b/tests/migrations/test_executor.py
@@ -405,9 +405,9 @@ class ExecutorTests(MigrationTestBase):
             migrations_apps = executor.loader.project_state(
                 ("migrations", "0001_initial"),
             ).apps
-            global_apps.get_app_config("migrations").models[
-                "author"
-            ] = migrations_apps.get_model("migrations", "author")
+            global_apps.get_app_config("migrations").models["author"] = (
+                migrations_apps.get_model("migrations", "author")
+            )
             try:
                 migration = executor.loader.get_migration("auth", "0001_initial")
                 self.assertIs(executor.detect_soft_applied(None, migration)[0], True)
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index e377e4ca64..4a23b626f0 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -3509,15 +3509,17 @@ class OperationTests(OperationTestBase):
         operation.state_forwards(app_label, new_state)
         # Rename index.
         expected_queries = 1 if connection.features.can_rename_index else 2
-        with connection.schema_editor() as editor, self.assertNumQueries(
-            expected_queries
+        with (
+            connection.schema_editor() as editor,
+            self.assertNumQueries(expected_queries),
         ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         self.assertIndexNameNotExists(table_name, "pony_pink_idx")
         self.assertIndexNameExists(table_name, "new_pony_test_idx")
         # Reversal.
-        with connection.schema_editor() as editor, self.assertNumQueries(
-            expected_queries
+        with (
+            connection.schema_editor() as editor,
+            self.assertNumQueries(expected_queries),
         ):
             operation.database_backwards(app_label, editor, new_state, project_state)
         self.assertIndexNameExists(table_name, "pony_pink_idx")
@@ -4283,9 +4285,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 1)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         Pony.objects.create(pink=1, weight=4.0)
         if connection.features.supports_deferrable_unique_constraints:
@@ -4344,9 +4347,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 0)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         # Constraint doesn't work.
         Pony.objects.create(pink=1, weight=4.0)
@@ -4407,9 +4411,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 1)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         Pony.objects.create(pink=1, weight=4.0)
         if connection.features.supports_covering_indexes:
@@ -4455,9 +4460,10 @@ class OperationTests(OperationTestBase):
         )
         Pony = new_state.apps.get_model(app_label, "Pony")
         self.assertEqual(len(Pony._meta.constraints), 0)
-        with connection.schema_editor() as editor, CaptureQueriesContext(
-            connection
-        ) as ctx:
+        with (
+            connection.schema_editor() as editor,
+            CaptureQueriesContext(connection) as ctx,
+        ):
             operation.database_forwards(app_label, editor, project_state, new_state)
         # Constraint doesn't work.
         Pony.objects.create(pink=1, weight=4.0)
diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py
index 47aae186e0..ffb9f28cfa 100644
--- a/tests/model_inheritance/models.py
+++ b/tests/model_inheritance/models.py
@@ -11,6 +11,7 @@ Model inheritance exists in two varieties:

 Both styles are demonstrated here.
 """
+
 from django.db import models

 #
diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py
index 5bf1ef5db5..6b005fcef0 100644
--- a/tests/model_inheritance/tests.py
+++ b/tests/model_inheritance/tests.py
@@ -216,9 +216,11 @@ class ModelInheritanceTests(TestCase):
             GrandChild().save()

         for i, test in enumerate([a, b]):
-            with self.subTest(i=i), self.assertNumQueries(4), CaptureQueriesContext(
-                connection
-            ) as queries:
+            with (
+                self.subTest(i=i),
+                self.assertNumQueries(4),
+                CaptureQueriesContext(connection) as queries,
+            ):
                 test()
                 for query in queries:
                     sql = query["sql"]
diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py
index 1a9f953d6f..ba31048ac2 100644
--- a/tests/model_inheritance_regress/tests.py
+++ b/tests/model_inheritance_regress/tests.py
@@ -1,6 +1,7 @@
 """
 Regression tests for Model inheritance behavior.
 """
+
 import datetime
 from operator import attrgetter
 from unittest import expectedFailure
diff --git a/tests/null_fk_ordering/models.py b/tests/null_fk_ordering/models.py
index adfdbf3bea..d7b6ad8238 100644
--- a/tests/null_fk_ordering/models.py
+++ b/tests/null_fk_ordering/models.py
@@ -5,6 +5,7 @@ Regression tests for proper working of ForeignKey(null=True). Tests these bugs:
 unexpected results

 """
+
 from django.db import models


diff --git a/tests/one_to_one/models.py b/tests/one_to_one/models.py
index ca459e9edf..20b2eeec7d 100644
--- a/tests/one_to_one/models.py
+++ b/tests/one_to_one/models.py
@@ -5,6 +5,7 @@ To define a one-to-one relationship, use ``OneToOneField()``.

 In this example, a ``Place`` optionally can be a ``Restaurant``.
 """
+
 from django.db import models


diff --git a/tests/order_with_respect_to/base_tests.py b/tests/order_with_respect_to/base_tests.py
index ea548ca076..5170c6d957 100644
--- a/tests/order_with_respect_to/base_tests.py
+++ b/tests/order_with_respect_to/base_tests.py
@@ -2,6 +2,7 @@
 The tests are shared with contenttypes_tests and so shouldn't import or
 reference any models directly. Subclasses should inherit django.test.TestCase.
 """
+
 from operator import attrgetter


@@ -117,8 +118,11 @@ class BaseOrderWithRespectToTests:
                 return "other"

         with self.settings(DATABASE_ROUTERS=[WriteToOtherRouter()]):
-            with self.assertNumQueries(0, using="default"), self.assertNumQueries(
-                1,
-                using="other",
+            with (
+                self.assertNumQueries(0, using="default"),
+                self.assertNumQueries(
+                    1,
+                    using="other",
+                ),
             ):
                 self.q1.set_answer_order([3, 1, 2, 4])
diff --git a/tests/postgres_tests/fields.py b/tests/postgres_tests/fields.py
index 1565b5ed43..7c93d2039e 100644
--- a/tests/postgres_tests/fields.py
+++ b/tests/postgres_tests/fields.py
@@ -2,6 +2,7 @@
 Indirection layer for PostgreSQL-specific fields, so the tests don't fail when
 run with a backend other than PostgreSQL.
 """
+
 import enum

 from django.db import models
diff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py
index bf47833743..e5a8e9dbe9 100644
--- a/tests/postgres_tests/test_constraints.py
+++ b/tests/postgres_tests/test_constraints.py
@@ -300,8 +300,9 @@ class ExclusionConstraintTests(PostgreSQLTestCase):
     def test_empty_expressions(self):
         msg = "At least one expression is required to define an exclusion constraint."
         for empty_expressions in (None, []):
-            with self.subTest(empty_expressions), self.assertRaisesMessage(
-                ValueError, msg
+            with (
+                self.subTest(empty_expressions),
+                self.assertRaisesMessage(ValueError, msg),
             ):
                 ExclusionConstraint(
                     index_type="GIST",
diff --git a/tests/postgres_tests/test_search.py b/tests/postgres_tests/test_search.py
index 6f6318899c..472dca6c7b 100644
--- a/tests/postgres_tests/test_search.py
+++ b/tests/postgres_tests/test_search.py
@@ -5,6 +5,7 @@ These tests use dialogue from the 1975 film Monty Python and the Holy Grail.
 All text copyright Python (Monty) Pictures. Thanks to sacred-texts.com for the
 transcript.
 """
+
 from django.db.models import F, Value

 from . import PostgreSQLSimpleTestCase, PostgreSQLTestCase
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index c8b9a9538b..533bebfee2 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -1592,8 +1592,9 @@ class MultiDbTests(TestCase):
         )

         # Explicit using on a different db.
-        with self.assertNumQueries(1, using="default"), self.assertNumQueries(
-            1, using="other"
+        with (
+            self.assertNumQueries(1, using="default"),
+            self.assertNumQueries(1, using="other"),
         ):
             prefetch = Prefetch(
                 "first_time_authors", queryset=Author.objects.using("default")
diff --git a/tests/proxy_models/models.py b/tests/proxy_models/models.py
index 604136b5ac..c0277e093f 100644
--- a/tests/proxy_models/models.py
+++ b/tests/proxy_models/models.py
@@ -4,6 +4,7 @@ they will take data directly from the table of their base class table rather
 than using a new table of their own. This allows them to act as simple proxies,
 providing a modified interface to the data from the base class.
 """
+
 from django.db import models

 # A couple of managers for testing managing overriding in proxy model cases.
diff --git a/tests/queries/models.py b/tests/queries/models.py
index 23c41e3374..9f4cf040b6 100644
--- a/tests/queries/models.py
+++ b/tests/queries/models.py
@@ -1,6 +1,7 @@
 """
 Various complex queries that have been problematic in the past.
 """
+
 import datetime

 from django.db import models
diff --git a/tests/requests_tests/test_accept_header.py b/tests/requests_tests/test_accept_header.py
index c6eed0e479..5afb9e9993 100644
--- a/tests/requests_tests/test_accept_header.py
+++ b/tests/requests_tests/test_accept_header.py
@@ -68,9 +68,9 @@ class AcceptHeaderTests(TestCase):

     def test_accept_headers(self):
         request = HttpRequest()
-        request.META[
-            "HTTP_ACCEPT"
-        ] = "text/html, application/xhtml+xml,application/xml ;q=0.9,*/*;q=0.8"
+        request.META["HTTP_ACCEPT"] = (
+            "text/html, application/xhtml+xml,application/xml ;q=0.9,*/*;q=0.8"
+        )
         self.assertEqual(
             [str(accepted_type) for accepted_type in request.accepted_types],
             [
@@ -94,9 +94,9 @@ class AcceptHeaderTests(TestCase):

     def test_request_accepts_some(self):
         request = HttpRequest()
-        request.META[
-            "HTTP_ACCEPT"
-        ] = "text/html,application/xhtml+xml,application/xml;q=0.9"
+        request.META["HTTP_ACCEPT"] = (
+            "text/html,application/xhtml+xml,application/xml;q=0.9"
+        )
         self.assertIs(request.accepts("text/html"), True)
         self.assertIs(request.accepts("application/xhtml+xml"), True)
         self.assertIs(request.accepts("application/xml"), True)
diff --git a/tests/save_delete_hooks/models.py b/tests/save_delete_hooks/models.py
index e7c598aeae..8b9826eb14 100644
--- a/tests/save_delete_hooks/models.py
+++ b/tests/save_delete_hooks/models.py
@@ -4,6 +4,7 @@ Adding hooks before/after saving and deleting
 To execute arbitrary code around ``save()`` and ``delete()``, just subclass
 the methods.
 """
+
 from django.db import models


diff --git a/tests/schema/fields.py b/tests/schema/fields.py
index 998cb28b8c..24a26b2c2c 100644
--- a/tests/schema/fields.py
+++ b/tests/schema/fields.py
@@ -41,9 +41,11 @@ class CustomManyToManyField(RelatedField):
             related_name=related_name,
             related_query_name=related_query_name,
             limit_choices_to=limit_choices_to,
-            symmetrical=symmetrical
-            if symmetrical is not None
-            else (to == RECURSIVE_RELATIONSHIP_CONSTANT),
+            symmetrical=(
+                symmetrical
+                if symmetrical is not None
+                else (to == RECURSIVE_RELATIONSHIP_CONSTANT)
+            ),
             through=through,
             through_fields=through_fields,
             db_constraint=db_constraint,
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index 688a9f1fcf..d6b70886e5 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -632,9 +632,10 @@ class SchemaTests(TransactionTestCase):
         # Add the new field
         new_field = IntegerField(null=True)
         new_field.set_attributes_from_name("age")
-        with CaptureQueriesContext(
-            connection
-        ) as ctx, connection.schema_editor() as editor:
+        with (
+            CaptureQueriesContext(connection) as ctx,
+            connection.schema_editor() as editor,
+        ):
             editor.add_field(Author, new_field)
         drop_default_sql = editor.sql_alter_column_no_default % {
             "column": editor.quote_name(new_field.name),
@@ -2310,9 +2311,10 @@ class SchemaTests(TransactionTestCase):
         with self.assertRaises(DatabaseError):
             self.column_classes(new_field.remote_field.through)
         # Add the field
-        with CaptureQueriesContext(
-            connection
-        ) as ctx, connection.schema_editor() as editor:
+        with (
+            CaptureQueriesContext(connection) as ctx,
+            connection.schema_editor() as editor,
+        ):
             editor.add_field(LocalAuthorWithM2M, new_field)
         # Table is not rebuilt.
         self.assertEqual(
@@ -2790,9 +2792,11 @@ class SchemaTests(TransactionTestCase):
         )
         # Redundant foreign key index is not added.
         self.assertEqual(
-            len(old_constraints) - 1
-            if connection.features.supports_partial_indexes
-            else len(old_constraints),
+            (
+                len(old_constraints) - 1
+                if connection.features.supports_partial_indexes
+                else len(old_constraints)
+            ),
             len(new_constraints),
         )

diff --git a/tests/serializers/models/base.py b/tests/serializers/models/base.py
index e9f548ad3c..72a7eba35b 100644
--- a/tests/serializers/models/base.py
+++ b/tests/serializers/models/base.py
@@ -4,6 +4,7 @@ Serialization
 ``django.core.serializers`` provides interfaces to converting Django
 ``QuerySet`` objects to and from "flat" data (i.e. strings).
 """
+
 from decimal import Decimal

 from django.db import models
diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py
index 3d863a3fb2..a0e8751461 100644
--- a/tests/serializers/models/data.py
+++ b/tests/serializers/models/data.py
@@ -4,6 +4,7 @@ The following classes are for testing basic data marshalling, including
 NULL values, where allowed.
 The basic idea is to have a model for each Django data type.
 """
+
 import uuid

 from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
diff --git a/tests/serializers/models/natural.py b/tests/serializers/models/natural.py
index 1e439b34eb..cfc57b1127 100644
--- a/tests/serializers/models/natural.py
+++ b/tests/serializers/models/natural.py
@@ -1,4 +1,5 @@
 """Models for test_natural.py"""
+
 import uuid

 from django.db import models
diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py
index e1cb776d83..6361dc0c05 100644
--- a/tests/serializers/test_data.py
+++ b/tests/serializers/test_data.py
@@ -6,6 +6,7 @@ test case that is capable of testing the capabilities of
 the serializers. This includes all valid data values, plus
 forward, backwards and self references.
 """
+
 import datetime
 import decimal
 import uuid
diff --git a/tests/servers/tests.py b/tests/servers/tests.py
index 4dece98ce9..0a6b5508ff 100644
--- a/tests/servers/tests.py
+++ b/tests/servers/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for django.core.servers.
 """
+
 import errno
 import os
 import socket
diff --git a/tests/sessions_tests/models.py b/tests/sessions_tests/models.py
index 6eda26f22a..93f80b347d 100644
--- a/tests/sessions_tests/models.py
+++ b/tests/sessions_tests/models.py
@@ -3,6 +3,7 @@ This custom Session model adds an extra column to store an account ID. In
 real-world applications, it gives you the option of querying the database for
 all active sessions for a particular account.
 """
+
 from django.contrib.sessions.backends.db import SessionStore as DBStore
 from django.contrib.sessions.base_session import AbstractBaseSession
 from django.db import models
diff --git a/tests/signals/models.py b/tests/signals/models.py
index b758244749..5fb9f9f772 100644
--- a/tests/signals/models.py
+++ b/tests/signals/models.py
@@ -1,6 +1,7 @@
 """
 Testing signals before/after saving and deleting.
 """
+
 from django.db import models


diff --git a/tests/template_tests/test_parser.py b/tests/template_tests/test_parser.py
index e40a5611e2..eb3bb49113 100644
--- a/tests/template_tests/test_parser.py
+++ b/tests/template_tests/test_parser.py
@@ -2,6 +2,7 @@
 Testing some internals of the template processing.
 These are *not* examples to be copied in user code.
 """
+
 from django.template import Library, TemplateSyntaxError
 from django.template.base import (
     FilterExpression,
diff --git a/tests/test_client/tests.py b/tests/test_client/tests.py
index a5e980f3d0..5a7946b73c 100644
--- a/tests/test_client/tests.py
+++ b/tests/test_client/tests.py
@@ -19,6 +19,7 @@ testing against the contexts and templates produced by a view,
 rather than the HTML rendered to the end-user.

 """
+
 import copy
 import itertools
 import tempfile
diff --git a/tests/test_client_regress/tests.py b/tests/test_client_regress/tests.py
index 726d1dcf8f..bd5239ce24 100644
--- a/tests/test_client_regress/tests.py
+++ b/tests/test_client_regress/tests.py
@@ -1,6 +1,7 @@
 """
 Regression tests for the Test Client, especially the customized assertions.
 """
+
 import itertools
 import os

diff --git a/tests/test_runner/test_discover_runner.py b/tests/test_runner/test_discover_runner.py
index bca9037492..7a7cdfa04c 100644
--- a/tests/test_runner/test_discover_runner.py
+++ b/tests/test_runner/test_discover_runner.py
@@ -657,9 +657,10 @@ class DiscoverRunnerTests(SimpleTestCase):
     @mock.patch("faulthandler.enable")
     def test_faulthandler_enabled_fileno(self, mocked_enable):
         # sys.stderr that is not an actual file.
-        with mock.patch(
-            "faulthandler.is_enabled", return_value=False
-        ), captured_stderr():
+        with (
+            mock.patch("faulthandler.is_enabled", return_value=False),
+            captured_stderr(),
+        ):
             DiscoverRunner(enable_faulthandler=True)
             mocked_enable.assert_called()

diff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py
index 28145be3db..9cdfd42aaa 100644
--- a/tests/test_runner/tests.py
+++ b/tests/test_runner/tests.py
@@ -1,6 +1,7 @@
 """
 Tests for django test runner
 """
+
 import collections.abc
 import multiprocessing
 import os
@@ -961,17 +962,21 @@ class RunTestsExceptionHandlingTests(unittest.TestCase):
         """
         Teardown functions are run when run_checks() raises SystemCheckError.
         """
-        with mock.patch(
-            "django.test.runner.DiscoverRunner.setup_test_environment"
-        ), mock.patch("django.test.runner.DiscoverRunner.setup_databases"), mock.patch(
-            "django.test.runner.DiscoverRunner.build_suite"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.run_checks", side_effect=SystemCheckError
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_databases"
-        ) as teardown_databases, mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_test_environment"
-        ) as teardown_test_environment:
+        with (
+            mock.patch("django.test.runner.DiscoverRunner.setup_test_environment"),
+            mock.patch("django.test.runner.DiscoverRunner.setup_databases"),
+            mock.patch("django.test.runner.DiscoverRunner.build_suite"),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.run_checks",
+                side_effect=SystemCheckError,
+            ),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_databases"
+            ) as teardown_databases,
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_test_environment"
+            ) as teardown_test_environment,
+        ):
             runner = DiscoverRunner(verbosity=0, interactive=False)
             with self.assertRaises(SystemCheckError):
                 runner.run_tests(
@@ -985,18 +990,22 @@ class RunTestsExceptionHandlingTests(unittest.TestCase):
         SystemCheckError is surfaced when run_checks() raises SystemCheckError
         and teardown databases() raises ValueError.
         """
-        with mock.patch(
-            "django.test.runner.DiscoverRunner.setup_test_environment"
-        ), mock.patch("django.test.runner.DiscoverRunner.setup_databases"), mock.patch(
-            "django.test.runner.DiscoverRunner.build_suite"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.run_checks", side_effect=SystemCheckError
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_databases",
-            side_effect=ValueError,
-        ) as teardown_databases, mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_test_environment"
-        ) as teardown_test_environment:
+        with (
+            mock.patch("django.test.runner.DiscoverRunner.setup_test_environment"),
+            mock.patch("django.test.runner.DiscoverRunner.setup_databases"),
+            mock.patch("django.test.runner.DiscoverRunner.build_suite"),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.run_checks",
+                side_effect=SystemCheckError,
+            ),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_databases",
+                side_effect=ValueError,
+            ) as teardown_databases,
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_test_environment"
+            ) as teardown_test_environment,
+        ):
             runner = DiscoverRunner(verbosity=0, interactive=False)
             with self.assertRaises(SystemCheckError):
                 runner.run_tests(
@@ -1010,18 +1019,19 @@ class RunTestsExceptionHandlingTests(unittest.TestCase):
         Exceptions on teardown are surfaced if no exceptions happen during
         run_checks().
         """
-        with mock.patch(
-            "django.test.runner.DiscoverRunner.setup_test_environment"
-        ), mock.patch("django.test.runner.DiscoverRunner.setup_databases"), mock.patch(
-            "django.test.runner.DiscoverRunner.build_suite"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.run_checks"
-        ), mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_databases",
-            side_effect=ValueError,
-        ) as teardown_databases, mock.patch(
-            "django.test.runner.DiscoverRunner.teardown_test_environment"
-        ) as teardown_test_environment:
+        with (
+            mock.patch("django.test.runner.DiscoverRunner.setup_test_environment"),
+            mock.patch("django.test.runner.DiscoverRunner.setup_databases"),
+            mock.patch("django.test.runner.DiscoverRunner.build_suite"),
+            mock.patch("django.test.runner.DiscoverRunner.run_checks"),
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_databases",
+                side_effect=ValueError,
+            ) as teardown_databases,
+            mock.patch(
+                "django.test.runner.DiscoverRunner.teardown_test_environment"
+            ) as teardown_test_environment,
+        ):
             runner = DiscoverRunner(verbosity=0, interactive=False)
             with self.assertRaises(ValueError):
                 # Suppress the output when running TestDjangoTestCase.
diff --git a/tests/transactions/models.py b/tests/transactions/models.py
index 9506bace35..3d4c7d7e44 100644
--- a/tests/transactions/models.py
+++ b/tests/transactions/models.py
@@ -6,6 +6,7 @@ each transaction upon a write, but you can decorate a function to get
 commit-on-success behavior. Alternatively, you can manage the transaction
 manually.
 """
+
 from django.db import models


diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index 89dfd0deba..8384f55b3c 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -1,6 +1,7 @@
 """
 Unit tests for reverse URL lookups.
 """
+
 import pickle
 import sys
 import threading
diff --git a/tests/urls.py b/tests/urls.py
index 7d3a3a790a..67c4d4091b 100644
--- a/tests/urls.py
+++ b/tests/urls.py
@@ -3,5 +3,4 @@ should be added within the test folders, and use TestCase.urls to set them.
 This helps the tests remain isolated.
 """

-
 urlpatterns = []
diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py
index 07229f25ed..d5d90b68fc 100644
--- a/tests/utils_tests/test_datastructures.py
+++ b/tests/utils_tests/test_datastructures.py
@@ -1,6 +1,7 @@
 """
 Tests for stuff in django.utils.datastructures.
 """
+
 import collections.abc
 import copy
 import pickle
diff --git a/tests/utils_tests/test_jslex.py b/tests/utils_tests/test_jslex.py
index ee13eb4d64..59551930c6 100644
--- a/tests/utils_tests/test_jslex.py
+++ b/tests/utils_tests/test_jslex.py
@@ -1,4 +1,5 @@
 """Tests for jslex."""
+
 # originally from https://bitbucket.org/ned/jslex

 from django.test import SimpleTestCase
diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py
index 65f9db89bf..d9e101703c 100644
--- a/tests/view_tests/tests/test_debug.py
+++ b/tests/view_tests/tests/test_debug.py
@@ -332,14 +332,17 @@ class DebugViewTests(SimpleTestCase):
         with tempfile.NamedTemporaryFile(prefix=template_name) as tmpfile:
             tempdir = os.path.dirname(tmpfile.name)
             template_path = os.path.join(tempdir, template_name)
-            with override_settings(
-                TEMPLATES=[
-                    {
-                        "BACKEND": "django.template.backends.django.DjangoTemplates",
-                        "DIRS": [tempdir],
-                    }
-                ]
-            ), self.assertLogs("django.request", "ERROR"):
+            with (
+                override_settings(
+                    TEMPLATES=[
+                        {
+                            "BACKEND": "django.template.backends.django.DjangoTemplates",
+                            "DIRS": [tempdir],
+                        }
+                    ]
+                ),
+                self.assertLogs("django.request", "ERROR"),
+            ):
                 response = self.client.get(
                     reverse(
                         "raises_template_does_not_exist", kwargs={"path": template_name}
--------
2025-01-25 11:39:24,777 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.psf_s_requests-6028. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-25 11:39:24,777 - INFO - Logging LLM completions for instance psf__requests-6028 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/Qwen2.5-Coder-14B-Instruct_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/psf__requests-6028
