2025-01-25 11:44:25,417 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze
2025-01-25 11:44:25,423 - INFO - [runtime 75fd2a09-35e1-4a34-9a19-ff6c262d71f0-ca1176d6574266f5] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vd0dv4kwvlfoa297_1nhip1b65cn5t1ze
2025-01-25 11:44:26,889 - INFO - [runtime 75fd2a09-35e1-4a34-9a19-ff6c262d71f0-ca1176d6574266f5] Container started: openhands-runtime-75fd2a09-35e1-4a34-9a19-ff6c262d71f0-ca1176d6574266f5. VSCode URL: None
2025-01-25 11:44:26,890 - INFO - [runtime 75fd2a09-35e1-4a34-9a19-ff6c262d71f0-ca1176d6574266f5] Waiting for client to become ready at http://localhost:38006...
2025-01-25 11:44:56,985 - INFO - [runtime 75fd2a09-35e1-4a34-9a19-ff6c262d71f0-ca1176d6574266f5] Runtime is ready.
2025-01-25 11:44:57,626 - INFO - ------------------------------
2025-01-25 11:44:57,627 - INFO - BEGIN Runtime Initialization Fn
2025-01-25 11:44:57,627 - INFO - ------------------------------
2025-01-25 11:44:57,627 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-6197' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-25 11:44:58,255 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:44:58,255 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-25 11:44:58,883 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:44:58,884 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-25 11:44:59,510 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:44:59,520 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-25 11:45:00,147 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=pytest-dev__pytest-6197
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:00,147 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-25 11:45:00,775 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:00,775 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-25 11:45:01,906 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__5.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:01,906 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.2
2025-01-25 11:45:02,534 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:02,535 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-25 11:45:03,163 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at e856638ba Preparing release version 5.2.3 (#6190)
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:03,163 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-25 11:45:03,792 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:03,793 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-25 11:45:04,419 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 11:45:04,419 - INFO - ------------------------------
2025-01-25 11:45:04,419 - INFO - END Runtime Initialization Fn
2025-01-25 11:45:04,420 - INFO - ------------------------------
2025-01-25 11:45:04,421 - INFO - Function calling not enabled for model hosted_vllm/Qwen/Qwen2.5-Coder-14B-Instruct. Mocking function calling via prompting.
2025-01-25 11:45:04,425 - INFO - [runtime 75fd2a09-35e1-4a34-9a19-ff6c262d71f0-ca1176d6574266f5] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-25 11:45:04,443 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-25 11:45:04,444 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-25 11:45:18,495 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-25 11:45:46,306 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-25 11:46:04,892 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-25 11:46:17,286 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-25 11:46:41,764 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-25 11:47:21,183 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-25 11:47:45,018 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-25 11:47:54,778 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-25 11:48:38,764 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-25 11:49:55,282 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-25 11:50:05,287 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-25 11:50:44,867 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-25 11:51:51,610 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-25 11:52:08,499 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-25 11:52:50,640 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-25 11:53:52,003 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-25 11:54:01,072 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-25 11:55:07,906 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-25 11:55:21,896 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-25 11:56:29,380 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-25 11:56:42,316 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-25 11:57:56,575 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-25 11:58:07,224 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-25 11:59:17,860 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-25 11:59:28,917 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-25 12:00:41,154 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-25 12:00:53,555 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-25 12:02:10,230 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-25 12:02:26,122 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-25 12:03:58,532 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-25 12:03:58,532 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-25 12:03:58,533 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-25 12:03:58,534 - WARNING - Stopping agent due to traffic control
2025-01-25 12:03:58,534 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-25 12:03:59,519 - INFO - ------------------------------
2025-01-25 12:03:59,519 - INFO - BEGIN Runtime Completion Fn
2025-01-25 12:03:59,519 - INFO - ------------------------------
2025-01-25 12:03:59,520 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.2
2025-01-25 12:04:00,148 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 12:04:00,148 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-25 12:04:00,774 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 12:04:00,774 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-25 12:04:01,400 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 12:04:01,400 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached e856638ba086fcf5bebf1bebea32d5cf78de87b4
2025-01-25 12:04:02,027 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fd22e935c377",
  "working_dir": "/workspace/pytest-dev__pytest__5.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/foobar/__init__.py b/foobar/__init__.py
new file mode 100644
index 000000000..2cfffa40d
--- /dev/null
+++ b/foobar/__init__.py
@@ -0,0 +1 @@
+assert False
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..5a7c8a6b8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,7 @@
+import pytest
+
+def test_example():
+    assert True
+
+if __name__ == "__main__":
+    pytest.main(["-v", "foobar/__init__.py"])
\ No newline at end of file
diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index 3c205027d..954de9c89 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -281,6 +281,208 @@ def _in_venv(path):


 def pytest_ignore_collect(path, config):
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
     ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
     ignore_paths = ignore_paths or []
     excludeopt = config.getoption("ignore")
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 12:04:02,028 - INFO - ------------------------------
2025-01-25 12:04:02,028 - INFO - END Runtime Completion Fn
2025-01-25 12:04:02,028 - INFO - ------------------------------
2025-01-25 12:04:02,028 - INFO - Got git diff for instance pytest-dev__pytest-6197:
--------
diff --git a/foobar/__init__.py b/foobar/__init__.py
new file mode 100644
index 000000000..2cfffa40d
--- /dev/null
+++ b/foobar/__init__.py
@@ -0,0 +1 @@
+assert False
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..5a7c8a6b8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,7 @@
+import pytest
+
+def test_example():
+    assert True
+
+if __name__ == "__main__":
+    pytest.main(["-v", "foobar/__init__.py"])
\ No newline at end of file
diff --git a/src/_pytest/main.py b/src/_pytest/main.py
index 3c205027d..954de9c89 100644
--- a/src/_pytest/main.py
+++ b/src/_pytest/main.py
@@ -281,6 +281,208 @@ def _in_venv(path):


 def pytest_ignore_collect(path, config):
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
+    ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
+    ignore_paths = ignore_paths or []
+    excludeopt = config.getoption("ignore")
+    if excludeopt:
+        ignore_paths.extend([py.path.local(x) for x in excludeopt])
+    if py.path.local(path) in ignore_paths:
+        return True
+    ignore_globs = config._getconftest_pathlist("collect_ignore_glob", path=path.dirpath())
+    ignore_globs = ignore_globs or []
+    excludeglobopt = config.getoption("ignore_glob")
+    if excludeglobopt:
+        ignore_globs.extend([py.path.local(x) for x in excludeglobopt])
+    if any(fnmatch.fnmatch(str(path), str(glob)) for glob in ignore_globs):
+        return True
+    allow_in_venv = config.getoption("collect_in_virtualenv")
+    if not allow_in_venv and _in_venv(path):
+        return True
+    return False
+    if path.basename == "__init__.py" and not path.pardir.join("__init__.py").check():
+        return True
     ignore_paths = config._getconftest_pathlist("collect_ignore", path=path.dirpath())
     ignore_paths = ignore_paths or []
     excludeopt = config.getoption("ignore")
--------
2025-01-25 12:04:03,127 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sympy_s_sympy-15599. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-25 12:04:03,127 - INFO - Logging LLM completions for instance sympy__sympy-15599 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/Qwen2.5-Coder-14B-Instruct_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/sympy__sympy-15599
