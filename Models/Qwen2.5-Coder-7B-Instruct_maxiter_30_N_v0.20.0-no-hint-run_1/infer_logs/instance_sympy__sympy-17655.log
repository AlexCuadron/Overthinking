2025-01-25 21:10:55,737 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_996x1chz70ogiz5a_1nhip1b65cn5t1ze
2025-01-25 21:10:55,742 - INFO - [runtime 8d268c56-80ca-46e7-a734-69aefcd12d77-1850a55af00e2f60] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_996x1chz70ogiz5a_1nhip1b65cn5t1ze
2025-01-25 21:10:57,334 - INFO - [runtime 8d268c56-80ca-46e7-a734-69aefcd12d77-1850a55af00e2f60] Container started: openhands-runtime-8d268c56-80ca-46e7-a734-69aefcd12d77-1850a55af00e2f60. VSCode URL: None
2025-01-25 21:10:57,334 - INFO - [runtime 8d268c56-80ca-46e7-a734-69aefcd12d77-1850a55af00e2f60] Waiting for client to become ready at http://localhost:38150...
2025-01-25 21:11:29,446 - INFO - [runtime 8d268c56-80ca-46e7-a734-69aefcd12d77-1850a55af00e2f60] Runtime is ready.
2025-01-25 21:11:30,087 - INFO - ------------------------------
2025-01-25 21:11:30,088 - INFO - BEGIN Runtime Initialization Fn
2025-01-25 21:11:30,088 - INFO - ------------------------------
2025-01-25 21:11:30,088 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-17655' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-25 21:11:30,715 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:30,715 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-25 21:11:31,343 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:31,344 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-25 21:11:31,971 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:31,982 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-25 21:11:32,608 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-17655
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:32,608 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-25 21:11:33,237 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:33,237 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-25 21:11:35,377 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.5
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:35,378 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.5
2025-01-25 21:11:36,011 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:36,012 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-25 21:11:36,638 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at f5e965947a Merge pull request #17495 from oscargus/Sreplace
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:36,639 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-25 21:11:37,267 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:37,268 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-25 21:11:37,893 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:11:37,894 - INFO - ------------------------------
2025-01-25 21:11:37,894 - INFO - END Runtime Initialization Fn
2025-01-25 21:11:37,894 - INFO - ------------------------------
2025-01-25 21:11:37,896 - INFO - Function calling not enabled for model hosted_vllm/Qwen/Qwen2.5-Coder-7B-Instruct. Mocking function calling via prompting.
2025-01-25 21:11:37,900 - INFO - [runtime 8d268c56-80ca-46e7-a734-69aefcd12d77-1850a55af00e2f60] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-01-25 21:11:37,919 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-25 21:11:37,919 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-25 21:11:42,227 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-25 21:11:56,492 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-25 21:12:02,134 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-25 21:12:16,616 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-25 21:12:23,052 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-25 21:12:35,610 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-25 21:12:50,565 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-25 21:13:03,040 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-25 21:13:14,367 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-25 21:13:26,945 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-25 21:13:40,335 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-25 21:13:51,576 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-25 21:14:04,193 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-25 21:14:16,430 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-25 21:14:30,773 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-25 21:14:45,879 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-25 21:14:56,948 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-25 21:15:07,762 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-25 21:15:18,667 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-25 21:15:30,698 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-25 21:15:41,297 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-25 21:15:52,318 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-25 21:16:02,709 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-25 21:16:12,820 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-25 21:16:22,731 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-25 21:16:32,360 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-25 21:16:43,169 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-25 21:16:52,800 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-25 21:17:01,692 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-25 21:17:11,282 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-25 21:17:11,283 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-25 21:17:11,284 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-25 21:17:11,284 - WARNING - Stopping agent due to traffic control
2025-01-25 21:17:11,285 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-25 21:17:12,227 - INFO - ------------------------------
2025-01-25 21:17:12,227 - INFO - BEGIN Runtime Completion Fn
2025-01-25 21:17:12,227 - INFO - ------------------------------
2025-01-25 21:17:12,228 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.5
2025-01-25 21:17:12,854 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:17:12,854 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-25 21:17:13,480 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:17:13,480 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-25 21:17:14,105 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:17:14,105 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached f5e965947af2410ded92cfad987aaf45262ea434
2025-01-25 21:17:14,731 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c5d7b27b1405",
  "working_dir": "/workspace/sympy__sympy__1.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4eb65c120e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+
+# This line works fine
+result1 = point1 + point2 * sympy.sympify(2.0)
+
+# This line raises an exception
+result2 = point1 + sympy.sympify(2.0) * point2
+
+print("Result 1:", result1)
+print("Result 2:", result2)
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..b681300cb6 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -183,6 +183,110 @@ def __abs__(self):
         return Point.distance(origin, self)

     def __add__(self, other):
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
         """Add other to self by incrementing self's coordinates by
         those of other.
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-25 21:17:14,732 - INFO - ------------------------------
2025-01-25 21:17:14,732 - INFO - END Runtime Completion Fn
2025-01-25 21:17:14,732 - INFO - ------------------------------
2025-01-25 21:17:14,732 - INFO - Got git diff for instance sympy__sympy-17655:
--------
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4eb65c120e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+
+# This line works fine
+result1 = point1 + point2 * sympy.sympify(2.0)
+
+# This line raises an exception
+result2 = point1 + sympy.sympify(2.0) * point2
+
+print("Result 1:", result1)
+print("Result 2:", result2)
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..b681300cb6 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -183,6 +183,110 @@ def __abs__(self):
         return Point.distance(origin, self)

     def __add__(self, other):
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
         """Add other to self by incrementing self's coordinates by
         those of other.
--------
