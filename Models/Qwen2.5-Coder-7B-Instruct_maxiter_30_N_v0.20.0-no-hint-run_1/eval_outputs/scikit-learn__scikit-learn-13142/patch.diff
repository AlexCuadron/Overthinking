diff --git a/test_gaussian_mixture.log b/test_gaussian_mixture.log
new file mode 100644
index 000000000..8614d5193
--- /dev/null
+++ b/test_gaussian_mixture.log
@@ -0,0 +1,23 @@
+no n_init
+n_init=5
+Traceback (most recent call last):
+  File "/workspace/scikit-learn__scikit-learn__0.21/test_gaussian_mixture.py", line 20, in <module>
+    test_gaussian_mixture()
+  File "/workspace/scikit-learn__scikit-learn__0.21/test_gaussian_mixture.py", line 17, in test_gaussian_mixture
+    assert_array_equal(c1, c2)
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/numpy/testing/_private/utils.py", line 931, in assert_array_equal
+    verbose=verbose, header='Arrays are not equal')
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/numpy/testing/_private/utils.py", line 840, in assert_array_compare
+    raise AssertionError(msg)
+AssertionError:
+Arrays are not equal
+
+Mismatched elements: 724 / 1000 (72.4%)
+Max absolute difference: 4
+Max relative difference: 3.
+ x: array([4, 3, 2, 1, 0, 4, 0, 0, 1, 1, 4, 3, 3, 0, 1, 0, 1, 3, 3, 3, 1, 1,
+       2, 1, 1, 4, 0, 1, 2, 1, 0, 1, 1, 3, 3, 0, 1, 4, 2, 0, 2, 3, 2, 1,
+       0, 4, 0, 1, 0, 4, 2, 0, 1, 1, 4, 1, 1, 0, 3, 1, 1, 3, 1, 1, 2, 2,...
+ y: array([4, 0, 1, 4, 0, 2, 0, 4, 3, 4, 1, 2, 3, 0, 4, 0, 4, 2, 3, 2, 4, 4,
+       3, 4, 4, 4, 1, 3, 3, 4, 0, 4, 0, 2, 1, 1, 3, 4, 3, 0, 3, 3, 3, 0,
+       0, 4, 0, 4, 0, 4, 3, 4, 3, 4, 4, 4, 4, 1, 2, 4, 1, 2, 4, 4, 3, 3,...
diff --git a/test_gaussian_mixture.py b/test_gaussian_mixture.py
new file mode 100644
index 000000000..a5dcfa28e
--- /dev/null
+++ b/test_gaussian_mixture.py
@@ -0,0 +1,20 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+X = np.random.randn(1000, 5)
+
+def test_gaussian_mixture():
+    print('no n_init')
+    gm = GaussianMixture(n_components=5)
+    c1 = gm.fit_predict(X)
+    c2 = gm.predict(X)
+    assert_array_equal(c1, c2)
+    print('n_init=5')
+    gm = GaussianMixture(n_components=5, n_init=5)
+    c1 = gm.fit_predict(X)
+    c2 = gm.predict(X)
+    assert_array_equal(c1, c2)
+
+if __name__ == '__main__':
+    test_gaussian_mixture()
\ No newline at end of file
