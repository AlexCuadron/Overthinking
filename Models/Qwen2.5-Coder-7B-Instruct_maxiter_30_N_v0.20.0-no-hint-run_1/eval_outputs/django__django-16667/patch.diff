diff --git a/repro_script.py b/repro_script.py
new file mode 100644
index 0000000000..b805014bfa
--- /dev/null
+++ b/repro_script.py
@@ -0,0 +1,216 @@
+from django import forms
+from django.forms import SelectDateWidget
+from django.http import HttpResponse
+
+class ReproForm(forms.Form):
+    def clean_my_date(self):
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+    data = self.cleaned_data['my_date']
+    if data.year < 1900 or data.year > 2100:
+        raise forms.ValidationError("Year must be between 1900 and 2100")
+    if data.month < 1 or data.month > 12:
+        raise forms.ValidationError("Month must be between 1 and 12")
+    if data.day < 1 or data.day > 31:
+        raise forms.ValidationError("Day must be between 1 and 31")
+    return data
+        data = self.cleaned_data['my_date']
+        if data.year < 1900 or data.year > 2100:
+            raise forms.ValidationError("Year must be between 1900 and 2100")
+        return data
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def repro_view(request):
+    form = ReproForm(request.GET)  # for ease of reproducibility
+    if form.is_valid():
+        return HttpResponse("ok")
+    else:
+        return HttpResponse("not ok")
+
+# urls.py
+from django.urls import path
+from django.views import View
+
+class ReproView(View):
+    def get(self, request):
+        form = ReproForm(request.GET)  # for ease of reproducibility
+        if form.is_valid():
+            return HttpResponse("ok")
+        else:
+            return HttpResponse("not ok")
+
+urlpatterns = [path('repro/', ReproView.as_view(), name='repro')]
\ No newline at end of file
