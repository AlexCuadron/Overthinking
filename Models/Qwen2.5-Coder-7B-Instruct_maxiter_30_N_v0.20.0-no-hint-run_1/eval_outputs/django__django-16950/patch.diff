diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bc93f2dcf4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,51 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django__django__5.0.settings')
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.contrib import admin
+from django.db import models
+import uuid
+
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+    class Meta:
+        abstract = True
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        'bugapp.Thing',
+        to_field='id',
+        on_delete=models.CASCADE,
+        related_name='subthings',
+    )
+
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ('name',)
+    ordering = ('pkid',)
+    inlines = (SubThingInline,)
+
+# Create a new instance of Thing and SubThing
+thing = Thing(name='Test Thing')
+thing.save()
+
+subthing = SubThing(name='Test SubThing', thing=thing)
+subthing.save()
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..9edfa59455
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,83 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'django-insecure-1234567890'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'bugapp',  # Assuming the app is named 'bugapp'
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'django.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'django.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
