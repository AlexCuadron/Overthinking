diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 5ccef38048..12f0d4caaa 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -83,7 +83,7 @@ def escapejs_filter(value):


 @register.filter(is_safe=True)
-def json_script(value, element_id):
+def json_script(value, element_id=None):
     """
     Output value JSON-encoded, wrapped in a <script type="application/json">
     tag.
diff --git a/tests/test_json_script.py b/tests/test_json_script.py
new file mode 100644
index 0000000000..481a1dd07c
--- /dev/null
+++ b/tests/test_json_script.py
@@ -0,0 +1,121 @@
+from django.test import TestCase
+from django.template import Context, Template
+from django.utils.html import json_script
+
+class TestJsonScript(TestCase):
+    def test_json_script_without_element_id(self):
+    def test_json_script_with_empty_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+
+    def test_json_script_with_invalid_element_id(self):
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" "invalid_id" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
+        context = Context({'data': {'key': 'value'}})
+        template = Template('{% load json_script %}{% json_script "data" %}')
+        rendered = template.render(context)
+        self.assertIn('data-key="value"', rendered)
\ No newline at end of file
