diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4eb65c120e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+
+# This line works fine
+result1 = point1 + point2 * sympy.sympify(2.0)
+
+# This line raises an exception
+result2 = point1 + sympy.sympify(2.0) * point2
+
+print("Result 1:", result1)
+print("Result 2:", result2)
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..b681300cb6 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -183,6 +183,110 @@ def __abs__(self):
         return Point.distance(origin, self)

     def __add__(self, other):
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
+    if isinstance(other, (int, float, sympy.Basic)):
+        return self + Point(other * self.x, other * self.y)
+    else:
+        return self._add(other)
         """Add other to self by incrementing self's coordinates by
         those of other.
