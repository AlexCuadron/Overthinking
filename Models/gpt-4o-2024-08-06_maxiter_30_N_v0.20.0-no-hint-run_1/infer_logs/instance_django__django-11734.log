2025-01-15 00:20:16,662 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo
2025-01-15 00:20:44,402 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo
2025-01-15 01:38:34,784 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo
2025-01-15 01:44:04,997 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo] build finished.
2025-01-15 01:44:05,180 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_1k6yy5wslv7hpo6s]
2025-01-15 01:44:05,341 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo, oh_v0.20.0_1k6yy5wslv7hpo6s] built successfully
2025-01-15 01:44:05,369 - INFO - [runtime e433fd2a-d686-469d-ad13-8309d6e832f1-0d2c93ec641d7c5a] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_1k6yy5wslv7hpo6s_qroup3d3os79ipoo
2025-01-15 01:44:06,080 - INFO - [runtime e433fd2a-d686-469d-ad13-8309d6e832f1-0d2c93ec641d7c5a] Container started: openhands-runtime-e433fd2a-d686-469d-ad13-8309d6e832f1-0d2c93ec641d7c5a. VSCode URL: None
2025-01-15 01:44:06,080 - INFO - [runtime e433fd2a-d686-469d-ad13-8309d6e832f1-0d2c93ec641d7c5a] Waiting for client to become ready at http://localhost:33580...
2025-01-15 01:44:42,229 - INFO - [runtime e433fd2a-d686-469d-ad13-8309d6e832f1-0d2c93ec641d7c5a] Runtime is ready.
2025-01-15 01:44:42,882 - INFO - ------------------------------
2025-01-15 01:44:42,882 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 01:44:42,882 - INFO - ------------------------------
2025-01-15 01:44:42,883 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-11734' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 01:44:43,523 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:43,524 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 01:44:44,156 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:44,156 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 01:44:44,801 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:44,812 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 01:44:45,452 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-11734
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:45,453 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 01:44:46,091 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:46,092 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 01:44:46,092 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 01:44:47,731 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:47,731 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.0
2025-01-15 01:44:48,448 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:48,450 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 01:44:50,088 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 999891bd80 Refs #29379 -- Moved autocomplete attribute to UsernameField.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:50,089 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 01:44:50,794 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:50,795 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 01:44:51,425 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:51,426 - INFO - ------------------------------
2025-01-15 01:44:51,426 - INFO - END Runtime Initialization Fn
2025-01-15 01:44:51,426 - INFO - ------------------------------
2025-01-15 01:44:51,446 - INFO - [runtime e433fd2a-d686-469d-ad13-8309d6e832f1-0d2c93ec641d7c5a] Found 0 local microagents.
2025-01-15 01:44:51,449 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 01:44:51,450 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 01:44:52,581 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 01:45:03,199 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 01:45:04,935 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 01:45:16,440 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 01:45:18,317 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 01:45:22,737 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 01:45:25,128 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 01:45:30,651 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 01:45:32,850 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 01:45:38,383 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 01:45:40,341 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 01:45:44,041 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 01:45:46,355 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 01:45:51,126 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 01:45:57,913 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 01:45:57,964 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 01:45:59,770 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 01:46:03,086 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 01:46:07,729 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 01:46:15,973 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 01:46:18,203 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 01:46:23,949 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 01:46:24,016 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 01:46:27,221 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 01:46:31,179 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 01:46:36,556 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 01:46:39,506 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 01:46:43,422 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 01:46:49,645 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 01:46:55,049 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 01:46:55,049 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 01:46:55,051 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 01:46:55,051 - WARNING - Stopping agent due to traffic control
2025-01-15 01:46:55,070 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 01:46:55,578 - INFO - ------------------------------
2025-01-15 01:46:55,578 - INFO - BEGIN Runtime Completion Fn
2025-01-15 01:46:55,578 - INFO - ------------------------------
2025-01-15 01:46:55,578 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__3.0
2025-01-15 01:46:55,727 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:55,736 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 01:46:56,399 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:56,403 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 01:46:57,572 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:57,575 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 999891bd80b3d02dd916731a7a239e1036174885
2025-01-15 01:46:58,274 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aa8b49cd71f6",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..11a11bf744
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,48 @@
+import os
+import django
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+django.setup()
+
+from django.db.models import OuterRef, Exists, Q
+from tests.queries.models import Number, Item
+
+def migrate_and_test():
+    from django.core.management import call_command
+    call_command('makemigrations', 'queries', verbosity=0)
+    call_command('migrate', verbosity=0)
+    test_exists_exclude()
+
+def test_exists_exclude():
+    # filter()
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(qs)  # works
+
+    # exclude()
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(qs)  # crashes
+    except ValueError as e:
+        print(f"Error in exclude: {e}")
+
+    # filter(~Q())
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(qs)  # crashes
+    except ValueError as e:
+        print(f"Error in ~Q: {e}")
+
+
+test_exists_exclude()
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/queries/apps.py b/tests/queries/apps.py
new file mode 100644
index 0000000000..3e91494e13
--- /dev/null
+++ b/tests/queries/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class QueriesConfig(AppConfig):
+    name = 'tests.queries'
\ No newline at end of file
diff --git a/tests/queries/migrations/0001_initial.py b/tests/queries/migrations/0001_initial.py
new file mode 100644
index 0000000000..514a1a2c8a
--- /dev/null
+++ b/tests/queries/migrations/0001_initial.py
@@ -0,0 +1,892 @@
+# Generated by Django 3.0 on 2025-01-15 01:46
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20)),
+                ('created', models.DateTimeField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Author',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('num', models.IntegerField(unique=True)),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='BaseUser',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CategoryItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Celebrity',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, verbose_name='Name')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Company',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=128)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CustomDbColumn',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('custom_column', models.IntegerField(db_column='custom_name', null=True)),
+                ('ip_address', models.GenericIPAddressField(null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CustomPk',
+            fields=[
+                ('name', models.CharField(max_length=10, primary_key=True, serialize=False)),
+                ('extra', models.CharField(max_length=10)),
+            ],
+            options={
+                'ordering': ['name', 'extra'],
+            },
+        ),
+        migrations.CreateModel(
+            name='DateTimePK',
+            fields=[
+                ('date', models.DateTimeField(auto_now_add=True, primary_key=True, serialize=False)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Detail',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='DumbCategory',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FK1',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f1', models.TextField()),
+                ('f2', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FK2',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f1', models.TextField()),
+                ('f2', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FK3',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f1', models.TextField()),
+                ('f2', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Food',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, unique=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Identifier',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Individual',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('alive', models.BooleanField()),
+            ],
+            options={
+                'db_table': 'Individual',
+            },
+        ),
+        migrations.CreateModel(
+            name='Job',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, unique=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='JobResponsibilities',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Job', to_field='name')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LeafA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LeafB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LoopX',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+            options={
+                'ordering': ['y'],
+            },
+        ),
+        migrations.CreateModel(
+            name='ModelC',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ModelD',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='NullableName',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, null=True)),
+            ],
+            options={
+                'ordering': ['id'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Number',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('num', models.IntegerField()),
+                ('other_num', models.IntegerField(null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ObjectA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ObjectB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+                ('num', models.PositiveSmallIntegerField()),
+                ('objecta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ObjectA')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Order',
+            fields=[
+                ('id', models.IntegerField(primary_key=True, serialize=False)),
+                ('name', models.CharField(default='', max_length=12, null=True)),
+            ],
+            options={
+                'ordering': ('pk',),
+            },
+        ),
+        migrations.CreateModel(
+            name='Page',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('text', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Person',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=128)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Report',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Author', to_field='num')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ReservedName',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20)),
+                ('order', models.IntegerField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='School',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='SharedConnection',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='SimpleCategory',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=15)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='SingleObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Staff',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ticket21203Parent',
+            fields=[
+                ('parentid', models.AutoField(primary_key=True, serialize=False)),
+                ('parent_bool', models.BooleanField(default=True)),
+                ('created', models.DateTimeField(auto_now=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ticket23605AParent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ticket23605C',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field_c0', models.FloatField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='X',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ChildObjectA',
+            fields=[
+                ('objecta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.ObjectA')),
+            ],
+            bases=('queries.objecta',),
+        ),
+        migrations.CreateModel(
+            name='Member',
+            fields=[
+                ('name', models.CharField(max_length=10)),
+                ('details', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='queries.Detail')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='NamedCategory',
+            fields=[
+                ('dumbcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.DumbCategory')),
+                ('name', models.CharField(max_length=10)),
+            ],
+            bases=('queries.dumbcategory',),
+        ),
+        migrations.CreateModel(
+            name='SpecialCategory',
+            fields=[
+                ('simplecategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.SimpleCategory')),
+                ('special_name', models.CharField(max_length=15)),
+            ],
+            bases=('queries.simplecategory',),
+        ),
+        migrations.CreateModel(
+            name='Ticket23605A',
+            fields=[
+                ('ticket23605aparent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.Ticket23605AParent')),
+            ],
+            bases=('queries.ticket23605aparent',),
+        ),
+        migrations.CreateModel(
+            name='TvChef',
+            fields=[
+                ('celebrity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.Celebrity')),
+            ],
+            bases=('queries.celebrity',),
+        ),
+        migrations.CreateModel(
+            name='Y',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('x1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y1', to='queries.X')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='x',
+            name='y',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Y'),
+        ),
+        migrations.CreateModel(
+            name='Valid',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('valid', models.CharField(max_length=10)),
+                ('parent', models.ManyToManyField(related_name='_valid_parent_+', to='queries.Valid')),
+            ],
+            options={
+                'ordering': ['valid'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Ticket21203Child',
+            fields=[
+                ('childid', models.AutoField(primary_key=True, serialize=False)),
+                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Ticket21203Parent')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Teacher',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('friends', models.ManyToManyField(related_name='_teacher_friends_+', to='queries.Teacher')),
+                ('schools', models.ManyToManyField(to='queries.School')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Task',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=10)),
+                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to='queries.BaseUser')),
+                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='queries.BaseUser')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Tag',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='queries.Tag')),
+                ('category', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.NamedCategory')),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Student',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.School')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Responsibility',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('description', models.CharField(max_length=20, unique=True)),
+                ('jobs', models.ManyToManyField(related_name='responsibilities', through='queries.JobResponsibilities', to='queries.Job')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ReportComment',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Report')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='RelatedObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f', models.IntegerField(null=True)),
+                ('single', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.SingleObject')),
+            ],
+            options={
+                'ordering': ['single'],
+            },
+        ),
+        migrations.CreateModel(
+            name='RelatedIndividual',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_individual', to='queries.Individual')),
+            ],
+            options={
+                'db_table': 'RelatedIndividual',
+            },
+        ),
+        migrations.CreateModel(
+            name='Related',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('custom', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='queries.CustomPk')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ranking',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('rank', models.IntegerField()),
+                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Author')),
+            ],
+            options={
+                'ordering': ('author__extra__note', 'author__name', 'rank'),
+            },
+        ),
+        migrations.CreateModel(
+            name='Program',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('identifier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='queries.Identifier')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='PointerB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SharedConnection')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='PointerA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SharedConnection')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Plaything',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('others', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.RelatedObject')),
+            ],
+            options={
+                'ordering': ['others'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Paragraph',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('text', models.TextField()),
+                ('page', models.ManyToManyField(to='queries.Page')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='OrderItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.IntegerField()),
+                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='queries.Order')),
+            ],
+            options={
+                'ordering': ('pk',),
+            },
+        ),
+        migrations.CreateModel(
+            name='OneToOneCategory',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('new_name', models.CharField(max_length=15)),
+                ('category', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Note',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('note', models.CharField(max_length=100)),
+                ('misc', models.CharField(max_length=10)),
+                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Tag')),
+            ],
+            options={
+                'ordering': ['note'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Node',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('num', models.IntegerField(unique=True)),
+                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Node', to_field='num')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MyObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=100)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='queries.MyObject')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ModelB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+                ('c', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ModelC')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ModelA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+                ('b', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.ModelB')),
+                ('d', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ModelD')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MixedCaseFieldCategoryItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('CaTeGoRy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MixedCaseDbColumnCategoryItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('category', models.ForeignKey(db_column='CaTeGoRy_Id', on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ManagedModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+                ('public', models.BooleanField(default=True)),
+                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Tag')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LoopZ',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('z', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LoopZ')),
+            ],
+            options={
+                'ordering': ['z'],
+            },
+        ),
+        migrations.CreateModel(
+            name='LoopY',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('x', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LoopX')),
+            ],
+            options={
+                'ordering': ['x'],
+            },
+        ),
+        migrations.AddField(
+            model_name='loopx',
+            name='y',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LoopY'),
+        ),
+        migrations.CreateModel(
+            name='Join',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LeafA')),
+                ('b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LeafB')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='jobresponsibilities',
+            name='responsibility',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Responsibility', to_field='description'),
+        ),
+        migrations.CreateModel(
+            name='Item',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('created', models.DateTimeField()),
+                ('modified', models.DateTimeField(blank=True, null=True)),
+                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Author')),
+                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Note')),
+                ('tags', models.ManyToManyField(blank=True, to='queries.Tag')),
+            ],
+            options={
+                'ordering': ['-note', 'name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Fan',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fan_of', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Celebrity')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ExtraInfo',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('info', models.CharField(max_length=100)),
+                ('value', models.IntegerField(null=True)),
+                ('date', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.DateTimePK')),
+                ('note', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='queries.Note')),
+            ],
+            options={
+                'ordering': ['info'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Employment',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=128)),
+                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Person')),
+                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Company')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Eaten',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('meal', models.CharField(max_length=20)),
+                ('food', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Food', to_field='name')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CustomPkTag',
+            fields=[
+                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
+                ('tag', models.CharField(max_length=20)),
+                ('custom_pk', models.ManyToManyField(to='queries.CustomPk')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Cover',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=50)),
+                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Item')),
+            ],
+            options={
+                'ordering': ['item'],
+            },
+        ),
+        migrations.AddField(
+            model_name='company',
+            name='employees',
+            field=models.ManyToManyField(related_name='employers', through='queries.Employment', to='queries.Person'),
+        ),
+        migrations.CreateModel(
+            name='CommonMixedCaseForeignKeys',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.CategoryItem')),
+                ('mixed_case_db_column_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.MixedCaseDbColumnCategoryItem')),
+                ('mixed_case_field_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.MixedCaseFieldCategoryItem')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Classroom',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20)),
+                ('has_blackboard', models.BooleanField(null=True)),
+                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.School')),
+                ('students', models.ManyToManyField(related_name='classroom', to='queries.Student')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Chapter',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.TextField()),
+                ('paragraph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Paragraph')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Channel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('identifier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='queries.Identifier')),
+                ('programs', models.ManyToManyField(to='queries.Program')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='celebrity',
+            name='greatest_fan',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Fan', unique=True),
+        ),
+        migrations.CreateModel(
+            name='CategoryRelationship',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('first', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='first_rel', to='queries.SimpleCategory')),
+                ('second', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='second_rel', to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='categoryitem',
+            name='category',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory'),
+        ),
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.TextField()),
+                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Chapter')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='BaseA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('a', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.FK1')),
+                ('b', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.FK2')),
+                ('c', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.FK3')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='author',
+            name='extra',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ExtraInfo'),
+        ),
+        migrations.CreateModel(
+            name='Annotation',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('notes', models.ManyToManyField(to='queries.Note')),
+                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Tag')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ProxyCategory',
+            fields=[
+            ],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('queries.dumbcategory',),
+        ),
+        migrations.CreateModel(
+            name='ProxyObjectA',
+            fields=[
+            ],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('queries.objecta',),
+        ),
+        migrations.CreateModel(
+            name='ProxyObjectB',
+            fields=[
+            ],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('queries.objectb',),
+        ),
+        migrations.CreateModel(
+            name='Ticket23605B',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field_b0', models.IntegerField(null=True)),
+                ('field_b1', models.BooleanField(default=False)),
+                ('modelc_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Ticket23605C')),
+                ('modela_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Ticket23605A')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='StaffUser',
+            fields=[
+                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.BaseUser')),
+                ('staff', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='queries.Staff')),
+            ],
+            bases=('queries.baseuser',),
+        ),
+        migrations.CreateModel(
+            name='ObjectC',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+                ('objecta', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.ObjectA')),
+                ('objectb', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.ObjectB')),
+                ('childobjecta', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_pk', to='queries.ChildObjectA')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Child',
+            fields=[
+                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='queries.Member')),
+                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='queries.Member')),
+            ],
+        ),
+    ]
diff --git a/tests/queries/migrations/__init__.py b/tests/queries/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/settings.py b/tests/settings.py
new file mode 100644
index 0000000000..e9ffc0a687
--- /dev/null
+++ b/tests/settings.py
@@ -0,0 +1,15 @@
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.queries',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'dummy'
+
+USE_TZ = True
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:58,277 - INFO - ------------------------------
2025-01-15 01:46:58,277 - INFO - END Runtime Completion Fn
2025-01-15 01:46:58,277 - INFO - ------------------------------
2025-01-15 01:46:58,277 - INFO - Got git diff for instance django__django-11734:
--------
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..11a11bf744
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,48 @@
+import os
+import django
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')
+django.setup()
+
+from django.db.models import OuterRef, Exists, Q
+from tests.queries.models import Number, Item
+
+def migrate_and_test():
+    from django.core.management import call_command
+    call_command('makemigrations', 'queries', verbosity=0)
+    call_command('migrate', verbosity=0)
+    test_exists_exclude()
+
+def test_exists_exclude():
+    # filter()
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(qs)  # works
+
+    # exclude()
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.exclude(tags__category_id=OuterRef('pk'))
+            )
+        ).filter(foo=True)
+        print(qs)  # crashes
+    except ValueError as e:
+        print(f"Error in exclude: {e}")
+
+    # filter(~Q())
+    try:
+        qs = Number.objects.annotate(
+            foo=Exists(
+                Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))
+            )
+        ).filter(foo=True)
+        print(qs)  # crashes
+    except ValueError as e:
+        print(f"Error in ~Q: {e}")
+
+
+test_exists_exclude()
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/queries/apps.py b/tests/queries/apps.py
new file mode 100644
index 0000000000..3e91494e13
--- /dev/null
+++ b/tests/queries/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class QueriesConfig(AppConfig):
+    name = 'tests.queries'
\ No newline at end of file
diff --git a/tests/queries/migrations/0001_initial.py b/tests/queries/migrations/0001_initial.py
new file mode 100644
index 0000000000..514a1a2c8a
--- /dev/null
+++ b/tests/queries/migrations/0001_initial.py
@@ -0,0 +1,892 @@
+# Generated by Django 3.0 on 2025-01-15 01:46
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20)),
+                ('created', models.DateTimeField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Author',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('num', models.IntegerField(unique=True)),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='BaseUser',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CategoryItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Celebrity',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, verbose_name='Name')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Company',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=128)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CustomDbColumn',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('custom_column', models.IntegerField(db_column='custom_name', null=True)),
+                ('ip_address', models.GenericIPAddressField(null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CustomPk',
+            fields=[
+                ('name', models.CharField(max_length=10, primary_key=True, serialize=False)),
+                ('extra', models.CharField(max_length=10)),
+            ],
+            options={
+                'ordering': ['name', 'extra'],
+            },
+        ),
+        migrations.CreateModel(
+            name='DateTimePK',
+            fields=[
+                ('date', models.DateTimeField(auto_now_add=True, primary_key=True, serialize=False)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Detail',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='DumbCategory',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FK1',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f1', models.TextField()),
+                ('f2', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FK2',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f1', models.TextField()),
+                ('f2', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='FK3',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f1', models.TextField()),
+                ('f2', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Food',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, unique=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Identifier',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Individual',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('alive', models.BooleanField()),
+            ],
+            options={
+                'db_table': 'Individual',
+            },
+        ),
+        migrations.CreateModel(
+            name='Job',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, unique=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='JobResponsibilities',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Job', to_field='name')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LeafA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LeafB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LoopX',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+            options={
+                'ordering': ['y'],
+            },
+        ),
+        migrations.CreateModel(
+            name='ModelC',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ModelD',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='NullableName',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20, null=True)),
+            ],
+            options={
+                'ordering': ['id'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Number',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('num', models.IntegerField()),
+                ('other_num', models.IntegerField(null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ObjectA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ObjectB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+                ('num', models.PositiveSmallIntegerField()),
+                ('objecta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ObjectA')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Order',
+            fields=[
+                ('id', models.IntegerField(primary_key=True, serialize=False)),
+                ('name', models.CharField(default='', max_length=12, null=True)),
+            ],
+            options={
+                'ordering': ('pk',),
+            },
+        ),
+        migrations.CreateModel(
+            name='Page',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('text', models.TextField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Person',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=128)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Report',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Author', to_field='num')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ReservedName',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20)),
+                ('order', models.IntegerField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='School',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='SharedConnection',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='SimpleCategory',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=15)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='SingleObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Staff',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ticket21203Parent',
+            fields=[
+                ('parentid', models.AutoField(primary_key=True, serialize=False)),
+                ('parent_bool', models.BooleanField(default=True)),
+                ('created', models.DateTimeField(auto_now=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ticket23605AParent',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ticket23605C',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field_c0', models.FloatField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='X',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ChildObjectA',
+            fields=[
+                ('objecta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.ObjectA')),
+            ],
+            bases=('queries.objecta',),
+        ),
+        migrations.CreateModel(
+            name='Member',
+            fields=[
+                ('name', models.CharField(max_length=10)),
+                ('details', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='queries.Detail')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='NamedCategory',
+            fields=[
+                ('dumbcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.DumbCategory')),
+                ('name', models.CharField(max_length=10)),
+            ],
+            bases=('queries.dumbcategory',),
+        ),
+        migrations.CreateModel(
+            name='SpecialCategory',
+            fields=[
+                ('simplecategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.SimpleCategory')),
+                ('special_name', models.CharField(max_length=15)),
+            ],
+            bases=('queries.simplecategory',),
+        ),
+        migrations.CreateModel(
+            name='Ticket23605A',
+            fields=[
+                ('ticket23605aparent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.Ticket23605AParent')),
+            ],
+            bases=('queries.ticket23605aparent',),
+        ),
+        migrations.CreateModel(
+            name='TvChef',
+            fields=[
+                ('celebrity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.Celebrity')),
+            ],
+            bases=('queries.celebrity',),
+        ),
+        migrations.CreateModel(
+            name='Y',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('x1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y1', to='queries.X')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='x',
+            name='y',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Y'),
+        ),
+        migrations.CreateModel(
+            name='Valid',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('valid', models.CharField(max_length=10)),
+                ('parent', models.ManyToManyField(related_name='_valid_parent_+', to='queries.Valid')),
+            ],
+            options={
+                'ordering': ['valid'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Ticket21203Child',
+            fields=[
+                ('childid', models.AutoField(primary_key=True, serialize=False)),
+                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Ticket21203Parent')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Teacher',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('friends', models.ManyToManyField(related_name='_teacher_friends_+', to='queries.Teacher')),
+                ('schools', models.ManyToManyField(to='queries.School')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Task',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=10)),
+                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to='queries.BaseUser')),
+                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='queries.BaseUser')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Tag',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='queries.Tag')),
+                ('category', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.NamedCategory')),
+            ],
+            options={
+                'ordering': ['name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Student',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.School')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Responsibility',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('description', models.CharField(max_length=20, unique=True)),
+                ('jobs', models.ManyToManyField(related_name='responsibilities', through='queries.JobResponsibilities', to='queries.Job')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ReportComment',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Report')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='RelatedObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('f', models.IntegerField(null=True)),
+                ('single', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.SingleObject')),
+            ],
+            options={
+                'ordering': ['single'],
+            },
+        ),
+        migrations.CreateModel(
+            name='RelatedIndividual',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_individual', to='queries.Individual')),
+            ],
+            options={
+                'db_table': 'RelatedIndividual',
+            },
+        ),
+        migrations.CreateModel(
+            name='Related',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('custom', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='queries.CustomPk')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ranking',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('rank', models.IntegerField()),
+                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Author')),
+            ],
+            options={
+                'ordering': ('author__extra__note', 'author__name', 'rank'),
+            },
+        ),
+        migrations.CreateModel(
+            name='Program',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('identifier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='queries.Identifier')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='PointerB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SharedConnection')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='PointerA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SharedConnection')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Plaything',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('others', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.RelatedObject')),
+            ],
+            options={
+                'ordering': ['others'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Paragraph',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('text', models.TextField()),
+                ('page', models.ManyToManyField(to='queries.Page')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='OrderItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.IntegerField()),
+                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='queries.Order')),
+            ],
+            options={
+                'ordering': ('pk',),
+            },
+        ),
+        migrations.CreateModel(
+            name='OneToOneCategory',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('new_name', models.CharField(max_length=15)),
+                ('category', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Note',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('note', models.CharField(max_length=100)),
+                ('misc', models.CharField(max_length=10)),
+                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Tag')),
+            ],
+            options={
+                'ordering': ['note'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Node',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('num', models.IntegerField(unique=True)),
+                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Node', to_field='num')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MyObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=100)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='queries.MyObject')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ModelB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+                ('c', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ModelC')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ModelA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.TextField()),
+                ('b', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.ModelB')),
+                ('d', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ModelD')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MixedCaseFieldCategoryItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('CaTeGoRy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MixedCaseDbColumnCategoryItem',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('category', models.ForeignKey(db_column='CaTeGoRy_Id', on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ManagedModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.CharField(max_length=10)),
+                ('public', models.BooleanField(default=True)),
+                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Tag')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LoopZ',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('z', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LoopZ')),
+            ],
+            options={
+                'ordering': ['z'],
+            },
+        ),
+        migrations.CreateModel(
+            name='LoopY',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('x', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LoopX')),
+            ],
+            options={
+                'ordering': ['x'],
+            },
+        ),
+        migrations.AddField(
+            model_name='loopx',
+            name='y',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LoopY'),
+        ),
+        migrations.CreateModel(
+            name='Join',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LeafA')),
+                ('b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.LeafB')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='jobresponsibilities',
+            name='responsibility',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Responsibility', to_field='description'),
+        ),
+        migrations.CreateModel(
+            name='Item',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('created', models.DateTimeField()),
+                ('modified', models.DateTimeField(blank=True, null=True)),
+                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Author')),
+                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Note')),
+                ('tags', models.ManyToManyField(blank=True, to='queries.Tag')),
+            ],
+            options={
+                'ordering': ['-note', 'name'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Fan',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fan_of', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Celebrity')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ExtraInfo',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('info', models.CharField(max_length=100)),
+                ('value', models.IntegerField(null=True)),
+                ('date', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.DateTimePK')),
+                ('note', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='queries.Note')),
+            ],
+            options={
+                'ordering': ['info'],
+            },
+        ),
+        migrations.CreateModel(
+            name='Employment',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=128)),
+                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Person')),
+                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Company')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Eaten',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('meal', models.CharField(max_length=20)),
+                ('food', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Food', to_field='name')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CustomPkTag',
+            fields=[
+                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
+                ('tag', models.CharField(max_length=20)),
+                ('custom_pk', models.ManyToManyField(to='queries.CustomPk')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Cover',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=50)),
+                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Item')),
+            ],
+            options={
+                'ordering': ['item'],
+            },
+        ),
+        migrations.AddField(
+            model_name='company',
+            name='employees',
+            field=models.ManyToManyField(related_name='employers', through='queries.Employment', to='queries.Person'),
+        ),
+        migrations.CreateModel(
+            name='CommonMixedCaseForeignKeys',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.CategoryItem')),
+                ('mixed_case_db_column_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.MixedCaseDbColumnCategoryItem')),
+                ('mixed_case_field_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.MixedCaseFieldCategoryItem')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Classroom',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=20)),
+                ('has_blackboard', models.BooleanField(null=True)),
+                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.School')),
+                ('students', models.ManyToManyField(related_name='classroom', to='queries.Student')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Chapter',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.TextField()),
+                ('paragraph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Paragraph')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Channel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('identifier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='queries.Identifier')),
+                ('programs', models.ManyToManyField(to='queries.Program')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='celebrity',
+            name='greatest_fan',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.Fan', unique=True),
+        ),
+        migrations.CreateModel(
+            name='CategoryRelationship',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('first', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='first_rel', to='queries.SimpleCategory')),
+                ('second', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='second_rel', to='queries.SimpleCategory')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='categoryitem',
+            name='category',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.SimpleCategory'),
+        ),
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.TextField()),
+                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Chapter')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='BaseA',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('a', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.FK1')),
+                ('b', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.FK2')),
+                ('c', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.FK3')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='author',
+            name='extra',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.ExtraInfo'),
+        ),
+        migrations.CreateModel(
+            name='Annotation',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=10)),
+                ('notes', models.ManyToManyField(to='queries.Note')),
+                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Tag')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ProxyCategory',
+            fields=[
+            ],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('queries.dumbcategory',),
+        ),
+        migrations.CreateModel(
+            name='ProxyObjectA',
+            fields=[
+            ],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('queries.objecta',),
+        ),
+        migrations.CreateModel(
+            name='ProxyObjectB',
+            fields=[
+            ],
+            options={
+                'proxy': True,
+                'indexes': [],
+                'constraints': [],
+            },
+            bases=('queries.objectb',),
+        ),
+        migrations.CreateModel(
+            name='Ticket23605B',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field_b0', models.IntegerField(null=True)),
+                ('field_b1', models.BooleanField(default=False)),
+                ('modelc_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Ticket23605C')),
+                ('modela_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queries.Ticket23605A')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='StaffUser',
+            fields=[
+                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='queries.BaseUser')),
+                ('staff', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='queries.Staff')),
+            ],
+            bases=('queries.baseuser',),
+        ),
+        migrations.CreateModel(
+            name='ObjectC',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=50)),
+                ('objecta', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.ObjectA')),
+                ('objectb', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='queries.ObjectB')),
+                ('childobjecta', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_pk', to='queries.ChildObjectA')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Child',
+            fields=[
+                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='queries.Member')),
+                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='queries.Member')),
+            ],
+        ),
+    ]
diff --git a/tests/queries/migrations/__init__.py b/tests/queries/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/settings.py b/tests/settings.py
new file mode 100644
index 0000000000..e9ffc0a687
--- /dev/null
+++ b/tests/settings.py
@@ -0,0 +1,15 @@
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.queries',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'dummy'
+
+USE_TZ = True
--------
2025-01-15 01:47:01,851 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-14765. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 01:47:01,852 - INFO - Logging LLM completions for instance django__django-14765 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/gpt-4o-2024-08-06_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-14765
