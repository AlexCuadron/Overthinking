2025-01-15 01:59:53,243 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vni49w75tvjk1po4_qroup3d3os79ipoo
2025-01-15 02:03:13,110 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vni49w75tvjk1po4_qroup3d3os79ipoo] build finished.
2025-01-15 02:03:13,146 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vni49w75tvjk1po4_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_vni49w75tvjk1po4]
2025-01-15 02:03:13,149 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_vni49w75tvjk1po4_qroup3d3os79ipoo, oh_v0.20.0_vni49w75tvjk1po4] built successfully
2025-01-15 02:03:13,221 - INFO - [runtime f860b1eb-3421-47aa-9bc3-a58e4d1a73d9-ee41e6a569fd3a7b] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_vni49w75tvjk1po4_qroup3d3os79ipoo
2025-01-15 02:03:19,468 - INFO - [runtime f860b1eb-3421-47aa-9bc3-a58e4d1a73d9-ee41e6a569fd3a7b] Container started: openhands-runtime-f860b1eb-3421-47aa-9bc3-a58e4d1a73d9-ee41e6a569fd3a7b. VSCode URL: None
2025-01-15 02:03:19,468 - INFO - [runtime f860b1eb-3421-47aa-9bc3-a58e4d1a73d9-ee41e6a569fd3a7b] Waiting for client to become ready at http://localhost:32223...
2025-01-15 02:03:57,663 - INFO - [runtime f860b1eb-3421-47aa-9bc3-a58e4d1a73d9-ee41e6a569fd3a7b] Runtime is ready.
2025-01-15 02:03:58,320 - INFO - ------------------------------
2025-01-15 02:03:58,320 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 02:03:58,320 - INFO - ------------------------------
2025-01-15 02:03:58,320 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-16819' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 02:03:58,977 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:03:58,977 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 02:03:59,629 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:03:59,629 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 02:04:00,269 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:00,279 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 02:04:00,918 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=django__django-16819
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:00,918 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 02:04:01,557 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:01,557 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 02:04:01,557 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 02:04:03,737 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__5.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:03,738 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__5.0
2025-01-15 02:04:04,388 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:04,389 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 02:04:06,036 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
Updating files: 100% (6698/6698), done.
HEAD is now at 0b0998dc15 Fixed #33759 -- Avoided unnecessary subquery in QuerySet.delete() with self-referential subqueries if supported.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:06,037 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 02:04:06,675 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:06,675 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 02:04:07,310 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:04:07,310 - INFO - ------------------------------
2025-01-15 02:04:07,310 - INFO - END Runtime Initialization Fn
2025-01-15 02:04:07,311 - INFO - ------------------------------
2025-01-15 02:04:07,331 - INFO - [runtime f860b1eb-3421-47aa-9bc3-a58e4d1a73d9-ee41e6a569fd3a7b] Found 0 local microagents.
2025-01-15 02:04:07,334 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 02:04:07,335 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 02:04:08,829 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 02:04:14,821 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 02:04:17,689 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 02:04:19,011 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 02:04:23,090 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 02:04:25,210 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 02:04:26,506 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 02:04:56,646 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 02:05:03,651 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 02:05:14,184 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 02:05:18,659 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 02:05:21,889 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 02:05:24,175 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 02:05:29,404 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 02:05:32,223 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 02:05:35,944 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 02:05:42,777 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 02:05:45,815 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 02:06:00,244 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 02:06:03,075 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 02:06:06,882 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 02:06:13,358 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 02:06:16,516 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 02:06:23,172 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2025-01-15 02:06:31,710 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2025-01-15 02:06:36,522 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2025-01-15 02:06:38,988 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2025-01-15 02:06:54,260 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2025-01-15 02:07:02,348 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2025-01-15 02:07:07,706 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2025-01-15 02:07:07,706 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-01-15 02:07:07,708 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2025-01-15 02:07:07,709 - WARNING - Stopping agent due to traffic control
2025-01-15 02:07:07,709 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-01-15 02:07:08,543 - INFO - ------------------------------
2025-01-15 02:07:08,543 - INFO - BEGIN Runtime Completion Fn
2025-01-15 02:07:08,543 - INFO - ------------------------------
2025-01-15 02:07:08,543 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/django__django__5.0
2025-01-15 02:07:09,205 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:07:09,206 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 02:07:09,867 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:07:09,867 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 02:07:10,514 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:07:10,515 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 0b0998dc151feb77068e2387c34cc50ef6b356ae
2025-01-15 02:07:11,169 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3dda8be27142",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 8829de1c03..b32cf8a8e2 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -144,6 +144,11 @@ class BaseDatabaseSchemaEditor:
     sql_alter_table_comment = "COMMENT ON TABLE %(table)s IS %(comment)s"
     sql_alter_column_comment = "COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s"

+    def has_index(self, model, index):
+        with self.connection.cursor() as cursor:
+            cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='index' AND tbl_name=? AND name=?", [model._meta.db_table, index.name])
+            return cursor.fetchone()[0] > 0
+
     def __init__(self, connection, collect_sql=False, atomic=True):
         self.connection = connection
         self.collect_sql = collect_sql
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..2e00d620ec 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -821,17 +821,20 @@ class AddIndex(IndexOperation):
         self.index = index

     def state_forwards(self, app_label, state):
-        state.add_index(app_label, self.model_name_lower, self.index)
+        if not state.has_index(app_label, self.model_name_lower, self.index.name):
+            state.add_index(app_label, self.model_name_lower, self.index)

     def database_forwards(self, app_label, schema_editor, from_state, to_state):
         model = to_state.apps.get_model(app_label, self.model_name)
         if self.allow_migrate_model(schema_editor.connection.alias, model):
-            schema_editor.add_index(model, self.index)
+            if not schema_editor.has_index(model, self.index):
+                schema_editor.add_index(model, self.index)

     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         model = from_state.apps.get_model(app_label, self.model_name)
         if self.allow_migrate_model(schema_editor.connection.alias, model):
-            schema_editor.remove_index(model, self.index)
+            if schema_editor.has_index(model, self.index):
+                schema_editor.remove_index(model, self.index)

     def deconstruct(self):
         kwargs = {
@@ -870,14 +873,16 @@ class RemoveIndex(IndexOperation):
         self.name = name

     def state_forwards(self, app_label, state):
-        state.remove_index(app_label, self.model_name_lower, self.name)
+        if state.has_index(app_label, self.model_name_lower, self.name):
+            state.remove_index(app_label, self.model_name_lower, self.name)

     def database_forwards(self, app_label, schema_editor, from_state, to_state):
         model = from_state.apps.get_model(app_label, self.model_name)
         if self.allow_migrate_model(schema_editor.connection.alias, model):
             from_model_state = from_state.models[app_label, self.model_name_lower]
             index = from_model_state.get_index_by_name(self.name)
-            schema_editor.remove_index(model, index)
+            if schema_editor.has_index(model, index):
+                schema_editor.remove_index(model, index)

     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         model = to_state.apps.get_model(app_label, self.model_name)
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..c29301b8a7 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -231,6 +231,12 @@ class ProjectState:
         model_state.options["indexes"] = new_indexes
         self.reload_model(app_label, model_name, delay=True)

+    def has_index(self, app_label, model_name, index_name):
+        model_state = self.models.get((app_label, model_name))
+        if not model_state:
+            return False
+        return any(index.name == index_name for index in model_state.options.get('indexes', []))
+
     def add_constraint(self, app_label, model_name, constraint):
         self._append_option(app_label, model_name, "constraints", constraint)

diff --git a/test_migration_optimization.py b/test_migration_optimization.py
new file mode 100644
index 0000000000..ba35c6ff27
--- /dev/null
+++ b/test_migration_optimization.py
@@ -0,0 +1,58 @@
+from django.db import migrations, models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.db.migrations.operations.models import AddIndex, RemoveIndex
+
+# Setup a test database connection
+import django
+from django.conf import settings
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+# Initialize migration executor
+from django.db import connection
+
+executor = MigrationExecutor(connection)
+
+# Define a test model state
+model_state = ProjectState()
+model_state.add_model(
+    migrations.state.ModelState(
+        app_label='test_app',
+        name='TestModel',
+        fields=[('id', models.AutoField(primary_key=True))],
+    )
+)
+
+# Define index operations
+add_index_op = AddIndex(
+    model_name='TestModel',
+    index=models.Index(fields=['id'], name='test_index')
+)
+remove_index_op = RemoveIndex(
+    model_name='TestModel',
+    name='test_index'
+)
+
+# Create the table for TestModel
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(model_state.apps.get_model('test_app', 'TestModel'))
+
+# Apply AddIndex operation
+add_index_op.state_forwards('test_app', model_state)
+add_index_op.database_forwards('test_app', executor.connection.schema_editor(), model_state, model_state)
+
+# Apply RemoveIndex operation
+remove_index_op.state_forwards('test_app', model_state)
+remove_index_op.database_forwards('test_app', executor.connection.schema_editor(), model_state, model_state)
+
+print("Migration operations executed successfully.")
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 02:07:11,169 - INFO - ------------------------------
2025-01-15 02:07:11,169 - INFO - END Runtime Completion Fn
2025-01-15 02:07:11,169 - INFO - ------------------------------
2025-01-15 02:07:11,169 - INFO - Got git diff for instance django__django-16819:
--------
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 8829de1c03..b32cf8a8e2 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -144,6 +144,11 @@ class BaseDatabaseSchemaEditor:
     sql_alter_table_comment = "COMMENT ON TABLE %(table)s IS %(comment)s"
     sql_alter_column_comment = "COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s"

+    def has_index(self, model, index):
+        with self.connection.cursor() as cursor:
+            cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='index' AND tbl_name=? AND name=?", [model._meta.db_table, index.name])
+            return cursor.fetchone()[0] > 0
+
     def __init__(self, connection, collect_sql=False, atomic=True):
         self.connection = connection
         self.collect_sql = collect_sql
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..2e00d620ec 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -821,17 +821,20 @@ class AddIndex(IndexOperation):
         self.index = index

     def state_forwards(self, app_label, state):
-        state.add_index(app_label, self.model_name_lower, self.index)
+        if not state.has_index(app_label, self.model_name_lower, self.index.name):
+            state.add_index(app_label, self.model_name_lower, self.index)

     def database_forwards(self, app_label, schema_editor, from_state, to_state):
         model = to_state.apps.get_model(app_label, self.model_name)
         if self.allow_migrate_model(schema_editor.connection.alias, model):
-            schema_editor.add_index(model, self.index)
+            if not schema_editor.has_index(model, self.index):
+                schema_editor.add_index(model, self.index)

     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         model = from_state.apps.get_model(app_label, self.model_name)
         if self.allow_migrate_model(schema_editor.connection.alias, model):
-            schema_editor.remove_index(model, self.index)
+            if schema_editor.has_index(model, self.index):
+                schema_editor.remove_index(model, self.index)

     def deconstruct(self):
         kwargs = {
@@ -870,14 +873,16 @@ class RemoveIndex(IndexOperation):
         self.name = name

     def state_forwards(self, app_label, state):
-        state.remove_index(app_label, self.model_name_lower, self.name)
+        if state.has_index(app_label, self.model_name_lower, self.name):
+            state.remove_index(app_label, self.model_name_lower, self.name)

     def database_forwards(self, app_label, schema_editor, from_state, to_state):
         model = from_state.apps.get_model(app_label, self.model_name)
         if self.allow_migrate_model(schema_editor.connection.alias, model):
             from_model_state = from_state.models[app_label, self.model_name_lower]
             index = from_model_state.get_index_by_name(self.name)
-            schema_editor.remove_index(model, index)
+            if schema_editor.has_index(model, index):
+                schema_editor.remove_index(model, index)

     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         model = to_state.apps.get_model(app_label, self.model_name)
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..c29301b8a7 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -231,6 +231,12 @@ class ProjectState:
         model_state.options["indexes"] = new_indexes
         self.reload_model(app_label, model_name, delay=True)

+    def has_index(self, app_label, model_name, index_name):
+        model_state = self.models.get((app_label, model_name))
+        if not model_state:
+            return False
+        return any(index.name == index_name for index in model_state.options.get('indexes', []))
+
     def add_constraint(self, app_label, model_name, constraint):
         self._append_option(app_label, model_name, "constraints", constraint)

diff --git a/test_migration_optimization.py b/test_migration_optimization.py
new file mode 100644
index 0000000000..ba35c6ff27
--- /dev/null
+++ b/test_migration_optimization.py
@@ -0,0 +1,58 @@
+from django.db import migrations, models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.db.migrations.operations.models import AddIndex, RemoveIndex
+
+# Setup a test database connection
+import django
+from django.conf import settings
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+# Initialize migration executor
+from django.db import connection
+
+executor = MigrationExecutor(connection)
+
+# Define a test model state
+model_state = ProjectState()
+model_state.add_model(
+    migrations.state.ModelState(
+        app_label='test_app',
+        name='TestModel',
+        fields=[('id', models.AutoField(primary_key=True))],
+    )
+)
+
+# Define index operations
+add_index_op = AddIndex(
+    model_name='TestModel',
+    index=models.Index(fields=['id'], name='test_index')
+)
+remove_index_op = RemoveIndex(
+    model_name='TestModel',
+    name='test_index'
+)
+
+# Create the table for TestModel
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(model_state.apps.get_model('test_app', 'TestModel'))
+
+# Apply AddIndex operation
+add_index_op.state_forwards('test_app', model_state)
+add_index_op.database_forwards('test_app', executor.connection.schema_editor(), model_state, model_state)
+
+# Apply RemoveIndex operation
+remove_index_op.state_forwards('test_app', model_state)
+remove_index_op.database_forwards('test_app', executor.connection.schema_editor(), model_state, model_state)
+
+print("Migration operations executed successfully.")
--------
2025-01-15 02:07:17,709 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.pydata_s_xarray-3095. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 02:07:17,709 - INFO - Logging LLM completions for instance pydata__xarray-3095 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/gpt-4o-2024-08-06_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/pydata__xarray-3095
