2025-01-15 00:20:16,651 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo
2025-01-15 00:20:44,398 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo
2025-01-15 01:38:34,776 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo
2025-01-15 01:44:02,326 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo] build finished.
2025-01-15 01:44:02,354 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo] with more generic tag [oh_v0.20.0_l12bexn09m6dp7in]
2025-01-15 01:44:02,356 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo, oh_v0.20.0_l12bexn09m6dp7in] built successfully
2025-01-15 01:44:02,369 - INFO - [runtime f1bcb546-5f1a-40e7-b369-046c26611751-fb136234c9213843] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.20.0_l12bexn09m6dp7in_qroup3d3os79ipoo
2025-01-15 01:44:04,196 - INFO - [runtime f1bcb546-5f1a-40e7-b369-046c26611751-fb136234c9213843] Container started: openhands-runtime-f1bcb546-5f1a-40e7-b369-046c26611751-fb136234c9213843. VSCode URL: None
2025-01-15 01:44:04,196 - INFO - [runtime f1bcb546-5f1a-40e7-b369-046c26611751-fb136234c9213843] Waiting for client to become ready at http://localhost:38676...
2025-01-15 01:44:42,344 - INFO - [runtime f1bcb546-5f1a-40e7-b369-046c26611751-fb136234c9213843] Runtime is ready.
2025-01-15 01:44:42,996 - INFO - ------------------------------
2025-01-15 01:44:42,996 - INFO - BEGIN Runtime Initialization Fn
2025-01-15 01:44:42,996 - INFO - ------------------------------
2025-01-15 01:44:42,998 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=astropy__astropy-8707' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2025-01-15 01:44:43,634 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:43,635 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-01-15 01:44:44,270 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:44,270 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-01-15 01:44:44,916 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:44,930 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2025-01-15 01:44:45,573 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=astropy__astropy-8707
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:45,574 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2025-01-15 01:44:46,209 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:46,209 - WARNING - Timeout greater than 600 seconds may not be supported by the runtime. Consider setting a lower timeout.
2025-01-15 01:44:46,211 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-01-15 01:44:47,431 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: astropy__astropy__3.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:47,432 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/astropy__astropy__3.1
2025-01-15 01:44:48,062 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:48,062 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2025-01-15 01:44:48,693 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at a85a0747c5 Merge pull request #8693 from taldcroft/whatsnew-aldcroft
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:48,695 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-01-15 01:44:49,324 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:49,324 - INFO - **CmdRunAction (source=None)**
COMMAND:
which python
2025-01-15 01:44:49,453 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:44:49,454 - INFO - ------------------------------
2025-01-15 01:44:49,454 - INFO - END Runtime Initialization Fn
2025-01-15 01:44:49,454 - INFO - ------------------------------
2025-01-15 01:44:49,477 - INFO - [runtime f1bcb546-5f1a-40e7-b369-046c26611751-fb136234c9213843] Found 0 local microagents.
2025-01-15 01:44:49,480 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-01-15 01:44:49,481 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2025-01-15 01:44:50,765 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2025-01-15 01:44:51,929 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2025-01-15 01:44:54,528 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2025-01-15 01:44:54,636 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2025-01-15 01:45:02,430 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2025-01-15 01:45:04,495 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2025-01-15 01:45:06,281 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2025-01-15 01:45:09,398 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2025-01-15 01:45:13,331 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2025-01-15 01:45:15,678 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2025-01-15 01:45:28,259 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2025-01-15 01:45:28,323 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2025-01-15 01:45:38,176 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2025-01-15 01:45:40,622 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2025-01-15 01:45:51,199 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2025-01-15 01:45:51,245 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2025-01-15 01:45:56,644 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2025-01-15 01:45:59,333 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2025-01-15 01:46:06,827 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2025-01-15 01:46:13,137 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2025-01-15 01:46:22,844 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2025-01-15 01:46:27,439 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2025-01-15 01:46:29,869 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-01-15 01:46:29,881 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-01-15 01:46:29,882 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2025-01-15 01:46:30,878 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-01-15 01:46:31,593 - INFO - ------------------------------
2025-01-15 01:46:31,594 - INFO - BEGIN Runtime Completion Fn
2025-01-15 01:46:31,594 - INFO - ------------------------------
2025-01-15 01:46:31,594 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/astropy__astropy__3.1
2025-01-15 01:46:31,798 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:31,798 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2025-01-15 01:46:32,433 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:32,434 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2025-01-15 01:46:33,075 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:33,076 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached a85a0747c54bac75e9c3b2fe436b105ea029d6cf
2025-01-15 01:46:33,714 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "0f7964425b60",
  "working_dir": "/workspace/astropy__astropy__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..d40fce0b76 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,14 +547,17 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
+
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
         """

         card = cls()
-        card._image = _pad(image)
+        card._image = _pad(image.decode('ascii') if isinstance(image, bytes) else image)
         card._verified = False
         return card

diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..2b1bfc0a0e 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,9 +329,12 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a byte string or unicode string containing the entire header
         data.

+        if isinstance(data, bytes):
+            data = data.decode('ascii')
+
         Parameters
         ----------
         data : str
@@ -377,7 +380,7 @@ class Header:
                 if next_image[:8] == 'CONTINUE':
                     image.append(next_image)
                     continue
-                cards.append(Card.fromstring(''.join(image)))
+                cards.append(Card.fromstring(''.join([i.decode('ascii') if isinstance(i, bytes) else i for i in image])))

             if require_full_cardlength:
                 if next_image == END_CARD:
@@ -392,7 +395,7 @@ class Header:

         # Add the last image that was found before the end, if any
         if image:
-            cards.append(Card.fromstring(''.join(image)))
+            cards.append(Card.fromstring(''.join([i.decode('ascii') if isinstance(i, bytes) else i for i in image])))

         return cls._fromcards(cards)

diff --git a/test_fromstring.py b/test_fromstring.py
new file mode 100644
index 0000000000..d2563e49ef
--- /dev/null
+++ b/test_fromstring.py
@@ -0,0 +1,36 @@
+from astropy.io.fits import Header, Card
+
+# Test data
+header_str = 'SIMPLE  =                    T / file does conform to FITS standard'
+header_bytes = header_str.encode('ascii')
+
+card_str = 'SIMPLE  =                    T'
+card_bytes = card_str.encode('ascii')
+
+# Test Header.fromstring with str
+try:
+    header = Header.fromstring(header_str)
+    print('Header.fromstring with str: Success')
+except Exception as e:
+    print(f'Header.fromstring with str: Failed with error {e}')
+
+# Test Header.fromstring with bytes
+try:
+    header = Header.fromstring(header_bytes)
+    print('Header.fromstring with bytes: Success')
+except Exception as e:
+    print(f'Header.fromstring with bytes: Failed with error {e}')
+
+# Test Card.fromstring with str
+try:
+    card = Card.fromstring(card_str)
+    print('Card.fromstring with str: Success')
+except Exception as e:
+    print(f'Card.fromstring with str: Failed with error {e}')
+
+# Test Card.fromstring with bytes
+try:
+    card = Card.fromstring(card_bytes)
+    print('Card.fromstring with bytes: Success')
+except Exception as e:
+    print(f'Card.fromstring with bytes: Failed with error {e}')
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
--END AGENT OBSERVATION--
2025-01-15 01:46:33,714 - INFO - ------------------------------
2025-01-15 01:46:33,714 - INFO - END Runtime Completion Fn
2025-01-15 01:46:33,714 - INFO - ------------------------------
2025-01-15 01:46:33,714 - INFO - Got git diff for instance astropy__astropy-8707:
--------
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..d40fce0b76 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,14 +547,17 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
+
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
         """

         card = cls()
-        card._image = _pad(image)
+        card._image = _pad(image.decode('ascii') if isinstance(image, bytes) else image)
         card._verified = False
         return card

diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..2b1bfc0a0e 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,9 +329,12 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a byte string or unicode string containing the entire header
         data.

+        if isinstance(data, bytes):
+            data = data.decode('ascii')
+
         Parameters
         ----------
         data : str
@@ -377,7 +380,7 @@ class Header:
                 if next_image[:8] == 'CONTINUE':
                     image.append(next_image)
                     continue
-                cards.append(Card.fromstring(''.join(image)))
+                cards.append(Card.fromstring(''.join([i.decode('ascii') if isinstance(i, bytes) else i for i in image])))

             if require_full_cardlength:
                 if next_image == END_CARD:
@@ -392,7 +395,7 @@ class Header:

         # Add the last image that was found before the end, if any
         if image:
-            cards.append(Card.fromstring(''.join(image)))
+            cards.append(Card.fromstring(''.join([i.decode('ascii') if isinstance(i, bytes) else i for i in image])))

         return cls._fromcards(cards)

diff --git a/test_fromstring.py b/test_fromstring.py
new file mode 100644
index 0000000000..d2563e49ef
--- /dev/null
+++ b/test_fromstring.py
@@ -0,0 +1,36 @@
+from astropy.io.fits import Header, Card
+
+# Test data
+header_str = 'SIMPLE  =                    T / file does conform to FITS standard'
+header_bytes = header_str.encode('ascii')
+
+card_str = 'SIMPLE  =                    T'
+card_bytes = card_str.encode('ascii')
+
+# Test Header.fromstring with str
+try:
+    header = Header.fromstring(header_str)
+    print('Header.fromstring with str: Success')
+except Exception as e:
+    print(f'Header.fromstring with str: Failed with error {e}')
+
+# Test Header.fromstring with bytes
+try:
+    header = Header.fromstring(header_bytes)
+    print('Header.fromstring with bytes: Success')
+except Exception as e:
+    print(f'Header.fromstring with bytes: Failed with error {e}')
+
+# Test Card.fromstring with str
+try:
+    card = Card.fromstring(card_str)
+    print('Card.fromstring with str: Success')
+except Exception as e:
+    print(f'Card.fromstring with str: Failed with error {e}')
+
+# Test Card.fromstring with bytes
+try:
+    card = Card.fromstring(card_bytes)
+    print('Card.fromstring with bytes: Success')
+except Exception as e:
+    print(f'Card.fromstring with bytes: Failed with error {e}')
--------
2025-01-15 01:46:34,941 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.django_s_django-14349. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-01-15 01:46:34,942 - INFO - Logging LLM completions for instance django__django-14349 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/gpt-4o-2024-08-06_maxiter_30_N_v0.20.0-no-hint-run_1/llm_completions/django__django-14349
