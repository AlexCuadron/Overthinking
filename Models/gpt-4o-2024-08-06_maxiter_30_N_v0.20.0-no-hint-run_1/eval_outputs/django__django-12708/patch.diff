diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..a864f010f9
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,26 @@
+# Generated by Django 3.1 on 2025-01-14 08:05
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field1', models.CharField(max_length=10)),
+                ('field2', models.CharField(max_length=10)),
+            ],
+            options={
+                'unique_together': {('field1', 'field2')},
+                'index_together': {('field1', 'field2')},
+            },
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9ea237ae01
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,65 @@
+from django.db import models, connection
+from django.core.management import call_command
+import django
+import os
+import sys
+import tempfile
+from django.apps import AppConfig
+
+# Create a temporary directory for the settings
+settings_dir = tempfile.mkdtemp()
+settings_path = os.path.join(settings_dir, 'test_settings.py')
+
+# Create a temporary directory for the app
+app_dir = os.path.join(settings_dir, 'test_app')
+os.makedirs(app_dir)
+
+# Create an __init__.py for the app
+touch_init = os.path.join(app_dir, '__init__.py')
+with open(touch_init, 'w') as f:
+    f.write('')
+settings_dir = tempfile.mkdtemp()
+settings_path = os.path.join(settings_dir, 'test_settings.py')
+
+# Create a test settings module
+with open(settings_path, 'w') as f:
+    f.write('''
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+SECRET_KEY = 'test_secret_key'
+INSTALLED_APPS = ['test_app']
+''')
+
+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'
+sys.path.insert(0, app_dir)
+sys.path.insert(0, settings_dir)
+django.setup()
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+
+class TestModel(models.Model):
+    field1 = models.CharField(max_length=10)
+    field2 = models.CharField(max_length=10)
+
+    class Meta:
+        unique_together = ('field1', 'field2')
+        index_together = ('field1', 'field2')
+
+# Run migrations
+call_command('makemigrations', '__main__', interactive=False, verbosity=0)
+call_command('migrate', interactive=False, verbosity=0)
+
+# Try to remove index_together
+try:
+    with connection.schema_editor() as schema_editor:
+        schema_editor._delete_composed_index(TestModel, ['field1', 'field2'], {'index': True}, schema_editor.sql_delete_index)
+except ValueError as e:
+    print('Error:', e)
+
+# Clean up
+os.remove(settings_path)
