diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..32027358e9 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -939,8 +939,16 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True

     def _get_FIELD_display(self, field):
+        custom_display_method = getattr(self, f'get_{field.name}_display', None)
+        if custom_display_method and callable(custom_display_method) and custom_display_method.__func__ is not self._get_FIELD_display.__func__:
+            return custom_display_method()
+        if custom_display_method and callable(custom_display_method) and not getattr(self, '_in_custom_display', False):
+            self._in_custom_display = True
+            result = custom_display_method()
+            self._in_custom_display = False
+            return result
+            return custom_display_method()
         value = getattr(self, field.attname)
-        # force_str() to coerce lazy strings.
         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)

     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cc54b98adf
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,21 @@
+import django
+from django.conf import settings
+from django.db import models
+
+settings.configure(INSTALLED_APPS=['django.contrib.contenttypes'], DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}})
+django.setup()
+
+class FooBar(models.Model):
+    class Meta:
+        app_label = 'myapp'
+    foo_bar = models.CharField("foo", choices=[(1, 'foo'), (2, 'bar')])
+
+    def __str__(self):
+        return self.get_foo_bar_display()
+
+    def get_foo_bar_display(self):
+        return "something"
+
+# Simulate the behavior
+foobar = FooBar(foo_bar=1)
+print(foobar)  # Should print "something" but will print "foo" in Django 2.2+
