diff --git a/myproject/appname/__init__.py b/myproject/appname/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/appname/admin.py b/myproject/appname/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/myproject/appname/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/myproject/appname/apps.py b/myproject/appname/apps.py
new file mode 100644
index 0000000000..d5a5b45998
--- /dev/null
+++ b/myproject/appname/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class AppnameConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "appname"
diff --git a/myproject/appname/migrations/__init__.py b/myproject/appname/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/appname/models.py b/myproject/appname/models.py
new file mode 100644
index 0000000000..b2b815b21f
--- /dev/null
+++ b/myproject/appname/models.py
@@ -0,0 +1,18 @@
+from django.db import models
+
+from django.contrib.postgres.fields import ArrayField
+
+class Profile(models.Model):
+    class Capability(models.TextChoices):
+        BASIC = ("BASIC", "Basic")
+        PROFESSIONAL = ("PROFESSIONAL", "Professional")
+
+        @classmethod
+        def default(cls) -> list[str]:
+            return [cls.BASIC]
+
+    capabilities = ArrayField(
+        models.CharField(choices=Capability.choices, max_length=30, blank=True),
+        null=True,
+        default=Capability.default
+    )
diff --git a/myproject/appname/tests.py b/myproject/appname/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/myproject/appname/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/myproject/appname/views.py b/myproject/appname/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/myproject/appname/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/myproject/manage.py b/myproject/manage.py
new file mode 100755
index 0000000000..893db8eafe
--- /dev/null
+++ b/myproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/myproject/myproject/__init__.py b/myproject/myproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/myproject/asgi.py b/myproject/myproject/asgi.py
new file mode 100644
index 0000000000..ab191894ae
--- /dev/null
+++ b/myproject/myproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_asgi_application()
diff --git a/myproject/myproject/settings.py b/myproject/myproject/settings.py
new file mode 100644
index 0000000000..83e9e34424
--- /dev/null
+++ b/myproject/myproject/settings.py
@@ -0,0 +1,23 @@
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'django.contrib.postgres',
+    'myproject.appname',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'test_db',
+        'USER': 'test_user',
+        'PASSWORD': 'test_password',
+        'HOST': 'localhost',
+        'PORT': '5432',
+    }
+}
+
+SECRET_KEY = 'test_secret_key'
+
+USE_TZ = True
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/myproject/myproject/urls.py b/myproject/myproject/urls.py
new file mode 100644
index 0000000000..523ce70c6f
--- /dev/null
+++ b/myproject/myproject/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for myproject project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/myproject/myproject/wsgi.py b/myproject/myproject/wsgi.py
new file mode 100644
index 0000000000..1de9e2cef2
--- /dev/null
+++ b/myproject/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_wsgi_application()
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..11c526e7e0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,10 @@
+# Attempt to create a migration for this model to reproduce the error
+if __name__ == "__main__":
+    import os
+    import sys
+    sys.path.insert(0, '/workspace/django__django__5.0/myproject')
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
+    import django
+    django.setup()
+    from django.core.management import call_command
+    call_command('makemigrations', 'appname')
\ No newline at end of file
