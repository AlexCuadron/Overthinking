diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..dbdd7f4726 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        imports = {'import %s' % module}
+        return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), imports


 class FloatSerializer(BaseSimpleSerializer):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9280207d83
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+import django
+from django.conf import settings
+from enum import Enum
+from django.utils.translation import gettext_lazy as _
+from django.db import models
+
+# Configure minimal settings
+settings.configure(
+    USE_I18N=True,
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+)
+django.setup()
+
+# Define the module name explicitly
+module_name = __name__
+
+class Status(Enum):
+    GOOD = _('Good')
+    BAD = _('Bad')
+
+    def __str__(self):
+        return self.name
+
+class Item(models.Model):
+    status = models.CharField(default=Status.GOOD, max_length=128)
+    class Meta:
+        app_label = 'myapp'
+
+# Simulate the migration serialization
+status_field = Item._meta.get_field('status')
+from django.db.migrations.serializer import serializer_factory
+
+# Serialize the default value
+serialized_default, _ = serializer_factory(status_field.default).serialize()
+
+# This should raise an error if the serialization is incorrect
+try:
+    # Attempt to access the enum using the serialized name
+    # Manually construct the enum access using the serialized name
+    status_enum = eval(f'Status["{Status.GOOD.name}"]')
+    if status_enum == Status.GOOD:
+        print("Success: The serialization uses the name, not the value.")
+    else:
+        print("Error: The serialization is incorrect, it should use the name, not the value.")
+    print("Success: The serialization uses the name, not the value.")
+except ValueError as e:
+    print("Error: The serialization is incorrect, it should use the name, not the value.")
+    print("Caught ValueError:", e)
\ No newline at end of file
