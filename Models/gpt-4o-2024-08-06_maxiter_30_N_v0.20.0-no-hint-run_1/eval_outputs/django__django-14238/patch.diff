diff --git a/django/db/models/options.py b/django/db/models/options.py
index 4028e05b99..cd2ab91649 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -242,7 +242,7 @@ class Options:
                 f"not be imported."
             )
             raise ImproperlyConfigured(msg) from e
-        if not issubclass(pk_class, AutoField):
+        if not issubclass(pk_class, (AutoField, models.BigAutoField, models.SmallAutoField)):
             raise ValueError(
                 f"Primary key '{pk_class_path}' referred by {source} must "
                 f"subclass AutoField."
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..282443db7b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,38 @@
+from django.conf import settings
+from django.core.management import execute_from_command_line
+from django.db import models
+import sys
+
+# Define a custom BigAutoField subclass
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+# Configure settings for the test
+settings.configure(
+    DEFAULT_AUTO_FIELD='__main__.MyBigAutoField',
+    INSTALLED_APPS=[
+        '__main__',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+)
+
+# Define a model using the custom BigAutoField
+class MyModel(models.Model):
+    id = MyBigAutoField(primary_key=True)
+
+
+    }
+)
+
+# Run Django setup to trigger the error
+try:
+    execute_from_command_line(['manage.py', 'check'])
+except Exception as e:
+    print(f"Error: {e}")
+    sys.exit(1)
+
+print("No errors detected.")
