diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..522bcaccae
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,10 @@
+from sympy.solvers.diophantine import diophantine
+from sympy.abc import m, n
+
+# Test case 1
+result1 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True)
+print("Result with syms=(m, n):", result1)
+
+# Test case 2
+result2 = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True)
+print("Result with syms=(n, m):", result2)
\ No newline at end of file
diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..6c2cccd57b 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -181,8 +181,10 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             syms = [i for i in syms if i in var]
             if syms != var:
                 dict_sym_index = dict(zip(syms, range(len(syms))))
-                return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+                solutions = diophantine(eq, param)
+                if permute:
+                    solutions = {tuple(sorted(t, key=lambda x: syms.index(var[t.index(x)]))) for t in solutions}
+                return {tuple([t[dict_sym_index[i]] for i in var]) for t in solutions}
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
