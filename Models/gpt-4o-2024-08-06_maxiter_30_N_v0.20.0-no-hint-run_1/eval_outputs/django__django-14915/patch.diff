diff --git a/django/forms/models.py b/django/forms/models.py
index 5dcf923c12..f656c5ab5a 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1170,6 +1170,8 @@ class ModelChoiceIteratorValue:
         if isinstance(other, ModelChoiceIteratorValue):
             other = other.value
         return self.value == other
+def __hash__(self):
+    return hash(self.value)


 class ModelChoiceIterator:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..41f26326d5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,46 @@
+import django
+from django.conf import settings
+from django import forms
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+# Mock model for testing
+class MockModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'tests'
+
+# Custom form with ModelChoiceField
+class MockForm(forms.Form):
+    choice = forms.ModelChoiceField(queryset=MockModel.objects.all())
+
+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):
+        context = super().create_option(name, value, label, selected, index, subindex, attrs)
+        if not value:
+            return context
+        # Simulate the error condition
+        show_fields = {1: ['first_name', 'last_name']}
+        if value in show_fields:
+            context['attrs']['data-fields'] = json.dumps(show_fields[value])
+        return context
+
+# Instantiate the form to trigger the error
+try:
+    form = MockForm()
+    print("Form created successfully.")
+except TypeError as e:
+    print(f"Error: {e}")
