diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..f993bb9c98 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()


 def fields_for_model(model, fields=None, exclude=None, widgets=None,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..68ccc59e79
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,63 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+from django.forms import ModelForm
+
+# Configure settings for a minimal Django project
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        '__main__',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+django.setup()
+
+# Define models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+class Review(models.Model):
+    book = models.ForeignKey(Book, on_delete=models.CASCADE)
+    content = models.TextField()
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+    schema_editor.create_model(Review)
+
+# Define a model form with limit_choices_to involving a join
+class ReviewForm(ModelForm):
+    class Meta:
+        model = Review
+        fields = ['book']
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.fields['book'].queryset = Book.objects.filter(
+            author__name__icontains='a'
+        )
+
+# Create test data
+Author.objects.create(name='Alice')
+Author.objects.create(name='Bob')
+Book.objects.create(title='Book 1', author=Author.objects.get(name='Alice'))
+Book.objects.create(title='Book 2', author=Author.objects.get(name='Alice'))
+Book.objects.create(title='Book 3', author=Author.objects.get(name='Bob'))
+
+# Instantiate the form and print the queryset
+form = ReviewForm()
+print("Books in form field:", list(form.fields['book'].queryset))
