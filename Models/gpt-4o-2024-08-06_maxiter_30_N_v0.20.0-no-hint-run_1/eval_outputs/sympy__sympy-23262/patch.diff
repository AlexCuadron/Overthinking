diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..24208a5ae8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+import inspect
+from sympy import lambdify
+
+# Test case for single-element tuple
+from sympy import Tuple
+single_element_tuple = inspect.getsource(lambdify([], Tuple(1)))
+print('Single-element tuple output:', single_element_tuple)
+
+# Test case for multi-element tuple
+multi_element_tuple = inspect.getsource(lambdify([], tuple([1, 2])))
+print('Multi-element tuple output:', multi_element_tuple)
diff --git a/sympy/printing/python.py b/sympy/printing/python.py
index 44ffd5ed74..7a348056e9 100644
--- a/sympy/printing/python.py
+++ b/sympy/printing/python.py
@@ -35,6 +35,19 @@ def _print_Symbol(self, expr):
         if symbol not in self.symbols:
             self.symbols.append(symbol)
         return StrPrinter._print_Symbol(self, expr)
+    def _print_Tuple(self, expr):
+        if isinstance(expr, tuple):
+            if len(expr) == 1:
+                return f'({self._print(expr[0])},)'
+            return f"({', '.join(map(self._print, expr))})"
+        # Handle sympy Tuple
+        if len(expr) == 1:
+            return f'({self._print(expr[0])},)'
+        return f"({', '.join(map(self._print, expr))})"
+        if len(expr) == 1:
+            return f'({self._print(expr[0])},)'
+        return f"({', '.join(map(self._print, expr))})"
+

     def _print_module(self, expr):
         raise ValueError('Modules in the expression are unacceptable')
