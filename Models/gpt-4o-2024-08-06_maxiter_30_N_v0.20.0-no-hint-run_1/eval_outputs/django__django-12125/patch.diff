diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5705ae23e4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,115 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import models
+
+# Configure settings for the Django project
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'test_app',
+    ],
+    BASE_DIR=os.path.dirname(os.path.abspath(__file__)),
+    ROOT_URLCONF='test_app.urls',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=(),
+)
+
+# Create a temporary app directory with an __init__.py file
+os.makedirs('test_app', exist_ok=True)
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+# Define the models as described in the PR
+models_code = '''
+from django.db import models
+import enum
+from enumfields import Enum, EnumField
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+
+class Thing(models.Model):
+    @enum.unique
+    class State(Enum):
+        on = 'on'
+        off = 'off'
+    state = EnumField(enum=State)
+'''
+
+with open('test_app/models.py', 'w') as f:
+    f.write(models_code)
+
+# Set up Django
+from django.conf import settings
+
+# Configure settings for the Django project
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'test_app',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=(),
+)
+
+import django
+
+django.setup()
+
+# Run makemigrations to generate the migration file
+from django.core.management import call_command
+call_command('makemigrations', 'test_app', verbosity=2)
+
+# Clean up
+import shutil
+shutil.rmtree('test_app')
+define_models_code = '''
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+
+import enum
+from enumfields import Enum, EnumField
+
+class Thing(models.Model):
+    @enum.unique
+    class State(Enum):
+        on = 'on'
+        off = 'off'
+    state = EnumField(enum=State)
+'''
+
+# Create a temporary app directory
+os.makedirs('test_app', exist_ok=True)
+
+# Write the models to a models.py file
+with open('test_app/models.py', 'w') as f:
+    f.write(define_models_code)
+
+# Run makemigrations to generate the migration file
+call_command('makemigrations', 'test_app', verbosity=2)
+
+# Clean up
+import shutil
+shutil.rmtree('test_app')
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..165db15bbb
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,18 @@
+
+from django.db import models
+import enum
+from enumfields import Enum, EnumField
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+
+class Thing(models.Model):
+    @enum.unique
+    class State(Enum):
+        on = 'on'
+        off = 'off'
+    state = EnumField(enum=State)
