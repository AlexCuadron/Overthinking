diff --git a/repr_test.py b/repr_test.py
new file mode 100644
index 000000000..65649cd6b
--- /dev/null
+++ b/repr_test.py
@@ -0,0 +1,4 @@
+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
+
+print(repr(RepeatedKFold()))
+print(repr(RepeatedStratifiedKFold()))
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index c49a3ce6a..e3f58c229 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -1083,6 +1083,8 @@ class _RepeatedSplits(metaclass=ABCMeta):
         If None, the random number generator is the RandomState instance used
         by `np.random`.

+    def __repr__(self):
+        return f"{self.__class__.__name__}(n_splits={self.cvargs.get('n_splits', 5)}, n_repeats={self.n_repeats}, random_state={self.random_state})"
     **cvargs : additional params
         Constructor parameters for cv. Must not contain random_state
         and shuffle.
@@ -1182,7 +1184,10 @@ class RepeatedKFold(_RepeatedSplits):
     random_state : int, RandomState instance or None, optional, default=None
         If int, random_state is the seed used by the random number generator;
         If RandomState instance, random_state is the random number generator;
+        super().__init__(cv=KFold, n_repeats=n_repeats, random_state=random_state, n_splits=n_splits)
         If None, the random number generator is the RandomState instance used
+    def __repr__(self):
+        return super().__repr__()
         by `np.random`.

     Examples
@@ -1234,6 +1239,8 @@ class RepeatedStratifiedKFold(_RepeatedSplits):
         Number of times cross-validator needs to be repeated.

     random_state : None, int or RandomState, default=None
+    def __repr__(self):
+        return super().__repr__()
         Random state to be used to generate random state for each
         repetition.
