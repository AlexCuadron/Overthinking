diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..ebca8b07e9 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -301,7 +301,7 @@ class ManyToManyRel(ForeignObjectRel):

         if through_fields and not through:
             raise ValueError("Cannot specify through_fields without a through model")
-        self.through_fields = through_fields
+        self.through_fields = make_hashable(through_fields)

         self.symmetrical = symmetrical
         self.db_constraint = db_constraint
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2768fa642b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,45 @@
+import django
+from django.conf import settings
+from django.db import models
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        '__main__',  # This allows the models in this script to be recognized
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+class Parent(models.Model):
+    name = models.CharField(max_length=256)
+
+class ProxyParent(Parent):
+    class Meta:
+        proxy = True
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    many_to_many_field = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=['child', 'parent'],
+        related_name="something"
+    )
+
+class ManyToManyModel(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+# Trigger the error by accessing the identity property
+try:
+    rel = Child._meta.get_field('many_to_many_field').remote_field
+    print(rel.identity)
+except Exception as e:
+    print(f"Error: {e}")
