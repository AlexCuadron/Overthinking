diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..105adcc335
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,13 @@
+from sympy import symbols, sqf_list
+
+x = symbols('x')
+
+# Test case 1: Expected (x**2 + 1, 1), (x - 1, 2), (x - 2, 3), (x - 3, 3)
+expr1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3
+result1 = sqf_list(expr1)
+print('Test case 1 result:', result1)
+
+# Test case 2: Expected (x - 2, 1), (x**2 - 1, 2)
+expr2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2
+result2 = sqf_list(expr2)
+print('Test case 2 result:', result2)
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..21310842e0 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5880,7 +5880,7 @@ def _sorted_factors(factors, method):
         def key(obj):
             poly, exp = obj
             rep = poly.rep.rep
-            return (exp, len(rep), len(poly.gens), rep)
+            return (exp, rep, len(poly.gens))
     else:
         def key(obj):
             poly, exp = obj
@@ -5936,7 +5936,13 @@ def _symbolic_factor_list(expr, opt, method):
                     _factors.append((_coeff, S.One))

             if exp is S.One:
-                factors.extend(_factors)
+    for f, e in _factors:
+        for i, (existing_f, existing_e) in enumerate(factors):
+            if existing_f == f:
+                factors[i] = (existing_f, existing_e + e)
+                break
+        else:
+            factors.append((f, e))
             elif exp.is_integer:
                 factors.extend([(f, k*exp) for f, k in _factors])
             else:
