diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..5e0836815c 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -326,7 +326,7 @@ class NDArithmeticMixin:
             # if numpy.ma or astropy.utils.masked is being used, the constructor
             # will pick up the mask from the masked object:
             kwargs["mask"] = None
-        elif handle_mask in ["ff", "first_found"]:
+        elif handle_mask in ["ff", "first_found"] or self.mask is None or operand.mask is None:
             if self.mask is None:
                 kwargs["mask"] = deepcopy(operand.mask)
             else:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bc067a2b23
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,22 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+# multiply mask by constant (mask * no mask)
+try:
+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+    print("Result (mask * no mask):", result)
+except TypeError as e:
+    print("Error (mask * no mask):", e)
+
+# multiply mask by no mask (mask * no mask)
+try:
+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+    print("Result (mask * no mask):", result)
+except TypeError as e:
+    print("Error (mask * no mask):", e)
