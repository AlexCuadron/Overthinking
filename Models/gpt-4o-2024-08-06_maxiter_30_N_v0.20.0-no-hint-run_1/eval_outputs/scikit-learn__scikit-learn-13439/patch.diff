diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..e11be0654
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+from sklearn import svm
+from sklearn.datasets import make_classification
+from sklearn.feature_selection import SelectKBest, f_regression
+from sklearn.pipeline import Pipeline
+
+# generate some data to play with
+X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)
+
+anova_filter = SelectKBest(f_regression, k=5)
+clf = svm.SVC(kernel='linear')
+pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+
+# This should raise an error
+print(len(pipe))
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..28a46327f 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -160,6 +160,8 @@ class Pipeline(_BaseComposition):
         return self

     def _validate_steps(self):
+        if not self.steps:
+            return
         names, estimators = zip(*self.steps)

         # validate names
@@ -218,6 +220,8 @@ class Pipeline(_BaseComposition):
             # Not an int, try get step by name
             return self.named_steps[ind]
         return est
+    def __len__(self):
+        return len(self.steps)

     @property
     def _estimator_type(self):
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..c761772c8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,9 @@
+from sklearn.pipeline import Pipeline
+
+# Test empty pipeline
+empty_pipe = Pipeline([])
+print('Length of empty pipeline:', len(empty_pipe))  # Expected: 0
+
+# Test single step pipeline
+single_step_pipe = Pipeline([('svc', None)])
+print('Length of single step pipeline:', len(single_step_pipe))  # Expected: 1
