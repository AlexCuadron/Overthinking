diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py
index 87960d5863..eafb14b4db 100644
--- a/sympy/functions/elementary/miscellaneous.py
+++ b/sympy/functions/elementary/miscellaneous.py
@@ -527,8 +527,7 @@ def _new_args_filter(cls, arg_sequence):
             elif arg == cls.identity:
                 continue
             elif arg.func == cls:
-                for x in arg.args:
-                    yield x
+                yield arg
             else:
                 yield arg

diff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py
index 363a5c42c9..d702a592b6 100644
--- a/sympy/printing/codeprinter.py
+++ b/sympy/printing/codeprinter.py
@@ -376,7 +376,7 @@ def _print_Function(self, expr):
                     return func(self, *[self.parenthesize(item, 0) for item in expr.args])
                 except TypeError:
                     try:
-                        return func(*[self.parenthesize(item, 0) for item in expr.args])
+                        return "%s[%s]" % (func, ', '.join(map(self.doprint, expr.args)))
                     except TypeError:
                         return "%s(%s)" % (func, self.stringify(expr.args, ", "))
         elif hasattr(expr, '_imp_') and isinstance(expr._imp_, Lambda):
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..32d3fa63aa 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -30,6 +30,7 @@
     "acoth": [(lambda x: True, "ArcCoth")],
     "asech": [(lambda x: True, "ArcSech")],
     "acsch": [(lambda x: True, "ArcCsch")],
+    "Max": [(lambda *args: True, "Max")],
     "conjugate": [(lambda x: True, "Conjugate")],

 }
diff --git a/test_max_function.py b/test_max_function.py
new file mode 100644
index 0000000000..8a8b2e3b5e
--- /dev/null
+++ b/test_max_function.py
@@ -0,0 +1,6 @@
+from sympy import symbols, Max
+from sympy.printing.mathematica import mathematica_code
+
+x = symbols('x')
+output = mathematica_code(Max(x, 2))
+print(output)  # Expected: 'Max[x, 2]'
\ No newline at end of file
