diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..57024960e2 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -65,11 +65,17 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):

 class IntegerChoices(int, Choices):
     """Class for creating enumerated integer choices."""
+    def __str__(self):
+        return str(self.value)
+
     pass


 class TextChoices(str, Choices):
     """Class for creating enumerated string choices."""
+    def __str__(self):
+        return str(self.value)
+

     def _generate_next_value_(name, start, count, last_values):
         return name
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..166884d6c1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,68 @@
+import django
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        __name__,
+    ],
+)
+django.setup()
+
+from django.db import models
+from django.test import TestCase
+from django.utils.translation import gettext_lazy as _
+
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice, it is")
+    SECOND_CHOICE = "second", _("The second choice, it is")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
+
+class EnumTest(TestCase):
+    def setUp(self) -> None:
+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)
+
+    def test_created_object_is_str(self):
+        my_object = self.my_object
+        assert isinstance(my_object.my_str_value, str)
+        assert str(my_object.my_str_value) == "first"
+
+    def test_retrieved_object_is_str(self):
+        my_object = MyObject.objects.last()
+        assert isinstance(my_object.my_str_value, str)
+        assert str(my_object.my_str_value) == "first"
+
+if __name__ == "__main__":
+    import django
+    from django.conf import settings
+
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        __name__,
+    ],
+    )
+    django.setup()
+
+    import sys
+    from django.test.utils import get_runner
+
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner()
+    failures = test_runner.run_tests([__name__])
+    sys.exit(bool(failures))
