diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..40ceab5580 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -514,19 +514,20 @@ class Field(RegisterLookupMixin):
         return self.__class__(*args, **kwargs)

     def __eq__(self, other):
-        # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            return (self.creation_counter == other.creation_counter and
+                    self.model == other.model)
         return NotImplemented

     def __lt__(self, other):
-        # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
+            if self.model != other.model:
+                return self.model < other.model
             return self.creation_counter < other.creation_counter
         return NotImplemented

     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((self.creation_counter, self.model))

     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..dc8badc5c3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,38 @@
+import django
+from django.conf import settings
+from django.db import models
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+class A(models.Model):
+    class Meta:
+        abstract = True
+        app_label = 'myapp'
+    myfield = models.IntegerField()
+
+class B(A):
+    class Meta:
+        app_label = 'myapp'
+
+class C(A):
+    pass
+    class Meta:
+        app_label = 'myapp'
+
+# Check if fields from different models are considered equal
+b_field = B._meta.get_field('myfield')
+c_field = C._meta.get_field('myfield')
+
+print('Fields are equal:', b_field == c_field)
+print('Number of unique fields:', len({b_field, c_field}))
\ No newline at end of file
