diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f300e32e87
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,15 @@
+from sympy import exp
+from sympy.physics import units
+from sympy.physics.units.systems.si import SI
+
+expr = units.second / (units.ohm * units.farad)
+dim = SI._collect_factor_and_dimension(expr)[1]
+
+assert SI.get_dimension_system().is_dimensionless(dim)
+
+buggy_expr = 100 + exp(expr)
+try:
+    SI._collect_factor_and_dimension(buggy_expr)
+    print("Test passed: No ValueError raised.")
+except ValueError as e:
+    print(f"Test failed: {e}")
\ No newline at end of file
diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c108..79229772c9 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -192,8 +192,9 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Function):
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
-            return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+            if all(self.get_dimension_system().is_dimensionless(d[1]) for d in fds):
+                return expr.func(*(f[0] for f in fds)), Dimension(1)
+            return expr.func(*(f[0] for f in fds)), expr.func(*(d[1] for d in fds))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
