diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..8b9da17e31 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
         bound_method = partial(method.__get__(self, type(self)))
+        update_wrapper(bound_method, method)
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6b3112fa62
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,25 @@
+from functools import wraps
+from django.utils.decorators import method_decorator
+
+# Logger decorator
+
+def logger(func):
+    @wraps(func)
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            print(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+        return result
+    return inner
+
+# Test class
+class Test:
+    @method_decorator(logger)
+    def hello_world(self):
+        return "hello"
+
+# Trigger the error
+Test().hello_world()
\ No newline at end of file
