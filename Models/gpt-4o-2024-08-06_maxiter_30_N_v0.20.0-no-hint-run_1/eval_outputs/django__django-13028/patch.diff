diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..80431297c1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,85 @@
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.utils.translation import gettext_lazy as _
+from django.utils import timezone
+
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'adminpricing',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+import os
+import sys
+from django.apps import AppConfig
+
+# Create a minimal app structure
+os.makedirs('adminpricing', exist_ok=True)
+with open('adminpricing/__init__.py', 'w') as f:
+    f.write('')
+with open('adminpricing/apps.py', 'w') as f:
+    f.write('from django.apps import AppConfig\n\nclass AdminPricingConfig(AppConfig):\n    name = \'adminpricing\'\n')
+
+settings.INSTALLED_APPS.append('adminpricing.apps.AdminPricingConfig')
+
+# Create a minimal app structure
+os.makedirs('adminpricing', exist_ok=True)
+with open('adminpricing/__init__.py', 'w') as f:
+    f.write('')
+with open('adminpricing/apps.py', 'w') as f:
+    f.write('from django.apps import AppConfig\n\nclass AdminPricingConfig(AppConfig):\n    name = \'adminpricing\'\n')
+
+sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
+
+settings.INSTALLED_APPS.append('adminpricing.apps.AdminPricingConfig')
+
+class ProductMetaDataType(models.Model):
+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)
+    filterable = models.BooleanField(default=False, verbose_name=_("filterable"))
+
+    class Meta:
+        app_label = "adminpricing"
+        verbose_name = _( "product meta data type")
+        verbose_name_plural = _( "product meta data types")
+
+    def __str__(self):
+        return self.label
+
+class ProductMetaData(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    product = models.ForeignKey(
+        'Produit', null=False, blank=False, on_delete=models.CASCADE
+    )
+    value = models.TextField(null=False, blank=False)
+    marketplace = models.ForeignKey(
+        'Plateforme', null=False, blank=False, on_delete=models.CASCADE
+    )
+    date_created = models.DateTimeField(null=True, default=timezone.now)
+    metadata_type = models.ForeignKey(
+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE
+    )
+
+    class Meta:
+        app_label = "adminpricing"
+        verbose_name = _( "product meta data")
+        verbose_name_plural = _( "product meta datas")
+
+# Simulate the error
+try:
+    with connection.cursor() as cursor:
+        cursor.execute("""
+        SELECT * FROM adminpricing_productmetadata
+        WHERE value = 'Dark Vador' AND metadata_type_id = 1
+        """)
+except Exception as e:
+    print("Error:", e)
\ No newline at end of file
