diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf395..f843c60089 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,10 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            return type(value)(*(
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ))
         return value

     def solve_lookup_type(self, lookup):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..292161f4b9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,19 @@
+from collections import namedtuple
+from django.db.models import F
+from django.db.models.sql.query import Query
+
+# Define a named tuple
+Range = namedtuple('Range', ['near', 'far'])
+
+# Create a Query object (mock)
+query = Query(model=None)
+
+# Create a named tuple instance
+range_value = Range(near=1, far=10)
+
+# Attempt to resolve the lookup value using the named tuple
+try:
+    resolved_value = query.resolve_lookup_value(range_value, can_reuse=None, allow_joins=True)
+    print("Resolved value:", resolved_value)
+except TypeError as e:
+    print("Error:", e)
\ No newline at end of file
