diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index fdac0f3560..1abd665a77 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -2180,6 +2180,8 @@ class Axes(_AxesBase):
             # wrap numpy arrays.
             try:
                 x0 = cbook._safe_first_finite(x0)
+                if np.isnan(x0):
+                    return np.nan
             except (TypeError, IndexError, KeyError):
                 pass

@@ -2192,13 +2194,13 @@ class Axes(_AxesBase):
             if not np.iterable(dx):
                 dx = [dx]
                 delist = True
-            dx = [convert(x0 + ddx) - x for ddx in dx]
+            dx = [convert(x0 + ddx) - x if not np.isnan(x0) else np.nan for ddx in dx]
             if delist:
                 dx = dx[0]
         except (ValueError, TypeError, AttributeError):
             # if the above fails (for any reason) just fallback to what
             # we do by default and convert dx by itself.
-            dx = convert(dx)
+            dx = convert(dx) if not np.isnan(x0) else np.nan
         return dx

     @_preprocess_data()
diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..c069726683 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1746,7 +1746,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
         raise RuntimeError("matplotlib does not "
                            "support generators as input")
     else:
-        return next(val for val in obj if safe_isfinite(val))
+        for val in obj:
+            if safe_isfinite(val):
+                return val
+        return np.nan


 def sanitize_sequence(data):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0c1735845b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,5 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+f, ax = plt.subplots()
+ax.bar([np.nan], [np.nan])
\ No newline at end of file
