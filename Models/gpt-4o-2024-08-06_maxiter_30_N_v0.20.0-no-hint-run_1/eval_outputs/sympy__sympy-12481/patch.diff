diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..727c0c5af6 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -897,8 +897,12 @@ def __new__(cls, *args, **kwargs):
         temp = flatten(args)
         if has_dups(temp):
             if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
+                # Apply non-disjoint cycles in left-to-right order
+                result = list(range(max(temp) + 1))
+                for cycle in args:
+                    for i in range(len(cycle) - 1):
+                        result[cycle[i]], result[cycle[i + 1]] = result[cycle[i + 1]], result[cycle[i]]
+                return _af_new(result)
             else:
                 raise ValueError('there were repeated elements.')
         temp = set(temp)
diff --git a/test_permutation_fix.py b/test_permutation_fix.py
new file mode 100644
index 0000000000..d606b00c10
--- /dev/null
+++ b/test_permutation_fix.py
@@ -0,0 +1,13 @@
+from sympy.combinatorics.permutations import Permutation
+
+def test_permutation_fix():
+    try:
+        # This should construct the identity permutation without raising an error
+        p = Permutation([[0, 1], [0, 1]])
+        print("Test passed: Permutation constructed successfully.")
+        print("Resulting permutation:", p)
+    except ValueError as e:
+        print("Test failed:", e)
+
+if __name__ == "__main__":
+    test_permutation_fix()
