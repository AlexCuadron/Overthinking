diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..1e84580b4f 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -94,7 +94,7 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + (user.email or '')

     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9aac801b92
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,41 @@
+import os
+import django
+from django.conf import settings
+from django.contrib.auth.models import User
+from django.contrib.auth.tokens import default_token_generator
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    PASSWORD_RESET_TIMEOUT=3600,
+)
+
+django.setup()
+
+# Create a user
+user = User.objects.create_user('testuser', 'foo@example.com', 'password123')
+
+# Generate a password reset token
+initial_token = default_token_generator.make_token(user)
+
+# Change the user's email
+user.email = 'bar@example.com'
+user.save()
+
+# Attempt to use the initial token
+is_valid = default_token_generator.check_token(user, initial_token)
+
+print(f"Token valid after email change: {is_valid}")
+
+# Clean up
+user.delete()
\ No newline at end of file
