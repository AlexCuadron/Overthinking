diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..40c2cc5b9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,29 @@
+import pandas as pd
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+
+index = pd.date_range(start="2020-01-01", end="2020-01-05", inclusive="left", freq="H")
+data = pd.DataFrame(index=index, data=[10] * len(index), columns=["value"])
+data["date"] = index.date
+
+
+class MyTransformer(BaseEstimator, TransformerMixin):
+    from typing import Union
+
+    def fit(self, X: pd.DataFrame, y: Union[pd.Series, None] = None, **kwargs):
+        return self
+
+    def transform(self, X: pd.DataFrame, y: Union[pd.Series, None] = None) -> pd.DataFrame:
+        return X[["date", "value"]].groupby("date").sum().reindex(X.index, method='ffill')
+
+
+# This works.
+set_config(transform_output="default")
+print("Default output:")
+print(make_union(MyTransformer()).fit_transform(data))
+
+# This does not work.
+set_config(transform_output="pandas")
+print("Pandas output:")
+print(make_union(MyTransformer()).fit_transform(data))
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 94d9465d7..fd6dcbd37 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -1280,7 +1280,7 @@ class FeatureUnion(TransformerMixin, _BaseComposition):
         config = _get_output_config("transform", self)
         if config["dense"] == "pandas" and all(hasattr(X, "iloc") for X in Xs):
             pd = check_pandas_support("transform")
-            return pd.concat(Xs, axis=1)
+            return pd.concat(Xs, axis=1, join='inner')

         if any(sparse.issparse(f) for f in Xs):
             Xs = sparse.hstack(Xs).tocsr()
