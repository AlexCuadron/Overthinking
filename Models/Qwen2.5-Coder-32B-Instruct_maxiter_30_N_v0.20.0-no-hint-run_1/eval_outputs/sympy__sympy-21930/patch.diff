diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ec1f9d6447
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,7 @@
+import sympy as sp
+from sympy.physics.secondquant import B, Bd, Commutator
+sp.init_printing()
+
+a = sp.Symbol('0')
+expr = Commutator(Bd(a)**2, B(a))
+print(sp.latex(expr))
\ No newline at end of file
diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py
index d19ee2fc63..de80b4bc6a 100644
--- a/sympy/physics/secondquant.py
+++ b/sympy/physics/secondquant.py
@@ -395,6 +395,17 @@ class Creator(SqOperator):


 class AnnihilateBoson(BosonicOperator, Annihilator):
+    def _get_power(self, printer):
+        if isinstance(self, Pow):
+            return printer._print(self.exp)
+        return ""
+
+    def _latex(self, printer):
+        base = "b_{%s}" % self.state.name
+        power = self._get_power(printer)
+        if power:
+            return "{%s}^{%s}" % (base, power)
+        return base
     """
     Bosonic annihilation operator.

@@ -443,6 +454,17 @@ def _latex(self, printer):


 class CreateBoson(BosonicOperator, Creator):
+    def _get_power(self, printer):
+        if isinstance(self, Pow):
+            return printer._print(self.exp)
+        return ""
+
+    def _latex(self, printer):
+        base = "b^\\dagger_{%s}" % self.state.name
+        power = self._get_power(printer)
+        if power:
+            return "{%s}^{%s}" % (base, power)
+        return base
     """
     Bosonic creation operator.
     """
