diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..89b556a1c3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,22 @@
+import os
+import subprocess
+
+# Set the TEMPLATES_DIRS environment variable to an empty string
+os.environ['TEMPLATES_DIRS'] = ''
+
+# Change the current working directory to the reproduce_error directory
+import os
+import subprocess
+import sys
+
+# Set the TEMPLATES_DIRS environment variable to an empty string
+os.environ['TEMPLATES_DIRS'] = ''
+
+# Add the reproduce_error directory to the Python path
+sys.path.append('/workspace/django__django__4.1/reproduce_error')
+
+# Change the current working directory to the reproduce_error directory
+os.chdir('/workspace/django__django__4.1/reproduce_error')
+
+# Run the Django development server
+subprocess.run(['python', 'manage.py', 'runserver', '--nothreading', '--noreload'])
\ No newline at end of file
diff --git a/reproduce_error/__init__.py b/reproduce_error/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_error/manage.py b/reproduce_error/manage.py
new file mode 100644
index 0000000000..48ec1795e2
--- /dev/null
+++ b/reproduce_error/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reproduce_error.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/reproduce_error/settings.py b/reproduce_error/settings.py
new file mode 100644
index 0000000000..8edeb4ee32
--- /dev/null
+++ b/reproduce_error/settings.py
@@ -0,0 +1,83 @@
+import os
+from pathlib import Path
+
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+SECRET_KEY = 'fake-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'reproduce_error.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': os.getenv("TEMPLATES_DIRS", "").split(","),
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'reproduce_error.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/reproduce_error/urls.py b/reproduce_error/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/reproduce_error/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/reproduce_error/wsgi.py b/reproduce_error/wsgi.py
new file mode 100644
index 0000000000..9e6dc7b12d
--- /dev/null
+++ b/reproduce_error/wsgi.py
@@ -0,0 +1,6 @@
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reproduce_error.settings')
+
+application = get_wsgi_application()
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..df242df724
--- /dev/null
+++ b/server.log
@@ -0,0 +1,67 @@
+Traceback (most recent call last):
+  File "/testbed/django/core/management/base.py", line 402, in run_from_argv
+    self.execute(*args, **cmd_options)
+  File "/testbed/django/core/management/commands/runserver.py", line 74, in execute
+    super().execute(*args, **options)
+  File "/testbed/django/core/management/base.py", line 448, in execute
+    output = self.handle(*args, **options)
+  File "/testbed/django/core/management/commands/runserver.py", line 81, in handle
+    if not settings.DEBUG and not settings.ALLOWED_HOSTS:
+  File "/testbed/django/conf/__init__.py", line 92, in __getattr__
+    self._setup(name)
+  File "/testbed/django/conf/__init__.py", line 79, in _setup
+    self._wrapped = Settings(settings_module)
+  File "/testbed/django/conf/__init__.py", line 190, in __init__
+    mod = importlib.import_module(self.SETTINGS_MODULE)
+  File "/opt/miniconda3/envs/testbed/lib/python3.9/importlib/__init__.py", line 127, in import_module
+    return _bootstrap._gcd_import(name[level:], package, level)
+  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 972, in _find_and_load_unlocked
+  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
+  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 984, in _find_and_load_unlocked
+ModuleNotFoundError: No module named 'reproduce_error'
+
+During handling of the above exception, another exception occurred:
+
+Traceback (most recent call last):
+  File "/workspace/django__django__4.1/reproduce_error/manage.py", line 18, in <module>
+    main()
+  File "/workspace/django__django__4.1/reproduce_error/manage.py", line 15, in main
+    execute_from_command_line(sys.argv)
+  File "/testbed/django/core/management/__init__.py", line 446, in execute_from_command_line
+    utility.execute()
+  File "/testbed/django/core/management/__init__.py", line 440, in execute
+    self.fetch_command(subcommand).run_from_argv(self.argv)
+  File "/testbed/django/core/management/base.py", line 415, in run_from_argv
+    connections.close_all()
+  File "/testbed/django/db/utils.py", line 194, in close_all
+    for alias in self:
+  File "/testbed/django/utils/connection.py", line 73, in __iter__
+    return iter(self.settings)
+  File "/testbed/django/utils/functional.py", line 57, in __get__
+    res = instance.__dict__[self.name] = self.func(instance)
+  File "/testbed/django/utils/connection.py", line 45, in settings
+    self._settings = self.configure_settings(self._settings)
+  File "/testbed/django/db/utils.py", line 148, in configure_settings
+    databases = super().configure_settings(databases)
+  File "/testbed/django/utils/connection.py", line 50, in configure_settings
+    settings = getattr(django_settings, self.settings_name)
+  File "/testbed/django/conf/__init__.py", line 92, in __getattr__
+    self._setup(name)
+  File "/testbed/django/conf/__init__.py", line 79, in _setup
+    self._wrapped = Settings(settings_module)
+  File "/testbed/django/conf/__init__.py", line 190, in __init__
+    mod = importlib.import_module(self.SETTINGS_MODULE)
+  File "/opt/miniconda3/envs/testbed/lib/python3.9/importlib/__init__.py", line 127, in import_module
+    return _bootstrap._gcd_import(name[level:], package, level)
+  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 972, in _find_and_load_unlocked
+  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
+  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 984, in _find_and_load_unlocked
+ModuleNotFoundError: No module named 'reproduce_error'
