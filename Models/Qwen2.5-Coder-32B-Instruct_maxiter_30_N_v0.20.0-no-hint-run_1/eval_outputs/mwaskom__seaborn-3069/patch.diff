diff --git a/seaborn/categorical.py b/seaborn/categorical.py
index 3394c9c7..927018e2 100644
--- a/seaborn/categorical.py
+++ b/seaborn/categorical.py
@@ -111,7 +111,7 @@ class _CategoricalPlotterNew(_RelationalPlotter):
         # scale_categorical function. We need to do it here because of the next line.
         if self.cat_axis not in self.variables:
             self.variables[self.cat_axis] = None
-            self.var_types[self.cat_axis] = "categorical"
+            self.var_types[self.cat_axis] = "categorical" if self.var_types[self.cat_axis] == "categorical" else "nominal"
             self.plot_data[self.cat_axis] = ""

         # Categorical variables have discrete levels that we need to track
@@ -141,7 +141,7 @@ class _CategoricalPlotterNew(_RelationalPlotter):
             self._redundant_hue = True
             self.plot_data["hue"] = self.plot_data[self.cat_axis]
             self.variables["hue"] = self.variables[self.cat_axis]
-            self.var_types["hue"] = "categorical"
+            self.var_types["hue"] = "categorical" if self.var_types["hue"] == "categorical" else "nominal"
             hue_order = self.var_levels[self.cat_axis]

             # Because we convert the categorical axis variable to string,
@@ -193,12 +193,12 @@ class _CategoricalPlotterNew(_RelationalPlotter):
         return (lum, lum, lum)

     def _adjust_cat_axis(self, ax, axis):
-        """Set ticks and limits for a categorical variable."""
+        """Set ticks and limits for a categorical or nominal variable."""
         # Note: in theory, this could happen in _attach for all categorical axes
         # But two reasons not to do that:
         # - If it happens before plotting, autoscaling messes up the plot limits
         # - It would change existing plots from other seaborn functions
-        if self.var_types[axis] != "categorical":
+        if self.var_types[axis] not in ["categorical", "nominal"]:
             return

         # If both x/y data are empty, the correct way to set up the plot is
@@ -387,7 +387,7 @@ class _CategoricalPlotterNew(_RelationalPlotter):
                     # set in _adjust_cat_axis, because that method currently leave
                     # the autoscale flag in its original setting. It may be better
                     # to disable autoscaling there to avoid needing to do this.
-                    fixed_scale = self.var_types[self.cat_axis] == "categorical"
+                    fixed_scale = self.var_types[self.cat_axis] in ["categorical", "nominal"]
                     ax.update_datalim(points.get_datalim(ax.transData))
                     if not fixed_scale and (scalex or scaley):
                         ax.autoscale_view(scalex=scalex, scaley=scaley)
@@ -582,12 +582,12 @@ class _CategoricalPlotter:
                 else:
                     vals, groups = x, y

-                # Get the categorical axis label
+                # Get the categorical or nominal axis label
                 group_label = None
                 if hasattr(groups, "name"):
                     group_label = groups.name

-                # Get the order on the categorical axis
+                # Get the order on the categorical or nominal axis
                 group_names = categorical_order(groups, order)

                 # Group the numeric data
@@ -1644,7 +1644,7 @@ class _PointPlotter(_CategoricalStatPlotter):

     def draw_points(self, ax):
         """Draw the main data components of the plot."""
-        # Get the center positions on the categorical axis
+        # Get the center positions on the categorical or nominal axis
         pointpos = np.arange(len(self.statistic))

         # Get the size of the plot elements
@@ -1688,7 +1688,7 @@ class _PointPlotter(_CategoricalStatPlotter):
                 # Determine the values to plot for this level
                 statistic = self.statistic[:, j]

-                # Determine the position on the categorical and z axes
+                # Determine the position on the categorical or nominal and z axes
                 offpos = pointpos + offsets[j]
                 z = j + 1

@@ -2094,7 +2094,7 @@ _categorical_docs = dict(
     """),
     stat_api_params=dedent("""\
     estimator : string or callable that maps vector -> scalar, optional
-        Statistical function to estimate within each categorical bin.
+        Statistical function to estimate within each categorical or nominal bin.
     errorbar : string, (string, number) tuple, callable or None
         Name of errorbar method (either "ci", "pi", "se", or "sd"), or a tuple
         with a method name and a level parameter, or a function that maps from a
@@ -3064,7 +3064,7 @@ def catplot(
         # happen or if disabling that is the cleaner solution.
         has_xy_data = p.has_xy_data

-        if not native_scale or p.var_types[p.cat_axis] == "categorical":
+        if not native_scale or p.var_types[p.cat_axis] in ["categorical", "nominal"]:
             p.scale_categorical(p.cat_axis, order=order, formatter=formatter)

         p._attach(g)
