diff --git a/docs/source/conf.py b/docs/source/conf.py
new file mode 100644
index 000000000..144527223
--- /dev/null
+++ b/docs/source/conf.py
@@ -0,0 +1,3 @@
+extensions = ["sphinx.ext.autodoc"]
+autodoc_mock_imports = ["torch.nn"]
+sys.path.insert(0, os.path.abspath("."))
diff --git a/docs/source/conf.py.bak b/docs/source/conf.py.bak
new file mode 100644
index 000000000..144527223
--- /dev/null
+++ b/docs/source/conf.py.bak
@@ -0,0 +1,3 @@
+extensions = ["sphinx.ext.autodoc"]
+autodoc_mock_imports = ["torch.nn"]
+sys.path.insert(0, os.path.abspath("."))
diff --git a/docs/source/index.rst b/docs/source/index.rst
new file mode 100644
index 000000000..e78d74a4a
--- /dev/null
+++ b/docs/source/index.rst
@@ -0,0 +1,2 @@
+.. automodule:: mymodule
+   :members:
diff --git a/mymodule.py b/mymodule.py
new file mode 100644
index 000000000..51c186bfd
--- /dev/null
+++ b/mymodule.py
@@ -0,0 +1,3 @@
+from torch.nn import Module
+class DeepKernel(Module):
+    pass
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..af7e87118
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,36 @@
+import os
+import sys
+from sphinx.application import Sphinx
+
+# Create a minimal Sphinx project
+os.makedirs('docs/source', exist_ok=True)
+os.makedirs('docs/build', exist_ok=True)
+
+# Create a conf.py file
+with open('docs/source/conf.py', 'w') as f:
+    f.write('extensions = ["sphinx.ext.autodoc"]\n')
+    f.write('autodoc_mock_imports = ["torch.nn"]\n')
+    f.write('sys.path.insert(0, os.path.abspath("."))\n')
+
+# Create an index.rst file
+with open('docs/source/index.rst', 'w') as f:
+    f.write('.. automodule:: mymodule\n')
+    f.write('   :members:\n')
+
+# Create a mymodule.py file with a class that inherits from a mocked class
+with open('mymodule.py', 'w') as f:
+    f.write('from torch.nn import Module\n')
+    f.write('class DeepKernel(Module):\n')
+    f.write('    pass\n')
+
+# Build the documentation
+app = Sphinx(srcdir='docs/source', confdir='docs/source', outdir='docs/build', doctreedir='docs/build/doctrees', buildername='html')
+app.build()
+
+# Check the output
+with open('docs/build/index.html', 'r') as f:
+    content = f.read()
+    if 'Bases: torch.nn.' in content:
+        print("Error reproduced: Bases section is incorrect.")
+    else:
+        print("Error not reproduced: Bases section is correct.")
\ No newline at end of file
