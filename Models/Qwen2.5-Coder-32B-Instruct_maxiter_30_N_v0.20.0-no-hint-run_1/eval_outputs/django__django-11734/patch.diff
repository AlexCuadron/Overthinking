diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..88ad95bb1d
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..9a577e2354
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,40 @@
+from django.db import models
+from django.db.models import Exists, OuterRef
+
+class Number(models.Model):
+    pass
+
+class Item(models.Model):
+    tags = models.ManyToManyField('Tag')
+
+class Tag(models.Model):
+    category = models.ForeignKey('Category', on_delete=models.CASCADE)
+
+class Category(models.Model):
+    pass
+
+def test_exists_exclude():
+    # filter()
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(qs) # works
+    # exclude()
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.exclude(tags__category_id=OuterRef('pk'))
+        )
+    ).filter(foo=True)
+    print(qs) # crashes
+    # filter(~Q())
+    qs = Number.objects.annotate(
+        foo=Exists(
+            Item.objects.filter(~models.Q(tags__category_id=OuterRef('pk')))
+        )
+    ).filter(foo=True)
+    print(qs) # crashes
+
+if __name__ == '__main__':
+    test_exists_exclude()
\ No newline at end of file
