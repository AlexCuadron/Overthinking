diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..d0e5e88e1c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,9 +670,14 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not hasattr(attr, 'resolve_expression'):
                         attr = Value(attr, output_field=field)
-                    when_statements.append(When(pk=obj.pk, then=attr))
+                    if hasattr(attr, 'resolve_expression'):
+    attr = attr.resolve_expression(query=self.query, allow_joins=True, reuse=None)
+if hasattr(attr, 'resolve_expression'):
+    attr = attr.resolve_expression(query=self.query, allow_joins=True, reuse=None)
+    attr = attr.as_sql(self.query.compiler(connection=self.db), connection=self.db)[0]
+when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
                 if requires_casting:
                     case_statement = Cast(case_statement, output_field=field)
diff --git a/test_project/db.sqlite3 b/test_project/db.sqlite3
new file mode 100644
index 0000000000..072e07fb73
Binary files /dev/null and b/test_project/db.sqlite3 differ
diff --git a/test_project/exampleapp/__init__.py b/test_project/exampleapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/exampleapp/admin.py b/test_project/exampleapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_project/exampleapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_project/exampleapp/apps.py b/test_project/exampleapp/apps.py
new file mode 100644
index 0000000000..a56b0d0c23
--- /dev/null
+++ b/test_project/exampleapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class ExampleappConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'exampleapp'
diff --git a/test_project/exampleapp/migrations/0001_initial.py b/test_project/exampleapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..70b10786f6
--- /dev/null
+++ b/test_project/exampleapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 4.1.dev20220127175139 on 2025-01-23 11:49
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='SelfRef',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('c8', models.CharField(max_length=100)),
+            ],
+        ),
+    ]
diff --git a/test_project/exampleapp/migrations/__init__.py b/test_project/exampleapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/exampleapp/models.py b/test_project/exampleapp/models.py
new file mode 100644
index 0000000000..131bb9585d
--- /dev/null
+++ b/test_project/exampleapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100)
+    c8 = models.CharField(max_length=100)
+
+# Create your models here.
diff --git a/test_project/exampleapp/tests.py b/test_project/exampleapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_project/exampleapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_project/exampleapp/views.py b/test_project/exampleapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/test_project/exampleapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..b455bc84e6
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_project/reproduce_error.py b/test_project/reproduce_error.py
new file mode 100644
index 0000000000..211ee0d25a
--- /dev/null
+++ b/test_project/reproduce_error.py
@@ -0,0 +1,35 @@
+import os
+import sys
+import django
+
+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+django.setup()
+
+from exampleapp.models import SelfRef
+from django.db.models import F
+
+# Create a SelfRef instance
+SelfRef.objects.create(name='Test Name', c8='Initial C8')
+
+# Get the instance
+o = SelfRef.objects.all().first()
+
+# Assign a plain F(...) to the c8 field
+o.c8 = F('name')
+
+# Perform bulk_update
+SelfRef.objects.bulk_update([o], ['c8'])
+
+# Print the SQL query before refreshing the instance
+from django.db import connection
+print(f'SQL query before refresh: {connection.queries[-1]["sql"]}')
+
+# Refresh the instance from the database
+o.refresh_from_db()
+
+# Print the result
+print(f'o.c8: {o.c8}')
+
+# Print the last SQL query
+print(f'Last SQL query: {connection.queries[-1]["sql"]}')
\ No newline at end of file
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/asgi.py b/test_project/test_project/asgi.py
new file mode 100644
index 0000000000..342a9c9009
--- /dev/null
+++ b/test_project/test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_asgi_application()
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..112b894593
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 4.1.dev20220127175139.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-!o$g+r7cfdb#99jha=_h$=+dt)-#)4^jh@)pwp5)t$16^w83bw'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'exampleapp',
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..cc86b838e7
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,21 @@
+"""test_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..7050af9edd
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_wsgi_application()
