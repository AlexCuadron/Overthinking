diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py
index 9ccadcdf1c..d55f015b5e 100644
--- a/lib/matplotlib/backends/backend_cairo.py
+++ b/lib/matplotlib/backends/backend_cairo.py
@@ -205,7 +205,7 @@ class RendererCairo(RendererBase):
             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))
             opts = cairo.FontOptions()
             opts.set_antialias(
-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams["text.antialiased"]
+                cairo.ANTIALIAS_DEFAULT if self._renderer.get_text_antialiased()
                 else cairo.ANTIALIAS_NONE)
             ctx.set_font_options(opts)
             if angle:
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index 4591316cf9..e9f23c5a7c 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -93,6 +93,76 @@ def _get_text_metrics_with_cache_impl(
     "fontweight": ["weight"],
 })
 class Text(Artist):
+    def __init__(self,
+                 x=0, y=0, text='', *,
+                 color=None,           # defaults to rc params
+                 verticalalignment='baseline',
+                 horizontalalignment='left',
+                 multialignment=None,
+                 fontproperties=None,  # defaults to FontProperties()
+                 rotation=None,
+                 linespacing=None,
+                 rotation_mode=None,
+                 usetex=None,          # defaults to rcParams['text.usetex']
+                 wrap=False,
+                 transform_rotates_text=False,
+                 parse_math=None,    # defaults to rcParams['text.parse_math']
+                 **kwargs
+                 ):
+        """
+        Create a `.Text` instance at *x*, *y* with string *text*.
+
+        The text is aligned relative to the anchor point (*x*, *y*) according
+        to ``horizontalalignment`` (default: 'left') and ``verticalalignment``
+        (default: 'bottom'). See also
+        :doc:`/gallery/text_labels_and_annotations/text_alignment`.
+
+        While Text accepts the 'label' keyword argument, by default it is not
+        added to the handles of a legend.
+        """
+        super().__init__()
+        self._x, self._y = x, y
+        self._text = ''
+        self._reset_visual_defaults(
+            text=text,
+            color=color,
+            fontproperties=fontproperties,
+            usetex=usetex,
+            parse_math=parse_math,
+            wrap=wrap,
+            verticalalignment=verticalalignment,
+            horizontalalignment=horizontalalignment,
+            multialignment=multialignment,
+            rotation=rotation,
+            transform_rotates_text=transform_rotates_text,
+            linespacing=linespacing,
+            rotation_mode=rotation_mode,
+        )
+        self._antialiased = mpl.rcParams["text.antialiased"]  # Initialize with default value
+        self.update(kwargs)
+
+    def set_antialiased(self, antialiased):
+        """
+        Set the antialiasing state of the text.
+
+        Parameters
+        ----------
+        antialiased : bool
+            Whether to enable antialiasing.
+        """
+        self._antialiased = antialiased
+        self.stale = True
+
+    def get_antialiased(self):
+        """
+        Get the antialiasing state of the text.
+
+        Returns
+        -------
+        bool
+            Whether antialiasing is enabled.
+        """
+        return self._antialiased
     """Handle storing and drawing of text in window or data coordinates."""

     zorder = 3
diff --git a/test_antialiasing.py b/test_antialiasing.py
new file mode 100644
index 0000000000..6a279e439e
--- /dev/null
+++ b/test_antialiasing.py
@@ -0,0 +1,25 @@
+import matplotlib.pyplot as plt
+from matplotlib.text import Text
+
+# Create a figure and axis
+fig, ax = plt.subplots()
+
+# Create a Text object
+text = Text(0.5, 0.5, "Sample Text", ha="center", va="center", fontsize=20)
+
+# Add the Text object to the axis
+ax.add_artist(text)
+
+# Check the default antialiasing state
+print(f"Default antialiasing state: {{text.get_antialiased()}}")
+
+# Set antialiasing to False
+text.set_antialiased(False)
+print(f"Antialiasing state after setting to False: {{text.get_antialiased()}}")
+
+# Set antialiasing to True
+text.set_antialiased(True)
+print(f"Antialiasing state after setting to True: {{text.get_antialiased()}}")
+
+# Display the plot
+plt.show()
