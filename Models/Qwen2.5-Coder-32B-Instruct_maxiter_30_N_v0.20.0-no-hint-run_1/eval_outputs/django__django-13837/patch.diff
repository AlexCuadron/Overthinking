diff --git a/django/http/__init__.py b/django/http/__init__.py
index 491239bf8a..47fd9f7f37 100644
--- a/django/http/__init__.py
+++ b/django/http/__init__.py
@@ -1,4 +1,4 @@
-from django.http.cookie import SimpleCookie, parse_cookie
+
 from django.http.request import (
     HttpRequest, QueryDict, RawPostDataException, UnreadablePostError,
 )
diff --git a/pkg_other_than_django/__init__.py b/pkg_other_than_django/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/pkg_other_than_django/management/commands/runserver.py b/pkg_other_than_django/management/commands/runserver.py
new file mode 100644
index 0000000000..7cb0946ab3
--- /dev/null
+++ b/pkg_other_than_django/management/commands/runserver.py
@@ -0,0 +1,7 @@
+from django.core.management.base import BaseCommand
+
+class Command(BaseCommand):
+    help = 'Run a simple server'
+
+    def handle(self, *args, **options):
+        self.stdout.write(self.style.SUCCESS('Running a simple server...'))
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8be4b00bba
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,19 @@
+import os
+import sys
+
+# Add the django directory to the Python path
+sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'django')))
+
+# Simulate running a server with a package other than django
+if __name__ == '__main__':
+    from django.core.management import execute_from_command_line
+    import os
+import sys
+
+# Add the current directory to the Python path
+sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
+
+# Simulate running a server with a package other than django
+if __name__ == '__main__':
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['pkg_other_than_django', 'runserver'])
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..1baeec93f3
--- /dev/null
+++ b/server.log
@@ -0,0 +1,17 @@
+Traceback (most recent call last):
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 142, in _get_module_details
+    return _get_module_details(pkg_main_name, error)
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 136, in _get_module_details
+    raise error("No module named %s" % mod_name)
+ImportError: No module named pkg_other_than_django.__main__
+
+During handling of the above exception, another exception occurred:
+
+Traceback (most recent call last):
+  File "/workspace/django__django__3.2/reproduce_error.py", line 10, in <module>
+    import runpy; runpy.run_module('pkg_other_than_django')
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 201, in run_module
+    mod_name, mod_spec, code = _get_module_details(mod_name)
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/runpy.py", line 147, in _get_module_details
+    "be directly executed") %(e, mod_name))
+ImportError: No module named pkg_other_than_django.__main__; 'pkg_other_than_django' is a package and cannot be directly executed
