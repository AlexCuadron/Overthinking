diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..626f6a388
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,24 @@
+from sklearn.feature_extraction.text import CountVectorizer
+
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+
+vectorizer = CountVectorizer(vocabulary=vocabulary)
+
+try:
+    feature_names = vectorizer.get_feature_names()
+    print("Feature names:", feature_names)
+except Exception as e:
+    print("Error:", e)
+
+try:
+    transformed_corpus = vectorizer.transform(corpus)
+    print("Transformed corpus:\n", transformed_corpus)
+except Exception as e:
+    print("Error:", e)
\ No newline at end of file
diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index 9b1ebd632..533f41dd9 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -993,10 +993,13 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):

     def get_feature_names(self):
         """Array mapping from feature integer indices to feature name"""
-        self._check_vocabulary()
-
-        return [t for t, i in sorted(six.iteritems(self.vocabulary_),
-                                     key=itemgetter(1))]
+        if self.fixed_vocabulary_:
+            return [t for t, i in sorted(six.iteritems(self.vocabulary_),
+                                         key=itemgetter(1))]
+        else:
+            self._check_vocabulary()
+            return [t for t, i in sorted(six.iteritems(self.vocabulary_),
+                                         key=itemgetter(1))]


 def _make_int_array():
