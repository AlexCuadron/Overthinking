diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..f6db5287a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+import itertools
+import pytest
+
+class BaseMeta(type):
+    @property
+    def pytestmark(self):
+        return (
+            getattr(self, "_pytestmark", []) +
+            list(itertools.chain.from_iterable(getattr(x, "_pytestmark", []) for x in self.__mro__))
+        )
+
+    @pytestmark.setter
+    def pytestmark(self, value):
+        self._pytestmark = value
+
+
+from src._pytest.mark.custom_metaclass import BaseMeta
+
+class Base(object, metaclass=BaseMeta):
+    pass
+
+
+@pytest.mark.foo
+class Foo(Base):
+    pass
+
+
+@pytest.mark.bar
+class Bar(Base):
+    pass
+
+
+class TestDings(Foo, Bar):
+    def test_dings(self):
+        pass
+
+
+def test_markers():
+    test_dings_markers = [marker.name for marker in getattr(TestDings, 'pytestmark', [])]
+    foo_markers = [marker.name for marker in getattr(Foo, 'pytestmark', [])]
+    bar_markers = [marker.name for marker in getattr(Bar, 'pytestmark', [])]
+    base_markers = [marker.name for marker in getattr(Base, 'pytestmark', [])]
+    print(f"Markers on TestDings: {test_dings_markers}")
+    print(f"Markers on Foo: {foo_markers}")
+    print(f"Markers on Bar: {bar_markers}")
+    print(f"Markers on Base: {base_markers}")
+    print(f"MRO of TestDings: {TestDings.__mro__}")
+    collector_markers = [marker.name for marker in getattr(Collector, 'pytestmark', [])]
+    print(f"Markers on Collector: {collector_markers}")
+    assert len(test_dings_markers) == 1, f"Expected only one marker, but got {test_dings_markers}"
\ No newline at end of file
diff --git a/src/_pytest/mark/custom_metaclass.py b/src/_pytest/mark/custom_metaclass.py
new file mode 100644
index 000000000..7620da8e8
--- /dev/null
+++ b/src/_pytest/mark/custom_metaclass.py
@@ -0,0 +1,13 @@
+import itertools
+
+class BaseMeta(type):
+    @property
+    def pytestmark(self):
+        return (
+            getattr(self, "_pytestmark", []) +
+            list(itertools.chain.from_iterable(getattr(x, "_pytestmark", []) for x in self.__mro__))
+        )
+
+    @pytestmark.setter
+    def pytestmark(self, value):
+        self._pytestmark = value
\ No newline at end of file
diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py
index cfb9b5a36..f59ba5e2a 100644
--- a/src/_pytest/nodes.py
+++ b/src/_pytest/nodes.py
@@ -523,7 +523,19 @@ def get_fslocation_from_item(node: "Node") -> Tuple[Union[str, Path], Optional[i
     return getattr(node, "fspath", "unknown location"), -1


+from _pytest.mark.custom_metaclass import BaseMeta
+
 class Collector(Node):
+    @property
+    def pytestmark(self):
+        return (
+            getattr(self, "_pytestmark", []) +
+            list(itertools.chain.from_iterable(getattr(x, "_pytestmark", []) for x in self.__mro__))
+        )
+
+    @pytestmark.setter
+    def pytestmark(self, value):
+        self._pytestmark = value
     """Collector instances create children through collect() and thus
     iteratively build a tree."""
