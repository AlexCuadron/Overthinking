diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..80cc36a83b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,24 @@
+import numpy as np
+from sympy import Matrix
+from sympy.matrices.normalforms import hermite_normal_form
+
+# Original matrix
+matrix = np.array([[5, 8, 12], [0, 0, 1]])
+
+# Flipped and transposed matrix
+flipped_matrix = np.flip(matrix)
+transposed_matrix = flipped_matrix.T
+
+# Compute the Hermite Normal Form with debug prints
+print("Transposed matrix:")
+print(transposed_matrix)
+hnf_matrix = hermite_normal_form(Matrix(transposed_matrix))
+print("HNF matrix:")
+print(hnf_matrix)
+
+# Flip and transpose back
+result_matrix = np.flip(hnf_matrix.T).T
+
+# Print the result
+print("Resulting matrix:")
+print(result_matrix)
\ No newline at end of file
diff --git a/sympy/matrices/normalforms.py b/sympy/matrices/normalforms.py
index 7bce95d230..61ce7a5673 100644
--- a/sympy/matrices/normalforms.py
+++ b/sympy/matrices/normalforms.py
@@ -70,9 +70,13 @@ def invariant_factors(m, domain=None):
 def hermite_normal_form(A, *, D=None, check_rank=False):
     r"""
     Compute the Hermite Normal Form of a Matrix *A* of integers.
-
-    Examples
-    ========
+    """
+    print("Input matrix:")
+    print(A)
+    hnf_matrix = _hnf(A._rep, D=D, check_rank=check_rank).to_Matrix()
+    print("HNF matrix from _hnf:")
+    print(hnf_matrix)
+    return hnf_matrix

     >>> from sympy import Matrix
     >>> from sympy.matrices.normalforms import hermite_normal_form
