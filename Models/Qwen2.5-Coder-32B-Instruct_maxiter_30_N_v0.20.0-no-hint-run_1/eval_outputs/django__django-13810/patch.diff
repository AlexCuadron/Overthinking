diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..92bb9a3b2d
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_project/myapp/__init__.py b/test_project/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/myapp/admin.py b/test_project/myapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_project/myapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_project/myapp/apps.py b/test_project/myapp/apps.py
new file mode 100644
index 0000000000..c34fb20eb6
--- /dev/null
+++ b/test_project/myapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MyappConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'myapp'
diff --git a/test_project/myapp/migrations/__init__.py b/test_project/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/myapp/models.py b/test_project/myapp/models.py
new file mode 100644
index 0000000000..71a8362390
--- /dev/null
+++ b/test_project/myapp/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/test_project/myapp/tests.py b/test_project/myapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_project/myapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_project/myapp/views.py b/test_project/myapp/views.py
new file mode 100644
index 0000000000..f1bc649ece
--- /dev/null
+++ b/test_project/myapp/views.py
@@ -0,0 +1,6 @@
+from django.shortcuts import render
+
+from django.http import HttpResponse
+
+def index(request):
+    return HttpResponse("Hello, world!")
diff --git a/test_project/myproject/__init__.py b/test_project/myproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/myproject/asgi.py b/test_project/myproject/asgi.py
new file mode 100644
index 0000000000..4cd61b9b25
--- /dev/null
+++ b/test_project/myproject/asgi.py
@@ -0,0 +1,24 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+from django.core.asgi import get_asgi_application
+from channels.routing import ProtocolTypeRouter, URLRouter
+from django.urls import path
+from myapp.views import index
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = ProtocolTypeRouter({
+    "http": URLRouter([
+        path('', index),
+        path('admin/', admin.site.urls),
+    ]),
+    # (http->django views is added by default)
+})
diff --git a/test_project/myproject/settings.py b/test_project/myproject/settings.py
new file mode 100644
index 0000000000..0213f1a050
--- /dev/null
+++ b/test_project/myproject/settings.py
@@ -0,0 +1,137 @@
+"""
+Django settings for myproject project.
+
+Generated by 'django-admin startproject' using Django 3.2.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-jyci_e%yht9(r+2%3f&n#uef#mnfm%02g@&w*r#_$w8@9h(gjw'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+ASGI_APPLICATION = 'myproject.asgi.application'
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'debug_toolbar',
+    'myapp',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    'debug_toolbar.middleware.DebugToolbarMiddleware',
+    'asgi_djangotoolbar_bug.middleware.DummyMiddleware',
+]
+
+INTERNAL_IPS = [
+    '127.0.0.1',
+]
+
+SESSION_FILE_PATH = '/nonexistent/path'
+
+ROOT_URLCONF = 'myproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'myproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/test_project/myproject/urls.py b/test_project/myproject/urls.py
new file mode 100644
index 0000000000..c5170d41d3
--- /dev/null
+++ b/test_project/myproject/urls.py
@@ -0,0 +1,23 @@
+"""myproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+from myapp.views import index
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('', index),
+]
diff --git a/test_project/myproject/wsgi.py b/test_project/myproject/wsgi.py
new file mode 100644
index 0000000000..b3f18eed49
--- /dev/null
+++ b/test_project/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = get_wsgi_application()
diff --git a/test_project/run_server.py b/test_project/run_server.py
new file mode 100644
index 0000000000..a3e227b98e
--- /dev/null
+++ b/test_project/run_server.py
@@ -0,0 +1,7 @@
+import os
+import django
+from channels.routing import get_default_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+django.setup()
+application = get_default_application()
\ No newline at end of file
diff --git a/test_project/server.log b/test_project/server.log
new file mode 100644
index 0000000000..2b533ffa30
--- /dev/null
+++ b/test_project/server.log
@@ -0,0 +1,34 @@
+/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/OpenSSL/_util.py:6: CryptographyDeprecationWarning: Python 3.6 is no longer supported by the Python core team. Therefore, support for it is deprecated in cryptography. The next release of cryptography will remove support for Python 3.6.
+  from cryptography.hazmat.bindings.openssl.binding import Binding
+Traceback (most recent call last):
+  File "/opt/miniconda3/envs/testbed/bin/daphne", line 8, in <module>
+    sys.exit(CommandLineInterface.entrypoint())
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/daphne/cli.py", line 170, in entrypoint
+    cls().run(sys.argv[1:])
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/daphne/cli.py", line 232, in run
+    application = import_by_path(args.application)
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/daphne/utils.py", line 12, in import_by_path
+    target = importlib.import_module(module_path)
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/importlib/__init__.py", line 126, in import_module
+    return _bootstrap._gcd_import(name[level:], package, level)
+  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
+  File "<frozen importlib._bootstrap>", line 665, in _load_unlocked
+  File "<frozen importlib._bootstrap_external>", line 678, in exec_module
+  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
+  File "./run_server.py", line 7, in <module>
+    application = get_default_application()
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/channels/routing.py", line 28, in get_default_application
+    module = importlib.import_module(path)
+  File "/opt/miniconda3/envs/testbed/lib/python3.6/importlib/__init__.py", line 126, in import_module
+    return _bootstrap._gcd_import(name[level:], package, level)
+  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
+  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
+  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
+  File "<frozen importlib._bootstrap>", line 665, in _load_unlocked
+  File "<frozen importlib._bootstrap_external>", line 678, in exec_module
+  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
+  File "./myproject/asgi.py", line 21, in <module>
+    path('admin/', admin.site.urls),
+NameError: name 'admin' is not defined
