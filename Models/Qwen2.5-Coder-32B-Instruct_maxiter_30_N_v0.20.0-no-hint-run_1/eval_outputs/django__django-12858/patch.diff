diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..9cdcf6a71a
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/myproject/app/migrations/0001_initial.py b/myproject/app/migrations/0001_initial.py
new file mode 100644
index 0000000000..e24b82c9f5
--- /dev/null
+++ b/myproject/app/migrations/0001_initial.py
@@ -0,0 +1,41 @@
+# Generated by Django 3.1 on 2025-01-23 11:14
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Product',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.product')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Supply',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.product')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Stock',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('quantity', models.IntegerField()),
+                ('supply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.supply')),
+            ],
+            options={
+                'ordering': ['supply__product__parent__isnull'],
+            },
+        ),
+    ]
diff --git a/myproject/app/migrations/__init__.py b/myproject/app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/app/models.py b/myproject/app/models.py
new file mode 100644
index 0000000000..b62fe27e53
--- /dev/null
+++ b/myproject/app/models.py
@@ -0,0 +1,20 @@
+from django.db import models
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    parent = models.ForeignKey('self', models.CASCADE, null=True, blank=True)
+
+class Supply(models.Model):
+    product = models.ForeignKey(Product, models.CASCADE)
+
+class Stock(models.Model):
+    supply = models.ForeignKey(Supply, models.CASCADE)
+    quantity = models.IntegerField()
+
+    class Meta:
+        # Remove the ordering here
+        pass
+
+    @classmethod
+    def ordered_by_parent_isnull(cls):
+        return cls.objects.order_by('supply__product__parent__isnull')
\ No newline at end of file
diff --git a/myproject/settings.py b/myproject/settings.py
new file mode 100644
index 0000000000..fc575b83a6
--- /dev/null
+++ b/myproject/settings.py
@@ -0,0 +1,83 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'your-secret-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'app',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'myproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'myproject.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/myproject/urls.py b/myproject/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/myproject/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..06c8ae9417
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,44 @@
+import os
+import sys
+import django
+
+sys.path.append('/workspace/django__django__3.1/myproject')
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+django.setup()
+
+from app.models import Product, Supply, Stock
+
+try:
+    Stock.objects.order_by('supply__product__parent__isnull').values_list('pk', flat=True)[:5]
+    Stock.objects.order_by('-supply__product__parent__isnull').values_list('pk', flat=True)[:5]
+    print("No error raised in ordering.")
+except Exception as e:
+    print(f"Error raised: {e}")
+
+from django.core.management import call_command
+from django.db import connection
+
+# Create database tables
+call_command('makemigrations', 'app')
+call_command('migrate')
+
+# Create test data
+product1 = Product.objects.create(name='Product 1')
+product2 = Product.objects.create(name='Product 2', parent=product1)
+supply1 = Supply.objects.create(product=product1)
+supply2 = Supply.objects.create(product=product2)
+stock1 = Stock.objects.create(supply=supply1, quantity=10)
+stock2 = Stock.objects.create(supply=supply2, quantity=20)
+
+try:
+    Stock.objects.order_by('supply__product__parent__isnull').values_list('pk', flat=True)[:5]
+    Stock.objects.order_by('-supply__product__parent__isnull').values_list('pk', flat=True)[:5]
+    print("No error raised in ordering.")
+except Exception as e:
+    print(f"Error raised: {e}")
+
+try:
+    call_command('check')
+except Exception as e:
+    print(f"System check error: {e}")
\ No newline at end of file
