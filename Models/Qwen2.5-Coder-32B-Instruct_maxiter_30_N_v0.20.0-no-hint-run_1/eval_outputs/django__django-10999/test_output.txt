+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/utils/dateparse.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_parse_duration.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 36300ef336e3f130a0dadc1143163ff3d23dc843
Author: Tim Graham <timograham@gmail.com>
Date:   Thu Feb 21 12:50:33 2019 -0500

    Fixed a failure when running tests on systems with SQLite < 3.8.3.

diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py
index e53d453ed5..21be45fb11 100644
--- a/tests/backends/sqlite/tests.py
+++ b/tests/backends/sqlite/tests.py
@@ -6,7 +6,6 @@ from unittest import mock
 
 from django.core.exceptions import ImproperlyConfigured
 from django.db import connection, transaction
-from django.db.backends.sqlite3.base import check_sqlite_version
 from django.db.models import Avg, StdDev, Sum, Variance
 from django.db.models.aggregates import Aggregate
 from django.db.models.fields import CharField
@@ -18,6 +17,12 @@ from django.test.utils import isolate_apps
 
 from ..models import Author, Item, Object, Square
 
+try:
+    from django.db.backends.sqlite3.base import check_sqlite_version
+except ImproperlyConfigured:
+    # Ignore "SQLite is too old" when running tests on another database.
+    pass
+
 
 @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')
 class Tests(TestCase):
+ git diff 36300ef336e3f130a0dadc1143163ff3d23dc843
diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..c755fd97bc 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -136,11 +136,15 @@ def parse_duration(value):
     )
     if match:
         kw = match.groupdict()
-        days = datetime.timedelta(float(kw.pop('days', 0) or 0))
-        sign = -1 if kw.pop('sign', '+') == '-' else 1
-        if kw.get('microseconds'):
-            kw['microseconds'] = kw['microseconds'].ljust(6, '0')
-        if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):
-            kw['microseconds'] = '-' + kw['microseconds']
-        kw = {k: float(v) for k, v in kw.items() if v is not None}
-        return days + sign * datetime.timedelta(**kw)
+        print(f"Matched groups: {kw}")
+        days = float(kw.pop('days', 0) or 0)
+        hours = float(kw.get('hours', 0) or 0)
+        minutes = float(kw.get('minutes', 0) or 0)
+        seconds = float(kw.get('seconds', 0) or 0)
+        microseconds = float(kw.get('microseconds', 0) or 0)
+        sign = -1 if hours < 0 or days < 0 else 1
+        print(f"Sign: {sign}")
+        total_seconds = abs(days) * 86400 + abs(hours) * 3600 + abs(minutes) * 60 + abs(seconds) + abs(microseconds) / 1e6
+        result = datetime.timedelta(seconds=total_seconds * sign)
+        print(f"Result: {result}")
+        return result
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190221175210) (2024.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190221175210) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190221175210
    Uninstalling Django-3.0.dev20190221175210:
      Successfully uninstalled Django-3.0.dev20190221175210
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190221175210
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 36300ef336e3f130a0dadc1143163ff3d23dc843 tests/utils_tests/test_dateparse.py
Updated 0 paths from 224ba71b0b
+ git apply -v -
Checking patch tests/utils_tests/test_dateparse.py...
Applied patch tests/utils_tests/test_dateparse.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 utils_tests.test_dateparse
test_parse_date (utils_tests.test_dateparse.DateParseTests) ... ok
test_parse_datetime (utils_tests.test_dateparse.DateParseTests) ... ok
test_parse_time (utils_tests.test_dateparse.DateParseTests) ... ok
test_days (utils_tests.test_dateparse.DurationParseTests) ... ok
test_fractions_of_seconds (utils_tests.test_dateparse.DurationParseTests) ... test_hours_minutes_seconds (utils_tests.test_dateparse.DurationParseTests) ... ok
test_iso_8601 (utils_tests.test_dateparse.DurationParseTests) ... ok
test_minutes_seconds (utils_tests.test_dateparse.DurationParseTests) ... ok
test_negative (utils_tests.test_dateparse.DurationParseTests) ... test_parse_postgresql_format (utils_tests.test_dateparse.DurationParseTests) ... test_parse_python_format (utils_tests.test_dateparse.DurationParseTests) ... test_seconds (utils_tests.test_dateparse.DurationParseTests) ... ok

======================================================================
FAIL: test_fractions_of_seconds (utils_tests.test_dateparse.DurationParseTests) (source='15:30.1')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 110, in test_fractions_of_seconds
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 930, 1) != datetime.timedelta(0, 930, 100000)

======================================================================
FAIL: test_fractions_of_seconds (utils_tests.test_dateparse.DurationParseTests) (source='15:30.01')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 110, in test_fractions_of_seconds
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 930, 1) != datetime.timedelta(0, 930, 10000)

======================================================================
FAIL: test_fractions_of_seconds (utils_tests.test_dateparse.DurationParseTests) (source='15:30.001')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 110, in test_fractions_of_seconds
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 930, 1) != datetime.timedelta(0, 930, 1000)

======================================================================
FAIL: test_fractions_of_seconds (utils_tests.test_dateparse.DurationParseTests) (source='15:30.0001')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 110, in test_fractions_of_seconds
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 930, 1) != datetime.timedelta(0, 930, 100)

======================================================================
FAIL: test_fractions_of_seconds (utils_tests.test_dateparse.DurationParseTests) (source='15:30.00001')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 110, in test_fractions_of_seconds
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 930, 1) != datetime.timedelta(0, 930, 10)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-4 15:30')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(-5, 85470) != datetime.timedelta(-4, 930)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-172800')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(2) != datetime.timedelta(-2)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-15:30')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 930) != datetime.timedelta(-1, 85470)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-30.1')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 30, 1) != datetime.timedelta(-1, 86369, 900000)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-00:01:01')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 61) != datetime.timedelta(-1, 86339)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-01:01')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 61) != datetime.timedelta(-1, 86339)

======================================================================
FAIL: test_negative (utils_tests.test_dateparse.DurationParseTests) (source='-01:-01')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 125, in test_negative
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(0, 61) != None

======================================================================
FAIL: test_parse_postgresql_format (utils_tests.test_dateparse.DurationParseTests) (source='1 day -0:00:01')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 81, in test_parse_postgresql_format
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(1, 1) != datetime.timedelta(0, 86399)

======================================================================
FAIL: test_parse_postgresql_format (utils_tests.test_dateparse.DurationParseTests) (source='-1 day +0:00:01')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 81, in test_parse_postgresql_format
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(-2, 86399) != datetime.timedelta(-1, 1)

======================================================================
FAIL: test_parse_postgresql_format (utils_tests.test_dateparse.DurationParseTests) (source='4 days 0:15:30.1')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 81, in test_parse_postgresql_format
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(4, 930, 1) != datetime.timedelta(4, 930, 100000)

======================================================================
FAIL: test_parse_postgresql_format (utils_tests.test_dateparse.DurationParseTests) (source='4 days 0:15:30.0001')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 81, in test_parse_postgresql_format
    self.assertEqual(parse_duration(source), expected)
AssertionError: datetime.timedelta(4, 930, 1) != datetime.timedelta(4, 930, 100)

======================================================================
FAIL: test_parse_python_format (utils_tests.test_dateparse.DurationParseTests) (delta=datetime.timedelta(-4, 930))
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_dateparse.py", line 66, in test_parse_python_format
    self.assertEqual(parse_duration(format(delta)), delta)
AssertionError: datetime.timedelta(-5, 85470) != datetime.timedelta(-4, 930)

----------------------------------------------------------------------
Ran 12 tests in 0.004s

FAILED (failures=17)
Testing against Django installed in '/testbed/django'
Importing application utils_tests
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
Matched groups: {'days': '4', 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 4 days, 0:15:30
Matched groups: {'days': '4', 'hours': '10', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 4 days, 10:15:30
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': '1'}
Sign: 1
Result: 0:15:30.000001
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': '01'}
Sign: 1
Result: 0:15:30.000001
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': '001'}
Sign: 1
Result: 0:15:30.000001
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': '0001'}
Sign: 1
Result: 0:15:30.000001
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': '00001'}
Sign: 1
Result: 0:15:30.000001
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': '000001'}
Sign: 1
Result: 0:15:30.000001
Matched groups: {'days': None, 'hours': '10', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 10:15:30
Matched groups: {'days': None, 'hours': '1', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 1:15:30
Matched groups: {'days': None, 'hours': '100', 'minutes': '200', 'seconds': '300', 'microseconds': None}
Sign: 1
Result: 4 days, 7:25:00
Matched groups: {'sign': '', 'days': '4', 'hours': None, 'minutes': None, 'seconds': None}
Sign: 1
Result: 4 days, 0:00:00
Matched groups: {'sign': '', 'days': '0.5', 'hours': None, 'minutes': None, 'seconds': None}
Sign: 1
Result: 12:00:00
Matched groups: {'sign': '', 'days': None, 'hours': '5', 'minutes': None, 'seconds': None}
Sign: 1
Result: 5:00:00
Matched groups: {'sign': '', 'days': None, 'hours': None, 'minutes': '5', 'seconds': None}
Sign: 1
Result: 0:05:00
Matched groups: {'sign': '', 'days': None, 'hours': None, 'minutes': None, 'seconds': '5'}
Sign: 1
Result: 0:00:05
Matched groups: {'sign': '', 'days': None, 'hours': None, 'minutes': None, 'seconds': '0.000005'}
Sign: 1
Result: 0:00:00.000005
Matched groups: {'days': None, 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 0:15:30
Matched groups: {'days': None, 'hours': None, 'minutes': '5', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 0:05:30
Matched groups: {'days': '-4', 'hours': None, 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: -1
Result: -5 days, 23:44:30
Matched groups: {'days': None, 'hours': None, 'minutes': None, 'seconds': '-172800', 'microseconds': None}
Sign: 1
Result: 2 days, 0:00:00
Matched groups: {'days': None, 'hours': None, 'minutes': '-15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 0:15:30
Matched groups: {'days': None, 'hours': '-1', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: -1
Result: -1 day, 22:44:30
Matched groups: {'days': None, 'hours': None, 'minutes': None, 'seconds': '-30', 'microseconds': '1'}
Sign: 1
Result: 0:00:30.000001
Matched groups: {'days': None, 'hours': '-00', 'minutes': '01', 'seconds': '01', 'microseconds': None}
Sign: 1
Result: 0:01:01
Matched groups: {'days': None, 'hours': None, 'minutes': '-01', 'seconds': '01', 'microseconds': None}
Sign: 1
Result: 0:01:01
Matched groups: {'days': None, 'hours': None, 'minutes': '-01', 'seconds': '-01', 'microseconds': None}
Sign: 1
Result: 0:01:01
Matched groups: {'days': '1', 'sign': None, 'hours': None, 'minutes': None, 'seconds': None, 'microseconds': None}
Sign: 1
Result: 1 day, 0:00:00
Matched groups: {'days': '1', 'sign': None, 'hours': '0', 'minutes': '00', 'seconds': '01', 'microseconds': None}
Sign: 1
Result: 1 day, 0:00:01
Matched groups: {'days': '1', 'sign': '-', 'hours': '0', 'minutes': '00', 'seconds': '01', 'microseconds': None}
Sign: 1
Result: 1 day, 0:00:01
Matched groups: {'days': '-1', 'sign': '-', 'hours': '0', 'minutes': '00', 'seconds': '01', 'microseconds': None}
Sign: -1
Result: -2 days, 23:59:59
Matched groups: {'days': '-1', 'sign': '+', 'hours': '0', 'minutes': '00', 'seconds': '01', 'microseconds': None}
Sign: -1
Result: -2 days, 23:59:59
Matched groups: {'days': '4', 'sign': None, 'hours': '0', 'minutes': '15', 'seconds': '30', 'microseconds': '1'}
Sign: 1
Result: 4 days, 0:15:30.000001
Matched groups: {'days': '4', 'sign': None, 'hours': '0', 'minutes': '15', 'seconds': '30', 'microseconds': '0001'}
Sign: 1
Result: 4 days, 0:15:30.000001
Matched groups: {'days': '-4', 'sign': '-', 'hours': '15', 'minutes': '00', 'seconds': '30', 'microseconds': None}
Sign: -1
Result: -5 days, 8:59:30
Matched groups: {'days': '4', 'hours': '0', 'minutes': '15', 'seconds': '30', 'microseconds': '100000'}
Sign: 1
Result: 4 days, 0:15:30.100000
Matched groups: {'days': None, 'hours': '10', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 10:15:30
Matched groups: {'days': '4', 'hours': '0', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 4 days, 0:15:30
Matched groups: {'days': '1', 'hours': '0', 'minutes': '00', 'seconds': '00', 'microseconds': None}
Sign: 1
Result: 1 day, 0:00:00
Matched groups: {'days': '-4', 'hours': '0', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: -1
Result: -5 days, 23:44:30
Matched groups: {'days': None, 'hours': '0', 'minutes': '15', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 0:15:30
Matched groups: {'days': None, 'hours': '0', 'minutes': '00', 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 0:00:30
Matched groups: {'days': None, 'hours': None, 'minutes': None, 'seconds': '30', 'microseconds': None}
Sign: 1
Result: 0:00:30
+ git checkout 36300ef336e3f130a0dadc1143163ff3d23dc843 tests/utils_tests/test_dateparse.py
Updated 1 path from 224ba71b0b
