diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py
index 8d08b7d1d3..c755fd97bc 100644
--- a/django/utils/dateparse.py
+++ b/django/utils/dateparse.py
@@ -136,11 +136,15 @@ def parse_duration(value):
     )
     if match:
         kw = match.groupdict()
-        days = datetime.timedelta(float(kw.pop('days', 0) or 0))
-        sign = -1 if kw.pop('sign', '+') == '-' else 1
-        if kw.get('microseconds'):
-            kw['microseconds'] = kw['microseconds'].ljust(6, '0')
-        if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):
-            kw['microseconds'] = '-' + kw['microseconds']
-        kw = {k: float(v) for k, v in kw.items() if v is not None}
-        return days + sign * datetime.timedelta(**kw)
+        print(f"Matched groups: {kw}")
+        days = float(kw.pop('days', 0) or 0)
+        hours = float(kw.get('hours', 0) or 0)
+        minutes = float(kw.get('minutes', 0) or 0)
+        seconds = float(kw.get('seconds', 0) or 0)
+        microseconds = float(kw.get('microseconds', 0) or 0)
+        sign = -1 if hours < 0 or days < 0 else 1
+        print(f"Sign: {sign}")
+        total_seconds = abs(days) * 86400 + abs(hours) * 3600 + abs(minutes) * 60 + abs(seconds) + abs(microseconds) / 1e6
+        result = datetime.timedelta(seconds=total_seconds * sign)
+        print(f"Result: {result}")
+        return result
diff --git a/test_parse_duration.py b/test_parse_duration.py
new file mode 100644
index 0000000000..e40411d70e
--- /dev/null
+++ b/test_parse_duration.py
@@ -0,0 +1,15 @@
+from django.utils.dateparse import parse_duration
+import unittest
+
+class TestParseDuration(unittest.TestCase):
+    def test_negative_duration(self):
+        self.assertEqual(parse_duration('-1:00:00'), -1 * parse_duration('1:00:00'))
+        self.assertEqual(parse_duration('-2:30:45'), -1 * parse_duration('2:30:45'))
+        self.assertEqual(parse_duration('-0:30:45'), -1 * parse_duration('0:30:45'))
+        self.assertEqual(parse_duration('-0:00:45'), -1 * parse_duration('0:00:45'))
+        self.assertEqual(parse_duration('-0:00:00.123456'), -1 * parse_duration('0:00:00.123456'))
+        self.assertEqual(parse_duration('-1 00:00:00'), -1 * parse_duration('1 00:00:00'))
+        self.assertEqual(parse_duration('-2 days, 00:00:00'), -1 * parse_duration('2 days, 00:00:00'))
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
