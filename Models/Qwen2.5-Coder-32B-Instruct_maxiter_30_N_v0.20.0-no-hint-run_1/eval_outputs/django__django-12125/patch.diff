diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 7d226955d5..35eb90d2d0 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -90,12 +90,12 @@ class DeconstructableSerializer(BaseSerializer):

     @staticmethod
     def _serialize_path(path):
-        module, name = path.rsplit(".", 1)
-        if module == "django.db.models":
+        parts = path.split(".")
+        if parts[0] == "django.db.models":
             imports = {"from django.db import models"}
-            name = "models.%s" % name
+            name = "models." + ".".join(parts[1:])
         else:
-            imports = {"import %s" % module}
+            imports = {"import %s" % ".".join(parts[:-1])}
             name = path
         return name, imports

@@ -196,7 +196,14 @@ class IterableSerializer(BaseSerializer):
 class ModelFieldSerializer(DeconstructableSerializer):
     def serialize(self):
         attr_name, path, args, kwargs = self.value.deconstruct()
-        return self.serialize_deconstructed(path, args, kwargs)
+        if '.' in path and path.split('.')[-1] in dir(eval('.'.join(path.split('.')[:-1]))):
+    module_path = '.'.join(path.split('.')[:-1])
+    class_name = path.split('.')[-1]
+    imports = {"import %s" % module_path}
+    name = "%s.%s" % (module_path.split('.')[-1], class_name)
+else:
+    name, imports = self._serialize_path(path)
+return "%s(%s)" % (name, ", ".join(args + [f"{k}={v}" for k, v in kwargs.items()])), imports


 class ModelManagerSerializer(DeconstructableSerializer):
diff --git a/reproduce_makemigrations_error.py b/reproduce_makemigrations_error.py
new file mode 100644
index 0000000000..b48d400b12
--- /dev/null
+++ b/reproduce_makemigrations_error.py
@@ -0,0 +1,71 @@
+import os
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+# Set up Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'testdb.sqlite3',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        'testapp',
+    ],
+    ROOT_URLCONF='testapp.urls',
+    MIDDLEWARE=[
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'DIRS': [],
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [
+                    'django.template.context_processors.debug',
+                    'django.template.context_processors.request',
+                    'django.contrib.auth.context_processors.auth',
+                    'django.contrib.messages.context_processors.messages',
+                ],
+            },
+        },
+    ],
+    STATIC_URL='/static/',
+)
+
+# Create a test app
+os.makedirs('testapp/migrations', exist_ok=True)
+with open('testapp/__init__.py', 'w') as f:
+    pass
+with open('testapp/models.py', 'w') as f:
+    f.write("""
+from django.db import models
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
+""")
+
+# Initialize Django
+django.setup()
+
+# Call makemigrations
+call_command('makemigrations', 'testapp')
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..f79ce20369
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.1 on 2025-01-23 10:46
+
+from django.db import migrations, models
+import testapp.models.Outer
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='A',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field', testapp.models.Outer.Inner(max_length=20)),
+            ],
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..d95ab58b95
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,9 @@
+
+from django.db import models
+
+class Outer(object):
+    class Inner(models.CharField):
+        pass
+
+class A(models.Model):
+    field = Outer.Inner(max_length=20)
diff --git a/testdb.sqlite3 b/testdb.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
