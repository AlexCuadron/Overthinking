diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..aef24bc578
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+from sympy import geometry as ge
+import sympy
+
+point1 = ge.Point(0,0)
+point2 = ge.Point(1,1)
+
+# This line works fine
+print(point1 + point2 * sympy.sympify(2.0))
+
+# But when I write the same this way it raises an exception
+print(point1 + sympy.sympify(2.0) * point2)
\ No newline at end of file
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..f11a90e33c 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -248,7 +248,26 @@ def __len__(self):
         return len(self.args)

     def __mul__(self, factor):
-        """Multiply point's coordinates by a factor.
+        """Multiply point's coordinates by a factor."""
+        factor = sympify(factor)
+        coords = [simplify(x*factor) for x in self.args]
+        return Point(coords, evaluate=False)
+
+    def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)
+
+    def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)
+
+    def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)
+
+    def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)

         Notes
         =====
@@ -259,18 +278,30 @@ def __mul__(self, factor):
         the coordinates of the Point will be changed to Floats:

         >>> Point(1, 2)*0.1
+def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)
         Point2D(0.1, 0.2)

         If this is not desired, the `scale` method can be used or
         else only multiply or divide by integers:
+def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)

         >>> Point(1, 2).scale(1.1, 1.1)
         Point2D(11/10, 11/5)
         >>> Point(1, 2)*11/10
+def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)
         Point2D(11/10, 11/5)

         See Also
         ========
+def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)

         sympy.geometry.point.Point.scale
         """
@@ -278,6 +309,9 @@ def __mul__(self, factor):
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)

+def __rmul__(self, factor):
+        """Handle multiplication of a Point by a scalar on the left side."""
+        return self.__mul__(factor)
     def __neg__(self):
         """Negate the point."""
         coords = [-x for x in self.args]
