2024-12-23 08:03:02,361 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm
2024-12-23 08:04:42,314 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm] build finished.
2024-12-23 08:04:42,322 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm] with more generic tag [oh_v0.16.0_972gb8vrup9h0ryv]
2024-12-23 08:04:42,325 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm, oh_v0.16.0_972gb8vrup9h0ryv] built successfully
2024-12-23 08:04:42,334 - INFO - [runtime 6651db3d-d9ba-41f9-8d8d-a4d92354e26f-fb54f9f600274bb0] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm
2024-12-23 08:04:42,594 - INFO - [runtime 6651db3d-d9ba-41f9-8d8d-a4d92354e26f-fb54f9f600274bb0] Container started: openhands-runtime-6651db3d-d9ba-41f9-8d8d-a4d92354e26f-fb54f9f600274bb0. VSCode URL: None
2024-12-23 08:04:42,597 - INFO - [runtime 6651db3d-d9ba-41f9-8d8d-a4d92354e26f-fb54f9f600274bb0] Waiting for client to become ready at http://localhost:33467...
2024-12-23 08:05:02,664 - INFO - [runtime 6651db3d-d9ba-41f9-8d8d-a4d92354e26f-fb54f9f600274bb0] Runtime is ready.
2024-12-23 08:05:02,780 - INFO - ------------------------------
2024-12-23 08:05:02,780 - INFO - BEGIN Runtime Initialization Fn
2024-12-23 08:05:02,780 - INFO - ------------------------------
2024-12-23 08:05:02,780 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-14248' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2024-12-23 08:05:02,919 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:02,919 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2024-12-23 08:05:03,027 - INFO - **CmdOutputObservation (source=None, exit code=0)**
USER=root
2024-12-23 08:05:03,027 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2024-12-23 08:05:03,134 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:03,141 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2024-12-23 08:05:03,248 - INFO - **CmdOutputObservation (source=None, exit code=0)**
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-14248
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
2024-12-23 08:05:03,248 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2024-12-23 08:05:03,455 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:03,455 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2024-12-23 08:05:04,004 - INFO - **CmdOutputObservation (source=None, exit code=0)**
WORKSPACE_NAME: sympy__sympy__1.1
2024-12-23 08:05:04,004 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.1
2024-12-23 08:05:04,109 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:04,109 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2024-12-23 08:05:04,442 - INFO - **CmdOutputObservation (source=None, exit code=0)**
HEAD is now at 9986b38181 Merge pull request #14254 from akash9712/prob_cond
2024-12-23 08:05:04,442 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2024-12-23 08:05:04,549 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:04,549 - INFO - ------------------------------
2024-12-23 08:05:04,550 - INFO - END Runtime Initialization Fn
2024-12-23 08:05:04,550 - INFO - ------------------------------
2024-12-23 08:05:04,550 - INFO - Function calling not enabled for model openai/neulab/o1. Mocking function calling via prompting.
2024-12-23 08:05:04,552 - INFO - [Agent Controller default] Starting step loop...
2024-12-23 08:05:04,553 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2024-12-23 08:05:05,655 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2024-12-23 08:05:05,817 - ERROR - [Agent Controller default] Error while running the agent: litellm.BadRequestError: OpenAIException - Error code: 400 - {'error': {'message': 'Budget has been exceeded! Current cost: 2501.878305000001, Max budget: 2500.0', 'type': 'budget_exceeded', 'param': None, 'code': '400'}}
2024-12-23 08:05:05,817 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2024-12-23 08:05:05,817 - ERROR - litellm.BadRequestError: OpenAIException - Error code: 400 - {'error': {'message': 'Budget has been exceeded! Current cost: 2501.878305000001, Max budget: 2500.0', 'type': 'budget_exceeded', 'param': None, 'code': '400'}}
2024-12-23 08:05:05,818 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2024-12-23 08:05:06,557 - INFO - ------------------------------
2024-12-23 08:05:06,557 - INFO - BEGIN Runtime Completion Fn
2024-12-23 08:05:06,557 - INFO - ------------------------------
2024-12-23 08:05:06,557 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.1
2024-12-23 08:05:06,663 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:06,663 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2024-12-23 08:05:06,770 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:06,771 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2024-12-23 08:05:06,990 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:06,990 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 9986b38181cdd556a3f3411e553864f11912244e
2024-12-23 08:05:07,100 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:05:07,100 - INFO - ------------------------------
2024-12-23 08:05:07,100 - INFO - END Runtime Completion Fn
2024-12-23 08:05:07,100 - INFO - ------------------------------
2024-12-23 08:05:07,100 - INFO - Got git diff for instance sympy__sympy-14248:
--------

--------
2024-12-23 08:05:13,176 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sympy_s_sympy-14711. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2024-12-23 08:05:13,177 - INFO - Logging LLM completions for instance sympy__sympy-14711 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.16.0-no-hint-run_1/llm_completions/sympy__sympy-14711
2024-12-24 13:26:19,652 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm
2024-12-24 13:28:05,600 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm] build finished.
2024-12-24 13:28:05,607 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm] with more generic tag [oh_v0.16.0_972gb8vrup9h0ryv]
2024-12-24 13:28:05,609 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm, oh_v0.16.0_972gb8vrup9h0ryv] built successfully
2024-12-24 13:28:05,615 - INFO - [runtime 82bb57c3-92a5-400a-8bdd-c6255537f6a9-1a4e4d0cafb30b5c] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_972gb8vrup9h0ryv_yajo72un47o9ydtm
2024-12-24 13:28:05,997 - INFO - [runtime 82bb57c3-92a5-400a-8bdd-c6255537f6a9-1a4e4d0cafb30b5c] Container started: openhands-runtime-82bb57c3-92a5-400a-8bdd-c6255537f6a9-1a4e4d0cafb30b5c. VSCode URL: None
2024-12-24 13:28:06,000 - INFO - [runtime 82bb57c3-92a5-400a-8bdd-c6255537f6a9-1a4e4d0cafb30b5c] Waiting for client to become ready at http://localhost:30912...
2024-12-24 13:28:24,055 - INFO - [runtime 82bb57c3-92a5-400a-8bdd-c6255537f6a9-1a4e4d0cafb30b5c] Runtime is ready.
2024-12-24 13:28:24,170 - INFO - ------------------------------
2024-12-24 13:28:24,170 - INFO - BEGIN Runtime Initialization Fn
2024-12-24 13:28:24,170 - INFO - ------------------------------
2024-12-24 13:28:24,171 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-14248' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2024-12-24 13:28:24,281 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:28:24,281 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2024-12-24 13:28:24,388 - INFO - **CmdOutputObservation (source=None, exit code=0)**
USER=root
2024-12-24 13:28:24,388 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2024-12-24 13:28:24,495 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:28:24,501 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2024-12-24 13:28:24,607 - INFO - **CmdOutputObservation (source=None, exit code=0)**
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-14248
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
2024-12-24 13:28:24,607 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2024-12-24 13:28:24,805 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:28:24,805 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2024-12-24 13:28:25,324 - INFO - **CmdOutputObservation (source=None, exit code=0)**
WORKSPACE_NAME: sympy__sympy__1.1
2024-12-24 13:28:25,325 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.1
2024-12-24 13:28:25,429 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:28:25,430 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2024-12-24 13:28:25,756 - INFO - **CmdOutputObservation (source=None, exit code=0)**
HEAD is now at 9986b38181 Merge pull request #14254 from akash9712/prob_cond
2024-12-24 13:28:25,756 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2024-12-24 13:28:25,864 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:28:25,864 - INFO - ------------------------------
2024-12-24 13:28:25,864 - INFO - END Runtime Initialization Fn
2024-12-24 13:28:25,864 - INFO - ------------------------------
2024-12-24 13:28:25,865 - INFO - Function calling not enabled for model openai/neulab/o1. Mocking function calling via prompting.
2024-12-24 13:28:25,867 - INFO - [Agent Controller default] Starting step loop...
2024-12-24 13:28:25,867 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2024-12-24 13:28:26,968 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2024-12-24 13:28:42,477 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2024-12-24 13:28:52,494 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2024-12-24 13:29:05,720 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2024-12-24 13:29:24,429 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2024-12-24 13:29:43,604 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2024-12-24 13:29:53,037 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2024-12-24 13:30:39,004 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2024-12-24 13:31:14,652 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2024-12-24 13:32:01,401 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2024-12-24 13:32:05,632 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2024-12-24 13:33:09,096 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2024-12-24 13:33:37,268 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2024-12-24 13:34:04,031 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2024-12-24 13:35:06,511 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2024-12-24 13:35:47,179 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2024-12-24 13:35:56,551 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2024-12-24 13:37:24,774 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2024-12-24 13:37:31,205 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2024-12-24 13:38:02,700 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2024-12-24 13:38:12,088 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 20 GLOBAL STEP 20
2024-12-24 13:39:23,105 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 21 GLOBAL STEP 21
2024-12-24 13:39:35,569 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 22 GLOBAL STEP 22
2024-12-24 13:39:45,848 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 23 GLOBAL STEP 23
2024-12-24 13:40:11,243 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 24 GLOBAL STEP 24
2024-12-24 13:40:20,229 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 25 GLOBAL STEP 25
2024-12-24 13:40:32,823 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 26 GLOBAL STEP 26
2024-12-24 13:40:43,709 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 27 GLOBAL STEP 27
2024-12-24 13:40:59,713 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 28 GLOBAL STEP 28
2024-12-24 13:41:16,180 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 29 GLOBAL STEP 29
2024-12-24 13:41:40,705 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 30 GLOBAL STEP 30
2024-12-24 13:41:40,706 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2024-12-24 13:41:40,706 - ERROR - Agent reached maximum iteration in headless mode. Current iteration: 30, max iteration: 30
2024-12-24 13:41:40,706 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2024-12-24 13:41:41,601 - INFO - ------------------------------
2024-12-24 13:41:41,601 - INFO - BEGIN Runtime Completion Fn
2024-12-24 13:41:41,601 - INFO - ------------------------------
2024-12-24 13:41:41,601 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.1
2024-12-24 13:41:41,706 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:41:41,707 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2024-12-24 13:41:41,813 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:41:41,813 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2024-12-24 13:41:42,034 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 13:41:42,035 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached 9986b38181cdd556a3f3411e553864f11912244e
2024-12-24 13:41:42,148 - INFO - **CmdOutputObservation (source=None, exit code=0)**
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..dfa6448985 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -300,26 +300,35 @@ def _print_NoneType(self, e):
 
 
     def _print_Add(self, expr, order=None):
-        if self.order == 'none':
+        from sympy.matrices.expressions.matexpr import MatrixExpr
+        if any(isinstance(a, MatrixExpr) for a in expr.args):
+            terms = list(expr.args)
+        elif self.order == 'none':
             terms = list(expr.args)
         else:
             terms = self._as_ordered_terms(expr, order=order)
 
-        tex = ""
-        for i, term in enumerate(terms):
+        out = []
+        for i, arg in enumerate(terms):
+            s = self._print(arg)
+            if self._needs_add_brackets(arg):
+                s = r"\left(%s\right)" % s
+            if s.startswith('-'):
+                sign = '-'
+                s = s[1:]
+            else:
+                sign = '+'
             if i == 0:
-                pass
-            elif _coeff_isneg(term):
-                tex += " - "
-                term = -term
+                if sign == '-':
+                    out.append('-' + s)
+                else:
+                    out.append(s)
             else:
-                tex += " + "
-            term_tex = self._print(term)
-            if self._needs_add_brackets(term):
-                term_tex = r"\left(%s\right)" % term_tex
-            tex += term_tex
-
-        return tex
+                if sign == '+':
+                    out.append(' + ' + s)
+                else:
+                    out.append(' - ' + s)
+        return ''.join(out)
 
     def _print_Cycle(self, expr):
         from sympy.combinatorics.permutations import Permutation
@@ -1488,6 +1497,13 @@ def parens(x):
             if isinstance(x, (Add, MatAdd, HadamardProduct)):
                 return r"\left(%s\right)" % self._print(x)
             return self._print(x)
+
+        # Handle a leading -1 factor so that e.g. -B prints as "-B" instead of "-1 B"
+        if expr.args and expr.args[0].is_Number and expr.args[0] == -1:
+            # build a new expr without the leading -1, then prepend a minus sign
+            rebuilt = expr.func(*expr.args[1:])
+            return '-' + ' '.join(map(parens, rebuilt.args))
+
         return ' '.join(map(parens, expr.args))
 
     def _print_Mod(self, expr, exp=None):
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..85ff630501 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,7 +819,32 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        # Adapt the logic so negative terms appear as subtraction
+        args = list(expr.args)
+        if not args:
+            return self._print_seq(())
+        out = None
+        for i, arg in enumerate(args):
+            if arg.could_extract_minus_sign():
+                sign = '-'
+                negarg = -arg
+                p = self._print(negarg)
+            else:
+                sign = '+'
+                p = self._print(arg)
+            if i == 0:
+                if sign == '-':
+                    out = p.left('-')
+                else:
+                    out = p
+            else:
+                if sign == '+':
+                    out = out.right(' + ')
+                    out = out.right(p)
+                else:
+                    out = out.right(' - ')
+                    out = out.right(p)
+        return out
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..d210eb3345 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -47,28 +47,34 @@ def emptyPrinter(self, expr):
             return str(expr)
 
     def _print_Add(self, expr, order=None):
-        if self.order == 'none':
+        from sympy.matrices.expressions.matexpr import MatrixExpr
+        if any(isinstance(a, MatrixExpr) for a in expr.args):
+            terms = list(expr.args)
+        elif self.order == 'none':
             terms = list(expr.args)
         else:
             terms = self._as_ordered_terms(expr, order=order)
 
         PREC = precedence(expr)
-        l = []
-        for term in terms:
+        out = []
+        for i, term in enumerate(terms):
             t = self._print(term)
             if t.startswith('-'):
-                sign = "-"
+                sign = '-'
                 t = t[1:]
             else:
-                sign = "+"
-            if precedence(term) < PREC:
-                l.extend([sign, "(%s)" % t])
+                sign = '+'
+            if i == 0:
+                if sign == '-':
+                    out.append('-' + t)
+                else:
+                    out.append(t)
             else:
-                l.extend([sign, t])
-        sign = l.pop(0)
-        if sign == '+':
-            sign = ""
-        return sign + ' '.join(l)
+                if sign == '+':
+                    out.append(' + ' + t)
+                else:
+                    out.append(' - ' + t)
+        return ''.join(out)
 
     def _print_BooleanTrue(self, expr):
         return "True"
@@ -261,7 +267,12 @@ def _print_Mul(self, expr):
         prec = precedence(expr)
 
         c, e = expr.as_coeff_Mul()
-        if c < 0:
+
+        # Special-case pure -1 coefficient so that e.g. -B prints as "-B" instead of "(-1)*B"
+        if c == -1:
+            sign = "-"
+            expr = e
+        elif c < 0:
             expr = _keep_coeff(-c, e)
             sign = "-"
         else:
@@ -304,16 +315,37 @@ def _print_Mul(self, expr):
             return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
 
     def _print_MatMul(self, expr):
-        return '*'.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        # Handle a leading -1 factor so that e.g. -B prints as "-B" instead of "(-1)*B"
+        if len(expr.args) > 0 and expr.args[0].is_Number and expr.args[0] == -1:
+            return '-' + '*'.join([self.parenthesize(a, precedence(expr)) for a in expr.args[1:]])
+        else:
+            return '*'.join([self.parenthesize(arg, precedence(expr)) for arg in expr.args])
 
     def _print_HadamardProduct(self, expr):
         return '.*'.join([self.parenthesize(arg, precedence(expr))
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        PREC = precedence(expr)
+        out = []
+        for i, arg in enumerate(expr.args):
+            s = self.parenthesize(arg, PREC)
+            if s.startswith('-'):
+                sign = '-'
+                s = s[1:]
+            else:
+                sign = '+'
+            if i == 0:
+                if sign == '-':
+                    out.append('-' + s)
+                else:
+                    out.append(s)
+            else:
+                if sign == '+':
+                    out.append(' + ' + s)
+                else:
+                    out.append(' - ' + s)
+        return ''.join(out)
 
     def _print_NaN(self, expr):
         return 'nan'
2024-12-24 13:41:42,154 - INFO - ------------------------------
2024-12-24 13:41:42,154 - INFO - END Runtime Completion Fn
2024-12-24 13:41:42,154 - INFO - ------------------------------
2024-12-24 13:41:42,154 - INFO - Got git diff for instance sympy__sympy-14248:
--------
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..dfa6448985 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -300,26 +300,35 @@ def _print_NoneType(self, e):
 
 
     def _print_Add(self, expr, order=None):
-        if self.order == 'none':
+        from sympy.matrices.expressions.matexpr import MatrixExpr
+        if any(isinstance(a, MatrixExpr) for a in expr.args):
+            terms = list(expr.args)
+        elif self.order == 'none':
             terms = list(expr.args)
         else:
             terms = self._as_ordered_terms(expr, order=order)
 
-        tex = ""
-        for i, term in enumerate(terms):
+        out = []
+        for i, arg in enumerate(terms):
+            s = self._print(arg)
+            if self._needs_add_brackets(arg):
+                s = r"\left(%s\right)" % s
+            if s.startswith('-'):
+                sign = '-'
+                s = s[1:]
+            else:
+                sign = '+'
             if i == 0:
-                pass
-            elif _coeff_isneg(term):
-                tex += " - "
-                term = -term
+                if sign == '-':
+                    out.append('-' + s)
+                else:
+                    out.append(s)
             else:
-                tex += " + "
-            term_tex = self._print(term)
-            if self._needs_add_brackets(term):
-                term_tex = r"\left(%s\right)" % term_tex
-            tex += term_tex
-
-        return tex
+                if sign == '+':
+                    out.append(' + ' + s)
+                else:
+                    out.append(' - ' + s)
+        return ''.join(out)
 
     def _print_Cycle(self, expr):
         from sympy.combinatorics.permutations import Permutation
@@ -1488,6 +1497,13 @@ def parens(x):
             if isinstance(x, (Add, MatAdd, HadamardProduct)):
                 return r"\left(%s\right)" % self._print(x)
             return self._print(x)
+
+        # Handle a leading -1 factor so that e.g. -B prints as "-B" instead of "-1 B"
+        if expr.args and expr.args[0].is_Number and expr.args[0] == -1:
+            # build a new expr without the leading -1, then prepend a minus sign
+            rebuilt = expr.func(*expr.args[1:])
+            return '-' + ' '.join(map(parens, rebuilt.args))
+
         return ' '.join(map(parens, expr.args))
 
     def _print_Mod(self, expr, exp=None):
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..85ff630501 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,7 +819,32 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
-        return self._print_seq(expr.args, None, None, ' + ')
+        # Adapt the logic so negative terms appear as subtraction
+        args = list(expr.args)
+        if not args:
+            return self._print_seq(())
+        out = None
+        for i, arg in enumerate(args):
+            if arg.could_extract_minus_sign():
+                sign = '-'
+                negarg = -arg
+                p = self._print(negarg)
+            else:
+                sign = '+'
+                p = self._print(arg)
+            if i == 0:
+                if sign == '-':
+                    out = p.left('-')
+                else:
+                    out = p
+            else:
+                if sign == '+':
+                    out = out.right(' + ')
+                    out = out.right(p)
+                else:
+                    out = out.right(' - ')
+                    out = out.right(p)
+        return out
 
     def _print_MatMul(self, expr):
         args = list(expr.args)
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..d210eb3345 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -47,28 +47,34 @@ def emptyPrinter(self, expr):
             return str(expr)
 
     def _print_Add(self, expr, order=None):
-        if self.order == 'none':
+        from sympy.matrices.expressions.matexpr import MatrixExpr
+        if any(isinstance(a, MatrixExpr) for a in expr.args):
+            terms = list(expr.args)
+        elif self.order == 'none':
             terms = list(expr.args)
         else:
             terms = self._as_ordered_terms(expr, order=order)
 
         PREC = precedence(expr)
-        l = []
-        for term in terms:
+        out = []
+        for i, term in enumerate(terms):
             t = self._print(term)
             if t.startswith('-'):
-                sign = "-"
+                sign = '-'
                 t = t[1:]
             else:
-                sign = "+"
-            if precedence(term) < PREC:
-                l.extend([sign, "(%s)" % t])
+                sign = '+'
+            if i == 0:
+                if sign == '-':
+                    out.append('-' + t)
+                else:
+                    out.append(t)
             else:
-                l.extend([sign, t])
-        sign = l.pop(0)
-        if sign == '+':
-            sign = ""
-        return sign + ' '.join(l)
+                if sign == '+':
+                    out.append(' + ' + t)
+                else:
+                    out.append(' - ' + t)
+        return ''.join(out)
 
     def _print_BooleanTrue(self, expr):
         return "True"
@@ -261,7 +267,12 @@ def _print_Mul(self, expr):
         prec = precedence(expr)
 
         c, e = expr.as_coeff_Mul()
-        if c < 0:
+
+        # Special-case pure -1 coefficient so that e.g. -B prints as "-B" instead of "(-1)*B"
+        if c == -1:
+            sign = "-"
+            expr = e
+        elif c < 0:
             expr = _keep_coeff(-c, e)
             sign = "-"
         else:
@@ -304,16 +315,37 @@ def _print_Mul(self, expr):
             return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
 
     def _print_MatMul(self, expr):
-        return '*'.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        # Handle a leading -1 factor so that e.g. -B prints as "-B" instead of "(-1)*B"
+        if len(expr.args) > 0 and expr.args[0].is_Number and expr.args[0] == -1:
+            return '-' + '*'.join([self.parenthesize(a, precedence(expr)) for a in expr.args[1:]])
+        else:
+            return '*'.join([self.parenthesize(arg, precedence(expr)) for arg in expr.args])
 
     def _print_HadamardProduct(self, expr):
         return '.*'.join([self.parenthesize(arg, precedence(expr))
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        PREC = precedence(expr)
+        out = []
+        for i, arg in enumerate(expr.args):
+            s = self.parenthesize(arg, PREC)
+            if s.startswith('-'):
+                sign = '-'
+                s = s[1:]
+            else:
+                sign = '+'
+            if i == 0:
+                if sign == '-':
+                    out.append('-' + s)
+                else:
+                    out.append(s)
+            else:
+                if sign == '+':
+                    out.append(' + ' + s)
+                else:
+                    out.append(' - ' + s)
+        return ''.join(out)
 
     def _print_NaN(self, expr):
         return 'nan'
--------
2024-12-24 13:41:42,700 - INFO - Using instance container image: docker.io/xingyaoww/sweb.eval.x86_64.sympy_s_sympy-14976. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2024-12-24 13:41:42,700 - INFO - Logging LLM completions for instance sympy__sympy-14976 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/o1_maxiter_30_N_v0.16.0-no-hint-run_1/llm_completions/sympy__sympy-14976
