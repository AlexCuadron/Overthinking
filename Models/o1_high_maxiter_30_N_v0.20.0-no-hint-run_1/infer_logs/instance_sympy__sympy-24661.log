2024-12-23 08:47:58,092 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm
2024-12-23 08:49:38,681 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm] build finished.
2024-12-23 08:49:38,690 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm] with more generic tag [oh_v0.16.0_3vdfw4chonm95evu]
2024-12-23 08:49:38,692 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm, oh_v0.16.0_3vdfw4chonm95evu] built successfully
2024-12-23 08:49:38,698 - INFO - [runtime fac2eeb6-0a66-48ca-b15f-250141946043-e555bf0b6d097359] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm
2024-12-23 08:49:38,953 - INFO - [runtime fac2eeb6-0a66-48ca-b15f-250141946043-e555bf0b6d097359] Container started: openhands-runtime-fac2eeb6-0a66-48ca-b15f-250141946043-e555bf0b6d097359. VSCode URL: None
2024-12-23 08:49:38,957 - INFO - [runtime fac2eeb6-0a66-48ca-b15f-250141946043-e555bf0b6d097359] Waiting for client to become ready at http://localhost:34243...
2024-12-23 08:49:59,023 - INFO - [runtime fac2eeb6-0a66-48ca-b15f-250141946043-e555bf0b6d097359] Runtime is ready.
2024-12-23 08:49:59,140 - INFO - ------------------------------
2024-12-23 08:49:59,140 - INFO - BEGIN Runtime Initialization Fn
2024-12-23 08:49:59,140 - INFO - ------------------------------
2024-12-23 08:49:59,140 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-24661' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2024-12-23 08:49:59,249 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:49:59,249 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2024-12-23 08:49:59,356 - INFO - **CmdOutputObservation (source=None, exit code=0)**
USER=root
2024-12-23 08:49:59,356 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2024-12-23 08:49:59,464 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:49:59,471 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2024-12-23 08:49:59,578 - INFO - **CmdOutputObservation (source=None, exit code=0)**
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-24661
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
2024-12-23 08:49:59,578 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2024-12-23 08:49:59,782 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:49:59,783 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2024-12-23 08:50:00,372 - INFO - **CmdOutputObservation (source=None, exit code=0)**
WORKSPACE_NAME: sympy__sympy__1.12
2024-12-23 08:50:00,372 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2024-12-23 08:50:00,477 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:50:00,477 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2024-12-23 08:50:00,823 - INFO - **CmdOutputObservation (source=None, exit code=0)**
HEAD is now at a36caf5c74 Merge pull request #24572 from erdos4d/master
2024-12-23 08:50:00,823 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2024-12-23 08:50:00,931 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:50:00,932 - INFO - ------------------------------
2024-12-23 08:50:00,932 - INFO - END Runtime Initialization Fn
2024-12-23 08:50:00,932 - INFO - ------------------------------
2024-12-23 08:50:00,933 - INFO - Function calling not enabled for model openai/neulab/o1. Mocking function calling via prompting.
2024-12-23 08:50:00,935 - INFO - [Agent Controller default] Starting step loop...
2024-12-23 08:50:00,935 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2024-12-23 08:50:02,037 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2024-12-23 08:50:02,323 - ERROR - [Agent Controller default] Error while running the agent: litellm.BadRequestError: OpenAIException - Error code: 400 - {'error': {'message': 'Budget has been exceeded! Current cost: 2501.878305000001, Max budget: 2500.0', 'type': 'budget_exceeded', 'param': None, 'code': '400'}}
2024-12-23 08:50:02,323 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2024-12-23 08:50:02,323 - ERROR - litellm.BadRequestError: OpenAIException - Error code: 400 - {'error': {'message': 'Budget has been exceeded! Current cost: 2501.878305000001, Max budget: 2500.0', 'type': 'budget_exceeded', 'param': None, 'code': '400'}}
2024-12-23 08:50:02,323 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2024-12-23 08:50:02,938 - INFO - ------------------------------
2024-12-23 08:50:02,939 - INFO - BEGIN Runtime Completion Fn
2024-12-23 08:50:02,939 - INFO - ------------------------------
2024-12-23 08:50:02,939 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2024-12-23 08:50:03,045 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:50:03,045 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2024-12-23 08:50:03,153 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:50:03,153 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2024-12-23 08:50:03,389 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:50:03,389 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached a36caf5c74fe654cedc488e8a8a05fad388f8406
2024-12-23 08:50:03,500 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-23 08:50:03,500 - INFO - ------------------------------
2024-12-23 08:50:03,500 - INFO - END Runtime Completion Fn
2024-12-23 08:50:03,500 - INFO - ------------------------------
2024-12-23 08:50:03,500 - INFO - Got git diff for instance sympy__sympy-24661:
--------

--------
2024-12-24 15:14:42,797 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm
2024-12-24 15:16:15,062 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm] build finished.
2024-12-24 15:16:15,069 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm] with more generic tag [oh_v0.16.0_3vdfw4chonm95evu]
2024-12-24 15:16:15,071 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm, oh_v0.16.0_3vdfw4chonm95evu] built successfully
2024-12-24 15:16:15,077 - INFO - [runtime 40fe3daf-399d-40c4-ae5a-83467386e28d-10b89504a73b1949] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.16.0_3vdfw4chonm95evu_yajo72un47o9ydtm
2024-12-24 15:16:15,335 - INFO - [runtime 40fe3daf-399d-40c4-ae5a-83467386e28d-10b89504a73b1949] Container started: openhands-runtime-40fe3daf-399d-40c4-ae5a-83467386e28d-10b89504a73b1949. VSCode URL: None
2024-12-24 15:16:15,338 - INFO - [runtime 40fe3daf-399d-40c4-ae5a-83467386e28d-10b89504a73b1949] Waiting for client to become ready at http://localhost:34922...
2024-12-24 15:16:33,402 - INFO - [runtime 40fe3daf-399d-40c4-ae5a-83467386e28d-10b89504a73b1949] Runtime is ready.
2024-12-24 15:16:33,519 - INFO - ------------------------------
2024-12-24 15:16:33,519 - INFO - BEGIN Runtime Initialization Fn
2024-12-24 15:16:33,519 - INFO - ------------------------------
2024-12-24 15:16:33,519 - INFO - **CmdRunAction (source=None)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-24661' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc
2024-12-24 15:16:33,628 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:16:33,628 - INFO - **CmdRunAction (source=None)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2024-12-24 15:16:33,735 - INFO - **CmdOutputObservation (source=None, exit code=0)**
USER=root
2024-12-24 15:16:33,735 - INFO - **CmdRunAction (source=None)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2024-12-24 15:16:33,842 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:16:33,850 - INFO - **CmdRunAction (source=None)**
COMMAND:
cat ~/.bashrc
2024-12-24 15:16:33,956 - INFO - **CmdOutputObservation (source=None, exit code=0)**
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed
export SWE_INSTANCE_ID=sympy__sympy-24661
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
2024-12-24 15:16:33,956 - INFO - **CmdRunAction (source=None)**
COMMAND:
source ~/.bashrc
2024-12-24 15:16:34,154 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:16:34,154 - INFO - **CmdRunAction (source=None)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2024-12-24 15:16:34,684 - INFO - **CmdOutputObservation (source=None, exit code=0)**
WORKSPACE_NAME: sympy__sympy__1.12
2024-12-24 15:16:34,684 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2024-12-24 15:16:34,789 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:16:34,789 - INFO - **CmdRunAction (source=None)**
COMMAND:
git reset --hard
2024-12-24 15:16:35,124 - INFO - **CmdOutputObservation (source=None, exit code=0)**
HEAD is now at a36caf5c74 Merge pull request #24572 from erdos4d/master
2024-12-24 15:16:35,124 - INFO - **CmdRunAction (source=None)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2024-12-24 15:16:35,232 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:16:35,232 - INFO - ------------------------------
2024-12-24 15:16:35,232 - INFO - END Runtime Initialization Fn
2024-12-24 15:16:35,232 - INFO - ------------------------------
2024-12-24 15:16:35,233 - INFO - Function calling not enabled for model openai/neulab/o1. Mocking function calling via prompting.
2024-12-24 15:16:35,235 - INFO - [Agent Controller default] Starting step loop...
2024-12-24 15:16:35,235 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2024-12-24 15:16:36,337 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 0 GLOBAL STEP 0
2024-12-24 15:16:40,455 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 1 GLOBAL STEP 1
2024-12-24 15:16:47,594 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 2 GLOBAL STEP 2
2024-12-24 15:16:52,909 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 3 GLOBAL STEP 3
2024-12-24 15:16:57,972 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 4 GLOBAL STEP 4
2024-12-24 15:17:04,738 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 5 GLOBAL STEP 5
2024-12-24 15:17:16,773 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 6 GLOBAL STEP 6
2024-12-24 15:17:44,035 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 7 GLOBAL STEP 7
2024-12-24 15:18:00,336 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 8 GLOBAL STEP 8
2024-12-24 15:18:43,966 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 9 GLOBAL STEP 9
2024-12-24 15:19:00,930 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 10 GLOBAL STEP 10
2024-12-24 15:19:07,866 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 11 GLOBAL STEP 11
2024-12-24 15:19:25,400 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 12 GLOBAL STEP 12
2024-12-24 15:19:51,800 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 13 GLOBAL STEP 13
2024-12-24 15:19:57,898 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 14 GLOBAL STEP 14
2024-12-24 15:20:15,039 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 15 GLOBAL STEP 15
2024-12-24 15:20:35,293 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 16 GLOBAL STEP 16
2024-12-24 15:21:38,263 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 17 GLOBAL STEP 17
2024-12-24 15:22:26,315 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 18 GLOBAL STEP 18
2024-12-24 15:23:36,167 - INFO - [Agent Controller default] LEVEL 0 LOCAL STEP 19 GLOBAL STEP 19
2024-12-24 15:23:36,167 - WARNING - Action, Observation loop detected
2024-12-24 15:23:36,167 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2024-12-24 15:23:36,168 - ERROR - Agent got stuck in a loop
2024-12-24 15:23:36,168 - INFO - [Agent Controller default] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2024-12-24 15:23:37,065 - INFO - ------------------------------
2024-12-24 15:23:37,065 - INFO - BEGIN Runtime Completion Fn
2024-12-24 15:23:37,065 - INFO - ------------------------------
2024-12-24 15:23:37,065 - INFO - **CmdRunAction (source=None)**
COMMAND:
cd /workspace/sympy__sympy__1.12
2024-12-24 15:23:37,171 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:23:37,171 - INFO - **CmdRunAction (source=None)**
COMMAND:
git config --global core.pager ""
2024-12-24 15:23:37,278 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:23:37,279 - INFO - **CmdRunAction (source=None)**
COMMAND:
git add -A
2024-12-24 15:23:37,433 - INFO - **CmdOutputObservation (source=None, exit code=0)**

2024-12-24 15:23:37,433 - INFO - **CmdRunAction (source=None)**
COMMAND:
git diff --no-color --cached a36caf5c74fe654cedc488e8a8a05fad388f8406
2024-12-24 15:23:37,543 - INFO - **CmdOutputObservation (source=None, exit code=0)**
diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..146645ddde 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1191,8 +1191,98 @@ def visit_Call(self, node):
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
+def visit_Compare(self, node):
+        operatorMapping = {
+            ast.Lt: 'Lt',
+            ast.Gt: 'Gt',
+            ast.LtE: 'Le',
+            ast.GtE: 'Ge',
+            ast.Eq: 'Eq',
+            ast.NotEq: 'Ne'
+        }
+        # If there's just one comparison operator, handle directly:
+        if len(node.ops) == 1:
+            opClass = node.ops[0].__class__
+            if opClass not in operatorMapping:
+                return self.generic_visit(node)
+            opName = operatorMapping[opClass]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            c = ast.Call(
+                func=ast.Name(id=opName, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
+            return c
+        else:
+            # Chain comparisons, e.g. 1 < x < 3 => And(Lt(1, x, evaluate=False), Lt(x, 3, evaluate=False))
+            calls = []
+            left = self.visit(node.left)
+            for op, comp in zip(node.ops, node.comparators):
+                opClass = op.__class__
+                if opClass not in operatorMapping:
+                    return self.generic_visit(node)  # fallback
+                opName = operatorMapping[opClass]
+                right = self.visit(comp)
+                call_expr = ast.Call(
+                    func=ast.Name(id=opName, ctx=ast.Load()),
+                    args=[left, right],
+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+                )
+                calls.append(call_expr)
+                left = right
+            return ast.Call(
+                func=ast.Name(id='And', ctx=ast.Load()),
+                args=calls,
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
 
 
+def visit_Compare(self, node):
+        operatorMapping = {
+            ast.Lt: 'Lt',
+            ast.Gt: 'Gt',
+            ast.LtE: 'Le',
+            ast.GtE: 'Ge',
+            ast.Eq: 'Eq',
+            ast.NotEq: 'Ne'
+        }
+        # If there's just one comparison operator, handle directly:
+        if len(node.ops) == 1:
+            opClass = node.ops[0].__class__
+            if opClass not in operatorMapping:
+                return self.generic_visit(node)
+            opName = operatorMapping[opClass]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            c = ast.Call(
+                func=ast.Name(id=opName, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
+            return c
+        else:
+            # Chain comparisons, e.g. 1 < x < 3 => And(Lt(1, x, evaluate=False), Lt(x, 3, evaluate=False))
+            calls = []
+            left = self.visit(node.left)
+            for op, comp in zip(node.ops, node.comparators):
+                opClass = op.__class__
+                if opClass not in operatorMapping:
+                    return self.generic_visit(node)  # fallback
+                opName = operatorMapping[opClass]
+                right = self.visit(comp)
+                call_expr = ast.Call(
+                    func=ast.Name(id=opName, ctx=ast.Load()),
+                    args=[left, right],
+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+                )
+                calls.append(call_expr)
+                left = right
+            return ast.Call(
+                func=ast.Name(id='And', ctx=ast.Load()),
+                args=calls,
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
 _transformation = {  # items can be added but never re-ordered
 0: lambda_notation,
 1: auto_symbol,
2024-12-24 15:23:37,546 - INFO - ------------------------------
2024-12-24 15:23:37,547 - INFO - END Runtime Completion Fn
2024-12-24 15:23:37,547 - INFO - ------------------------------
2024-12-24 15:23:37,547 - INFO - Got git diff for instance sympy__sympy-24661:
--------
diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..146645ddde 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1191,8 +1191,98 @@ def visit_Call(self, node):
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
         return new_node
+def visit_Compare(self, node):
+        operatorMapping = {
+            ast.Lt: 'Lt',
+            ast.Gt: 'Gt',
+            ast.LtE: 'Le',
+            ast.GtE: 'Ge',
+            ast.Eq: 'Eq',
+            ast.NotEq: 'Ne'
+        }
+        # If there's just one comparison operator, handle directly:
+        if len(node.ops) == 1:
+            opClass = node.ops[0].__class__
+            if opClass not in operatorMapping:
+                return self.generic_visit(node)
+            opName = operatorMapping[opClass]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            c = ast.Call(
+                func=ast.Name(id=opName, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
+            return c
+        else:
+            # Chain comparisons, e.g. 1 < x < 3 => And(Lt(1, x, evaluate=False), Lt(x, 3, evaluate=False))
+            calls = []
+            left = self.visit(node.left)
+            for op, comp in zip(node.ops, node.comparators):
+                opClass = op.__class__
+                if opClass not in operatorMapping:
+                    return self.generic_visit(node)  # fallback
+                opName = operatorMapping[opClass]
+                right = self.visit(comp)
+                call_expr = ast.Call(
+                    func=ast.Name(id=opName, ctx=ast.Load()),
+                    args=[left, right],
+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+                )
+                calls.append(call_expr)
+                left = right
+            return ast.Call(
+                func=ast.Name(id='And', ctx=ast.Load()),
+                args=calls,
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
 
 
+def visit_Compare(self, node):
+        operatorMapping = {
+            ast.Lt: 'Lt',
+            ast.Gt: 'Gt',
+            ast.LtE: 'Le',
+            ast.GtE: 'Ge',
+            ast.Eq: 'Eq',
+            ast.NotEq: 'Ne'
+        }
+        # If there's just one comparison operator, handle directly:
+        if len(node.ops) == 1:
+            opClass = node.ops[0].__class__
+            if opClass not in operatorMapping:
+                return self.generic_visit(node)
+            opName = operatorMapping[opClass]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            c = ast.Call(
+                func=ast.Name(id=opName, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
+            return c
+        else:
+            # Chain comparisons, e.g. 1 < x < 3 => And(Lt(1, x, evaluate=False), Lt(x, 3, evaluate=False))
+            calls = []
+            left = self.visit(node.left)
+            for op, comp in zip(node.ops, node.comparators):
+                opClass = op.__class__
+                if opClass not in operatorMapping:
+                    return self.generic_visit(node)  # fallback
+                opName = operatorMapping[opClass]
+                right = self.visit(comp)
+                call_expr = ast.Call(
+                    func=ast.Name(id=opName, ctx=ast.Load()),
+                    args=[left, right],
+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+                )
+                calls.append(call_expr)
+                left = right
+            return ast.Call(
+                func=ast.Name(id='And', ctx=ast.Load()),
+                args=calls,
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False))],
+            )
 _transformation = {  # items can be added but never re-ordered
 0: lambda_notation,
 1: auto_symbol,
--------
