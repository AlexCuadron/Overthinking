diff --git a/reproduce_password_reset_bug.py b/reproduce_password_reset_bug.py
new file mode 100644
index 0000000000..23acea01a0
--- /dev/null
+++ b/reproduce_password_reset_bug.py
@@ -0,0 +1,47 @@
+import os
+import sys
+sys.path.insert(0, "/workspace/django__django__3.2")
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            "django.contrib.auth",
+            "django.contrib.contenttypes",
+        ],
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        SECRET_KEY="testsecretkey",
+    )
+
+django.setup()
+
+from django.core.management import call_command
+call_command("migrate", interactive=False)
+from django.contrib.auth.models import User
+from django.contrib.auth.tokens import default_token_generator
+
+def main():
+    # Create a user with an email and generate a password reset token.
+    user = User.objects.create_user(username="testuser", email="foo@example.com", password="testpassword")
+    token = default_token_generator.make_token(user)
+
+    # Change the user's email.
+    user.email = "bar@example.com"
+    user.save()
+
+    # Check if the old token is still valid after the email change.
+    still_valid = default_token_generator.check_token(user, token)
+    if still_valid:
+        print("BUG: The old token is still valid after email change.")
+    else:
+        print("SUCCESS: The old token is invalid after email change.")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
