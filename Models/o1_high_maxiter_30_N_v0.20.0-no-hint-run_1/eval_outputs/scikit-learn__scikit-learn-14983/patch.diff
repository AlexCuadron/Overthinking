diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index c49a3ce6a..d74586753 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -1176,6 +1176,8 @@ class RepeatedKFold(_RepeatedSplits):
     n_splits : int, default=5
         Number of folds. Must be at least 2.
 
+def __repr__(self):
+        return f"RepeatedKFold(n_splits={{self.cvargs.get('n_splits')}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
     n_repeats : int, default=10
         Number of times cross-validator needs to be repeated.
 
@@ -1194,6 +1196,8 @@ class RepeatedKFold(_RepeatedSplits):
     >>> rkf = RepeatedKFold(n_splits=2, n_repeats=2, random_state=2652124)
     >>> for train_index, test_index in rkf.split(X):
     ...     print("TRAIN:", train_index, "TEST:", test_index)
+def __repr__(self):
+        return f"RepeatedKFold(n_splits={{self.cvargs.get('n_splits')}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
     ...     X_train, X_test = X[train_index], X[test_index]
     ...     y_train, y_test = y[train_index], y[test_index]
     ...
@@ -1215,8 +1219,12 @@ class RepeatedKFold(_RepeatedSplits):
     def __init__(self, n_splits=5, n_repeats=10, random_state=None):
         super().__init__(
             KFold, n_repeats, random_state, n_splits=n_splits)
+def __repr__(self):
+        return f"RepeatedKFold(n_splits={{self.cvargs.get('n_splits')}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
 
 
+def __repr__(self):
+        return f"RepeatedKFold(n_splits={{self.cvargs.get('n_splits')}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
 class RepeatedStratifiedKFold(_RepeatedSplits):
     """Repeated Stratified K-Fold cross validator.
 
@@ -1252,6 +1260,8 @@ class RepeatedStratifiedKFold(_RepeatedSplits):
     ...
     TRAIN: [1 2] TEST: [0 3]
     TRAIN: [0 3] TEST: [1 2]
+def __repr__(self):
+        return f"RepeatedStratifiedKFold(n_splits={{self.cvargs.get('n_splits')}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
     TRAIN: [1 3] TEST: [0 2]
     TRAIN: [0 2] TEST: [1 3]
 
@@ -1268,6 +1278,8 @@ class RepeatedStratifiedKFold(_RepeatedSplits):
     def __init__(self, n_splits=5, n_repeats=10, random_state=None):
         super().__init__(
             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)
+def __repr__(self):
+        return f"RepeatedStratifiedKFold(n_splits={{self.cvargs.get('n_splits')}}, n_repeats={{self.n_repeats}}, random_state={{self.random_state}})"
 
 
 class BaseShuffleSplit(metaclass=ABCMeta):
