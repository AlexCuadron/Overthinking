diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..5264993fb0 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,52 +320,54 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
-            # Move the main table
-            schema_editor.alter_db_table(
-                new_model,
-                old_model._meta.db_table,
-                new_model._meta.db_table,
-            )
-            # Alter the fields pointing to us
-            for related_object in old_model._meta.related_objects:
-                if related_object.related_model == old_model:
-                    model = new_model
-                    related_key = (app_label, self.new_name_lower)
-                else:
-                    model = related_object.related_model
-                    related_key = (
-                        related_object.related_model._meta.app_label,
-                        related_object.related_model._meta.model_name,
-                    )
-                to_field = to_state.apps.get_model(
-                    *related_key
-                )._meta.get_field(related_object.field.name)
-                schema_editor.alter_field(
-                    model,
-                    related_object.field,
-                    to_field,
-                )
-            # Rename M2M fields whose name is based on this model's name.
-            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)
-            for (old_field, new_field) in fields:
-                # Skip self-referential fields as these are renamed above.
-                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:
-                    continue
-                # Rename the M2M table that's based on this model's name.
-                old_m2m_model = old_field.remote_field.through
-                new_m2m_model = new_field.remote_field.through
+            default_old_table_name = '%s_%s' % (old_model._meta.app_label, old_model._meta.model_name.lower())
+            if old_model._meta.db_table.lower() == default_old_table_name.lower():
+                # Move the main table
                 schema_editor.alter_db_table(
-                    new_m2m_model,
-                    old_m2m_model._meta.db_table,
-                    new_m2m_model._meta.db_table,
-                )
-                # Rename the column in the M2M table that's based on this
-                # model's name.
-                schema_editor.alter_field(
-                    new_m2m_model,
-                    old_m2m_model._meta.get_field(old_model._meta.model_name),
-                    new_m2m_model._meta.get_field(new_model._meta.model_name),
+                    new_model,
+                    old_model._meta.db_table,
+                    new_model._meta.db_table,
                 )
+                # Alter the fields pointing to us
+                for related_object in old_model._meta.related_objects:
+                    if related_object.related_model == old_model:
+                        model = new_model
+                        related_key = (app_label, self.new_name_lower)
+                    else:
+                        model = related_object.related_model
+                        related_key = (
+                            related_object.related_model._meta.app_label,
+                            related_object.related_model._meta.model_name,
+                        )
+                    to_field = to_state.apps.get_model(
+                        *related_key
+                    )._meta.get_field(related_object.field.name)
+                    schema_editor.alter_field(
+                        model,
+                        related_object.field,
+                        to_field,
+                    )
+                # Rename M2M fields whose name is based on this model's name.
+                fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)
+                for (old_field, new_field) in fields:
+                    # Skip self-referential fields as these are renamed above.
+                    if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:
+                        continue
+                    # Rename the M2M table that's based on this model's name.
+                    old_m2m_model = old_field.remote_field.through
+                    new_m2m_model = new_field.remote_field.through
+                    schema_editor.alter_db_table(
+                        new_m2m_model,
+                        old_m2m_model._meta.db_table,
+                        new_m2m_model._meta.db_table,
+                    )
+                    # Rename the column in the M2M table that's based on this
+                    # model's name.
+                    schema_editor.alter_field(
+                        new_m2m_model,
+                        old_m2m_model._meta.get_field(old_model._meta.model_name),
+                        new_m2m_model._meta.get_field(new_model._meta.model_name),
+                    )
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower
diff --git a/rename_test/db.sqlite3 b/rename_test/db.sqlite3
new file mode 100644
index 0000000000..f93bccf5a7
Binary files /dev/null and b/rename_test/db.sqlite3 differ
diff --git a/rename_test/manage.py b/rename_test/manage.py
new file mode 100755
index 0000000000..3417353654
--- /dev/null
+++ b/rename_test/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rename_test.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/rename_test/myapp/__init__.py b/rename_test/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/rename_test/myapp/admin.py b/rename_test/myapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/rename_test/myapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/rename_test/myapp/apps.py b/rename_test/myapp/apps.py
new file mode 100644
index 0000000000..c34fb20eb6
--- /dev/null
+++ b/rename_test/myapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MyappConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'myapp'
diff --git a/rename_test/myapp/migrations/0002_rename_model.py b/rename_test/myapp/migrations/0002_rename_model.py
new file mode 100644
index 0000000000..72d47cdac2
--- /dev/null
+++ b/rename_test/myapp/migrations/0002_rename_model.py
@@ -0,0 +1,12 @@
+from django.db import migrations
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('myapp', '0001_initial'),
+    ]
+    operations = [
+        migrations.RenameModel(
+            old_name='OriginalModel',
+            new_name='RenamedModel',
+        ),
+    ]
diff --git a/rename_test/myapp/migrations/__init__.py b/rename_test/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/rename_test/myapp/models.py b/rename_test/myapp/models.py
new file mode 100644
index 0000000000..c0ba3f9df5
--- /dev/null
+++ b/rename_test/myapp/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class OriginalModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = "custom_table"
diff --git a/rename_test/myapp/tests.py b/rename_test/myapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/rename_test/myapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/rename_test/myapp/views.py b/rename_test/myapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/rename_test/myapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/rename_test/rename_test/__init__.py b/rename_test/rename_test/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/rename_test/rename_test/asgi.py b/rename_test/rename_test/asgi.py
new file mode 100644
index 0000000000..929539b789
--- /dev/null
+++ b/rename_test/rename_test/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for rename_test project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rename_test.settings')
+
+application = get_asgi_application()
diff --git a/rename_test/rename_test/settings.py b/rename_test/rename_test/settings.py
new file mode 100644
index 0000000000..51cf66b3f2
--- /dev/null
+++ b/rename_test/rename_test/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for rename_test project.
+
+Generated by 'django-admin startproject' using Django 4.1.dev20211027083502.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-zq4uc$)@cfdxdsj24nxq!6-c_8o&p15dj*&gdwn5r$@vwiqdll'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'rename_test.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'rename_test.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/rename_test/rename_test/urls.py b/rename_test/rename_test/urls.py
new file mode 100644
index 0000000000..fce5077c2d
--- /dev/null
+++ b/rename_test/rename_test/urls.py
@@ -0,0 +1,21 @@
+"""rename_test URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/rename_test/rename_test/wsgi.py b/rename_test/rename_test/wsgi.py
new file mode 100644
index 0000000000..35fb88823f
--- /dev/null
+++ b/rename_test/rename_test/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for rename_test project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rename_test.settings')
+
+application = get_wsgi_application()
