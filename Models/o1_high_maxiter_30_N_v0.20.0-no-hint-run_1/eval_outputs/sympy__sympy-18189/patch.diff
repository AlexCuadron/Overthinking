diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..20553cadd5 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -178,11 +178,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             if not is_sequence(syms):
                 raise TypeError(
                     'syms should be given as a sequence, e.g. a list')
-            syms = [i for i in syms if i in var]
-            if syms != var:
-                dict_sym_index = dict(zip(syms, range(len(syms))))
-                return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+            
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
@@ -347,8 +343,20 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             else:
                 final_soln.add(sol)
         else:
-                final_soln.add(sol)
+            final_soln.add(sol)
+    if syms and set(syms) == set(var) and syms != var:
+        reorder_map = {v: i for i, v in enumerate(var)}
+        reorder_soln = set()
+        for s in final_soln:
+            reorder_soln.add(tuple(s[reorder_map[v_]] for v_ in syms))
+        final_soln = reorder_soln
     return final_soln
+if syms and set(syms) == set(var) and syms != var:
+        reorder_map = {v: i for i, v in enumerate(var)}
+        reorder_soln = set()
+        for s in final_soln:
+            reorder_soln.add(tuple(s[reorder_map[v_]] for v_ in syms))
+        final_soln = reorder_soln
 
 
 def merge_solution(var, var_t, solution):
