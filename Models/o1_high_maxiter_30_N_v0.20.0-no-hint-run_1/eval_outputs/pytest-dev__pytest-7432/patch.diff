diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..d71bc88b0
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,15 @@
+import subprocess
+import sys
+
+def main():
+    print("Reproducing bug with skip location reporting...")
+    cmd = ["pytest", "-rs", "--runxfail"]
+    result = subprocess.run(cmd, capture_output=True, text=True)
+    print("Return code:", result.returncode)
+    print("stdout:")
+    print(result.stdout)
+    print("stderr:")
+    print(result.stderr)
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 7bd975e5a..85c69392c 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -270,8 +270,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
         else:
             rep.longrepr = "Unexpected success"
         rep.outcome = "failed"
-    elif item.config.option.runxfail:
-        pass  # don't interfere
+    
     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
         assert call.excinfo.value.msg is not None
         rep.wasxfail = "reason: " + call.excinfo.value.msg
@@ -292,9 +291,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
                 rep.outcome = "passed"
                 rep.wasxfail = xfailed.reason
     elif (
-        item._store.get(skipped_by_mark_key, True)
-        and rep.skipped
-        and type(rep.longrepr) is tuple
+        rep.skipped
     ):
         # skipped by mark.skipif; change the location of the failure
         # to point to the item definition, otherwise it will display
