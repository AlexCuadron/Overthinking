diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..0d5a20873a 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -62,7 +62,7 @@ class MigrationRecorder:
         # in the codebase.
         if self.has_table():
             return
-        # Make the table
+from django.db.utils import router\nif not router.allow_migrate(\n    self.connection.alias,\n    self.Migration._meta.app_label,\n    model_name=self.Migration._meta.model_name\n):\n    return\n# Make the table
         try:
             with self.connection.schema_editor() as editor:
                 editor.create_model(self.Migration)
diff --git a/myrouter.py b/myrouter.py
new file mode 100644
index 0000000000..cbb9357b62
--- /dev/null
+++ b/myrouter.py
@@ -0,0 +1,5 @@
+class Router:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        if db == "default":
+            return True
+        return False
\ No newline at end of file
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..7b199d0580
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,41 @@
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+settings.configure(
+    DATABASES=DATABASES,
+    DATABASE_ROUTERS=['myrouter.Router'],
+    INSTALLED_APPS=[
+        # Minimal set of apps to force creation of 'django_migrations' table.
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.sessions',
+        'django.contrib.admin',
+    ],
+    MIDDLEWARE=[],
+)
+
+django.setup()
+
+print("Running migrate on 'default' database.")
+call_command('migrate', database='default')
+print("Migrate on 'default' finished.\n")
+
+print("Running migrate on 'other' database. Expecting that migrations won't create tables here if router disallows.")
+try:
+    call_command('migrate', database='other')
+    print("Migrate on 'other' finished without raising an error (check if table was incorrectly created).")
+except Exception as e:
+    print("Error while migrating on 'other' db:", e)
\ No newline at end of file
