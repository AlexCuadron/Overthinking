diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index d88cda6e20..06657ebaab 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):
         ):
             klass = self.value.__self__
             module = klass.__module__
-            return "%s.%s.%s" % (module, klass.__name__, self.value.__name__), {
+            return "%s.%s.%s" % (module, klass.__qualname__, self.value.__name__), {
                 "import %s" % module
             }
         # Further error checking
diff --git a/myproj/manage.py b/myproj/manage.py
new file mode 100755
index 0000000000..5c6a3e2290
--- /dev/null
+++ b/myproj/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproj.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/myproj/myapp/__init__.py b/myproj/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproj/myapp/admin.py b/myproj/myapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/myproj/myapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/myproj/myapp/apps.py b/myproj/myapp/apps.py
new file mode 100644
index 0000000000..da45bfa476
--- /dev/null
+++ b/myproj/myapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MyappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "myapp"
diff --git a/myproj/myapp/migrations/__init__.py b/myproj/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproj/myapp/models.py b/myproj/myapp/models.py
new file mode 100644
index 0000000000..fb1e029b34
--- /dev/null
+++ b/myproj/myapp/models.py
@@ -0,0 +1,18 @@
+
+from django.db import models
+from django.contrib.postgres.fields import ArrayField
+
+class Profile(models.Model):
+    class Capability(models.TextChoices):
+        BASIC = ("BASIC", "Basic")
+        PROFESSIONAL = ("PROFESSIONAL", "Professional")
+
+        @classmethod
+        def default(cls):
+            return [cls.BASIC]
+
+    capabilities = ArrayField(
+        models.CharField(choices=Capability.choices, max_length=30, blank=True),
+        null=True,
+        default=Capability.default
+    )
diff --git a/myproj/myapp/tests.py b/myproj/myapp/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/myproj/myapp/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/myproj/myapp/views.py b/myproj/myapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/myproj/myapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/myproj/myproj/__init__.py b/myproj/myproj/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproj/myproj/asgi.py b/myproj/myproj/asgi.py
new file mode 100644
index 0000000000..cceccd0d28
--- /dev/null
+++ b/myproj/myproj/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproj project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproj.settings")
+
+application = get_asgi_application()
diff --git a/myproj/myproj/settings.py b/myproj/myproj/settings.py
new file mode 100644
index 0000000000..db6b3a9b45
--- /dev/null
+++ b/myproj/myproj/settings.py
@@ -0,0 +1,129 @@
+"""
+Django settings for myproj project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230717182637.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-ogpp$dgb!85%$+3pwd=12txpwg#s-s0d%*#+6v9otcp0f&14#^"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.postgres',
+    'myapp',
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "myproj.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "myproj.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'testdb.sqlite3',
+    },
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/myproj/myproj/urls.py b/myproj/myproj/urls.py
new file mode 100644
index 0000000000..103a1328c7
--- /dev/null
+++ b/myproj/myproj/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for myproj project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/myproj/myproj/wsgi.py b/myproj/myproj/wsgi.py
new file mode 100644
index 0000000000..a8f3e60ad3
--- /dev/null
+++ b/myproj/myproj/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproj project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproj.settings")
+
+application = get_wsgi_application()
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..5feb9809b2
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,101 @@
+import os
+import sys
+import subprocess
+import shutil
+
+def main():
+    # Remove any old project if exists
+    if os.path.exists("myproj"):
+        shutil.rmtree("myproj")
+    os.mkdir("myproj")
+
+    # Create a minimal Django project
+    subprocess.run(["django-admin", "startproject", "myproj", "myproj"])
+    # This will create:
+    # myproj/
+    #   myproj/
+    #     settings.py
+    #     urls.py
+    #     asgi.py
+    #     wsgi.py
+    #   manage.py
+
+    # Create a new app
+    os.chdir("myproj")
+    subprocess.run([sys.executable, "manage.py", "startapp", "myapp"])
+    os.chdir("..")
+
+    # Insert the example model code with a nested class method default
+    models_py_path = os.path.join("myproj", "myapp", "models.py")
+    with open(models_py_path, "w", encoding="utf-8") as f:
+        f.write('''
+from django.db import models
+from django.contrib.postgres.fields import ArrayField
+
+class Profile(models.Model):
+    class Capability(models.TextChoices):
+        BASIC = ("BASIC", "Basic")
+        PROFESSIONAL = ("PROFESSIONAL", "Professional")
+
+        @classmethod
+        def default(cls):
+            return [cls.BASIC]
+
+    capabilities = ArrayField(
+        models.CharField(choices=Capability.choices, max_length=30, blank=True),
+        null=True,
+        default=Capability.default
+    )
+''')
+
+    # Configure the new app in settings.py
+    settings_py_path = os.path.join("myproj", "myproj", "settings.py")
+    with open(settings_py_path, "r", encoding="utf-8") as fr:
+        settings_data = fr.read()
+    with open(settings_py_path, "w", encoding="utf-8") as fw:
+        lines = settings_data.splitlines(True)
+        replaced = False
+        for line in lines:
+            # Remove any undesired backslash if present
+            if "INSTALLED_APPS" in line:
+                line = line.replace("[\\", "[")
+            # Inject our apps on a fresh line
+            if "INSTALLED_APPS = [" in line and not replaced:
+                fw.write("INSTALLED_APPS = [\n    'django.contrib.postgres',\n    'myapp',\n")
+                replaced = True
+            else:
+                fw.write(line)
+
+    # Setup DB to be SQLite for simplicity
+    with open(settings_py_path, "r", encoding="utf-8") as fr:
+        content = fr.read()
+    content = content.replace(
+        "DATABASES = {",
+        "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'testdb.sqlite3',\n    },"
+    )
+    with open(settings_py_path, "w", encoding="utf-8") as fw:
+        fw.write(content)
+
+    # Install psycopg2-binary if needed for postgres fields usage
+    # But it might not be necessary for the test. We'll see.
+
+    # Now let's run makemigrations and capture the migration file
+    result = subprocess.run([sys.executable, "myproj/manage.py", "makemigrations"], capture_output=True, text=True)
+    if result.returncode != 0:
+        print("Error running makemigrations:")
+        print(result.stdout)
+        print(result.stderr)
+        sys.exit(result.returncode)
+
+    # Show the created migration
+    migrations_dir = os.path.join("myproj", "myapp", "migrations")
+    for fname in os.listdir(migrations_dir):
+        if fname.endswith(".py") and fname not in ("__init__.py",):
+            print(f"--- MIGRATION FILE: {fname} ---")
+            with open(os.path.join(migrations_dir, fname), "r", encoding="utf-8") as fr:
+                lines = fr.read()
+            print(lines)
+    print("If the default in the migration references `Capability.default` instead of `Profile.Capability.default`, the bug is reproduced.")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
