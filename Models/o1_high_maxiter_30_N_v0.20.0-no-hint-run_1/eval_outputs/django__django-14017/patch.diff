diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..2ceb417074 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -137,11 +137,15 @@ class Combinable:
         return self._combine(other, self.POW, True)
 
     def __rand__(self, other):
+        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):
+            return Q(other) & Q(self)
         raise NotImplementedError(
             "Use .bitand() and .bitor() for bitwise logical operations."
         )
 
     def __ror__(self, other):
+        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):
+            return Q(other) | Q(self)
         raise NotImplementedError(
             "Use .bitand() and .bitor() for bitwise logical operations."
         )
@@ -1148,8 +1152,24 @@ class Subquery(Expression):
 
 
 class Exists(Subquery):
-    template = 'EXISTS(%(subquery)s)'
     output_field = fields.BooleanField()
+    template = 'EXISTS(%(subquery)s)'
+    def __getitem__(self, idx):
+        if idx == 0:
+            return "EXISTS_EXPRESSION"
+        elif idx == 1:
+            return True
+        raise IndexError("Exists object only emulates a single (lookup, value) pair")
+
+    def split(self, sep):
+        return [self.__getitem__(0)]
+
+    def startswith(self, prefix):
+        return False
+
+def __iter__(self):
+        yield self.__getitem__(0)
+        yield self.__getitem__(1)
 
     def __init__(self, queryset, negated=False, **kwargs):
         self.negated = negated
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..b3b5ebef3f 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -41,6 +41,8 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
+            if getattr(other, 'conditional', False):
+                return other & self
             raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
