diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..820ccf5fae
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,12 @@
+from sympy import block_collapse, MatrixSymbol, ZeroMatrix
+from sympy.matrices.expressions.blockmatrix import BlockMatrix
+
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+res1 = block_collapse(b*b)
+print("First multiply:", res1)
+
+res2 = block_collapse(b*b*b)
+print("Second multiply:", res2)
\ No newline at end of file
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..3c4471eb15 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,19 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            product = self.blocks*other.blocks
+            from sympy import S, ZeroMatrix
+            new_data = []
+            for i in range(product.rows):
+                row_data = []
+                for j in range(product.cols):
+                    val = product[i, j]
+                    if val == S.Zero:
+                        row_data.append(ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j]))
+                    else:
+                        row_data.append(val)
+                new_data.append(row_data)
+            return BlockMatrix(new_data)
 
         return self * other
