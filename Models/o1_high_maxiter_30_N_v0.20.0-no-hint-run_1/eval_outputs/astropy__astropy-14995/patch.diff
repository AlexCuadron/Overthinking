diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..51c75d6350 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -521,6 +521,10 @@ class NDArithmeticMixin:
             # Make a copy so there is no reference in the result.
             return deepcopy(operand.mask)
         elif operand is None:
+elif operand.mask is None:
+    return deepcopy(self.mask)
+elif operand.mask is None:
+    return deepcopy(self.mask)
             return deepcopy(self.mask)
         else:
             # Now lets calculate the resulting mask (operation enforces copy)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..8e491d036c
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,18 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0],
+                  [1, 0, 1],
+                  [0, 1, 0]])
+mask = np.array([[0, 1, 64],
+                 [8, 0, 1],
+                 [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("no mask * constant:", nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask)
+print("no mask * no mask:", nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)
+print("mask * constant:", nref_mask.multiply(1., handle_mask=np.bitwise_or).mask)
+print("mask * mask:", nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask)
+print("mask * no mask:", nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)
\ No newline at end of file
