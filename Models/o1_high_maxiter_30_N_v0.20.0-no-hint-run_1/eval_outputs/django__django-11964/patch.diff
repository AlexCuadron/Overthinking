diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..52f9223d84 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1008,6 +1008,9 @@ class CharField(Field):
         return "CharField"
 
     def to_python(self, value):
+        import enum
+        if isinstance(value, enum.Enum):
+            value = value.value
         if isinstance(value, str) or value is None:
             return value
         return str(value)
@@ -1015,6 +1018,12 @@ class CharField(Field):
     def get_prep_value(self, value):
         value = super().get_prep_value(value)
         return self.to_python(value)
+def pre_save(self, model_instance, add):
+    import enum
+    value = getattr(model_instance, self.attname)
+    if isinstance(value, enum.Enum):
+        setattr(model_instance, self.attname, value.value)
+    return super().pre_save(model_instance, add)
 
     def formfield(self, **kwargs):
         # Passing max_length to forms.CharField means that the value's length
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..5bae15d7c1
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestappConfig(AppConfig):
+    name = "testapp"
\ No newline at end of file
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..051e3aa28e
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.1 on 2024-12-21 09:31
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyObject',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('my_str_value', models.CharField(choices=[('first', 'The first choice, it is'), ('second', 'The second choice, it is')], max_length=10)),
+            ],
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..dc2968d91b
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice, it is")
+    SECOND_CHOICE = "second", _("The second choice, it is")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
\ No newline at end of file
diff --git a/testapp/replicate_error.py b/testapp/replicate_error.py
new file mode 100644
index 0000000000..3d38a2eb0f
--- /dev/null
+++ b/testapp/replicate_error.py
@@ -0,0 +1,49 @@
+import sys
+import os
+import django
+from django.conf import settings
+
+# Configure settings for a minimal Django project.
+# We'll create a temporary SQLite DB and a minimal testapp with the model/enum described.
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'testapp.apps.TestappConfig',  # We'll place our model in this app
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': os.path.join(BASE_DIR, 'testdb.sqlite3'),
+            }
+        },
+        SECRET_KEY='test',
+        ALLOWED_HOSTS=['*'],
+        DEBUG=True,
+    )
+
+django.setup()
+
+from testapp.models import MyChoice, MyObject
+
+def main():
+    # Run migrations
+    from django.core.management import call_command
+    call_command("makemigrations", "testapp", verbosity=0)
+    call_command("migrate", verbosity=0)
+
+    # Create object with enum assignment
+    my_obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)
+
+    # Now let's see how it prints
+    print("Value in memory after creation:", my_obj.my_str_value, " -> str():", str(my_obj.my_str_value))
+
+    # Retrieve object from DB
+    fetched_obj = MyObject.objects.last()
+    print("Value after retrieval:", fetched_obj.my_str_value, " -> str():", str(fetched_obj.my_str_value))
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/testapp/testdb.sqlite3 b/testapp/testdb.sqlite3
new file mode 100644
index 0000000000..ce61c7c2c8
Binary files /dev/null and b/testapp/testdb.sqlite3 differ
