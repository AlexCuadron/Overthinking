diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..d78a1ee9ac 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        name = self.value.name
+        imports = {'import %s' % module}
+        return "%s.%s[%r]" % (module, enum_class.__name__, name), imports
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/myrepro/db.sqlite3 b/myrepro/db.sqlite3
new file mode 100644
index 0000000000..ec0bf1dc82
Binary files /dev/null and b/myrepro/db.sqlite3 differ
diff --git a/myrepro/manage.py b/myrepro/manage.py
new file mode 100644
index 0000000000..9af143fbb3
--- /dev/null
+++ b/myrepro/manage.py
@@ -0,0 +1,13 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myrepro.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django."
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/myrepro/myapp/__init__.py b/myrepro/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myrepro/myapp/apps.py b/myrepro/myapp/apps.py
new file mode 100644
index 0000000000..50c71224be
--- /dev/null
+++ b/myrepro/myapp/apps.py
@@ -0,0 +1,3 @@
+from django.apps import AppConfig
+class MyAppConfig(AppConfig):
+    name = 'myapp'
diff --git a/myrepro/myapp/migrations/0001_initial.py b/myrepro/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..04f521c8d1
--- /dev/null
+++ b/myrepro/myapp/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.1 on 2024-12-21 03:21
+
+from django.db import migrations, models
+import myapp.models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Item',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status2', models.CharField(default=myapp.models.Status['GOOD'], max_length=128)),
+            ],
+        ),
+    ]
diff --git a/myrepro/myapp/migrations/__init__.py b/myrepro/myapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myrepro/myapp/models.py b/myrepro/myapp/models.py
new file mode 100644
index 0000000000..d7eab52fa6
--- /dev/null
+++ b/myrepro/myapp/models.py
@@ -0,0 +1,12 @@
+import enum
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class Status(enum.Enum):
+    GOOD = _('Good')
+    BAD = _('Bad')
+    def __str__(self):
+        return self.name
+
+class Item(models.Model):
+    status2 = models.CharField(default=Status.GOOD, max_length=128)
diff --git a/myrepro/myrepro/__init__.py b/myrepro/myrepro/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myrepro/myrepro/settings.py b/myrepro/myrepro/settings.py
new file mode 100644
index 0000000000..645ef50d74
--- /dev/null
+++ b/myrepro/myrepro/settings.py
@@ -0,0 +1,19 @@
+SECRET_KEY = 'secret'
+DEBUG = True
+ROOT_URLCONF = 'myrepro.urls'
+ALLOWED_HOSTS = []
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'myapp',
+]
+MIDDLEWARE = []
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
diff --git a/myrepro/myrepro/urls.py b/myrepro/myrepro/urls.py
new file mode 100644
index 0000000000..637600f58a
--- /dev/null
+++ b/myrepro/myrepro/urls.py
@@ -0,0 +1 @@
+urlpatterns = []
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..96b0f729e1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+import os
+import subprocess
+
+os.makedirs("myrepro/myrepro", exist_ok=True)
+
+with open("myrepro/manage.py", "w") as f:
+    f.write("#!/usr/bin/env python\n"
+            "import os\n"
+            "import sys\n"
+            "\n"
+            "if __name__ == '__main__':\n"
+            "    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myrepro.settings')\n"
+            "    try:\n"
+            "        from django.core.management import execute_from_command_line\n"
+            "    except ImportError as exc:\n"
+            "        raise ImportError(\n"
+            "            \"Couldn't import Django.\"\n"
+            "        ) from exc\n"
+            "    execute_from_command_line(sys.argv)\n")
+
+with open("myrepro/myrepro/__init__.py", "w") as f:
+    pass
+
+with open("myrepro/myrepro/settings.py", "w") as f:
+    f.write("SECRET_KEY = 'secret'\n"
+            "DEBUG = True\n"
+            "ROOT_URLCONF = 'myrepro.urls'\n"
+            "ALLOWED_HOSTS = []\n"
+            "INSTALLED_APPS = [\n"
+            "    'django.contrib.auth',\n"
+            "    'django.contrib.contenttypes',\n"
+            "    'django.contrib.sessions',\n"
+            "    'django.contrib.messages',\n"
+            "    'django.contrib.staticfiles',\n"
+            "    'myapp',\n"
+            "]\n"
+            "MIDDLEWARE = []\n"
+            "DATABASES = {\n"
+            "    'default': {\n"
+            "        'ENGINE': 'django.db.backends.sqlite3',\n"
+            "        'NAME': 'db.sqlite3',\n"
+            "    }\n"
+            "}\n")
+
+with open("myrepro/myrepro/urls.py", "w") as f:
+    f.write("urlpatterns = []\n")
+
+os.makedirs("myrepro/myapp", exist_ok=True)
+
+with open("myrepro/myapp/__init__.py", "w") as f:
+    pass
+
+with open("myrepro/myapp/apps.py", "w") as f:
+    f.write("from django.apps import AppConfig\n"
+            "class MyAppConfig(AppConfig):\n"
+            "    name = 'myapp'\n")
+
+with open("myrepro/myapp/models.py", "w") as f:
+    f.write("import enum\n"
+            "from django.db import models\n"
+            "from django.utils.translation import gettext_lazy as _\n"
+            "\n"
+            "class Status(enum.Enum):\n"
+            "    GOOD = _('Good')\n"
+            "    BAD = _('Bad')\n"
+            "    def __str__(self):\n"
+            "        return self.name\n"
+            "\n"
+            "class Item(models.Model):\n"
+            "    status = models.CharField(default=Status.GOOD, max_length=128)\n")
+
+subprocess.run(["python", "manage.py", "makemigrations", "myapp"], cwd="myrepro")
+subprocess.run(["python", "manage.py", "migrate"], cwd="myrepro")
\ No newline at end of file
