diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index b4c38368bf..b3134402f8 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -2338,6 +2338,18 @@ class Figure(FigureBase):
     Attributes
     ----------
     patch
+def __getstate__(self):
+    state = self.__dict__.copy()
+    # Remove Grouper references as they can hold weakrefs
+    if '_align_label_groups' in state:
+        del state['_align_label_groups']
+    return state
+
+def __setstate__(self, state):
+    self.__dict__.update(state)
+    import matplotlib.cbook as cbook
+    # Reinitialize Grouper references
+    self._align_label_groups = {"x": cbook.Grouper(), "y": cbook.Grouper()}
         The `.Rectangle` instance representing the figure background patch.
 
     suppressComposite
@@ -3174,6 +3186,11 @@ None}, default: None
         from matplotlib import _pylab_helpers
         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():
             state['_restore_to_pylab'] = True
+
+        # remove Grouper references
+        if '_align_label_groups' in state:
+            del state['_align_label_groups']
+
         return state
 
     def __setstate__(self, state):
@@ -3190,6 +3207,9 @@ None}, default: None
         # re-initialise some of the unstored state information
         FigureCanvasBase(self)  # Set self.canvas.
 
+        import matplotlib.cbook as cbook
+        self._align_label_groups = {"x": cbook.Grouper(), "y": cbook.Grouper()}
+
         if restore_to_pylab:
             # lazy import to avoid circularity
             import matplotlib.pyplot as plt
diff --git a/test_reproduce_align_labels.py b/test_reproduce_align_labels.py
new file mode 100644
index 0000000000..6af2793032
--- /dev/null
+++ b/test_reproduce_align_labels.py
@@ -0,0 +1,19 @@
+import matplotlib.pyplot as plt
+import pickle
+
+fig = plt.figure()
+ax1 = fig.add_subplot(211)
+ax2 = fig.add_subplot(212)
+time=[0,1,2,3,4]
+speed=[40000,4300,4500,4700,4800]
+acc=[10,11,12,13,14]
+ax1.plot(time,speed)
+ax1.set_ylabel('speed')
+ax2.plot(time,acc)
+ax2.set_ylabel('acc')
+
+fig.align_labels()  # pickling fails if this line is present
+
+pickle.dumps(fig)
+print("Pickling succeeded!")
+plt.show()
\ No newline at end of file
